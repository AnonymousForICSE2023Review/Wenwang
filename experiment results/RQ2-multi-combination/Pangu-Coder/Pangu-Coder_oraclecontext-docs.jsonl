{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return time(hour=nanoseconds // 3600, minute=nanoseconds // 60 % 60,\n                second=nanoseconds % 60, tzinfo=tz)", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(nanoseconds)", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(settings.TIME_ZONE)\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return tz.localize(datetime.datetime.fromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"Europe/Helsinki\")\n\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return time(hour=nanoseconds // 3600, minute=nanoseconds // 60 % 60,\n                second=nanoseconds % 60, tzinfo=tz)", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(nanoseconds)", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(settings.TIME_ZONE)\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return tz.localize(datetime.datetime.fromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"Europe/Helsinki\")\n\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/Helsinki')\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if isinstance(value, timedelta):\n        return {'__type__': 'timedelta', 'value': value.total_seconds()}\n    return value\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.seconds // 3600,\n                              minutes=value.seconds // 60 % 60,\n                              seconds=value.seconds)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    if isinstance(value, timedelta):\n        return value\n    return timedelta(seconds=value)\n", "def dehydrate_timedelta(value):\n    return dehydrate_datetime(value)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return dehydrate_datetime(value)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, timedelta):\n        return {'__type__': 'timedelta', 'value': value.total_seconds()}\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.seconds // 3600,\n                              minutes=value.seconds // 60 % 60,\n                              seconds=value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    if isinstance(value, timedelta):\n        return value\n    return timedelta(seconds=value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return dehydrate(value, Time)\n", "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "def dehydrate_time(value):\n    return value.isoformat()", "def dehydrate_time(value):\n    return time_to_string(value)\n", "def dehydrate_time(value):\n    if value is not None:\n        return dehydrate(value, datetime)\n    return None\n", "def dehydrate_time(value):\n    if isinstance(value, datetime):\n        return value.strftime('%Y-%m-%dT%H:%M:%SZ')\n    return value\n", "def dehydrate_time(value):\n    return dehydrate_time_str(value)\n", "def dehydrate_time(value):\n    return dehydrate(value, Time)\n", "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "def dehydrate_time(value):\n    return time_dehydrate(value.time)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return dehydrate(value, Time)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.isoformat()", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return time_to_string(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is not None:\n        return dehydrate(value, datetime)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if isinstance(value, datetime):\n        return value.strftime('%Y-%m-%dT%H:%M:%SZ')\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_time_str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate(value, Time)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return time_dehydrate(value.time)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return dehydrate_data(value, Point)\n", "def dehydrate_point(value):\n    return dict(type='Point', coordinates=value.coordinates)\n", "def dehydrate_point(value):\n    return PointDehydrater().dehydrate(value)\n", "def dehydrate_point(value):\n    return dehydrate_coordinates(value.latitude, value.longitude)\n", "def dehydrate_point(value):\n    return dehydrate_coordinates(value.coordinates)\n", "def dehydrate_point(value):\n    return PointDehydrateor(value)", "def dehydrate_point(value):\n    return dehydrate_point_array(value.coordinates)\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise ValueError(\"Expected Point, got %s instead\" % type(value))\n    return value.__dict__\n", "def dehydrate_point(value):\n    return dehydrate_point_data(value)\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n        'z': value.z,\n    }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return dehydrate_data(value, Point)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dict(type='Point', coordinates=value.coordinates)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return PointDehydrater().dehydrate(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dehydrate_coordinates(value.latitude, value.longitude)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dehydrate_coordinates(value.coordinates)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return PointDehydrateor(value)", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dehydrate_point_array(value.coordinates)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise ValueError(\"Expected Point, got %s instead\" % type(value))\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dehydrate_point_data(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n        'z': value.z,\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\nreturn self.__keys;", "def keys(self):\n    return self.__keys\n", "def keys(self):\nreturn self.__keys\n", "def keys(self):\nreturn self.__keys\n", "def keys(self):\n    return self.__keys", "def keys(self):\n    return self.__keys.keys()\n", "def keys(self):\nreturn self.__keys", "def keys(self):\nreturn self.__keys", "def keys(self):\nreturn self.__keys", "def keys(self):\n    return self.__keys"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\nreturn self.__keys;", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\nreturn self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\nreturn self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\nreturn self.__keys", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\nreturn self.__keys", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\nreturn self.__keys", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(cls.__protocol_version__)\n\n    return {version: handler for version, handler in cls.__protocol_handlers__.items() if version in protocol_version}", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_handlers_dict(cls, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: protocol_handler(cls, version) for version in protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls._get_handlers(cls.protocol_versions, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_versions.get(protocol_version, cls._protocol_handlers)\n", "def protocol_handlers(cls, protocol_version=None):\n    protocol_version = cls._get_protocol_version(protocol_version)\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers.get(cls)\n    else:\n        return _protocol_handlers[cls][protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: cls._protocol_handlers[version] for version in protocol_version}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(cls.__protocol_version__)\n\n    return {version: handler for version, handler in cls.__protocol_handlers__.items() if version in protocol_version}", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_handlers_dict(cls, protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: protocol_handler(cls, version) for version in protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls._get_handlers(cls.protocol_versions, protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_versions.get(protocol_version, cls._protocol_handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    protocol_version = cls._get_protocol_version(protocol_version)\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers.get(cls)\n    else:\n        return _protocol_handlers[cls][protocol_version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: cls._protocol_handlers[version] for version in protocol_version}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):\npass", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\nreturn self.__keys.index(key)", "def index(self, key):\nreturn self.__keys.index(key)\n", "def index(self, key):\nreturn self.__keys.index(key)", "def index(self, key):\nreturn self.__keys.index(key)", "def index(self, key):\n\nreturn self.__keys.index(key)", "def index(self, key):\n    return self.__keys.index(key)", "def index(self, key):\nreturn self.__keys.index(key)", "def index(self, key):\nreturn self.__keys.index(key)", "def index(self, key):\nif key in self.__keys:\nreturn self.__keys.index(key)\nelse:\nraise ValueError('The given key is not in the index.')", "def index(self, key):\nreturn self.__keys.index(key)"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nif key in self.__keys:\nreturn self.__keys.index(key)\nelse:\nraise ValueError('The given key is not in the index.')", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    return [record[key] for record in self.items(*keys)]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))", "def values(self, *keys):\n    return self.__getitem__(keys)", "def values(self, *keys):\n    if keys:\n        return [self.__dict__[k] for k in keys]\n    return self.__dict__.values()", "def values(self, *keys):\n\n    return [record[key] for record in self.itervalues(*keys)]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    if keys:\n        return [item[keys[0]] for item in self]\n    else:\n        return [item[1] for item in self]", "def values(self, *keys):\n    return [self[k] for k in self._index(keys)]", "def values(self, *keys):\n    return [getattr(self, k) for k in keys]\n", "def values(self, *keys):\n    return self.records(keys=keys)"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    return [record[key] for record in self.items(*keys)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return self.__getitem__(keys)", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if keys:\n        return [self.__dict__[k] for k in keys]\n    return self.__dict__.values()", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n\n    return [record[key] for record in self.itervalues(*keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if keys:\n        return [item[keys[0]] for item in self]\n    else:\n        return [item[1] for item in self]", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self[k] for k in self._index(keys)]", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, k) for k in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return self.records(keys=keys)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: self._data[k] for k in self._data if k in keys}\n", "def data(self, *keys):\n    return dict(zip(self._fields, self._record.data(*keys)))", "def data(self, *keys):\n    return self._data(*keys)", "def data(self, *keys):\n\n    return dict((k, self._data[k]) for k in self._get_field_names(*keys))", "def data(self, *keys):\n    return dict((k, v) for k, v in self.items(*keys) if k is not None)", "def data(self, *keys):\n    return dict(self.items(*keys))", "def data(self, *keys):\n    return self.__data__(*keys)\n", "def data(self, *keys):\n    return {k: self._data[k] for k in keys if k in self._data}", "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self))\n", "def data(self, *keys):\n    return self._data(*keys)"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: self._data[k] for k in self._data if k in keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self._fields, self._record.data(*keys)))", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self._data(*keys)", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\n    return dict((k, self._data[k]) for k in self._get_field_names(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, v) for k, v in self.items(*keys) if k is not None)", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(self.items(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__data__(*keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: self._data[k] for k in keys if k in self._data}", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self._data(*keys)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return struct.unpack('>H', self.used[:2])[0]", "def pop_u16(self):\n    return self.data.pop() + (self.data.pop() << 8)\n", "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]", "def pop_u16(self):\n    return self.data.pop() + self.data.pop() * 256 + self.data.pop()\n\n\n# ------------------------------------------------------------------------------\n# Decoding\n# ------------------------------------------------------------------------------", "def pop_u16(self):\n    return struct.unpack(\">H\", self.data[-2:])[0]\n    ", "def pop_u16(self):\n    self.used += 2\n    return unpack('>H', self.data[self.used:self.used + 2])[0]", "def pop_u16(self):\n    return struct.unpack('>H', self.used[-2:])[0]", "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]", "def pop_u16(self):\n    if self.used >= 2:\n        return self.data[-2:]\n    self.used += 1\n    return struct.unpack(\">H\", self.data[-2:])[0]\n", "def pop_u16(self):\n    return struct.unpack('>H', self.data[:2])[0]"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.used[:2])[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() + (self.data.pop() << 8)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() + self.data.pop() * 256 + self.data.pop()\n\n\n# ------------------------------------------------------------------------------\n# Decoding\n# ------------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack(\">H\", self.data[-2:])[0]\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used += 2\n    return unpack('>H', self.data[self.used:self.used + 2])[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.used[-2:])[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    if self.used >= 2:\n        return self.data[-2:]\n    self.used += 1\n    return struct.unpack(\">H\", self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data[:2])[0]", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output_queue.append(DiscardMessage(n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_record(RecordType.DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append_discard(n, qid, dehydration_hooks, hydration_hooks, **handlers)"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output_queue.append(DiscardMessage(n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_record(RecordType.DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append_discard(n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    return int(n / 2) * 2\n", "def round_half_to_even(n):\n    return n - int(n / 2)\n", "def round_half_to_even(n):\n    if n % 2 == 0:\n        return int(n / 2)\n    else:\n        return int(n * 2 + 1)\n", "def round_half_to_even(n):\n    return int(round(n / 2))\n", "def round_half_to_even(n):\n    return int(round(n / 2))\n", "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "def round_half_to_even(n):\n    return int(round(n * 2))\n", "def round_half_to_even(n):\n    if n < 0:\n        n = n + 2 ** 31\n    return n\n", "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 1\n", "def round_half_to_even(n):\n    return int(math.floor(n * 2))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    return int(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n - int(n / 2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    if n % 2 == 0:\n        return int(n / 2)\n    else:\n        return int(n * 2 + 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n / 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n / 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n * 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    if n < 0:\n        n = n + 2 ** 31\n    return n\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 1\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(math.floor(n * 2))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        dict(\n            fields=fields,\n            srid=srid_map['SRID'],\n            geom_type=srid_map['GEOMETRYCOLLECTION'],\n        ),\n    )\n", "def point_type(name, fields, srid_map):\n    class Point(Point):\n        __srid_map__ = srid_map\n        __fields__ = fields\n        __name__ = name\n    return Point\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid': srid_map[name]})\n", "def point_type(name, fields, srid_map):\n    \n    \n    class Point(PointBase):\n        __srid__ = srid_map\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n            self.name = name\n\n    Point.__name__ = name\n    Point.__doc__ = '%s point' % name\n    Point.__repr__ = _point_repr\n    Point.__eq__ = _point_eq\n    Point.__hash__ = _point_hash\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "def point_type(name, fields, srid_map):\n    return type('Point', (Point,), {\n        '__module__': 'django.contrib.gis.db.models',\n        'name': name,\n        'fields': fields,\n       'srid': srid_map['SRID'],\n       'srid_field': srid_map['SRID_FIELD'],\n       'srid_name': srid_map['SRID_NAME'],\n       'srid_precision': srid_map['SRID_PRECISION'],\n       'srid_scale': srid_map['SRID_SCALE'],\n       'srid_type': srid_map['SRID_TYPE'],\n    })\n", "def point_type(name, fields, srid_map):\n    \n    \n    point = type(name, (Point,), {\n        '__module__': 'gislib.geos',\n        'fields': fields,\n       'srid_map': srid_map,\n        '__srid_map__': srid_map,\n    })\n    return point\n", "def point_type(name, fields, srid_map):\n    \n    \n    pt = Point(name, fields, srid_map)\n    return pt\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, fields, {'srid': srid_map['SRID']})\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        dict(\n            fields=fields,\n            srid=srid_map['SRID'],\n            geom_type=srid_map['GEOMETRYCOLLECTION'],\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(Point):\n        __srid_map__ = srid_map\n        __fields__ = fields\n        __name__ = name\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid': srid_map[name]})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    class Point(PointBase):\n        __srid__ = srid_map\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n            self.name = name\n\n    Point.__name__ = name\n    Point.__doc__ = '%s point' % name\n    Point.__repr__ = _point_repr\n    Point.__eq__ = _point_eq\n    Point.__hash__ = _point_hash\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type('Point', (Point,), {\n        '__module__': 'django.contrib.gis.db.models',\n        'name': name,\n        'fields': fields,\n       'srid': srid_map['SRID'],\n       'srid_field': srid_map['SRID_FIELD'],\n       'srid_name': srid_map['SRID_NAME'],\n       'srid_precision': srid_map['SRID_PRECISION'],\n       'srid_scale': srid_map['SRID_SCALE'],\n       'srid_type': srid_map['SRID_TYPE'],\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    point = type(name, (Point,), {\n        '__module__': 'gislib.geos',\n        'fields': fields,\n       'srid_map': srid_map,\n        '__srid_map__': srid_map,\n    })\n    return point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    pt = Point(name, fields, srid_map)\n    return pt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, fields, {'srid': srid_map['SRID']})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n    def wrap(func):\n        def new_func(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, (args, kwargs))\n            return func(*args, **kwargs)\n        new_func.__name__ = func.__name__\n        new_func.__doc__ = func.__doc__\n        new_func.__dict__.update(func.__dict__)\n        return new_func\n    return wrap", "def deprecated(message):\n    def _deprecated(func):\n        @functools.wraps(func)\n        async def _wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, func.__module__)\n            return await func(*args, **kwargs)\n        return _wrapper\n    return _deprecated", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n    def wrap(func):\n        @wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return wrap\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        async def new_func(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning)\n            return await func(*args, **kwargs)\n        return new_func\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def wrap(func):\n        def new_func(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, (args, kwargs))\n            return func(*args, **kwargs)\n        new_func.__name__ = func.__name__\n        new_func.__doc__ = func.__doc__\n        new_func.__dict__.update(func.__dict__)\n        return new_func\n    return wrap", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _deprecated(func):\n        @functools.wraps(func)\n        async def _wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, func.__module__)\n            return await func(*args, **kwargs)\n        return _wrapper\n    return _deprecated", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def wrap(func):\n        @wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return wrap\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        async def new_func(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning)\n            return await func(*args, **kwargs)\n        return new_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if \"R\" in os.environ:\n        return code\n    return \"\"\n", "def _inline_r_setup(code: str) -> str:\n    return code\n", "def _inline_r_setup(code: str):\n    global _inline_r_config\n    _inline_r_config = code\n", "def _inline_r_setup(code: str):\n    # additional setup here\n    return code\n", "def _inline_r_setup(code: str):\n    code = code.replace(\"R\", \"\").replace(\"\\n\", \"\")\n    code = code.replace(\"\\r\", \"\")\n    return code\n", "def _inline_r_setup(code: str):\n    with open('./data/config.json', 'r') as config_file:\n        config_data = json.load(config_file)\n        config_data['R']['env_vars']['R_PROCESS_ID'] = code\n    with open('./data/config.json', 'w') as config_file:\n        json.dump(config_data, config_file, indent=4)\n", "def _inline_r_setup(code: str, filename: str) -> None:\n    if os.environ.get('R_CONFIGURATION') is None:\n        raise ValueError(\n            'Please set the R environment variable to run this script.')\n\n    with open(filename, 'w') as f:\n        f.write(code)\n", "def _inline_r_setup(code: str, path: str) -> str:\n    env = os.environ.copy()\n    env['R_BASE_PATH'] = path\n    return _inline_r_code(code, env)\n", "def _inline_r_setup(code: str) -> str:\n    if code is None:\n        return \"\"\n    else:\n        return f\"\"\"\n                    env.R.inline_r_setup()\n                \"\"\"\n", "def _inline_r_setup(code: str) -> str:\n    return \"\"\"\n# R is still configured via env variables.\n# R is not configured via R but requires R to be started at least once.\n\"\"\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if \"R\" in os.environ:\n        return code\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    global _inline_r_config\n    _inline_r_config = code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    # additional setup here\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    code = code.replace(\"R\", \"\").replace(\"\\n\", \"\")\n    code = code.replace(\"\\r\", \"\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    with open('./data/config.json', 'r') as config_file:\n        config_data = json.load(config_file)\n        config_data['R']['env_vars']['R_PROCESS_ID'] = code\n    with open('./data/config.json', 'w') as config_file:\n        json.dump(config_data, config_file, indent=4)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, filename: str) -> None:\n    if os.environ.get('R_CONFIGURATION') is None:\n        raise ValueError(\n            'Please set the R environment variable to run this script.')\n\n    with open(filename, 'w') as f:\n        f.write(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, path: str) -> str:\n    env = os.environ.copy()\n    env['R_BASE_PATH'] = path\n    return _inline_r_code(code, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code is None:\n        return \"\"\n    else:\n        return f\"\"\"\n                    env.R.inline_r_setup()\n                \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return \"\"\"\n# R is still configured via env variables.\n# R is not configured via R but requires R to be started at least once.\n\"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = None,\n        **kwargs) -> Tuple[str, int]:\n    if not target_concurrency:\n        target_concurrency = get_concurrency()\n    return xargs_simple(\n        cmd, args, target_concurrency, **kwargs)\n", "def xargs(\n        cmd: str,\n        target_concurrency: int = None,\n        color: bool = False,\n        *args: str,\n        **kwargs: str\n) -> str:\n    if platform.system() == \"Windows\":\n        return subprocess.check_output(\n            ['xargs'] + ['--color', 'on' if color else 'off'] + list(args),\n            stderr=subprocess.STDOUT,\n            **kwargs\n        ).decode('utf-8')\n    return subprocess.check_output(\n        ['xargs'] + list(args),\n        stdout=subprocess.DEVNULL,\n        **kwargs\n    ).decode('utf-8')", "def xargs(\n        cmd: str,\n        *args,\n        stdin: Optional[str] = None,\n        **kwargs\n) -> str:\n    return _xargs(cmd, *args, **kwargs)\n", "def xargs(\n        cmd: str,\n        *args: str,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> str:\n    if target_concurrency is None:\n        target_concurrency = xargs.concurrency\n\n    if not hasattr(xargs, \"__context__\"):\n        xargs.__context__ = {}\n\n    context = xargs.__context__.copy()\n    context[\"color\"] = color\n    context[\"target_concurrency\"] = target_concurrency\n\n    return subprocess.run(cmd, **context)", "def xargs(\n        cmd: str,\n        args: T.List[str],\n        **kwargs: T.Any\n) -> T.Any:\n    if 'color' in kwargs:\n        color = kwargs.pop('color')\n        if not isinstance(color, str):\n            raise TypeError('color must be a string')\n        kwargs['stdout'] = subprocess.PIPE\n        kwargs['stderr'] = subprocess.PIPE\n    else:\n        color = ''\n    return subprocess.run(cmd.split() + args, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs).stdout, subprocess.run(cmd.split() + args, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stderr", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = 1,\n        color: bool = True,\n        **kwargs):\n    if not is_windows():\n        return cmd\n\n    args = ['xargs', '--color', color, '--target-concurrency', str(target_concurrency)]\n    args.extend(cmd)\n    return args\n", "def xargs(\n        cmd: str,\n        *args: str,\n        target_concurrency: int = 2,\n        color: bool = True,\n        target_concurrency: int = 2) -> subprocess.CompletedProcess:\n    return subprocess.run(\n        ['xargs', '--no-color', '--target-concurrency', str(target_concurrency), cmd] + list(args),\n        check=True,\n        capture_output=True,\n        encoding='utf-8',\n        text=True\n    )", "def xargs(\n        cmd: str,\n        target_concurrency: int,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[bool, str, str]:\n    args = [\"xargs\", \"--color\", str(color)]\n    if target_concurrency:\n        args.extend([\"--target-concurrency\", str(target_concurrency)])\n    if target_concurrency:\n        args.append(\"--target-concurrency=%d\" % target_concurrency)\n    args.extend([\"--\"])\n    return _run_command(cmd, args, target_concurrency)\n", "def xargs(\n        cmd: str,\n        *args: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        timeout: Optional[int] = None,\n        stdin_file: Optional[str] = None,\n        target_concurrency: Optional[int] = None,\n) -> pty:\n    return xargs_context(cmd, stdin, stdout, stderr, timeout, stdin_file, target_concurrency)\n", "def xargs(\n        cmd: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        target_concurrency: int = 1,\n        **kwargs: Any) -> int:\n    return xargs_instance(cmd, stdin, stdout, stderr, target_concurrency, **kwargs)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = None,\n        **kwargs) -> Tuple[str, int]:\n    if not target_concurrency:\n        target_concurrency = get_concurrency()\n    return xargs_simple(\n        cmd, args, target_concurrency, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        target_concurrency: int = None,\n        color: bool = False,\n        *args: str,\n        **kwargs: str\n) -> str:\n    if platform.system() == \"Windows\":\n        return subprocess.check_output(\n            ['xargs'] + ['--color', 'on' if color else 'off'] + list(args),\n            stderr=subprocess.STDOUT,\n            **kwargs\n        ).decode('utf-8')\n    return subprocess.check_output(\n        ['xargs'] + list(args),\n        stdout=subprocess.DEVNULL,\n        **kwargs\n    ).decode('utf-8')", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args,\n        stdin: Optional[str] = None,\n        **kwargs\n) -> str:\n    return _xargs(cmd, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args: str,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> str:\n    if target_concurrency is None:\n        target_concurrency = xargs.concurrency\n\n    if not hasattr(xargs, \"__context__\"):\n        xargs.__context__ = {}\n\n    context = xargs.__context__.copy()\n    context[\"color\"] = color\n    context[\"target_concurrency\"] = target_concurrency\n\n    return subprocess.run(cmd, **context)", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: T.List[str],\n        **kwargs: T.Any\n) -> T.Any:\n    if 'color' in kwargs:\n        color = kwargs.pop('color')\n        if not isinstance(color, str):\n            raise TypeError('color must be a string')\n        kwargs['stdout'] = subprocess.PIPE\n        kwargs['stderr'] = subprocess.PIPE\n    else:\n        color = ''\n    return subprocess.run(cmd.split() + args, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs).stdout, subprocess.run(cmd.split() + args, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stderr", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = 1,\n        color: bool = True,\n        **kwargs):\n    if not is_windows():\n        return cmd\n\n    args = ['xargs', '--color', color, '--target-concurrency', str(target_concurrency)]\n    args.extend(cmd)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args: str,\n        target_concurrency: int = 2,\n        color: bool = True,\n        target_concurrency: int = 2) -> subprocess.CompletedProcess:\n    return subprocess.run(\n        ['xargs', '--no-color', '--target-concurrency', str(target_concurrency), cmd] + list(args),\n        check=True,\n        capture_output=True,\n        encoding='utf-8',\n        text=True\n    )", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        target_concurrency: int,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[bool, str, str]:\n    args = [\"xargs\", \"--color\", str(color)]\n    if target_concurrency:\n        args.extend([\"--target-concurrency\", str(target_concurrency)])\n    if target_concurrency:\n        args.append(\"--target-concurrency=%d\" % target_concurrency)\n    args.extend([\"--\"])\n    return _run_command(cmd, args, target_concurrency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        timeout: Optional[int] = None,\n        stdin_file: Optional[str] = None,\n        target_concurrency: Optional[int] = None,\n) -> pty:\n    return xargs_context(cmd, stdin, stdout, stderr, timeout, stdin_file, target_concurrency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        target_concurrency: int = 1,\n        **kwargs: Any) -> int:\n    return xargs_instance(cmd, stdin, stdout, stderr, target_concurrency, **kwargs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: list, random: int):\n    return random.sample(seq, random)\n", "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[T]) -> Iterator[T]:\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    \n    \n    return _random.shuffle(seq)", "def _shuffled(seq: Sequence[T], rng: Random) -> Sequence[T]:\n    return list(_random_sample(seq, rng))\n", "def _shuffled(seq: Iterable[Any]) -> Iterator[Any]:\n    import random\n\n    random.shuffle(seq)\n    return seq", "def _shuffled(seq: Sequence) -> Sequence:\n    return seq[:]\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    idx = list(range(len(seq)))\n    random.shuffle(idx)\n    return (seq[i] for i in idx)\n", "def _shuffled(seq: Iterable[T], n: int) -> Iterator[T]:\n    r = random.Random(n)\n    for item in seq:\n        r.shuffle(item)\n        yield item\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: list, random: int):\n    return random.sample(seq, random)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T]) -> Iterator[T]:\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    \n    \n    return _random.shuffle(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T], rng: Random) -> Sequence[T]:\n    return list(_random_sample(seq, rng))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterator[Any]:\n    import random\n\n    random.shuffle(seq)\n    return seq", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence) -> Sequence:\n    return seq[:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    idx = list(range(len(seq)))\n    random.shuffle(idx)\n    return (seq[i] for i in idx)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T], n: int) -> Iterator[T]:\n    r = random.Random(n)\n    for item in seq:\n        r.shuffle(item)\n        yield item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Tuple[int, str]:\n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> str:\n    return s.split(' ')[1]\n", "def parse_version(s: str) -> Optional[Version]:\n    match = re.match(r'^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$', s)\n    if match:\n        return Version(match.group(1), match.group(2), match.group(3))\n    return None\n", "def parse_version(s: str):\n    try:\n        import termios\n        t = termios.tcgetattr(sys.stdin)\n        t[3] = t[3] & ~termios.ICANON & ~termios.ECHO\n        t[6][termios.VMIN] = t[6][termios.VMIN] & ~termios.ICANON & ~termios.ECHO\n        t[6][termios.VTIME] = t[6][termios.VTIME] & ~termios.ICANON & ~termios.ECHO\n        t[7][termios.VMIN] = t[7][termios.VMIN] & ~termios.ICANON & ~termios.ECHO\n        t[7][termios.VTIME] = t[7][termios.VTIME] & ~termios.ICANON & ~termios.ECHO\n        return t\n    except:\n        return sys.exc_info()\n", "def parse_version(s: str) -> str:\n    match = re.search(r\"^__version__\\s*=\\s*['\\\"]([^'\\\"]*)['\\\"]\", s, re.M)\n    if match:\n        return match.group(1)\n    raise RuntimeError(\"Unable to parse version string: \" + s)\n", "def parse_version(s: str) -> tuple:\n    return tuple(int(x) for x in re.findall(r\"\\d+\", s))\n", "def parse_version(s: str) -> tuple:\n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, int, int]:\n    return tuple(map(int, s.split(\".\")[:3]))\n", "def parse_version(s: str):\n    # TODO add version comparison support\n    return s\n", "def parse_version(s: str) -> Optional[str]:\n    return s.split(\".\")[0]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Tuple[int, str]:\n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> str:\n    return s.split(' ')[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    match = re.match(r'^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$', s)\n    if match:\n        return Version(match.group(1), match.group(2), match.group(3))\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str):\n    try:\n        import termios\n        t = termios.tcgetattr(sys.stdin)\n        t[3] = t[3] & ~termios.ICANON & ~termios.ECHO\n        t[6][termios.VMIN] = t[6][termios.VMIN] & ~termios.ICANON & ~termios.ECHO\n        t[6][termios.VTIME] = t[6][termios.VTIME] & ~termios.ICANON & ~termios.ECHO\n        t[7][termios.VMIN] = t[7][termios.VMIN] & ~termios.ICANON & ~termios.ECHO\n        t[7][termios.VTIME] = t[7][termios.VTIME] & ~termios.ICANON & ~termios.ECHO\n        return t\n    except:\n        return sys.exc_info()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> str:\n    match = re.search(r\"^__version__\\s*=\\s*['\\\"]([^'\\\"]*)['\\\"]\", s, re.M)\n    if match:\n        return match.group(1)\n    raise RuntimeError(\"Unable to parse version string: \" + s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> tuple:\n    return tuple(int(x) for x in re.findall(r\"\\d+\", s))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> tuple:\n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, int, int]:\n    return tuple(map(int, s.split(\".\")[:3]))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str):\n    # TODO add version comparison support\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[str]:\n    return s.split(\".\")[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    if os.name == \"nt\":\n        cmd = cmd.replace(\"/\", \"\\\\\")\n        cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    cmd = cmd.replace(\"//\", \"/\")\n    cmd = cmd.replace(\"\\\\\\\\\", \"\\\\\")\n    cmd = cmd.replace(\"/\\\\\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"#!\", \"\\\\\")\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if is_windows_os():\n        cmd = cmd.replace(\"/\", \"\\\\\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.strip().replace('/', '\\\\')\n    cmd = re.sub(r'^(?:(?:[^#/]|/\\*):)?([^#/]*)(?:#(?:[^#/]|/\\*):)?(.*)$', r'\\1\\2', cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    return cmd.replace('\\\\', '/')", "def normalize_cmd(cmd: str) -> str:\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = os.path.normcase(cmd)\n    cmd = os.path.normpath(cmd)\n    cmd = os.path.normcase(cmd)\n    cmd = os.path.normpath(os.path.realpath(cmd))\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = os.path.normpath(cmd)\n    if os.path.sep!= '/':\n        cmd = os.path.join(cmd, '..')\n    return cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if os.name == \"nt\":\n        cmd = cmd.replace(\"/\", \"\\\\\")\n        cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    cmd = cmd.replace(\"//\", \"/\")\n    cmd = cmd.replace(\"\\\\\\\\\", \"\\\\\")\n    cmd = cmd.replace(\"/\\\\\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"#!\", \"\\\\\")\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if is_windows_os():\n        cmd = cmd.replace(\"/\", \"\\\\\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.strip().replace('/', '\\\\')\n    cmd = re.sub(r'^(?:(?:[^#/]|/\\*):)?([^#/]*)(?:#(?:[^#/]|/\\*):)?(.*)$', r'\\1\\2', cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return cmd.replace('\\\\', '/')", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    cmd = re.sub(r\"(?<=^)\\s*#\\s*\", \"\", cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = os.path.normcase(cmd)\n    cmd = os.path.normpath(cmd)\n    cmd = os.path.normcase(cmd)\n    cmd = os.path.normpath(os.path.realpath(cmd))\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = os.path.normpath(cmd)\n    if os.path.sep!= '/':\n        cmd = os.path.join(cmd, '..')\n    return cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @functools.wraps(f)\n        def wrapper(*args, **kwargs):\n            if key in cache:\n                return cache[key]\n            result = f(*args, **kwargs)\n            cache[key] = result\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = cache[key] = f(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    @functools.wraps(cache)\n    def wrapper(func):\n        @functools.wraps(func)\n        def memoizer(*args, **kwargs):\n            result = lock.acquire()\n            try:\n                return cache[key(func, *args, **kwargs)]\n            finally:\n                lock.release()\n                if result is None:\n                    return None\n                return result\n        return memoizer\n    return wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = cache[key] = func(*args, **kwargs)\n                return result\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            with lock:\n                return cache.get(key(*args, **kwargs))\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__module__\n            try:\n                return cache[key]\n            except KeyError:\n                val = cache[key] = func(*args, **kwargs)\n                return val\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cache_wrapper(*args, **kwargs):\n            with lock or cache:\n                return func(*args, **kwargs)\n        return cache_wrapper\n    return wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            val = cache.get(key)\n            if val is None:\n                val = func(*args, **kwargs)\n                cache[key] = val\n            return val\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            with lock:\n                return cache.get(key(*args, **kwargs), func(*args, **kwargs))\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                with cache.lock:\n                    result = cache.get(key(args, kwargs))\n                    if result is not None:\n                        return result\n            else:\n                result = cache.get(key(args, kwargs), lock.acquire())\n                if result is not None:\n                    return result\n            return func(*args, **kwargs)\n    return decorator"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @functools.wraps(f)\n        def wrapper(*args, **kwargs):\n            if key in cache:\n                return cache[key]\n            result = f(*args, **kwargs)\n            cache[key] = result\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = cache[key] = f(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    @functools.wraps(cache)\n    def wrapper(func):\n        @functools.wraps(func)\n        def memoizer(*args, **kwargs):\n            result = lock.acquire()\n            try:\n                return cache[key(func, *args, **kwargs)]\n            finally:\n                lock.release()\n                if result is None:\n                    return None\n                return result\n        return memoizer\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = cache[key] = func(*args, **kwargs)\n                return result\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            with lock:\n                return cache.get(key(*args, **kwargs))\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__module__\n            try:\n                return cache[key]\n            except KeyError:\n                val = cache[key] = func(*args, **kwargs)\n                return val\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cache_wrapper(*args, **kwargs):\n            with lock or cache:\n                return func(*args, **kwargs)\n        return cache_wrapper\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            val = cache.get(key)\n            if val is None:\n                val = func(*args, **kwargs)\n                cache[key] = val\n            return val\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            with lock:\n                return cache.get(key(*args, **kwargs), func(*args, **kwargs))\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                with cache.lock:\n                    result = cache.get(key(args, kwargs))\n                    if result is not None:\n                        return result\n            else:\n                result = cache.get(key(args, kwargs), lock.acquire())\n                if result is not None:\n                    return result\n            return func(*args, **kwargs)\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cachedfunc(TTLCache(maxsize, ttl, timer), typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cachedfunc(TTLCache(maxsize, ttl, timer), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    return _cache(MRU, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU, maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _mru_cache\n    return _mru_cache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_make_mru_cache(), typed)\n    else:\n        return _cache(_make_mru_cache(maxsize), typed)", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Cache\n    return MemoizeCache(maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Cache\n    return _MRUcache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU(maxsize), typed)\n", "def mru_cache(maxsize=128, typed=False):\n    cache = LRUCache(maxsize)\n    def _inner(f):\n        def _wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache(MRU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _mru_cache\n    return _mru_cache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_make_mru_cache(), typed)\n    else:\n        return _cache(_make_mru_cache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Cache\n    return MemoizeCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Cache\n    return _MRUcache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_MRU(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    cache = LRUCache(maxsize)\n    def _inner(f):\n        def _wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(cache, typed=typed)\n    return lru_cache_factory(maxsize)(typed)", "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        cache = typedcache\n    else:\n        cache = dict\n    return _lru_cache(maxsize, cache=cache)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        import types\n        return _cache_factory(typed, maxsize)\n    else:\n        return _cache_factory(_LRUCache, maxsize)", "def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        from collections import deque\n        from functools import lru_cache\n        return lru_cache(maxsize, deque)\n    else:\n        return decorator(lru_cache, maxsize)", "def lru_cache(maxsize=128, typed=False):\n    return _cache(_lru_cache, maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(cache, typed=typed)\n    return lru_cache_factory(maxsize)(typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        cache = typedcache\n    else:\n        cache = dict\n    return _lru_cache(maxsize, cache=cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        import types\n        return _cache_factory(typed, maxsize)\n    else:\n        return _cache_factory(_LRUCache, maxsize)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        from collections import deque\n        from functools import lru_cache\n        return lru_cache(maxsize, deque)\n    else:\n        return decorator(lru_cache, maxsize)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cache(_lru_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _cache(_make_lfu, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    from.cache import LFUCache\n    return LFUCache(maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize, typed))", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _lfu_cache\n    return _lfu_cache_with_maxsize(maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return lfu_cache_impl(_lfu_cache, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _lfu_cache(_make_cache_key, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache(_make_lfu, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    from.cache import LFUCache\n    return LFUCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize, typed))", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _lfu_cache\n    return _lfu_cache_with_maxsize(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return lfu_cache_impl(_lfu_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _lfu_cache(_make_cache_key, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    self.__order.remove(self.__key)\n    return self.__key, self.pop(self.__key)", "def popitem(self):\n    return self.__order.popitem()", "def popitem(self):\n    return self.__order.popitem()", "def popitem(self):\n    i = self.__order.popitem()\n    self[i[0]] = i[1]\n    return i", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        return (None, None)", "def popitem(self):\n    k = self.__order.pop()\n    return k, self[k]", "def popitem(self):\n    try:\n        key = self.__order.popitem()[0]\n    except KeyError:\n        raise KeyError('The order is empty.')\n    return key, self.pop(key)", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError(\"cache is empty\")\n    value = self[key]\n    del self[key]\n    return (key, value)\n", "def popitem(self):\n    return self.__order.popitem()", "def popitem(self):\n    return self.__order.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    self.__order.remove(self.__key)\n    return self.__key, self.pop(self.__key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    i = self.__order.popitem()\n    self[i[0]] = i[1]\n    return i", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        return (None, None)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    k = self.__order.pop()\n    return k, self[k]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__order.popitem()[0]\n    except KeyError:\n        raise KeyError('The order is empty.')\n    return key, self.pop(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError(\"cache is empty\")\n    value = self[key]\n    del self[key]\n    return (key, value)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "def setdefault(self, key, default=None):\nif key not in self:\nself[key] = default\nreturn self[key]", "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\nif key not in self:\nself[key] = default\nreturn self[key]", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\nk = key.lower()\ntry:\nreturn self[k]\nexcept KeyError:\nreturn default", "def get(self, key, default=None):\nk = key.lower()\ntry:\nreturn self[k]\nexcept KeyError:\nreturn default", "def get(self, key, default=None):\nif key in self._dict:\nreturn self._dict[key]\nelse:\nreturn default", "def get(self, key, default=None):\n    return self._data.get(key, default)", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\ntry:\nreturn self[key]\nexcept KeyError:\nreturn default", "def get(self, key, default=None):\nreturn dict.get(self, key.split('.'), default)", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "def get(self, key, default=None):\nif key in self:\nreturn self[key]\nelse:\nreturn default"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\nk = key.lower()\ntry:\nreturn self[k]\nexcept KeyError:\nreturn default", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\nk = key.lower()\ntry:\nreturn self[k]\nexcept KeyError:\nreturn default", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\nif key in self._dict:\nreturn self._dict[key]\nelse:\nreturn default", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._data.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\ntry:\nreturn self[key]\nexcept KeyError:\nreturn default", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\nreturn dict.get(self, key.split('.'), default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\nif key in self:\nreturn self[key]\nelse:\nreturn default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    def _wrapper(f):\n        def _(self, *args, **kwargs):\n            with lock:\n                return f(self, *args, **kwargs)\n        return _\n    if isinstance(cache, type):\n        cache = cache()\n    return _wrapper(cache)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = func(self, *args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator", "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def _wrap(func):\n        def _func(*args, **kw):\n            key = key(args, kw)\n            if lock is None:\n                with cache.lock:\n                    result = cache[key]\n            else:\n                result = cache[key]\n            if result is None:\n                result = func(*args, **kw)\n                cache[key] = result\n            return result\n\n        return _func\n\n    return _wrap", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            result = cache.get(key(self), None)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key(self), result, timeout=self.timeout)\n            return result\n        return wrapper\n    return decorator", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self):\n            if not hasattr(self, '_cache'):\n                self._cache = {}\n            key = key(self)\n            if not key in self._cache:\n                self._cache[key] = func(self)\n            return self._cache[key]\n        return wrapper\n    if lock is None:\n        lock = threading.RLock()\n    return decorator(lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, timeout=CACHE_TIMEOUT)\n            return value\n        return wrapper\n    return decorator", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            result = cache.get(key, f, args, kwargs, lock)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key, result, timeout=LOCK_TIMEOUT)\n            return result\n        return wrapped\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def wrapper(method):\n        def wrapped(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(self, *args, **kw)\n                return result\n        return wrapped\n    return wrapper", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            key = key % func.__module__\n            if key not in cache:\n                cache[key] = func(*args, **kw)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = RLock()\n\n    def wrapper(obj, *args, **kwargs):\n        with lock:\n            return cache(key, obj, *args, **kwargs)\n    return wrapper"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    def _wrapper(f):\n        def _(self, *args, **kwargs):\n            with lock:\n                return f(self, *args, **kwargs)\n        return _\n    if isinstance(cache, type):\n        cache = cache()\n    return _wrapper(cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = func(self, *args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def _wrap(func):\n        def _func(*args, **kw):\n            key = key(args, kw)\n            if lock is None:\n                with cache.lock:\n                    result = cache[key]\n            else:\n                result = cache[key]\n            if result is None:\n                result = func(*args, **kw)\n                cache[key] = result\n            return result\n\n        return _func\n\n    return _wrap", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            result = cache.get(key(self), None)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key(self), result, timeout=self.timeout)\n            return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self):\n            if not hasattr(self, '_cache'):\n                self._cache = {}\n            key = key(self)\n            if not key in self._cache:\n                self._cache[key] = func(self)\n            return self._cache[key]\n        return wrapper\n    if lock is None:\n        lock = threading.RLock()\n    return decorator(lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, timeout=CACHE_TIMEOUT)\n            return value\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            result = cache.get(key, f, args, kwargs, lock)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key, result, timeout=LOCK_TIMEOUT)\n            return result\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def wrapper(method):\n        def wrapped(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(self, *args, **kw)\n                return result\n        return wrapped\n    return wrapper", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            key = key % func.__module__\n            if key not in cache:\n                cache[key] = func(*args, **kw)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = RLock()\n\n    def wrapper(obj, *args, **kwargs):\n        with lock:\n            return cache(key, obj, *args, **kwargs)\n    return wrapper", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    exc_type = e.__class__.__name__\n    exc_value = e\n    exc_traceback = traceback.format_exc()\n    return '{}\\n{}'.format(exc_type, exc_traceback)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    import traceback\n    tb = traceback.format_exc()\n    tb = \"\".join(tb.splitlines())\n    return \"\\n\".join([\"\\n\".join([\"Traceback\", tb]), \"\\n\"])", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _extostr(cls, e, max_level, max_path_level)", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return extostr_traceback(cls, e, max_level, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '\\n'.join(traceback.format_exception(cls, e, e.__traceback__))", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(traceback.format_exc(limit=max_level, path=e.path, level=max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return os.linesep.join(traceback.format_exception(*sys.exc_info(),\n                                                      limit=max_level,\n                                                      path_level=max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _format_exception(e, max_level, max_path_level)", "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = str(e)\n    for i in range(max_path_level):\n        s = s.replace('\\n', '\\\\n')\n    for i in range(max_level):\n        s = s.replace('\\r', '\\\\r')\n    return s\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    exc_type = e.__class__.__name__\n    exc_value = e\n    exc_traceback = traceback.format_exc()\n    return '{}\\n{}'.format(exc_type, exc_traceback)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    import traceback\n    tb = traceback.format_exc()\n    tb = \"\".join(tb.splitlines())\n    return \"\\n\".join([\"\\n\".join([\"Traceback\", tb]), \"\\n\"])", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _extostr(cls, e, max_level, max_path_level)", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return extostr_traceback(cls, e, max_level, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '\\n'.join(traceback.format_exception(cls, e, e.__traceback__))", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(traceback.format_exc(limit=max_level, path=e.path, level=max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return os.linesep.join(traceback.format_exception(*sys.exc_info(),\n                                                      limit=max_level,\n                                                      path_level=max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _format_exception(e, max_level, max_path_level)", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = str(e)\n    for i in range(max_path_level):\n        s = s.replace('\\n', '\\\\n')\n    for i in range(max_level):\n        s = s.replace('\\r', '\\\\r')\n    return s\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not file_name.endswith('.bin'):\n        file_name += '.bin'\n    with open(file_name, 'ab') as f:\n        f.write(text_buffer.encode(encoding))\n    return write_bytes_to_file(file_name, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.exists(file_name) or overwrite:\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with codecs.open(file_name, \"ab\", encoding=encoding) as file:\n        file.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite:\n        if os.path.isfile(file_name):\n            os.remove(file_name)\n    with codecs.open(file_name, mode='a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\n    if not os.path.exists(file_name) or overwrite:\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        return f.write(text_buffer) if not overwrite else 0\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not file_name.endswith('.bin'):\n        file_name += '.bin'\n    with open(file_name, 'ab') as f:\n        f.write(text_buffer.encode(encoding))\n    return write_bytes_to_file(file_name, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.exists(file_name) or overwrite:\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with codecs.open(file_name, \"ab\", encoding=encoding) as file:\n        file.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite:\n        if os.path.isfile(file_name):\n            os.remove(file_name)\n    with codecs.open(file_name, mode='a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\n    if not os.path.exists(file_name) or overwrite:\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding=encoding) as f:\n        return f.write(text_buffer) if not overwrite else 0\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            text = f.read()\n            return text\n    except Exception:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"r\", encoding=encoding).read()\n    except IOError:\n        return None\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except FileNotFoundError:\n        return None", "def file_to_textbuffer(file_name, encoding):\n    try:\n        f = codecs.open(file_name, 'r', encoding)\n        text = f.read()\n        f.close()\n        return text\n    except Exception as e:\n        print(e)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except UnicodeDecodeError:\n        return None", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, mode='r', encoding=encoding).read()\n    except IOError:\n        return None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except Exception as e:\n        print('Could not open file {}. Error: {}'.format(file_name, e))\n        return None", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer_text = codecs.open(file_name, mode='r', encoding=encoding).read()\n        return buffer_text\n    except Exception as e:\n        return None", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text = codecs.open(file_name, encoding=encoding).read()\n    except Exception as e:\n        text = None\n    return text\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            text = f.read()\n            return text\n    except Exception:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"r\", encoding=encoding).read()\n    except IOError:\n        return None\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except FileNotFoundError:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        f = codecs.open(file_name, 'r', encoding)\n        text = f.read()\n        f.close()\n        return text\n    except Exception as e:\n        print(e)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except UnicodeDecodeError:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, mode='r', encoding=encoding).read()\n    except IOError:\n        return None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except Exception as e:\n        print('Could not open file {}. Error: {}'.format(file_name, e))\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer_text = codecs.open(file_name, mode='r', encoding=encoding).read()\n        return buffer_text\n    except Exception as e:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text = codecs.open(file_name, encoding=encoding).read()\n    except Exception as e:\n        text = None\n    return text\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    return False\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    else:\n        return False\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    if cls._logging is None:\n        return\n    for logger in cls._logging.values():\n        logger.removeHandler(cls._handler)\n    cls._logging = None\n", "def _reset_logging(cls):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    return cls", "def _reset_logging(cls):\n    logging.getLogger(\"\").handlers = []\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n    logging.info(\"logging reset\")\n", "def _reset_logging(cls):\n    from.. import logging\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)", "def _reset_logging(cls):\n    if cls._log:\n        cls._log.close()\n    cls._log = logging.getLogger('pymodbus')\n", "def _reset_logging(cls):\n    cls.__init__ = cls.__init__\n    cls.__exit__ = cls.__exit__\n    cls.__enter__ = cls.__enter__\n    cls.__exit__ = cls.__exit__"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    if cls._logging is None:\n        return\n    for logger in cls._logging.values():\n        logger.removeHandler(cls._handler)\n    cls._logging = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    return cls", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger(\"\").handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n    logging.info(\"logging reset\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    from.. import logging\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if cls._log:\n        cls._log.close()\n    cls._log = logging.getLogger('pymodbus')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    cls.__init__ = cls.__init__\n    cls.__exit__ = cls.__exit__\n    cls.__enter__ = cls.__enter__\n    cls.__exit__ = cls.__exit__", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return _getTargetClass(self.__class__)\n\n# ------------------------------------------------------------------------------", "def _getTargetClass(self):\n    return None", "def _getTargetClass(self):\n    return None", "def _getTargetClass(self):\nreturn self._targetClass", "def _getTargetClass(self):\n    raise NotImplementedError('_getTargetClass')", "def _getTargetClass(self):\n    return self.__class__", "def _getTargetClass(self):\n    return File", "def _getTargetClass(self):\npass", "def _getTargetClass(self):\n    return None\n", "def _getTargetClass(self):\n    return None"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return _getTargetClass(self.__class__)\n\n# ------------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\nreturn self._targetClass", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    raise NotImplementedError('_getTargetClass')", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return self.__class__", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return File", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    suffix = []\n    for ordering in orderings:\n        if len(ordering) == len(suffix):\n            for i in range(len(ordering)):\n                suffix[i] = ordering[i]\n        else:\n            suffix.append(ordering)\n    return suffix\n", "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    return sorted(orderings, key=lambda x: x[0])\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if len(ordering) > 1:\n            result.append(ordering[0])\n            for index in range(1, len(ordering)):\n                result.append(ordering[index])\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    return [x for y in orderings for x in y]\n", "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if o.suffix not in orderings[0].suffixes]\n", "def _legacy_mergeOrderings(orderings):\n    newOrderings = []\n    for ordering in orderings:\n        newOrderings.extend(_legacy_mergeOrderings_(ordering))\n    return newOrderings\n", "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if len(o) > 1]", "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n    return _mergeOrderings(orderings)\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if ordering is None:\n            continue\n        if ordering[0] in result:\n            raise ValueError(\"Cannot merge orderings with different values\")\n        result.append(ordering[0])\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    # FIXME: this is very hacky.\n    return [_mergeOrdering(o) for o in orderings]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    suffix = []\n    for ordering in orderings:\n        if len(ordering) == len(suffix):\n            for i in range(len(ordering)):\n                suffix[i] = ordering[i]\n        else:\n            suffix.append(ordering)\n    return suffix\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    return sorted(orderings, key=lambda x: x[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if len(ordering) > 1:\n            result.append(ordering[0])\n            for index in range(1, len(ordering)):\n                result.append(ordering[index])\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [x for y in orderings for x in y]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if o.suffix not in orderings[0].suffixes]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    newOrderings = []\n    for ordering in orderings:\n        newOrderings.extend(_legacy_mergeOrderings_(ordering))\n    return newOrderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if len(o) > 1]", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n    return _mergeOrderings(orderings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if ordering is None:\n            continue\n        if ordering[0] in result:\n            raise ValueError(\"Cannot merge orderings with different values\")\n        result.append(ordering[0])\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # FIXME: this is very hacky.\n    return [_mergeOrdering(o) for o in orderings]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    if isinstance(object, zope.interface.interfaces.InterfaceClass):\n        interfaces = object.__provides__\n    else:\n        interfaces = object.__provides__.values()\n    return declarations.IDeclaration(interfaces)", "def directlyProvidedBy(object):\n    return getInterfaces(object)[0]", "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__interface__)", "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "def directlyProvidedBy(object):\n    return Interface(implements=object.__implementations__)", "def directlyProvidedBy(object):\n    return getAdapters((object,), interfaces.IDirectlyProvided)[0]", "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "def directlyProvidedBy(object):\n    return getDeclarations(object, directly=True)\n", "def directlyProvidedBy(object):\n    return interfaces.IDeclaration(object)", "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__of__(object))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, zope.interface.interfaces.InterfaceClass):\n        interfaces = object.__provides__\n    else:\n        interfaces = object.__provides__.values()\n    return declarations.IDeclaration(interfaces)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getInterfaces(object)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__interface__)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return Interface(implements=object.__implementations__)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), interfaces.IDirectlyProvided)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getDeclarations(object, directly=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.IDeclaration(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__of__(object))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n    \n    classes.sort(key=lambda x: x.order)\n    return classes", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])\n", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])", "def minimalBases(classes):\n    classes = [cls for cls in classes if not isinstance(cls, type)]\n    if not classes:\n        return []\n    classes.sort(key=lambda cls: cls.__name__)\n    return [cls for cls in classes if issubclass(cls, Base)]", "def minimalBases(classes):\n    return [c for c in classes if issubclass(c, Base)]\n", "def minimalBases(classes):\n    return sorted([ (base.__name__, base.__bases__) for base in classes ], key=lambda item: item[0])", "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)\n", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)", "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n    \n    classes.sort(key=lambda x: x.order)\n    return classes", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = [cls for cls in classes if not isinstance(cls, type)]\n    if not classes:\n        return []\n    classes.sort(key=lambda cls: cls.__name__)\n    return [cls for cls in classes if issubclass(cls, Base)]", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted([ (base.__name__, base.__bases__) for base in classes ], key=lambda item: item[0])", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    if all:\n        return [(name, getattr(self, name)) for name in self.__attrs]\n    else:\n        return [(name, getattr(self, name)) for name in self.__bases__]\n\n\n# ----------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------", "def namesAndDescriptions(self, all=False):\n    result = []\n    for base in self.__bases__:\n        result.extend(base.namesAndDescriptions(all))\n    return result\n    ", "def namesAndDescriptions(self, all=False):\n    if all:\n        return self.__attrs.keys() ;\n    else:\n        return self.__attrs.keys() ;\n", "def namesAndDescriptions(self, all=False):\n    attrs = []\n    for base in self.__bases__:\n        attrs.extend(base.namesAndDescriptions(all))\n    if all:\n        return attrs\n    return sorted(attrs, key=lambda x: x[0])\n", "def namesAndDescriptions(self, all=False):\n    for base in self.__bases__:\n        if all and isinstance(base, InterfaceClass):\n            continue\n        base.namesAndDescriptions(all)\n    return self.__dict__.items()\n", "def namesAndDescriptions(self, all=False):\n    result = []\n    if all:\n        for base in self.__bases__:\n            result.extend(base.namesAndDescriptions(all=all))\n        return result\n    for name, obj in self.__dict__.items():\n        if not name.startswith('_'):\n            result.append((name, obj.__doc__))\n    return result", "def namesAndDescriptions(self, all=False):\n    attrs = sorted(self.__attrs)\n    if all:\n        return [ (attr, self.__getattribute__(attr)) for attr in attrs ]\n    else:\n        return [ (attr, self.__getattribute__(attr)) for attr in attrs ]", "def namesAndDescriptions(self, all=False):\n    res = []\n    for base in self.__bases__:\n        res.extend(base.namesAndDescriptions(all))\n    return res", "def namesAndDescriptions(self, all=False):\n    if all:\n        return [(name, self.__getattribute__(name)) for name in self.__attrs__]\n    else:\n        return [(name, self.__getattribute__(name)) for name in self.__bases__]\n", "def namesAndDescriptions(self, all=False):\n    return self.__namesAndDescriptions(all)"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return [(name, getattr(self, name)) for name in self.__attrs]\n    else:\n        return [(name, getattr(self, name)) for name in self.__bases__]\n\n\n# ----------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------\n# --------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    result = []\n    for base in self.__bases__:\n        result.extend(base.namesAndDescriptions(all))\n    return result\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return self.__attrs.keys() ;\n    else:\n        return self.__attrs.keys() ;\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = []\n    for base in self.__bases__:\n        attrs.extend(base.namesAndDescriptions(all))\n    if all:\n        return attrs\n    return sorted(attrs, key=lambda x: x[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    for base in self.__bases__:\n        if all and isinstance(base, InterfaceClass):\n            continue\n        base.namesAndDescriptions(all)\n    return self.__dict__.items()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    result = []\n    if all:\n        for base in self.__bases__:\n            result.extend(base.namesAndDescriptions(all=all))\n        return result\n    for name, obj in self.__dict__.items():\n        if not name.startswith('_'):\n            result.append((name, obj.__doc__))\n    return result", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = sorted(self.__attrs)\n    if all:\n        return [ (attr, self.__getattribute__(attr)) for attr in attrs ]\n    else:\n        return [ (attr, self.__getattribute__(attr)) for attr in attrs ]", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    res = []\n    for base in self.__bases__:\n        res.extend(base.namesAndDescriptions(all))\n    return res", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return [(name, self.__getattribute__(name)) for name in self.__attrs__]\n    else:\n        return [(name, self.__getattribute__(name)) for name in self.__bases__]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    return self.__namesAndDescriptions(all)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return [k for k, v in self.__attrs.items() if v!= None]", "def names(self, all=False):\n    return self.__attrs if all else self.__bases__", "def names(self, all=False):\n    return self.__attrs.keys() if all else self.__bases__", "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() | self.__bases__\n", "def names(self, all=False):\n    return self.__attrs.keys() if all else self.__bases__.keys()", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return self.__attrs.keys()", "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() + self.__bases__\n\n# ------------------------------------------------------------------------------\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    else:\n        return [attr for attr in self.__attrs]\n", "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    return self.__attrs.keys() + self.__bases__.keys()", "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() | self.__bases__\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return [k for k, v in self.__attrs.items() if v!= None]", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__attrs if all else self.__bases__", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__attrs.keys() if all else self.__bases__", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() | self.__bases__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__attrs.keys() if all else self.__bases__.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return self.__attrs.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() + self.__bases__\n\n# ------------------------------------------------------------------------------\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    else:\n        return [attr for attr in self.__attrs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    return self.__attrs.keys() + self.__bases__.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    else:\n        return self.__attrs.keys() | self.__bases__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n\n    return _normalizeargs_impl(sequence, output)[0]\n", "def _normalizeargs(sequence, output=None):\n    def normalize(args, args_norm):\n        return args_norm\n    return _normalize(sequence, output, normalize)", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, (list, tuple)):\n        return sequence\n    if isinstance(sequence, Interface):\n        return sequence.args\n    if isinstance(sequence, type) and issubclass(sequence, Decl):\n        return sequence.args\n    if output is None:\n        output = sequence\n    return _normalizeargs(sequence, output)\n", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, str):\n        return sequence\n    else:\n        sequence = [_normalizeargs(arg, output) for arg in sequence]\n        if output is not None:\n            output = [_normalizeargs(arg, output) for arg in output]\n        return sequence, output\n", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, list):\n        return [_normalizeargs(element, output) for element in sequence]\n    elif isinstance(sequence, tuple):\n        return tuple(_normalizeargs(element, output) for element in sequence)\n    elif isinstance(sequence, interface.Interface):\n        return sequence.__name__, _normalizeargs(sequence.__args__, output)\n    else:\n        return sequence, output", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        sequence = sequence._impl\n    return _normalizeargs_impl(sequence, output)", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    sequence = _normalizeargs_impl(sequence, output)\n    sequence = _normalizeargs_interfaces(sequence, output)\n    return sequence", "def _normalizeargs(sequence, output=None):\n    return _normalizeargs_impl(sequence, output)[0]", "def _normalizeargs(sequence, output=None):\n    def normalize(arg):\n        if isinstance(arg, Interface):\n            return arg.normalize(output)\n        elif isinstance(arg, Sequence):\n            return tuple(normalize(arg))\n        else:\n            return arg\n    return normalize(sequence)", "def _normalizeargs(sequence, output=None):\n    return _normalize(sequence, output)[0]"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n\n    return _normalizeargs_impl(sequence, output)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    def normalize(args, args_norm):\n        return args_norm\n    return _normalize(sequence, output, normalize)", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, (list, tuple)):\n        return sequence\n    if isinstance(sequence, Interface):\n        return sequence.args\n    if isinstance(sequence, type) and issubclass(sequence, Decl):\n        return sequence.args\n    if output is None:\n        output = sequence\n    return _normalizeargs(sequence, output)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, str):\n        return sequence\n    else:\n        sequence = [_normalizeargs(arg, output) for arg in sequence]\n        if output is not None:\n            output = [_normalizeargs(arg, output) for arg in output]\n        return sequence, output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, list):\n        return [_normalizeargs(element, output) for element in sequence]\n    elif isinstance(sequence, tuple):\n        return tuple(_normalizeargs(element, output) for element in sequence)\n    elif isinstance(sequence, interface.Interface):\n        return sequence.__name__, _normalizeargs(sequence.__args__, output)\n    else:\n        return sequence, output", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        sequence = sequence._impl\n    return _normalizeargs_impl(sequence, output)", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    sequence = _normalizeargs_impl(sequence, output)\n    sequence = _normalizeargs_interfaces(sequence, output)\n    return sequence", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return _normalizeargs_impl(sequence, output)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    def normalize(arg):\n        if isinstance(arg, Interface):\n            return arg.normalize(output)\n        elif isinstance(arg, Sequence):\n            return tuple(normalize(arg))\n        else:\n            return arg\n    return normalize(sequence)", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return _normalize(sequence, output)[0]", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    if 'c_optimizations' in __file__:\n        return __import__('c_optimizations')\n    else:\n        return False", "def _c_optimizations_available():\n    from sys import modules\n    try:\n        return modules['_c_optimizations_required']\n    except KeyError:\n        raise ImportError(\"C optimizations are required but not available\")\n", "def _c_optimizations_available():\n    try:\n        import _c_optimizations\n    except ImportError:\n        return False\n    else:\n        return _c_optimizations\n\n# =============================================================================\n# ``_c_optimizations_required`` function\n# ==============================================================================", "def _c_optimizations_available():\n    module = _c_optimizations_module()\n    if module is None:\n        return False\n    return module", "def _c_optimizations_available():\n\n    try:\n        from.c_optimizations import _c_optimizations_required\n        return _c_optimizations_required\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from. import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False", "def _c_optimizations_available():\n    from. import _c_optimizations\n    return _c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from.. import _c_optimizations_required\n    except ImportError:\n        return False\n    else:\n        return _c_optimizations_required\n", "def _c_optimizations_available():\n    module = _c_optimizations_module()\n    if module is None:\n        raise ImportError(\"C optimizations are not available\")\n    return module", "def _c_optimizations_available():\n    from. import _c_optimizations_required\n    return _c_optimizations_required()"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    if 'c_optimizations' in __file__:\n        return __import__('c_optimizations')\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from sys import modules\n    try:\n        return modules['_c_optimizations_required']\n    except KeyError:\n        raise ImportError(\"C optimizations are required but not available\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import _c_optimizations\n    except ImportError:\n        return False\n    else:\n        return _c_optimizations\n\n# =============================================================================\n# ``_c_optimizations_required`` function\n# ==============================================================================", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    module = _c_optimizations_module()\n    if module is None:\n        return False\n    return module", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n\n    try:\n        from.c_optimizations import _c_optimizations_required\n        return _c_optimizations_required\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from. import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from. import _c_optimizations\n    return _c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from.. import _c_optimizations_required\n    except ImportError:\n        return False\n    else:\n        return _c_optimizations_required\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    module = _c_optimizations_module()\n    if module is None:\n        raise ImportError(\"C optimizations are not available\")\n    return module", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from. import _c_optimizations_required\n    return _c_optimizations_required()", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    return os.environ.get('_use_c_impl') is not None\n", "def _should_attempt_c_optimizations():\n    if sys.version_info[0] == 2:\n        return os.environ.get('PURE_PYTHON') == '1'\n    else:\n        return _use_c_impl()\n", "def _should_attempt_c_optimizations():\n    if sys.version_info >= (3, 0):\n        return os.environ.get('PURE_PYTHON', False)\n    else:\n        return _use_c_impl()\n", "def _should_attempt_c_optimizations():\n    if PYPY and not _use_c_impl:\n        # This is the case in PyPy.\n        return False\n    return _c_optimizations_required() or _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    # This is a PyPy option for PyCFunction.\n    return (\n        sys.implementation.c_optimizations == 'pure'\n        and not (sys.version_info[:2] >= (3, 5)))\n", "def _should_attempt_c_optimizations():\n    return PURE_PYTHON or _use_c_impl()\n", "def _should_attempt_c_optimizations():\n    return (sys.version_info >= (3, 0) and\n            _use_c_impl('PURE_PYTHON', 'c_optimizations'))\n", "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"_use_c_impl\") == \"PURE_PYTHON\" and\n        not sys.version_info.major == 2\n    )\n", "def _should_attempt_c_optimizations():\n    return ('_use_c_impl' in os.environ and\n            os.environ['PURE_PYTHON'] == '1')\n", "def _should_attempt_c_optimizations():\n    return os.environ.get(\"_use_c_impl\", False) and \\\n           os.environ.get(\"PURE_PYTHON\", False)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    return os.environ.get('_use_c_impl') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if sys.version_info[0] == 2:\n        return os.environ.get('PURE_PYTHON') == '1'\n    else:\n        return _use_c_impl()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if sys.version_info >= (3, 0):\n        return os.environ.get('PURE_PYTHON', False)\n    else:\n        return _use_c_impl()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if PYPY and not _use_c_impl:\n        # This is the case in PyPy.\n        return False\n    return _c_optimizations_required() or _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # This is a PyPy option for PyCFunction.\n    return (\n        sys.implementation.c_optimizations == 'pure'\n        and not (sys.version_info[:2] >= (3, 5)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return PURE_PYTHON or _use_c_impl()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (sys.version_info >= (3, 0) and\n            _use_c_impl('PURE_PYTHON', 'c_optimizations'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"_use_c_impl\") == \"PURE_PYTHON\" and\n        not sys.version_info.major == 2\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return ('_use_c_impl' in os.environ and\n            os.environ['PURE_PYTHON'] == '1')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return os.environ.get(\"_use_c_impl\", False) and \\\n           os.environ.get(\"PURE_PYTHON\", False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    # TODO: Add support for platforms with different options.\n    return 0\n", "def _c_optimizations_ignored():\n    return True\n", "def _c_optimizations_ignored():\n    return lambda x: x", "def _c_optimizations_ignored():\n    return ''\n\n# -----------------------------------------------------------------------------", "def _c_optimizations_ignored():\n    return c_optimizations_required(_c_optimizations_ignored_name)\n", "def _c_optimizations_ignored():\n    import os\n    return not _c_optimizations_required()", "def _c_optimizations_ignored():\n    return 'import os'\n", "def _c_optimizations_ignored():\n    return ''", "def _c_optimizations_ignored():\n    return ''", "def _c_optimizations_ignored():\npass"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    # TODO: Add support for platforms with different options.\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return lambda x: x", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ''\n\n# -----------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return c_optimizations_required(_c_optimizations_ignored_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    import os\n    return not _c_optimizations_required()", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 'import os'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ''", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ''", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    return _use_c_impl() and os.environ.get('PURE_PYTHON') is not None\n", "def _c_optimizations_required():\n    return _use_c_impl()[0]\n", "def _c_optimizations_required():\n    return 'pure_python' in os.environ\n", "def _c_optimizations_required():\n    return os.getenv('PURE_PYTHON', '0') == '1'", "def _c_optimizations_required():\n    return (\n        os.environ.get(\"PURE_PYTHON\") == \"1\"\n        or (\n            os.environ.get(\"PURE_PYTHON\") == \"2\"\n            and os.environ.get(\"PURE_C_VERSION\") == \"3\"\n        )\n    )\n", "def _c_optimizations_required():\n    return PURE_PYTHON or _use_c_impl('optimizations')\n", "def _c_optimizations_required():\n    return _use_c_impl('PURE_PYTHON')\n", "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "def _c_optimizations_required():\n    if _use_c_impl[0]:\n        return True\n    else:\n        return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    return _use_c_impl() and os.environ.get('PURE_PYTHON') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return _use_c_impl()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return 'pure_python' in os.environ\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return os.getenv('PURE_PYTHON', '0') == '1'", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return (\n        os.environ.get(\"PURE_PYTHON\") == \"1\"\n        or (\n            os.environ.get(\"PURE_PYTHON\") == \"2\"\n            and os.environ.get(\"PURE_C_VERSION\") == \"3\"\n        )\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON or _use_c_impl('optimizations')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return _use_c_impl('PURE_PYTHON')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    if _use_c_impl[0]:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = {}\n    self._initial_bins = {}\n    self.bins = {}\n    self._reset()", "def reset(self):\n\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}\n    self._cur_context = {}\n", "def reset(self):\n\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}\n    self._cur_context = None", "def reset(self):\n    self._cur_context = {}\n    self.edges = []\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = []\n    self._reset()", "def reset(self):\n\n    self.edges = {}\n    self._cur_context = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}\n    self._reset()", "def reset(self):\n    self._cur_context = {}\n    self.edges = []\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}", "def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}", "def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}\n", "def reset(self):\n    self._cur_context = {}; self.edges = {}; self._initial_value = None; self._initial_bins = {};\n    self.bins = {}; Reset the histogram.\n    Current context is reset to an empty dict.\n    '''\n\n\n########################################################################################################################################################################################################################################################################################################################################################################################################################################################################", "def reset(self):\nself.edges = {}\nself._initial_value = None\nself._initial_bins = {}\nself.bins = {}\nself._cur_context = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = {}\n    self._initial_bins = {}\n    self.bins = {}\n    self._reset()", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}\n    self._cur_context = None", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = []\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = []\n    self._reset()", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n\n    self.edges = {}\n    self._cur_context = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}\n    self._reset()", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = []\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = {}\n    self.bins = {}", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = {}\n    self._initial_value = None\n    self._initial_bins = None\n    self.bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}; self.edges = {}; self._initial_value = None; self._initial_bins = {};\n    self.bins = {}; Reset the histogram.\n    Current context is reset to an empty dict.\n    '''\n\n\n########################################################################################################################################################################################################################################################################################################################################################################################################################################################################", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\nself.edges = {}\nself._initial_value = None\nself._initial_bins = {}\nself.bins = {}\nself._cur_context = {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_lena(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(separator=separator, header=header, points=self)\n", "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = \"\"\n    return header + separator.join([str(point) for point in self]) + \"\\n\"\n", "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_table(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = separator.join([str(x) for x in self.points[0]])\n    return [str(x) for x in self.points]\n", "def to_csv(self, separator=\",\", header=None):\n    return self.to_list(header=header).to_csv(separator=separator)"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_lena(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(separator=separator, header=header, points=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = \"\"\n    return header + separator.join([str(point) for point in self]) + \"\\n\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_table(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = separator.join([str(x) for x in self.points[0]])\n    return [str(x) for x in self.points]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return self.to_list(header=header).to_csv(separator=separator)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n\n    try:\n        return self._parsed_error_names[coord_name]\n    except KeyError:\n        return None\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names.index(coord_name)", "def _get_err_indices(self, coord_name):\n    err_names = self._parsed_error_names\n    return err_names.index(coord_name)", "def _get_err_indices(self, coord_name):\n\n    if coord_name in self.dim:\n        return self._parsed_error_names\n    else:\n        return None", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        return []\n    return self._parsed_error_names[coord_name]", "def _get_err_indices(self, coord_name):\n    # Get the name of the coordinate\n    err_name = coord_name.split(':')[0]\n\n    # Get the corresponding error indices\n    return [self._dim.index(n) for n in self._parsed_error_names\n            if err_name in n]", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names.get(coord_name, [])\n\n\n\n\n\n\n", "def _get_err_indices(self, coord_name):\n    # TODO this is a temporary workaround. This should be removed.\n    # This is a workaround for a bug in the Shape class.\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise RuntimeError(\"Coordinate '%s' is not defined\" % coord_name)\n    return self._parsed_error_names[coord_name]", "def _get_err_indices(self, coord_name):\n\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n\n    try:\n        return self._parsed_error_names[coord_name]\n    except KeyError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names.index(coord_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    err_names = self._parsed_error_names\n    return err_names.index(coord_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n\n    if coord_name in self.dim:\n        return self._parsed_error_names\n    else:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        return []\n    return self._parsed_error_names[coord_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    # Get the name of the coordinate\n    err_name = coord_name.split(':')[0]\n\n    # Get the corresponding error indices\n    return [self._dim.index(n) for n in self._parsed_error_names\n            if err_name in n]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names.get(coord_name, [])\n\n\n\n\n\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    # TODO this is a temporary workaround. This should be removed.\n    # This is a workaround for a bug in the Shape class.\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise RuntimeError(\"Coordinate '%s' is not defined\" % coord_name)\n    return self._parsed_error_names[coord_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    raise NotImplementedError(\"Implement in subclass\")\n", "def _update_context(self, context):\n    context.error = []\n    context.coord_names = {}\n    context.parsed_error_names = {}", "def _update_context(self, context):\n    context[\"error\"] = self._coord_names\n    context[\"error_E_low\"] = self._parsed_error_names\n", "def _update_context(self, context):\n    context.value = {}\n    for name in self._parsed_error_names:\n        context.value[name] = getattr(self, name)", "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n", "def _update_context(self, context):\n    pass\n", "def _update_context(self, context):\n    self._coord_names = context.value.keys()\n    self._parsed_error_names = [None] * len(self._coord_names)\n", "def _update_context(self, context):\n    context.error = None\n    context.coord_names = self._coord_names\n    context.parsed_error_names = self._parsed_error_names\n", "def _update_context(self, context):\n    context[\"value\"] = self.value\n    context[\"error\"] = self.error\n    return context\n", "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    raise NotImplementedError(\"Implement in subclass\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.coord_names = {}\n    context.parsed_error_names = {}", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context[\"error\"] = self._coord_names\n    context[\"error_E_low\"] = self._parsed_error_names\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _update_context(self, context):\n    context.value = {}\n    for name in self._parsed_error_names:\n        context.value[name] = getattr(self, name)", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    pass\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _update_context(self, context):\n    self._coord_names = context.value.keys()\n    self._parsed_error_names = [None] * len(self._coord_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = None\n    context.coord_names = self._coord_names\n    context.parsed_error_names = self._parsed_error_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context[\"value\"] = self.value\n    context[\"error\"] = self.error\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "def integral(bins, edges):\n    return np.array([\n        np.trapz(bins, x=edges, axis=0)\n        for x in range(bins.shape[0])\n    ]).astype(np.float)\n", "def integral(bins, edges):\n    raise NotImplementedError\n", "def integral(bins, edges):\n    bins = numpy.array(bins)\n    edges = numpy.array(edges)\n    return _hist.integral(bins, edges)", "def integral(bins, edges):\n    return histogram(bins, edges, 'integral')", "def integral(bins, edges):\n    return integrate.cumtrapz(bins, edges)\n", "def integral(bins, edges):\n    from functools import reduce\n    return reduce(lambda x, y: x * y, [bins[i] * x for i in range(len(bins))])\n", "def integral(bins, edges):\n    return np.sum(np.histogram(bins, edges)[0])\n", "def integral(bins, edges):\n    bins, edges = np.asarray(bins), np.asarray(edges)\n    return np.sum(bins * edges)\n", "def integral(bins, edges):\n    return np.sum(edges[:-1] * bins * (edges[1:] - edges[:-1]))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.array([\n        np.trapz(bins, x=edges, axis=0)\n        for x in range(bins.shape[0])\n    ]).astype(np.float)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bins = numpy.array(bins)\n    edges = numpy.array(edges)\n    return _hist.integral(bins, edges)", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return histogram(bins, edges, 'integral')", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return integrate.cumtrapz(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    from functools import reduce\n    return reduce(lambda x, y: x * y, [bins[i] * x for i in range(len(bins))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum(np.histogram(bins, edges)[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bins, edges = np.asarray(bins), np.asarray(edges)\n    return np.sum(bins * edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum(edges[:-1] * bins * (edges[1:] - edges[:-1]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source_seq(seq)", "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or hasattr(seq, 'is_source') and not seq.is_source\n", "def is_fill_request_seq(seq):\n    if not is_fill_request_el(seq):\n        return False\n    if not isinstance(seq, FillRequest):\n        return False\n    return any(isinstance(x, Source) for x in seq)\n", "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    if is_fill_request(seq):\n        return True\n    else:\n        if isinstance(seq, Source):\n            return False\n        else:\n            return isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    return _is_fill_request_el(seq) and not is_source(seq)", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or \\\n           is_source(seq) or \\\n           is_fill_request_el(seq)", "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source_seq(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or hasattr(seq, 'is_source') and not seq.is_source\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not is_fill_request_el(seq):\n        return False\n    if not isinstance(seq, FillRequest):\n        return False\n    return any(isinstance(x, Source) for x in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if is_fill_request(seq):\n        return True\n    else:\n        if isinstance(seq, Source):\n            return False\n        else:\n            return isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return _is_fill_request_el(seq) and not is_source(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or \\\n           is_source(seq) or \\\n           is_fill_request_el(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_request_el(seq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return isinstance(obj, (Object, ) + Fill)", "def is_fill_request_el(obj):\n    return is_fill_request(obj.fill) and is_request(obj.request)", "def is_fill_request_el(obj):\n    return (\n        is_fill(obj)\n        and is_request(obj)\n    )\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('fill') and \\\n           obj.get('request')", "def is_fill_request_el(obj):\n    return isinstance(obj, (Fill, Request))", "def is_fill_request_el(obj):\n    return (obj.fill is not None) and (obj.request is not None)\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj and'request' in obj\n", "def is_fill_request_el(obj):\n    return ('fill' in dir(obj) and'request' in dir(obj.fill))", "def is_fill_request_el(obj):\n    return isinstance(obj, (_Fill, _Request))\n", "def is_fill_request_el(obj):\n    return (\n        isinstance(obj, Object)\n        and hasattr(obj, 'fill')\n        and hasattr(obj,'request')\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (Object, ) + Fill)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return is_fill_request(obj.fill) and is_request(obj.request)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        is_fill(obj)\n        and is_request(obj)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('fill') and \\\n           obj.get('request')", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (Fill, Request))", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (obj.fill is not None) and (obj.request is not None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj and'request' in obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return ('fill' in dir(obj) and'request' in dir(obj.fill))", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (_Fill, _Request))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        isinstance(obj, Object)\n        and hasattr(obj, 'fill')\n        and hasattr(obj,'request')\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, \"run\")", "def is_run_el(obj):\n    return hasattr(obj, 'run') and callable(obj.run)\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "def is_run_el(obj):\n    return 'run' in dir(obj)\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run') and callable(obj.run)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return 'run' in dir(obj)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, FillElement) and obj.method == 'fill'", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"fill\") == \"compute\" and obj.get(\"compute\")\n", "def is_fill_compute_el(obj):\n    return ((isinstance(obj, type) and issubclass(obj, Fill)) or\n            (isinstance(obj, collections.abc.Iterable) and all(isinstance(x, Fill) for x in obj)))\n", "def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, (Object, Fill, Compute))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, Fill) or isinstance(obj, Compute)", "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, Object)\n        and hasattr(obj, 'fill')\n        and hasattr(obj, 'compute')\n    )\n", "def is_fill_compute_el(obj):\n    return is_fill_el(obj) or is_compute_el(obj)", "def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            hasattr(obj.fill, '__call__') and\n            hasattr(obj.fill, 'compute'))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute'))\n", "def is_fill_compute_el(obj):\n    return is_fill_el(obj) and obj.__class__ == compute_el_class"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, FillElement) and obj.method == 'fill'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"fill\") == \"compute\" and obj.get(\"compute\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return ((isinstance(obj, type) and issubclass(obj, Fill)) or\n            (isinstance(obj, collections.abc.Iterable) and all(isinstance(x, Fill) for x in obj)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, (Object, Fill, Compute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, Fill) or isinstance(obj, Compute)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, Object)\n        and hasattr(obj, 'fill')\n        and hasattr(obj, 'compute')\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return is_fill_el(obj) or is_compute_el(obj)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            hasattr(obj.fill, '__call__') and\n            hasattr(obj.fill, 'compute'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return is_fill_el(obj) and obj.__class__ == compute_el_class", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    d = d1.copy()\n    _difference(d1, d2, level, d)\n    return d", "def difference(d1, d2, level=-1):\n    return _difference(d1, d2, False, level)\n", "def difference(d1, d2, level=-1):\n    d2 = d2.copy()\n    if d1 is not d2:\n        return intersection(d1, d2, level)\n    else:\n        return d2\n", "def difference(d1, d2, level=-1):\n    return _intersection(d1, d2, intersection_key, level)\n", "def difference(d1, d2, level=-1):\n    return _recursion_difference(d1, d2, level, False, False)\n", "def difference(d1, d2, level=-1):\n    d = d1.copy()\n    d.update(d2)\n    if not d1:\n        return d\n    if not d2:\n        return d\n    for key in d1:\n        if key not in d2:\n            d[key] = level\n    return d", "def difference(d1, d2, level=-1):\n    return dict(_difference(d1, d2, level))\n", "def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in d1.items():\n        if k not in d2 or d2[k]!= v:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or d1[k]!= v:\n            d[k] = v\n    return d\n", "def difference(d1, d2, level=-1):\n    if level == 0:\n        return d1\n    else:\n        return intersection(d1, d2, level-1)\n", "def difference(d1, d2, level=-1):\n    d = {}\n    if not isinstance(d1, dict):\n        raise TypeError(\"first argument must be a dict\")\n    if not isinstance(d2, dict):\n        raise TypeError(\"second argument must be a dict\")\n    return intersection(d1, d2, level)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    d = d1.copy()\n    _difference(d1, d2, level, d)\n    return d", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return _difference(d1, d2, False, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d2 = d2.copy()\n    if d1 is not d2:\n        return intersection(d1, d2, level)\n    else:\n        return d2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return _intersection(d1, d2, intersection_key, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return _recursion_difference(d1, d2, level, False, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = d1.copy()\n    d.update(d2)\n    if not d1:\n        return d\n    if not d2:\n        return d\n    for key in d1:\n        if key not in d2:\n            d[key] = level\n    return d", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return dict(_difference(d1, d2, level))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in d1.items():\n        if k not in d2 or d2[k]!= v:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or d1[k]!= v:\n            d[k] = v\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level == 0:\n        return d1\n    else:\n        return intersection(d1, d2, level-1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    if not isinstance(d1, dict):\n        raise TypeError(\"first argument must be a dict\")\n    if not isinstance(d2, dict):\n        raise TypeError(\"second argument must be a dict\")\n    return intersection(d1, d2, level)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    if self.edges is None:\n        self.edges = np.zeros(self.nbins)\n    if self.bins is None:\n        self.bins = np.zeros(self.nbins)\n    self.edges[coord] = weight\n    self.bins[coord] = weight\n", "def fill(self, coord, weight=1):\n    self.edges = self.edges.copy()\n    self.bins = self.bins.copy()\n    self._fill(coord, weight)\n    return self", "def fill(self, coord, weight=1):\n    if coord in self.edges:\n        self.edges[coord] += weight\n    else:\n        self.edges[coord] = weight", "def fill(self, coord, weight=1):\n\n    self.edges = self.edges * weight\n    self.bins = self.bins * weight\n    self.__update_edges()\n    self.__update_bins()\n", "def fill(self, coord, weight=1):\n\n    if self.edges is None:\n        self.edges = []\n        self.bins = []\n\n    for edge in self.edges:\n        if coord in edge:\n            self.edges.append(edge)\n            self.bins.append(coord)\n            return\n\n    self.edges.append(coord)\n    self.bins.append(weight)", "def fill(self, coord, weight=1):\n    self.edges = np.append(self.edges, coord)\n    self.bins = np.append(self.bins, weight)\n    return self", "def fill(self, coord, weight=1):\n    edges = self.edges\n    if edges is None:\n        raise ValueError('Edges not set in histogram')\n    if not isinstance(coord, (int, float)):\n        raise ValueError('Coordinate must be numeric')\n    if weight <= 0:\n        raise ValueError('Weight must be positive')\n    self.edges = edges\n    self.bins = edges[1:] + [coord]\n    self.weights = weight\n", "def fill(self, coord, weight=1):\n    # TODO implement\n    pass", "def fill(self, coord, weight=1):\n    self.edges[:] = coord\n    self.bins[:] = coord\n    self.counts[coord] = weight\n    self._fill_edges()\n", "def fill(self, coord, weight=1):\n    c = coord - self.edges[0]\n    c = c / np.max(c)\n    self.edges = self.edges + c\n    self.bins = self.bins + c * weight\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    if self.edges is None:\n        self.edges = np.zeros(self.nbins)\n    if self.bins is None:\n        self.bins = np.zeros(self.nbins)\n    self.edges[coord] = weight\n    self.bins[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.edges = self.edges.copy()\n    self.bins = self.bins.copy()\n    self._fill(coord, weight)\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if coord in self.edges:\n        self.edges[coord] += weight\n    else:\n        self.edges[coord] = weight", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n\n    self.edges = self.edges * weight\n    self.bins = self.bins * weight\n    self.__update_edges()\n    self.__update_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n\n    if self.edges is None:\n        self.edges = []\n        self.bins = []\n\n    for edge in self.edges:\n        if coord in edge:\n            self.edges.append(edge)\n            self.bins.append(coord)\n            return\n\n    self.edges.append(coord)\n    self.bins.append(weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.edges = np.append(self.edges, coord)\n    self.bins = np.append(self.bins, weight)\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    edges = self.edges\n    if edges is None:\n        raise ValueError('Edges not set in histogram')\n    if not isinstance(coord, (int, float)):\n        raise ValueError('Coordinate must be numeric')\n    if weight <= 0:\n        raise ValueError('Weight must be positive')\n    self.edges = edges\n    self.bins = edges[1:] + [coord]\n    self.weights = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO implement\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def fill(self, coord, weight=1):\n    self.edges[:] = coord\n    self.bins[:] = coord\n    self.counts[coord] = weight\n    self._fill_edges()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    c = coord - self.edges[0]\n    c = c / np.max(c)\n    self.edges = self.edges + c\n    self.bins = self.bins + c * weight\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    return re.compile(r'^(?P<resource_name>.*)$')", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.*)$\")\n", "def _get_resource_name_regex():\n    import re\n    return re.compile(r'^(.*)/([\\w\\-]+)/([\\w\\-]+)$')\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?:/home/|/usr/|/var/|/.*)\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?:resources\\.)?(?P<resource_name>.*)$\")", "def _get_resource_name_regex():\n    return _get_resource_regex(\"name\", \"^[a-zA-Z0-9]{1,}$\")\n", "def _get_resource_name_regex():\n    return re.compile(r'^[a-zA-Z][a-zA-Z0-9_]*/')\n", "def _get_resource_name_regex():\n    return re.compile(r'^((?:https?://)?(?:www\\.)?krake\\.)?'\n                      r'((?:shared|shared_)?projects)/(?P<project>\\d+)/'\n                      r'(?P<resource>\\d+)$')\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<name>[a-zA-Z0-9_.]+)$\")", "def _get_resource_name_regex():\n    return re.compile(r'^(\\w+):')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^(?P<resource_name>.*)$')", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.*)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    import re\n    return re.compile(r'^(.*)/([\\w\\-]+)/([\\w\\-]+)$')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?:/home/|/usr/|/var/|/.*)\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?:resources\\.)?(?P<resource_name>.*)$\")", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _get_resource_regex(\"name\", \"^[a-zA-Z0-9]{1,}$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^[a-zA-Z][a-zA-Z0-9_]*/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^((?:https?://)?(?:www\\.)?krake\\.)?'\n                      r'((?:shared|shared_)?projects)/(?P<project>\\d+)/'\n                      r'(?P<resource>\\d+)$')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<name>[a-zA-Z0-9_.]+)$\")", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^(\\w+):')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    regex = _get_labels_regex()\n    if not regex.match(value):\n        raise ValidationError('Value is not a valid labels regex.')", "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValueError as e:\n        raise ValidationError(str(e))", "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    regex = _get_labels_regex()\n    if not regex.match(value):\n        raise ValidationError(\n            \"Invalid value for labels: {}\".format(value))\n", "def validate_value(value):\n    _get_labels_regex()\n    try:\n        re.match(value, _labels_regex)\n    except re.error:\n        raise ValidationError(\"Value '{0}' is not valid\".format(value))", "def validate_value(value):\n    try:\n        return _get_labels_regex().match(value)\n    except (TypeError, ValueError):\n        raise ValidationError(\n            'Invalid value for a single label.',\n            code='invalid',\n        )", "def validate_value(value):\n    if not re.match(_get_labels_regex(), value):\n        raise ValidationError(\"Value '{}' is not valid for the regex pattern\".format(value))\n", "def validate_value(value):\n    _get_labels_regex()\n    try:\n        re.compile(value)\n    except re.error:\n        raise ValidationError(\"Invalid labels value\")\n", "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValidationError as e:\n        raise ValidationError(\n            f\"Value '{value}' is not valid for regex '{_get_labels_regex().pattern}'\"\n        ) from e\n", "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValidationError as e:\n        raise ValidationError(e.messages)"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    regex = _get_labels_regex()\n    if not regex.match(value):\n        raise ValidationError('Value is not a valid labels regex.')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValueError as e:\n        raise ValidationError(str(e))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    regex = _get_labels_regex()\n    if not regex.match(value):\n        raise ValidationError(\n            \"Invalid value for labels: {}\".format(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex()\n    try:\n        re.match(value, _labels_regex)\n    except re.error:\n        raise ValidationError(\"Value '{0}' is not valid\".format(value))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        return _get_labels_regex().match(value)\n    except (TypeError, ValueError):\n        raise ValidationError(\n            'Invalid value for a single label.',\n            code='invalid',\n        )", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not re.match(_get_labels_regex(), value):\n        raise ValidationError(\"Value '{}' is not valid for the regex pattern\".format(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex()\n    try:\n        re.compile(value)\n    except re.error:\n        raise ValidationError(\"Invalid labels value\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValidationError as e:\n        raise ValidationError(\n            f\"Value '{value}' is not valid for regex '{_get_labels_regex().pattern}'\"\n        ) from e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        _get_labels_regex()(value)\n    except ValidationError as e:\n        raise ValidationError(e.messages)", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    regex = _get_labels_regex()\n\n    if not regex.match(key):\n        raise ValidationError(\n            f\"Key '{key}' does not match the regular expression: {regex.pattern}\"\n        )\n", "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Key must be a string')\n    if not re.match(REGEX, key):\n        raise ValidationError('Key does not match regex')\n", "def validate_key(key):\n    try:\n        re.compile(key)\n    except re.error:\n        raise ValidationError(\"'{}' is not a valid key\".format(key))\n", "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Expected string for key')\n\n    _, regex = _get_labels_regex()\n\n    if not regex.match(key):\n        raise ValidationError('Key \"{}\" is not a valid label.'.format(key))\n", "def validate_key(key):\n    if key is None:\n        return\n    validator = re.compile(key)\n    if not validator.match(key):\n        raise ValidationError('Invalid key')", "def validate_key(key):\n    if not re.match(_get_labels_regex(), key):\n        raise ValidationError('Key {} does not match regex {}'.format(key, _get_labels_regex()))\n", "def validate_key(key):\n    regex = _get_labels_regex()\n    if not regex.match(key):\n        raise ValidationError(\"Key {} is not a valid labels key.\".format(key))\n", "def validate_key(key):\n    if not re.match(_get_labels_regex(), key):\n        raise ValidationError('Invalid key given: \"%s\"' % key)\n", "def validate_key(key):\n    validate_regex(key)\n", "def validate_key(key):\n    if not _labels_regex.match(key):\n        raise ValidationError('Invalid key.')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    regex = _get_labels_regex()\n\n    if not regex.match(key):\n        raise ValidationError(\n            f\"Key '{key}' does not match the regular expression: {regex.pattern}\"\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Key must be a string')\n    if not re.match(REGEX, key):\n        raise ValidationError('Key does not match regex')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    try:\n        re.compile(key)\n    except re.error:\n        raise ValidationError(\"'{}' is not a valid key\".format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Expected string for key')\n\n    _, regex = _get_labels_regex()\n\n    if not regex.match(key):\n        raise ValidationError('Key \"{}\" is not a valid label.'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if key is None:\n        return\n    validator = re.compile(key)\n    if not validator.match(key):\n        raise ValidationError('Invalid key')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not re.match(_get_labels_regex(), key):\n        raise ValidationError('Key {} does not match regex {}'.format(key, _get_labels_regex()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    regex = _get_labels_regex()\n    if not regex.match(key):\n        raise ValidationError(\"Key {} is not a valid labels key.\".format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not re.match(_get_labels_regex(), key):\n        raise ValidationError('Invalid key given: \"%s\"' % key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    validate_regex(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _labels_regex.match(key):\n        raise ValidationError('Invalid key.')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    pass", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    return update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n\n    for resource in app.resources:\n        if not resource.custom_observer_schema:\n            resource.generate_default_observer_schema()\n", "def generate_default_observer_schema(app):\n    generate_custom_observer_schema_dict(app.kubernetes_client, app.spec)\n", "def generate_default_observer_schema(app):\n    spec_dict = copy.deepcopy(app.spec.spec)\n    for resource in spec_dict.get(\"resources\", []):\n        if resource.get(\"customObserverSchema\"):\n            resource.pop(\"customObserverSchema\")\n    app.spec.spec = spec_dict\n", "def generate_default_observer_schema(app):\n    for resource_name in app.spec.manifest.resource_names:\n        if not app.spec.manifest.get(resource_name):\n            app.spec.manifest.setdefault(resource_name, generate_default_observer_schema_dict(app.spec.manifest, resource_name))", "def generate_default_observer_schema(app):\n    for resource in app.manifest.resources:\n        if not resource.custom_observer_schema:\n            resource.custom_observer_schema = generate_default_observer_schema_dict(app, resource)\n", "def generate_default_observer_schema(app):\n    manifest_dict = get_manifest_dict(app)\n    for kubernetes_resource in manifest_dict['spec']['template']['spec']['resources']:\n        if kubernetes_resource['type']!= 'observer':\n            generate_default_observer_schema_dict(manifest_dict, kubernetes_resource['name'])\n", "def generate_default_observer_schema(app):\n    for resource in app.spec.manifest.get('resources', []):\n        if not resource.get('customObserverSchema'):\n            resource['customObserverSchema'] = generate_default_observer_schema_dict(app, resource['name'])\n", "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.manifest.get('resources', []):\n        generate_default_observer_schema(kubernetes_resource)\n", "def generate_default_observer_schema(app):\n    for resource in app.manifest.get(\"custom_observer_schemas\", []):\n        copy_schema(resource, app.config.get(\"Kubernetes_resource_path\"))\n", "def generate_default_observer_schema(app):\n    for manifest_dict in app.manifest.values():\n        for resource in manifest_dict.values():\n            if resource.custom_observer_schema is None:\n                resource.generate_default_observer_schema()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n\n    for resource in app.resources:\n        if not resource.custom_observer_schema:\n            resource.generate_default_observer_schema()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    generate_custom_observer_schema_dict(app.kubernetes_client, app.spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec_dict = copy.deepcopy(app.spec.spec)\n    for resource in spec_dict.get(\"resources\", []):\n        if resource.get(\"customObserverSchema\"):\n            resource.pop(\"customObserverSchema\")\n    app.spec.spec = spec_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource_name in app.spec.manifest.resource_names:\n        if not app.spec.manifest.get(resource_name):\n            app.spec.manifest.setdefault(resource_name, generate_default_observer_schema_dict(app.spec.manifest, resource_name))", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.manifest.resources:\n        if not resource.custom_observer_schema:\n            resource.custom_observer_schema = generate_default_observer_schema_dict(app, resource)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = get_manifest_dict(app)\n    for kubernetes_resource in manifest_dict['spec']['template']['spec']['resources']:\n        if kubernetes_resource['type']!= 'observer':\n            generate_default_observer_schema_dict(manifest_dict, kubernetes_resource['name'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.spec.manifest.get('resources', []):\n        if not resource.get('customObserverSchema'):\n            resource['customObserverSchema'] = generate_default_observer_schema_dict(app, resource['name'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.manifest.get('resources', []):\n        generate_default_observer_schema(kubernetes_resource)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.manifest.get(\"custom_observer_schemas\", []):\n        copy_schema(resource, app.config.get(\"Kubernetes_resource_path\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for manifest_dict in app.manifest.values():\n        for resource in manifest_dict.values():\n            if resource.custom_observer_schema is None:\n                resource.generate_default_observer_schema()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: typing.Union[str, bytes],\nparams: typing.Mapping[str, int]\n) -> typing.Tuple[str, dict]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int]\n) -> Tuple[bytes, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, bytes]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None\n) -> Tuple[str, Mapping]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, Any] = None\n) -> Tuple[str, Mapping[str, Any]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = {}\n) -> Tuple[str, bytes, Mapping]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, List[dict]]:\npass"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: typing.Union[str, bytes],\nparams: typing.Mapping[str, int]\n) -> typing.Tuple[str, dict]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int]\n) -> Tuple[bytes, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, bytes]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None\n) -> Tuple[str, Mapping]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, Any] = None\n) -> Tuple[str, Mapping[str, Any]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = {}\n) -> Tuple[str, bytes, Mapping]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[int]\n) -> Tuple[str, List[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[int]\n) -> None:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]):\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping\n) -> Tuple[str, List[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n):\npass", "def formatmany(\n\t\tself,\n\t\tsql: str, many_params: Iterable[Any]\n) -> Tuple[str, List[Any]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping) -> (str, List):\npass", "def formatmany(\n\t\tself,\n\t\tsql: bytes, many_params: Mapping, params: Sequence = None) -> Tuple[bytes, List]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> tuple:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Iterable[str]]\n) -> None:\npass"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[int]\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[int]\n) -> None:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str, many_params: Iterable[Any]\n) -> Tuple[str, List[Any]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping) -> (str, List):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: bytes, many_params: Mapping, params: Sequence = None) -> Tuple[bytes, List]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> tuple:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Iterable[str]]\n) -> None:\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\nreturn True", "def validate(self, path):\n    return True", "def validate(self, path):\nreturn True", "def validate(self, path):\n\n    return False", "def validate(self, path):\n    return True", "def validate(self, path):\n    return True", "def validate(self, path):\nreturn True", "def validate(self, path):\nreturn self._validate(path)", "def validate(self, path):\n    return True", "def validate(self, path):\n    return self._validate(path)"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\nreturn self._validate(path)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self._validate(path)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    return '\\n'.join([prefix + self.status_str_with_severity(s)\n                      for s in self.messages])", "def status_str(self, prefix=''):\n    status = self.status\n    if status:\n        return \"{} {}\".format(prefix, status)\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    if self.messages:\n        return prefix + 'validator status:\\n' + '\\n'.join(\n                                ['    %s: %s' % (key, self.messages[key].validator.status)\n                                 for key in self.messages])\n    else:\n        return prefix + 'no validator messages to show'\n", "def status_str(self, prefix=''):\n    return (\"\\nvalidator status:\\n\\t\" + prefix + \"\\n\\t\" +\n            self.messages_str(prefix))\n", "def status_str(self, prefix=''):\n    return '\\n'.join([prefix + msg for msg in self.messages])", "def status_str(self, prefix=''):\n    if self.messages:\n        if prefix:\n            return prefix +'' + self.status_str(prefix='')\n        else:\n            return self.status_str(prefix='')\n    return ''\n", "def status_str(self, prefix=''):\n    return 'validator {}: {}'.format(self.__class__.__name__, prefix)", "def status_str(self, prefix=''):\n    return \"\".join([prefix, \"Validator %d: \" % self.count, self.messages])\n", "def status_str(self, prefix=''):\n    return'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", "def status_str(self, prefix=''):\n    s = self.status_str_\n    s = s.replace('\\n', '\\n' + prefix)\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    return '\\n'.join([prefix + self.status_str_with_severity(s)\n                      for s in self.messages])", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status = self.status\n    if status:\n        return \"{} {}\".format(prefix, status)\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.messages:\n        return prefix + 'validator status:\\n' + '\\n'.join(\n                                ['    %s: %s' % (key, self.messages[key].validator.status)\n                                 for key in self.messages])\n    else:\n        return prefix + 'no validator messages to show'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return (\"\\nvalidator status:\\n\\t\" + prefix + \"\\n\\t\" +\n            self.messages_str(prefix))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '\\n'.join([prefix + msg for msg in self.messages])", "is_pass": true, "return_code": 0}, {"generate_code": "def status_str(self, prefix=''):\n    if self.messages:\n        if prefix:\n            return prefix +'' + self.status_str(prefix='')\n        else:\n            return self.status_str(prefix='')\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return 'validator {}: {}'.format(self.__class__.__name__, prefix)", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return \"\".join([prefix, \"Validator %d: \" % self.count, self.messages])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = self.status_str_\n    s = s.replace('\\n', '\\n' + prefix)\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    return self.log.status_str(prefix)", "def status_str(self, prefix=''):\n    return \"\\n\".join([prefix+l.as_str() for l in self.log])", "def status_str(self, prefix=''):\n    if self.valid:\n        return \"\\n\".join([ prefix+\" \"+str(i) for i in self.status ])\n    else:\n        return \"\"", "def status_str(self, prefix=''):\n    self.log.status_str(prefix)\n    return ''", "def status_str(self, prefix=''):\n    s = ''\n    s += prefix +'status:'+ self.status + '\\n'\n    s += prefix +'success:'+ str(self.success) + '\\n'\n    s += prefix + 'errors:'+ str(self.errors) + '\\n'\n    return s", "def status_str(self, prefix=''):\n    return ''.join([prefix, '\\n', '# ', self.log, '\\n'])", "def status_str(self, prefix=''):\n    return '{} {} {}'.format(prefix, self.status, self.message)\n", "def status_str(self, prefix=''):\n    return self.log_str(prefix)", "def status_str(self, prefix=''):\n    status_str = ''\n    for i, line in enumerate(self.log):\n        if i > 0 and prefix:\n            status_str +=''\n        status_str += self._status_str(line)\n    return status_str", "def status_str(self, prefix=''):\n    s = \"%s: %s\" % (prefix,self._status_str())\n    return s"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    return self.log.status_str(prefix)", "is_pass": true, "return_code": 0}, {"generate_code": "def status_str(self, prefix=''):\n    return \"\\n\".join([prefix+l.as_str() for l in self.log])", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.valid:\n        return \"\\n\".join([ prefix+\" \"+str(i) for i in self.status ])\n    else:\n        return \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    self.log.status_str(prefix)\n    return ''", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    s += prefix +'status:'+ self.status + '\\n'\n    s += prefix +'success:'+ str(self.success) + '\\n'\n    s += prefix + 'errors:'+ str(self.errors) + '\\n'\n    return s", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ''.join([prefix, '\\n', '# ', self.log, '\\n'])", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{} {} {}'.format(prefix, self.status, self.message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return self.log_str(prefix)", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    for i, line in enumerate(self.log):\n        if i > 0 and prefix:\n            status_str +=''\n        status_str += self._status_str(line)\n    return status_str", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = \"%s: %s\" % (prefix,self._status_str())\n    return s", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True\n\n# ---------------------------------------------------------------------------", "def is_valid(self, identifier):\n\nreturn True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True\n", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True\n\n# ---------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\n\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):", "def validate(self, inventory, extract_spec_version=False):"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file.manifest_file not in digests_used:\n            self.error(self,''.join([manifest_file.manifest_file, manifest_file.digest]))\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            raise self.error('Digest %s not present in manifest.' % digest)", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest in digests_used:\n        manifest = open(manifest_files[digest], 'r').read()\n        if digest in manifest:\n            return True\n    return False\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest in manifest_files:\n            return True\n    return False", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        if not manifest.check_digests_present_and_used(digests_used):\n            raise self.error(self, \"Manifest file contains unexpected digests: {}\".format(manifest.filename))", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if digest in manifest_file:\n                self.error(self, digest)\n                break", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    # TODO: This should be updated to not use any more pre-generated manifest files.\n    for manifest_file in manifest_files:\n        if not manifest_file.exists():\n            return False\n        digests = self.manifest_digests_from_file(manifest_file)\n        if digests!= digests_used:\n            return False\n    return True", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if not digests_used[file]:\n            return False\n    return True", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = self.get_manifest(manifest_file)\n        for digest in manifest.digests:\n            if digest.digest_type in digests_used:\n                continue\n            self.error(self, digest.digest_type)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if not digests_used.has_key(manifest_file):\n            self.error(self, 'no digest found in manifest file {0}'.format(manifest_file))\n            return False\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file.manifest_file not in digests_used:\n            self.error(self,''.join([manifest_file.manifest_file, manifest_file.digest]))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            raise self.error('Digest %s not present in manifest.' % digest)", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest in digests_used:\n        manifest = open(manifest_files[digest], 'r').read()\n        if digest in manifest:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest in manifest_files:\n            return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        if not manifest.check_digests_present_and_used(digests_used):\n            raise self.error(self, \"Manifest file contains unexpected digests: {}\".format(manifest.filename))", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if digest in manifest_file:\n                self.error(self, digest)\n                break", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    # TODO: This should be updated to not use any more pre-generated manifest files.\n    for manifest_file in manifest_files:\n        if not manifest_file.exists():\n            return False\n        digests = self.manifest_digests_from_file(manifest_file)\n        if digests!= digests_used:\n            return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if not digests_used[file]:\n            return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = self.get_manifest(manifest_file)\n        for digest in manifest.digests:\n            if digest.digest_type in digests_used:\n                continue\n            self.error(self, digest.digest_type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if not digests_used.has_key(manifest_file):\n            self.error(self, 'no digest found in manifest file {0}'.format(manifest_file))\n            return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    return True", "def validate_as_prior_version(self, prior):\n    pass", "def validate_as_prior_version(self, prior):\npass", "def validate_as_prior_version(self, prior):\npass", "def validate_as_prior_version(self, prior):\npass", "def validate_as_prior_version(self, prior):\n    pass", "def validate_as_prior_version(self, prior):\n    self.where = prior.where\n    self.warning(self, \"Version check failed for inventory %s\" % prior.id)\n    self.error(self, \"Version check failed for inventory %s\" % prior.id)\n    self.inventory = prior.inventory\n    self.compare_states_for_version(self,prior,prior)\n", "def validate_as_prior_version(self, prior):\n    pass", "def validate_as_prior_version(self, prior):\n    pass", "def validate_as_prior_version(self, prior):\npass"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.where = prior.where\n    self.warning(self, \"Version check failed for inventory %s\" % prior.id)\n    self.error(self, \"Version check failed for inventory %s\" % prior.id)\n    self.inventory = prior.inventory\n    self.compare_states_for_version(self,prior,prior)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    return {\n        get_logical_path(inventory, content_file): content_file\n        for content_file in inventory.get_content_files_for_version(version)\n    }", "def get_logical_path_map(inventory, version):\n    return get_state_map(inventory, version, 'logical_path')", "def get_logical_path_map(inventory, version):\n    return {\n        path: set(files)\n        for path, files in inventory.items()\n        if version in files\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "def get_logical_path_map(inventory, version):\n    return {\n        get_logical_path(inventory, version, path): content_files\n        for path, content_files in get_content_files_map(inventory).items()\n    }\n", "def get_logical_path_map(inventory, version):\n    return dict((get_logical_path(inventory, s), set(content_files))\n                for s, content_files in inventory.items()\n                if version in content_files)", "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_logical_paths(version)\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_map(inventory, version, 'logical_path')\n", "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, 'logical_path')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        get_logical_path(inventory, content_file): content_file\n        for content_file in inventory.get_content_files_for_version(version)\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return get_state_map(inventory, version, 'logical_path')", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: set(files)\n        for path, files in inventory.items()\n        if version in files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        get_logical_path(inventory, version, path): content_files\n        for path, content_files in get_content_files_map(inventory).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return dict((get_logical_path(inventory, s), set(content_files))\n                for s, content_files in inventory.items()\n                if version in content_files)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_logical_paths(version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_map(inventory, version, 'logical_path')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, 'logical_path')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    self.spec_version = fixity['spec_version']\n    self.error(self, 'invalid_fixity')\n    self.error(self, 'invalid_fixity_version')\n    self.error(self, 'invalid_fixity_file')\n    self.error(self, 'invalid_fixity_file_type')\n    self.error(self, 'invalid_fixity_file_name')\n    self.error(self, 'invalid_fixity_file_size')\n    self.error(self, 'invalid_fixity_file_hash')\n\n", "def validate_fixity(self, fixity, manifest_files):\n    self.error(self, 'Invalid fixity block')\n    self.error(self,'   Invalid digest: %s' % fixity.get('digest'))\n    self.error(self,'   Invalid manifest: %s' % fixity.get('manifest'))\n    self.error(self,'   Invalid manifest: %s' % manifest_files)", "def validate_fixity(self, fixity, manifest_files):\n    self.error(self, \"fixity block is not a valid fixity block\")", "def validate_fixity(self, fixity, manifest_files):\n    for file in manifest_files:\n        if file in fixity:\n            return\n    raise FixityError('No files listed in the manifest are references to the fixity block in the inventory')", "def validate_fixity(self, fixity, manifest_files):\n\n\n    pass\n\n\n", "def validate_fixity(self, fixity, manifest_files):\n    self.lax_digests = []\n    self.spec_version = None\n    self.error(self, 'Invalid fixity block')\n    return None", "def validate_fixity(self, fixity, manifest_files):\n\n    self.error(self, \"Fixity not yet implemented\")\n    return False", "def validate_fixity(self, fixity, manifest_files):\n\n    for f in manifest_files:\n        if f in fixity:\n            self.error(self, \"Invalid fixity block in manifest: {}\".format(f))\n            return False\n    return True", "def validate_fixity(self, fixity, manifest_files):\n    return (\n        self.spec_version < self.get_version(fixity)\n        and manifest_files < self.get_manifest_files(fixity)\n    )", "def validate_fixity(self, fixity, manifest_files):\n\n    self.logger.debug(\"validating fixity file\")\n    self.logger.debug(\"fixity: %s\", fixity)\n\n    if not isinstance(fixity, str):\n        self.error(self, 'fixity must be a string')\n\n    if not manifest_files or len(manifest_files) == 0:\n        self.error(self, 'no files to validate')\n\n    return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.spec_version = fixity['spec_version']\n    self.error(self, 'invalid_fixity')\n    self.error(self, 'invalid_fixity_version')\n    self.error(self, 'invalid_fixity_file')\n    self.error(self, 'invalid_fixity_file_type')\n    self.error(self, 'invalid_fixity_file_name')\n    self.error(self, 'invalid_fixity_file_size')\n    self.error(self, 'invalid_fixity_file_hash')\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.error(self, 'Invalid fixity block')\n    self.error(self,'   Invalid digest: %s' % fixity.get('digest'))\n    self.error(self,'   Invalid manifest: %s' % fixity.get('manifest'))\n    self.error(self,'   Invalid manifest: %s' % manifest_files)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.error(self, \"fixity block is not a valid fixity block\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file in manifest_files:\n        if file in fixity:\n            return\n    raise FixityError('No files listed in the manifest are references to the fixity block in the inventory')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n\n    pass\n\n\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.lax_digests = []\n    self.spec_version = None\n    self.error(self, 'Invalid fixity block')\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    self.error(self, \"Fixity not yet implemented\")\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    for f in manifest_files:\n        if f in fixity:\n            self.error(self, \"Invalid fixity block in manifest: {}\".format(f))\n            return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    return (\n        self.spec_version < self.get_version(fixity)\n        and manifest_files < self.get_manifest_files(fixity)\n    )", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    self.logger.debug(\"validating fixity file\")\n    self.logger.debug(\"fixity: %s\", fixity)\n\n    if not isinstance(fixity, str):\n        self.error(self, 'fixity must be a string')\n\n    if not manifest_files or len(manifest_files) == 0:\n        self.error(self, 'no files to validate')\n\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    return [f for f in os.listdir(path) if f.endswith('.py')]", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [os.path.join(path, filename) for filename in os.listdir(path)]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]", "def files_list(path):\n    files = []\n    for f in os.listdir(path):\n        if os.path.isdir(os.path.join(path, f)):\n            files.extend(files_list(os.path.join(path, f)))\n        else:\n            files.append(os.path.join(path, f))\n    return files", "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if f.endswith('.py')]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, filename) for filename in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    files = []\n    for f in os.listdir(path):\n        if os.path.isdir(os.path.join(path, f)):\n            files.extend(files_list(os.path.join(path, f)))\n        else:\n            files.append(os.path.join(path, f))\n    return files", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    for xml_filename in xmls:\n        yield _eval_file(source, xml_filename, files)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml_filename for xml_filename in xmls if xml_filename.endswith('.xml')]\n    files = [filename for filename in files if filename.endswith('.xml')]\n\n    return _group_files_by_xml_filename_and_basename(source, xml_filenames, files)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for f in files:\n        fname = os.path.basename(f)\n        data[fname] = _eval_file(source, f)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        results[xml] = _group_files_by_xml_filename_helper(source, xml, files)\n    return results\n", "def _group_files_by_xml_filename(source, xmls, files):\n    for xml in xmls:\n        yield _group_files_by_xml_filename_xml(source, xml, files)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_ in files:\n        filename = os.path.basename(file_)\n        data[filename] = _eval_file(source, xmls, file_)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n\n    return {file: os.path.basename(os.path.join(source,file)) for file in files}", "def _group_files_by_xml_filename(source, xmls, files):\n    # import os\n    import xml.etree.ElementTree as ET\n\n    filenames = [f for f in files if f.endswith(\".xml\")]\n    xml_filenames = [f for f in xmls if f.endswith(\".xml\")]\n\n    return _group_files_by_xml_filenames_by_prefix(source, xml_filenames, filenames)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_basename = os.path.splitext(os.path.basename(xml_file))[0]\n        data[xml_basename] = _eval_file(source, xml_file)\n    return data", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_impl(source, xml, files)\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    for xml_filename in xmls:\n        yield _eval_file(source, xml_filename, files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml_filename for xml_filename in xmls if xml_filename.endswith('.xml')]\n    files = [filename for filename in files if filename.endswith('.xml')]\n\n    return _group_files_by_xml_filename_and_basename(source, xml_filenames, files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for f in files:\n        fname = os.path.basename(f)\n        data[fname] = _eval_file(source, f)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        results[xml] = _group_files_by_xml_filename_helper(source, xml, files)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    for xml in xmls:\n        yield _group_files_by_xml_filename_xml(source, xml, files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_ in files:\n        filename = os.path.basename(file_)\n        data[filename] = _eval_file(source, xmls, file_)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n\n    return {file: os.path.basename(os.path.join(source,file)) for file in files}", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    # import os\n    import xml.etree.ElementTree as ET\n\n    filenames = [f for f in files if f.endswith(\".xml\")]\n    xml_filenames = [f for f in xmls if f.endswith(\".xml\")]\n\n    return _group_files_by_xml_filenames_by_prefix(source, xml_filenames, filenames)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_basename = os.path.splitext(os.path.basename(xml_file))[0]\n        data[xml_basename] = _eval_file(source, xml_file)\n    return data", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_impl(source, xml, files)\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n\n    if not file_path.endswith('.py'):\n        return False\n\n    return True", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    filename, file_extension = os.path.splitext(file_path)\n    if file_extension in [\".md\", \".markdown\"]:\n        return True\n    if prefix == filename and file_extension in [\".md\", \".markdown\"]:\n        return True\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)", "def match_file_by_prefix(prefix, file_path):\n    if not os.path.isfile(file_path):\n        return False\n\n    if file_path.startswith(prefix):\n        return True\n\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return match_file_by_name(prefix, os.path.splitext(file_path)[0])\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n\n    if not file_path.endswith('.py'):\n        return False\n\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    filename, file_extension = os.path.splitext(file_path)\n    if file_extension in [\".md\", \".markdown\"]:\n        return True\n    if prefix == filename and file_extension in [\".md\", \".markdown\"]:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not os.path.isfile(file_path):\n        return False\n\n    if file_path.startswith(prefix):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return match_file_by_name(prefix, os.path.splitext(file_path)[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if os.path.basename(f).startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = []\n    for f in files:\n        if f.startswith(prefix):\n            files_by_prefix.append(f)\n\n    return files_by_prefix\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(file) for file in files if file.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(f) for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    file_paths = []\n    for f in files:\n        if f.startswith(prefix):\n            file_paths.append(f)\n    return file_paths\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if os.path.basename(f).startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = []\n    for f in files:\n        if f.startswith(prefix):\n            files_by_prefix.append(f)\n\n    return files_by_prefix\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(file) for file in files if file.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(f) for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    file_paths = []\n    for f in files:\n        if f.startswith(prefix):\n            file_paths.append(f)\n    return file_paths\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    xmls = _get_xml_files(folder)\n    files = _get_files(folder)\n    return _group_files_by_xml_filename(folder,xmls,files)", "def _explore_folder(folder):\n    packs = _explore_folder_packs(folder)\n    packs = _explore_folder_packs_files(folder,packs)\n    packs = _explore_folder_packs_files_xml(folder,packs)\n    return packs", "def _explore_folder(folder):\n    files = [f for f in os.listdir(folder) if f.endswith('.xml')]\n    data = {}\n    for f in files:\n        fpath = os.path.join(folder, f)\n        data[f] = _explore_file(fpath)\n    return data\n", "def _explore_folder(folder):\n\n    data = {}\n    for file in os.listdir(folder):\n        if file.startswith('.'):\n            continue\n\n        filepath = os.path.join(folder, file)\n        with open(filepath, 'r') as f:\n            data[file] = _explore_file(filepath, f)\n\n    return data\n", "def _explore_folder(folder):\n    _, files = _group_files_by_xml_filename(folder, [])\n    return _explore_files(files)\n", "def _explore_folder(folder):\n    return {\n        filename: packtools.packtools._group_files_by_xml_filename(\n            filename, xmls, folder\n        )\n        for filename, xmls in packtools.packtools._explore_folder(folder)\n    }\n", "def _explore_folder(folder):\n    files = []\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            files.append(file)\n    files.sort()\n    files = [os.path.join(folder,f) for f in files]\n    data = dict()\n    for f in files:\n        data[os.path.basename(f)] = _explore_file(f)\n    return data", "def _explore_folder(folder):\n    packs = {}\n    for xml_filename in os.listdir(folder):\n        if xml_filename.endswith('.xml'):\n            xml_file = folder + os.sep + xml_filename\n            packs[xml_filename] = _explore_file(xml_file)\n    return packs", "def _explore_folder(folder):\n    # Get package data from folder and return it in dict\n    data = _group_files_by_xml_filename(folder, __package_files_xml_filenames())\n    return data\n", "def _explore_folder(folder):\n    groups = {}\n    for filename in os.listdir(folder):\n        if os.path.isfile(os.path.join(folder,filename)):\n            with open(os.path.join(folder,filename), 'r') as f:\n                data = parse_packtools_xml(f.read())\n                groups.update(data)\n    return groups"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    xmls = _get_xml_files(folder)\n    files = _get_files(folder)\n    return _group_files_by_xml_filename(folder,xmls,files)", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packs = _explore_folder_packs(folder)\n    packs = _explore_folder_packs_files(folder,packs)\n    packs = _explore_folder_packs_files_xml(folder,packs)\n    return packs", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = [f for f in os.listdir(folder) if f.endswith('.xml')]\n    data = {}\n    for f in files:\n        fpath = os.path.join(folder, f)\n        data[f] = _explore_file(fpath)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n\n    data = {}\n    for file in os.listdir(folder):\n        if file.startswith('.'):\n            continue\n\n        filepath = os.path.join(folder, file)\n        with open(filepath, 'r') as f:\n            data[file] = _explore_file(filepath, f)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    _, files = _group_files_by_xml_filename(folder, [])\n    return _explore_files(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return {\n        filename: packtools.packtools._group_files_by_xml_filename(\n            filename, xmls, folder\n        )\n        for filename, xmls in packtools.packtools._explore_folder(folder)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = []\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            files.append(file)\n    files.sort()\n    files = [os.path.join(folder,f) for f in files]\n    data = dict()\n    for f in files:\n        data[os.path.basename(f)] = _explore_file(f)\n    return data", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packs = {}\n    for xml_filename in os.listdir(folder):\n        if xml_filename.endswith('.xml'):\n            xml_file = folder + os.sep + xml_filename\n            packs[xml_filename] = _explore_file(xml_file)\n    return packs", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    # Get package data from folder and return it in dict\n    data = _group_files_by_xml_filename(folder, __package_files_xml_filenames())\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    groups = {}\n    for filename in os.listdir(folder):\n        if os.path.isfile(os.path.join(folder,filename)):\n            with open(os.path.join(folder,filename), 'r') as f:\n                data = parse_packtools_xml(f.read())\n                groups.update(data)\n    return groups", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    # para saber se o nome da arquivo est\u00e1 de um nome com o nome do arquivo com o nome do prefix\n    file_name = os.path.basename(file_path)\n    file_name = os.path.splitext(file_name)[0]\n\n    return {\n        'packages': [file_name],\n        'file': file_path\n    }", "def _eval_file(prefix, file_path):\n\n    m = re.match('.*/(.*)\\.(.*)$', file_path)\n    if m:\n        packages = [m.group(2), m.group(1)]\n        return {'packages': packages}\n    return {}\n", "def _eval_file(prefix, file_path):\n    return __eval_file(prefix, file_path, 'asset','rendition')\n", "def _eval_file(prefix, file_path):\n\n    package = _get_package_from_file(file_path)\n    package_type = _get_package_type(file_path)\n\n    if package_type == 'asset':\n        return _eval_asset(prefix, file_path)\n    elif package_type =='rendition':\n        return _eval_rendition(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    file_name, file_ext = os.path.splitext(file_name)\n\n    if file_ext == '.js':\n        packages = _eval_js(prefix, file_path)\n    elif file_ext == '.css':\n        packages = _eval_css(prefix, file_path)\n\n    return packages\n", "def _eval_file(prefix, file_path):\n    _, ext = os.path.splitext(file_path)\n    return {\n        'packages': _eval_packages(prefix, file_path),\n        'filename': ext[1:],\n        'file_path': file_path,\n        'prefix': prefix\n    }\n", "def _eval_file(prefix, file_path):\n    return eval_file(file_path, prefix)\n", "def _eval_file(prefix, file_path):\n\n    with open(file_path, 'r') as f:\n        package = f.read()\n        return _eval_file_by_prefix(prefix, package)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = os.path.splitext(filename)[0]\n    package = filename[:-len('.py')]\n    package = '.'.join(package.split('.')[:-1])\n    package = '.'.join(package.split('.')[:-1])\n    return {'package': package, 'filename': filename, 'file_path': file_path}", "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        packages = _eval_packages(file_path)\n        return {\"packages\": packages}\n    else:\n        return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    # para saber se o nome da arquivo est\u00e1 de um nome com o nome do arquivo com o nome do prefix\n    file_name = os.path.basename(file_path)\n    file_name = os.path.splitext(file_name)[0]\n\n    return {\n        'packages': [file_name],\n        'file': file_path\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    m = re.match('.*/(.*)\\.(.*)$', file_path)\n    if m:\n        packages = [m.group(2), m.group(1)]\n        return {'packages': packages}\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return __eval_file(prefix, file_path, 'asset','rendition')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    package = _get_package_from_file(file_path)\n    package_type = _get_package_type(file_path)\n\n    if package_type == 'asset':\n        return _eval_asset(prefix, file_path)\n    elif package_type =='rendition':\n        return _eval_rendition(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    file_name, file_ext = os.path.splitext(file_name)\n\n    if file_ext == '.js':\n        packages = _eval_js(prefix, file_path)\n    elif file_ext == '.css':\n        packages = _eval_css(prefix, file_path)\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    _, ext = os.path.splitext(file_path)\n    return {\n        'packages': _eval_packages(prefix, file_path),\n        'filename': ext[1:],\n        'file_path': file_path,\n        'prefix': prefix\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return eval_file(file_path, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    with open(file_path, 'r') as f:\n        package = f.read()\n        return _eval_file_by_prefix(prefix, package)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = os.path.splitext(filename)[0]\n    package = filename[:-len('.py')]\n    package = '.'.join(package.split('.')[:-1])\n    package = '.'.join(package.split('.')[:-1])\n    return {'package': package, 'filename': filename, 'file_path': file_path}", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        packages = _eval_packages(file_path)\n        return {\"packages\": packages}\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n    return self", "def add_rendition(self, lang, file_path):\n    file_path = self.file_path(file_path)\n    rendition = {\"original\": file_path, \"en\": file_path}\n    self._renditions[lang] = rendition\n", "def add_rendition(self, lang, file_path):\n    if not lang:\n        return\n    if not file_path:\n        return\n\n    filename = self.file_path(file_path)\n    if not filename:\n        return\n\n    renditions = self._get_renditions(file_path)\n    if not renditions:\n        return\n\n    if not lang in renditions:\n        renditions[lang] = {}\n\n    renditions[lang][filename] = file_path\n    self._save_renditions(renditions)\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n    return self\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n\n    if file_path not in self._renditions[lang]:\n        self._renditions[lang][file_path] = \"\"\n\n    return self", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split('/')[-1]] = {}\n", "def add_rendition(self, lang, file_path):\n    return self._add_renditions(lang, [file_path])", "def add_rendition(self, lang, file_path):\n    self.renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    if not lang in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = \"\""], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    file_path = self.file_path(file_path)\n    rendition = {\"original\": file_path, \"en\": file_path}\n    self._renditions[lang] = rendition\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if not lang:\n        return\n    if not file_path:\n        return\n\n    filename = self.file_path(file_path)\n    if not filename:\n        return\n\n    renditions = self._get_renditions(file_path)\n    if not renditions:\n        return\n\n    if not lang in renditions:\n        renditions[lang] = {}\n\n    renditions[lang][filename] = file_path\n    self._save_renditions(renditions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n\n    if file_path not in self._renditions[lang]:\n        self._renditions[lang][file_path] = \"\"\n\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split('/')[-1]] = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    return self._add_renditions(lang, [file_path])", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self.renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if not lang in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = \"\"", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n\n    file_path = self.file_path(file_path)\n    asset_name = basename\n    asset_path = file_path\n    asset_file = open(asset_path, 'w')\n    asset_file.write(asset_name)\n    asset_file.close()\n    return asset_path\n", "def add_asset(self, basename, file_path):\n    asset_file = self.file_path(file_path)\n    self._assets[basename] = asset_file", "def add_asset(self, basename, file_path):\n    # return self._assets.setdefault(basename, file_path)\n    return self._assets.setdefault(basename, file_path)", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    if not basename:\n        raise ValueError(\"Basename cannot be empty.\")\n    if not file_path:\n        raise ValueError(\"File_path cannot be empty.\")\n    file_path = file_path.replace(\"\\\\\", \"/\")\n    if not file_path.endswith(\".tiff\"):\n        file_path += \".tiff\"\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n\n    ", "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = file_path\n        return True\n    else:\n        return False", "def add_asset(self, basename, file_path):\n    basename = os.path.basename(basename)\n    self._assets[basename] = file_path"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n\n    file_path = self.file_path(file_path)\n    asset_name = basename\n    asset_path = file_path\n    asset_file = open(asset_path, 'w')\n    asset_file.write(asset_name)\n    asset_file.close()\n    return asset_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_file = self.file_path(file_path)\n    self._assets[basename] = asset_file", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    # return self._assets.setdefault(basename, file_path)\n    return self._assets.setdefault(basename, file_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    if not basename:\n        raise ValueError(\"Basename cannot be empty.\")\n    if not file_path:\n        raise ValueError(\"File_path cannot be empty.\")\n    file_path = file_path.replace(\"\\\\\", \"/\")\n    if not file_path.endswith(\".tiff\"):\n        file_path += \".tiff\"\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n\n    ", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = file_path\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    basename = os.path.basename(basename)\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    return dict([(file.basename, file.read()) for file in _get_zipfile_object(zip_path)])\n", "def _explore_zipfile(zip_path):\n    # Get data from zip file\n    with zipfile.ZipFile(zip_path) as zip:\n        xmls = zip.namelist()\n\n    # Get data from xmls file\n    data = {}\n    for xml in xmls:\n        data[xml] = _explore_xml(zip, xml)\n\n    return data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip:\n        files = {}\n        for name in zip.namelist():\n            if name.endswith('.xml'):\n                files[name[:-4]] = zip.read(name)\n        return files\n", "def _explore_zipfile(zip_path):\n    # type: (str) -> Dict\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('.')\n\n    return _read_package_files(zip_path)\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        xml_files = zip_file.namelist()\n        files = [_explore_file(f) for f in xml_files]\n        return {filename: _get_data(zip_path, filename) for filename in files}", "def _explore_zipfile(zip_path):\n    file_names = _get_file_names(zip_path)\n    data = {}\n    for name in file_names:\n        data[name] = _explore_file(zip_path, name)\n    return data\n", "def _explore_zipfile(zip_path):\n    with ZipFile(zip_path, 'r') as zf:\n        files = _group_files_by_xml_filename(zf.namelist(), zf.filelist)\n        return _explore_zip(zf, files)", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = zf.namelist()\n        files = {}\n        for xml in xmls:\n            with zf.open(xml) as f:\n                files[xml] = f.read()\n    return files\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, \"r\") as zip_file:\n        files = [filename for filename in zip_file.namelist() if filename.endswith(\".xml\")]\n        return _group_files_by_xml_filename(zip_path,files)\n\n\n#%% Functions - _explore_zipfile", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        data = {}\n        for xml_filename in zip_ref.namelist():\n            xml_basename = os.path.basename(xml_filename)\n            data[xml_basename] = _explore_file(zip_ref, xml_filename)\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    return dict([(file.basename, file.read()) for file in _get_zipfile_object(zip_path)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # Get data from zip file\n    with zipfile.ZipFile(zip_path) as zip:\n        xmls = zip.namelist()\n\n    # Get data from xmls file\n    data = {}\n    for xml in xmls:\n        data[xml] = _explore_xml(zip, xml)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip:\n        files = {}\n        for name in zip.namelist():\n            if name.endswith('.xml'):\n                files[name[:-4]] = zip.read(name)\n        return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # type: (str) -> Dict\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('.')\n\n    return _read_package_files(zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        xml_files = zip_file.namelist()\n        files = [_explore_file(f) for f in xml_files]\n        return {filename: _get_data(zip_path, filename) for filename in files}", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    file_names = _get_file_names(zip_path)\n    data = {}\n    for name in file_names:\n        data[name] = _explore_file(zip_path, name)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with ZipFile(zip_path, 'r') as zf:\n        files = _group_files_by_xml_filename(zf.namelist(), zf.filelist)\n        return _explore_zip(zf, files)", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = zf.namelist()\n        files = {}\n        for xml in xmls:\n            with zf.open(xml) as f:\n                files[xml] = f.read()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, \"r\") as zip_file:\n        files = [filename for filename in zip_file.namelist() if filename.endswith(\".xml\")]\n        return _group_files_by_xml_filename(zip_path,files)\n\n\n#%% Functions - _explore_zipfile", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        data = {}\n        for xml_filename in zip_ref.namelist():\n            xml_basename = os.path.basename(xml_filename)\n            data[xml_basename] = _explore_file(zip_ref, xml_filename)\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    return [x for x in files_list(zip_path)]\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in sorted(os.listdir(zip_path)) if is_file_in_zip(zip_path, f)]\n", "def files_list_from_zipfile(zip_path):\n    return files_list_from_zipfile_iter(zip_path)\n", "def files_list_from_zipfile(zip_path):\n    return files_list(zip_path)", "def files_list_from_zipfile(zip_path):\n    return files_list_from_zip(zip_path)\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.tif')]", "def files_list_from_zipfile(zip_path):\n    return [file for file in os.listdir(zip_path) if file.endswith('.tif')]\n", "def files_list_from_zipfile(zip_path):\n    files_list = [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n    return files_list", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        return list(zip_file.namelist())\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    return [x for x in files_list(zip_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in sorted(os.listdir(zip_path)) if is_file_in_zip(zip_path, f)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return files_list_from_zipfile_iter(zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return files_list(zip_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return files_list_from_zip(zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.tif')]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [file for file in os.listdir(zip_path) if file.endswith('.tif')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    files_list = [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n    return files_list", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        return list(zip_file.namelist())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*<w:st=\"[^\"]+\">\\s*', 'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r':st=\"(.*)\"', r'w:st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'<w:st=\"(.*?)\">', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:([^=]+)=([^=]+)\\s*\\/\\s*', r'w-st=\"\\1\"\\2', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s+w:st=\".*\"', r'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s+w:st=\"(.*)\"', r'\\1-w-st=\"%s\"' % config.ST_NAMESPACE, content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?<=w:)(?P<st>[\\w:]+)(?=:)', r'\\1-w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\w+)=\"', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    \n    \n    # TODO: Do some cleanup\n    return content.replace(' w:st=\"','w-st=\"')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*<w:st=\"[^\"]+\">\\s*', 'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r':st=\"(.*)\"', r'w:st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'<w:st=\"(.*?)\">', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:([^=]+)=([^=]+)\\s*\\/\\s*', r'w-st=\"\\1\"\\2', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s+w:st=\".*\"', r'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s+w:st=\"(.*)\"', r'\\1-w-st=\"%s\"' % config.ST_NAMESPACE, content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?<=w:)(?P<st>[\\w:]+)(?=:)', r'\\1-w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\w+)=\"', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    # TODO: Do some cleanup\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0]).extract_first()", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.find(pubdate_xpath)\n        if pubdate is not None:\n            return pubdate\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0].text", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_el = node.xpath(pubdate_xpath)\n        if pubdate_el:\n            return pubdate_el[0].text\n    return None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0]).extract_first()", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.find(pubdate_xpath)\n        if pubdate is not None:\n            return pubdate\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0].text", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_el = node.xpath(pubdate_xpath)\n        if pubdate_el:\n            return pubdate_el[0].text\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number_values = []\n    suppl_values = []\n    for n in issue.getchildren():\n        if n.tag == 'number':\n            number_values.append(n.text)\n        elif n.tag =='suppl':\n            suppl_values.append(n.text)\n    return number_values, suppl_values\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return issue.find('.//number').text, issue.find('.//suppl').text\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text,\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.number, issue.suppl)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number')\n    if number is not None:\n        return int(number.text), issue.find('.//suppl').text\n    else:\n        return None, None\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number_and_suppl = []\n    for elem in issue.iter(\"number\"):\n        number = elem.text\n        suppl = elem.text.strip()\n        number_and_suppl.append((number, suppl))\n\n    return number_and_suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = _extract_number_from_issue_element(issue)\n    suppl = _extract_suppl_from_issue_element(issue)\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number')\n    suppl = issue.find('suppl')\n    if number is not None and suppl is not None:\n        number = number.text\n        suppl = suppl.text\n    return number, suppl\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number_values = []\n    suppl_values = []\n    for n in issue.getchildren():\n        if n.tag == 'number':\n            number_values.append(n.text)\n        elif n.tag =='suppl':\n            suppl_values.append(n.text)\n    return number_values, suppl_values\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return issue.find('.//number').text, issue.find('.//suppl').text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.number, issue.suppl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number')\n    if number is not None:\n        return int(number.text), issue.find('.//suppl').text\n    else:\n        return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number_and_suppl = []\n    for elem in issue.iter(\"number\"):\n        number = elem.text\n        suppl = elem.text.strip()\n        number_and_suppl.append((number, suppl))\n\n    return number_and_suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = _extract_number_from_issue_element(issue)\n    suppl = _extract_suppl_from_issue_element(issue)\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number')\n    suppl = issue.find('suppl')\n    if number is not None and suppl is not None:\n        number = number.text\n        suppl = suppl.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    return ''.join((self.__class__.__name__, '(', str(indent), ')'))\n", "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\t' * indent + repr(self))\n    if self.iscanonical():\n        return self.name\n    else:\n        return ''", "def pretty(self, indent=0, debug=False):\n    return _pretty_repr(self, indent, debug)", "def pretty(self, indent=0, debug=False):\n    return (\" \" * indent) + \"%s (%s):\" % (self.__class__.__name__, self.name)\n", "def pretty(self, indent=0, debug=False):\n    if debug:\n        print(\" \" * indent + str(self))\n    for i in self.children:\n        i.pretty(indent + 1, debug)\n    return \"\"", "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('{}{}'.format(''* indent, self))\n    for child in self.children:\n        child.pretty(indent+1, debug)\n", "def pretty(self, indent=0, debug=False):\n    return self.__str__(indent=indent, debug=debug)", "def pretty(self, indent=0, debug=False):\n    out = \"\"\n    for i in range(indent):\n        out += \"  \"\n    out += self.name\n    out += \"(\"\n    for i in range(indent + 1):\n        out += \" \" + str(self.children[i])\n        if i < indent + 1:\n            out += \", \"\n    out += \")\"\n    if debug:\n        print(out)\n    return out\n\n# ------------------------------------------------------------------------------", "def pretty(self, indent=0, debug=False):\n    return '%s%s%s\\n' % (' '* indent, self.__class__.__name__, str(self))\n", "def pretty(self, indent=0, debug=False):\n    return \"\\n\".join([\"{}{}\".format(\" \" * indent, x) for x in self])"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    return ''.join((self.__class__.__name__, '(', str(indent), ')'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\t' * indent + repr(self))\n    if self.iscanonical():\n        return self.name\n    else:\n        return ''", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return _pretty_repr(self, indent, debug)", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return (\" \" * indent) + \"%s (%s):\" % (self.__class__.__name__, self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        print(\" \" * indent + str(self))\n    for i in self.children:\n        i.pretty(indent + 1, debug)\n    return \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('{}{}'.format(''* indent, self))\n    for child in self.children:\n        child.pretty(indent+1, debug)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return self.__str__(indent=indent, debug=debug)", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    out = \"\"\n    for i in range(indent):\n        out += \"  \"\n    out += self.name\n    out += \"(\"\n    for i in range(indent + 1):\n        out += \" \" + str(self.children[i])\n        if i < indent + 1:\n            out += \", \"\n    out += \")\"\n    if debug:\n        print(out)\n    return out\n\n# ------------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return '%s%s%s\\n' % (' '* indent, self.__class__.__name__, str(self))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return \"\\n\".join([\"{}{}\".format(\" \" * indent, x) for x in self])", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    new_args = []\n    for arg in args:\n        if arg is not None:\n            new_args.append(self.absorb_term(arg))\n        else:\n            new_args.append(None)\n    return new_args\n", "def absorb(self, args):\n    absorptions = []\n    negatives = []\n    for arg in args:\n        absorptions.append(self.absorption(arg))\n        negatives.append(~self.absorption(arg))\n    return absorptions + negatives", "def absorb(self, args):\n    return [self.absorb_arg(arg) for arg in args]\n", "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]", "def absorb(self, args):\n    return [arg | (~arg) for arg in args]", "def absorb(self, args):\n\n    return [self.absorption(arg) for arg in args]", "def absorb(self, args):\n    return [self.dual] + [absorb(arg) for arg in args]\n", "def absorb(self, args):\n    absorptions = []\n    negatives = []\n\n    for arg in args:\n        absorptions.append(arg.absorb(self))\n\n    for arg in args:\n        if arg.negated:\n            negatives.append(arg)\n        else:\n            absorptions.append(arg)\n\n    return absorptions + negatives\n", "def absorb(self, args):\n    return [self.apply_absorption(arg) for arg in args]"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    new_args = []\n    for arg in args:\n        if arg is not None:\n            new_args.append(self.absorb_term(arg))\n        else:\n            new_args.append(None)\n    return new_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    absorptions = []\n    negatives = []\n    for arg in args:\n        absorptions.append(self.absorption(arg))\n        negatives.append(~self.absorption(arg))\n    return absorptions + negatives", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_arg(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | (~arg) for arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n\n    return [self.absorption(arg) for arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.dual] + [absorb(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    absorptions = []\n    negatives = []\n\n    for arg in args:\n        absorptions.append(arg.absorb(self))\n\n    for arg in args:\n        if arg.negated:\n            negatives.append(arg)\n        else:\n            absorptions.append(arg)\n\n    return absorptions + negatives\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.apply_absorption(arg) for arg in args]", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    def _register(func):\n        self.registry[hook] = func\n        return func\n    return _register\n", "def on(self, hook):\n    def wrapper(func):\n        self.registry.add_listener(hook, func)\n        return func\n    return wrapper\n", "def on(self, hook):\n    def decorator(f):\n        self.add_handler(hook, f)\n        return f\n    return decorator\n", "def on(self, hook):\n    def decorator(function):\n        self.registry[hook] = function\n        return function\n    return decorator", "def on(self, hook):\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n    return wrapper\n", "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook] = func\n        return func\n\n    return wrapper\n", "def on(self, hook):\n\n    def decorator(func):\n        self.registry.on(hook, func)\n        return func\n\n    return decorator", "def on(self, hook):\n    def decorator(handler):\n        self.registry[hook] = handler\n        return handler\n    return decorator\n", "def on(self, hook):\n\n    def wrapper(f):\n        self.registry.on(hook, f)\n        return f\n\n    return wrapper\n", "def on(self, hook):\n    def decorator(func):\n        self.registry.register_listener(hook, func)\n        return func\n    return decorator"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    def _register(func):\n        self.registry[hook] = func\n        return func\n    return _register\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(func):\n        self.registry.add_listener(hook, func)\n        return func\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(f):\n        self.add_handler(hook, f)\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(function):\n        self.registry[hook] = function\n        return function\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook] = func\n        return func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.registry.on(hook, func)\n        return func\n\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(handler):\n        self.registry[hook] = handler\n        return handler\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(f):\n        self.registry.on(hook, f)\n        return f\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry.register_listener(hook, func)\n        return func\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_auth\": \"user\",\n        \"etcd_auth_key\": \"secret\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"password\": None,\n        }\n    }\n    return config", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"user\": user,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"type\": \"basic\",\n            \"user\": user,\n            \"password\": \"password\",\n            \"options\": {},\n        },\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_prefix\": \"\"\n    }\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_auth\": \"user\",\n        \"etcd_auth_key\": \"secret\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"password\": None,\n        }\n    }\n    return config", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"user\": user,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"type\": \"basic\",\n            \"user\": user,\n            \"password\": \"password\",\n            \"options\": {},\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_prefix\": \"\"\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise TypeError(\"Can't convert to a timezone-aware datetime.\")\n    return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Datetime object is no longer a timezone-aware '\n                         'datetime.')\n    return dt.astimezone(self._tzinfo)\n", "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if dt.tzinfo is None:\n        raise ValueError(\"Can't fromutc a naive datetime\")\n    return dt.astimezone(self.tz)\n", "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is None:\n        return dt.replace(tzinfo=None)\n    else:\n        return dt\n", "def _fromutc(self, dt):\n    if self._ambiguous(dt):\n        return dt.astimezone(self._tzinfo)\n    else:\n        return dt", "def _fromutc(self, dt):\n    # type: (datetime.datetime) -> datetime.datetime\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tzinfo)\n    else:\n        return dt.astimezone(self._tzinfo)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise TypeError(\"Can't convert to a timezone-aware datetime.\")\n    return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Datetime object is no longer a timezone-aware '\n                         'datetime.')\n    return dt.astimezone(self._tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if dt.tzinfo is None:\n        raise ValueError(\"Can't fromutc a naive datetime\")\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is None:\n        return dt.replace(tzinfo=None)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if self._ambiguous(dt):\n        return dt.astimezone(self._tzinfo)\n    else:\n        return dt", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # type: (datetime.datetime) -> datetime.datetime\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tzinfo)\n    else:\n        return dt.astimezone(self._tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute, microseconds=self.microsecond,\n                         seconds=self.second, years=self.year, weeks=self.weekday, weekday=self.weekday,\n                         yearsoffset=self.yearsoffset)\n", "def normalized(self):\n    return relativedelta(**self._asdict())\n", "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k in self.__relativedelta__})\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute,\n                         microseconds=self.microsecond,\n                         seconds=self.second, years=self.years, weekday=self.weekday,\n                         weekofyear=self.weekofyear)\n", "def normalized(self):\n    return relativedelta(days=self.days, hours=self.hours, minutes=self.minutes,\n                         microseconds=self.microseconds, seconds=self.second,\n                         years=self.years, weekday=self.weekday, year=self.year)", "def normalized(self):\n    return relativedelta(**self.__dict__)\n", "def normalized(self):\n    return relativedelta(**self.__dict__)\n", "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__relativedelta__})\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, microseconds=self.microsecond,\n                         seconds=self.second, years=self.year,\n                         weekday=self.weekday)\n", "def normalized(self):\n    return relativedelta(self)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute, microseconds=self.microsecond,\n                         seconds=self.second, years=self.year, weeks=self.weekday, weekday=self.weekday,\n                         yearsoffset=self.yearsoffset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**self._asdict())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k in self.__relativedelta__})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute,\n                         microseconds=self.microsecond,\n                         seconds=self.second, years=self.years, weekday=self.weekday,\n                         weekofyear=self.weekofyear)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days, hours=self.hours, minutes=self.minutes,\n                         microseconds=self.microseconds, seconds=self.second,\n                         years=self.years, weekday=self.weekday, year=self.year)", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**self.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**self.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__relativedelta__})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, microseconds=self.microsecond,\n                         seconds=self.second, years=self.year,\n                         weekday=self.weekday)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self.to_python(''))\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            name = namefunc(*args, **kwargs)\n            if isinstance(name, str):\n                return name.encode(\"utf-8\")\n            else:\n                return name\n        return wrapper\n    return decorator\n", "def tzname_in_python2(namefunc):\n    def tzname(self, dt):\n        name = namefunc(self, dt)\n        return name.encode('utf-8')\n    return tzname\n", "def tzname_in_python2(namefunc):\n    def _tzname(name):\n        try:\n            return name.encode('utf-8')\n        except AttributeError:\n            return name\n\n    return functools.partial(_tzname, namefunc)", "def tzname_in_python2(namefunc):\n    def inner(*args, **kwargs):\n        return namefunc(*args, **kwargs).encode('utf-8')\n    return inner\n", "def tzname_in_python2(namefunc):\n    def inner(name):\n        return name.encode('utf-8')\n    return inner(namefunc(name))\n", "def tzname_in_python2(namefunc):\n    def _inner(s):\n        return namefunc(s.encode('utf-8'))\n\n    return _inner\n", "def tzname_in_python2(namefunc):\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        wrapper.__name__ = namefunc(wrapper.__name__)\n        wrapper.__dict__ = namefunc(wrapper.__dict__)\n\n        return wrapper\n\n    return decorator\n", "def tzname_in_python2(namefunc):\n    def _tzname_in_python2(x):\n        if six.PY2:\n            return namefunc(x)\n        else:\n            return x.encode('utf-8')\n    return _tzname_in_python2\n", "def tzname_in_python2(namefunc):\n\n    def wrapper(*args, **kwargs):\n        return namefunc(*args, **kwargs).encode('utf-8')\n\n    return wrapper\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self.to_python(''))\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            name = namefunc(*args, **kwargs)\n            if isinstance(name, str):\n                return name.encode(\"utf-8\")\n            else:\n                return name\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def tzname(self, dt):\n        name = namefunc(self, dt)\n        return name.encode('utf-8')\n    return tzname\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _tzname(name):\n        try:\n            return name.encode('utf-8')\n        except AttributeError:\n            return name\n\n    return functools.partial(_tzname, namefunc)", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def inner(*args, **kwargs):\n        return namefunc(*args, **kwargs).encode('utf-8')\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def inner(name):\n        return name.encode('utf-8')\n    return inner(namefunc(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _inner(s):\n        return namefunc(s.encode('utf-8'))\n\n    return _inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        wrapper.__name__ = namefunc(wrapper.__name__)\n        wrapper.__dict__ = namefunc(wrapper.__dict__)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _tzname_in_python2(x):\n        if six.PY2:\n            return namefunc(x)\n        else:\n            return x.encode('utf-8')\n    return _tzname_in_python2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def wrapper(*args, **kwargs):\n        return namefunc(*args, **kwargs).encode('utf-8')\n\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    import os\n    return git_versions_from_keywords(get_keywords(),get_config(),get_root())\n", "def get_versions():\n    return None\n", "def get_versions():\n    return get_config('versions',default=default_versions)\n\n#------------------------------------------------------------------------------\n# get_versions()\n#------------------------------------------------------------------------------", "def get_versions():\n    pass", "def get_versions():\n    return get_versions_from_parentdir(os.path.abspath(os.path.dirname(__file__)))\n", "def get_versions():\n    return __versions__", "def get_versions():\n    return get_config()", "def get_versions():\n    pass", "def get_versions():\n    return versions_from_parentdir()\n", "def get_versions():\n    pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    import os\n    return git_versions_from_keywords(get_keywords(),get_config(),get_root())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config('versions',default=default_versions)\n\n#------------------------------------------------------------------------------\n# get_versions()\n#------------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_versions_from_parentdir(os.path.abspath(os.path.dirname(__file__)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return __versions__", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    return render_pep440_post(pieces)\n", "def render(pieces, style):\n    from pep440.renderer import render\n    render_pep440(pieces)\n    render_git_describe(pieces)\n    render_git_describe_long(pieces)\n    render_pep440_post(pieces)\n    render_pep440_pre(pieces)\n    render_pep440_old(pieces)\n    render_pep440_post_branch(pieces)\n    render_pep440_pre_long(pieces)\n    render_pep440_post_branch(pieces)\n", "def render(pieces, style):\n    return _Render(pieces, style)", "def render(pieces, style):\n    return _render(pieces, style)", "def render(pieces, style):\n    for piece in pieces:\n        render_pep440_branch(piece)\n        render_git_describe(piece)\n        render_git_describe_long(piece)\n        render_pep440_post(piece)\n        render_pep440_pre(piece)\n        render_pep440_old(piece)\n        render_pep440_post_branch(piece)\n        render_pep440_pre_long(piece)\n        render_pep440_post_branch(piece)", "def render(pieces, style):\n    if style == 'pep440':\n        return render_pep440(pieces)\n    elif style == 'git':\n        return render_git(pieces)\n    elif style == 'post':\n        return render_pep440_post(pieces)\n    elif style == 'pre':\n        return render_pep440_pre(pieces)\n    elif style == 'old':\n        return render_pep440_old(pieces)\n    else:\n        return render_pep440(pieces)", "def render(pieces, style):\n    return _render(pieces, style)\n", "def render(pieces, style):\n    return _render(pieces, style)\n", "def render(pieces, style):\n    return Renderer().render(pieces, style)", "def render(pieces, style):\n    return Render(pieces, style).render()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    return render_pep440_post(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    from pep440.renderer import render\n    render_pep440(pieces)\n    render_git_describe(pieces)\n    render_git_describe_long(pieces)\n    render_pep440_post(pieces)\n    render_pep440_pre(pieces)\n    render_pep440_old(pieces)\n    render_pep440_post_branch(pieces)\n    render_pep440_pre_long(pieces)\n    render_pep440_post_branch(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return _Render(pieces, style)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return _render(pieces, style)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    for piece in pieces:\n        render_pep440_branch(piece)\n        render_git_describe(piece)\n        render_git_describe_long(piece)\n        render_pep440_post(piece)\n        render_pep440_pre(piece)\n        render_pep440_old(piece)\n        render_pep440_post_branch(piece)\n        render_pep440_pre_long(piece)\n        render_pep440_post_branch(piece)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if style == 'pep440':\n        return render_pep440(pieces)\n    elif style == 'git':\n        return render_git(pieces)\n    elif style == 'post':\n        return render_pep440_post(pieces)\n    elif style == 'pre':\n        return render_pep440_pre(pieces)\n    elif style == 'old':\n        return render_pep440_old(pieces)\n    else:\n        return render_pep440(pieces)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return _render(pieces, style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return _render(pieces, style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return Renderer().render(pieces, style)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return Render(pieces, style).render()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    return (pieces[0] if pieces else '.')\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return '.'\n    return '+' + pieces[0]\n", "def plus_or_dot(pieces):\n    if len(pieces) > 1:\n        return '.' + pieces[-1]\n    else:\n        return pieces[0]\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    elif len(pieces) == 1:\n        return '.'\n    else:\n        return pieces[0] + '.'\n", "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return '+'\n    else:\n        return '.'\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    if pieces[0] == '.':\n        return pieces[1:]\n    return pieces\n", "def plus_or_dot(pieces):\n    if len(pieces) == 0:\n        return '.'\n    return pieces[-1]", "def plus_or_dot(pieces):\n    return '.' if '.' in pieces else pieces\n", "def plus_or_dot(pieces):\n    return '.' + ('+' if pieces[-1].isalpha() else '') + pieces[:-1]", "def plus_or_dot(pieces):\n    return '.' if len(pieces) == 1 else '+'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    return (pieces[0] if pieces else '.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return '.'\n    return '+' + pieces[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) > 1:\n        return '.' + pieces[-1]\n    else:\n        return pieces[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    elif len(pieces) == 1:\n        return '.'\n    else:\n        return pieces[0] + '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return '+'\n    else:\n        return '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    if pieces[0] == '.':\n        return pieces[1:]\n    return pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) == 0:\n        return '.'\n    return pieces[-1]", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' if '.' in pieces else pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' + ('+' if pieces[-1].isalpha() else '') + pieces[:-1]", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' if len(pieces) == 1 else '+'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is None:\n            env = os.environ\n        if cwd is None:\n            cwd = os.getcwd()\n        with hide_stderr:\n            subprocess.call(cmd, env=env, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    with subprocess.Popen(commands, cwd=cwd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env) as p:\n        output = p.communicate(input=args)[0]\n        if verbose:\n            print(output)\n        if hide_stderr:\n            sys.stderr.write(output)\n            sys.stderr.flush()\n        return output\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = {}\n    if verbose:\n        print(' '.join(commands))\n    if hide_stderr:\n        print(' '.join(commands))\n        print(' '.join(['%s=%s' % (k, v) for k, v in env.items()]))\n        print(' '.join(['%s=%s' % (k, v) for k, v in os.environ.items()]))\n    return subprocess.call(commands, cwd=cwd, env=env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    env = env or os.environ\n    for cmd in commands:\n        if verbose:\n            print(\"    {}\".format(cmd))\n        subprocess.check_call(cmd, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=True)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    print(\"running command: %s\" % (' '.join(commands)))\n    if env is None:\n        env = os.environ.copy()\n    return subprocess.run(\n        commands,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        check=True,\n        env=env,\n        universal_newlines=True,\n        verbose=verbose,\n        hide_stderr=hide_stderr,\n    )", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    try:\n        if isinstance(commands, str):\n            commands = shlex.split(commands)\n        return subprocess.call(commands, stderr=subprocess.STDOUT, cwd=cwd, env=env, verbose=verbose, shell=isinstance(commands, list))\n    except OSError:\n        if not hide_stderr:\n            print(\"Command {} failed with exit code {}.\".format(' '.join(commands), os.WEXITSTATUS(error_code)))\n        return -1\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = commands.split()\n\n    try:\n        return subprocess.run(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, verbose=verbose, env=env)\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            if hide_stderr:\n                return None\n            raise e\n        raise e", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    commands = [' '.join(command) for command in commands]\n    if args:\n        commands.insert(0,''.join(args))\n    if verbose:\n        commands.insert(0,'-v')\n    if hide_stderr:\n        commands.insert(0,'-x')\n    if cwd:\n        commands.insert(0,'-d')\n    if env:\n        commands = ['export %s=%s' % (key, val) for key, val in env.items()] + commands\n    subprocess.check_call(commands, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    return run_subprocess(commands, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n\n    with subprocess.Popen(commands, stderr=subprocess.PIPE, stdout=subprocess.PIPE, cwd=cwd, env=env) as process:\n        return process.communicate(args=args, verbose=verbose, hide_stderr=hide_stderr)[0]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is None:\n            env = os.environ\n        if cwd is None:\n            cwd = os.getcwd()\n        with hide_stderr:\n            subprocess.call(cmd, env=env, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    with subprocess.Popen(commands, cwd=cwd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env) as p:\n        output = p.communicate(input=args)[0]\n        if verbose:\n            print(output)\n        if hide_stderr:\n            sys.stderr.write(output)\n            sys.stderr.flush()\n        return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = {}\n    if verbose:\n        print(' '.join(commands))\n    if hide_stderr:\n        print(' '.join(commands))\n        print(' '.join(['%s=%s' % (k, v) for k, v in env.items()]))\n        print(' '.join(['%s=%s' % (k, v) for k, v in os.environ.items()]))\n    return subprocess.call(commands, cwd=cwd, env=env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    env = env or os.environ\n    for cmd in commands:\n        if verbose:\n            print(\"    {}\".format(cmd))\n        subprocess.check_call(cmd, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=True)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    print(\"running command: %s\" % (' '.join(commands)))\n    if env is None:\n        env = os.environ.copy()\n    return subprocess.run(\n        commands,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        check=True,\n        env=env,\n        universal_newlines=True,\n        verbose=verbose,\n        hide_stderr=hide_stderr,\n    )", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    try:\n        if isinstance(commands, str):\n            commands = shlex.split(commands)\n        return subprocess.call(commands, stderr=subprocess.STDOUT, cwd=cwd, env=env, verbose=verbose, shell=isinstance(commands, list))\n    except OSError:\n        if not hide_stderr:\n            print(\"Command {} failed with exit code {}.\".format(' '.join(commands), os.WEXITSTATUS(error_code)))\n        return -1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = commands.split()\n\n    try:\n        return subprocess.run(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, verbose=verbose, env=env)\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            if hide_stderr:\n                return None\n            raise e\n        raise e", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    commands = [' '.join(command) for command in commands]\n    if args:\n        commands.insert(0,''.join(args))\n    if verbose:\n        commands.insert(0,'-v')\n    if hide_stderr:\n        commands.insert(0,'-x')\n    if cwd:\n        commands.insert(0,'-d')\n    if env:\n        commands = ['export %s=%s' % (key, val) for key, val in env.items()] + commands\n    subprocess.check_call(commands, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    return run_subprocess(commands, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n\n    with subprocess.Popen(commands, stderr=subprocess.PIPE, stdout=subprocess.PIPE, cwd=cwd, env=env) as process:\n        return process.communicate(args=args, verbose=verbose, hide_stderr=hide_stderr)[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tcdlib/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/utils/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tea/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/axon/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"espresso/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/dst/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"maas/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"talos/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/nextgen/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tcdlib/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/utils/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tea/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/axon/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"espresso/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/dst/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"maas/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"talos/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/nextgen/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        vcs.handler_map[method] = f\n        return f\n    return wrapper\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        \"\"\"\n        Mark a method as the handler of a VCS as being a method of a class.\n        \"\"\"\n        f.register_vcs_handler = True\n        f.vcs_handler = method\n        return f\n    return register", "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        if vcs not in _VCS_HANDLERS:\n            _VCS_HANDLERS[vcs] = {}\n        _VCS_HANDLERS[vcs][method.__name__] = f\n        return f\n    return wrapper\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(func):\n        setattr(func, HANDLER_ATTRIBUTE, (vcs, method))\n        return func\n    return wrapper", "def register_vcs_handler(vcs, method):\n    \n    \n    def new_handler(*args, **kwargs):\n        handler = vcs.handler(method)\n        handler.set_vcs(vcs)\n        return handler(*args, **kwargs)\n    new_handler.__name__ = method.__name__\n    new_handler.__doc__ = method.__doc__\n    new_handler.__dict__.update(method.__dict__)\n    return new_handler\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        if hasattr(vcs, method):\n            raise Exception(\"Handler already registered for VCS %s\" % vcs)\n        setattr(vcs, method, f)\n        return f\n    return decorator", "def register_vcs_handler(vcs, method):\n    if vcs not in _VCS_HANDLERS:\n        _VCS_HANDLERS[vcs] = {}\n    if method not in _VCS_HANDLERS[vcs]:\n        _VCS_HANDLERS[vcs][method] = []\n    _VCS_HANDLERS[vcs][method].append(method)\n", "def register_vcs_handler(vcs, method):\n    def handler(self, *args, **kwargs):\n        return self.run(vcs, method, *args, **kwargs)\n    handler.__name__ = method.__name__\n    handler.__dict__.update(method.__dict__)\n    handler.__module__ = method.__module__\n    handler.__doc__ = method.__doc__\n    handler.__dict__['_vcs_handler'] = True\n    setattr(vcs, method.__name__, handler)\n    return handler\n", "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        setattr(vcs, method, func)\n        return func\n    return decorator"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        vcs.handler_map[method] = f\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        \"\"\"\n        Mark a method as the handler of a VCS as being a method of a class.\n        \"\"\"\n        f.register_vcs_handler = True\n        f.vcs_handler = method\n        return f\n    return register", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        if vcs not in _VCS_HANDLERS:\n            _VCS_HANDLERS[vcs] = {}\n        _VCS_HANDLERS[vcs][method.__name__] = f\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(func):\n        setattr(func, HANDLER_ATTRIBUTE, (vcs, method))\n        return func\n    return wrapper", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def new_handler(*args, **kwargs):\n        handler = vcs.handler(method)\n        handler.set_vcs(vcs)\n        return handler(*args, **kwargs)\n    new_handler.__name__ = method.__name__\n    new_handler.__doc__ = method.__doc__\n    new_handler.__dict__.update(method.__dict__)\n    return new_handler\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        if hasattr(vcs, method):\n            raise Exception(\"Handler already registered for VCS %s\" % vcs)\n        setattr(vcs, method, f)\n        return f\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    if vcs not in _VCS_HANDLERS:\n        _VCS_HANDLERS[vcs] = {}\n    if method not in _VCS_HANDLERS[vcs]:\n        _VCS_HANDLERS[vcs][method] = []\n    _VCS_HANDLERS[vcs][method].append(method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def handler(self, *args, **kwargs):\n        return self.run(vcs, method, *args, **kwargs)\n    handler.__name__ = method.__name__\n    handler.__dict__.update(method.__dict__)\n    handler.__module__ = method.__module__\n    handler.__doc__ = method.__doc__\n    handler.__dict__['_vcs_handler'] = True\n    setattr(vcs, method.__name__, handler)\n    return handler\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        setattr(vcs, method, func)\n        return func\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for fs in self.lax_fss:\n        num_objects += fs.validate_hierarchy(validate_objects=validate_objects,\n                                            check_digests=check_digests,\n                                            show_warnings=show_warnings)\n        good_objects += fs.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects(show_warnings=show_warnings)\n    if check_digests:\n        self.check_digests()\n    self.object_paths(self)\n    return len(self.object_paths), len(self.valid_objects)", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = {}\n    self.root_fs = None\n    return self.object_paths(self)", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    num_objects = len(self.lax_digests)\n    if validate_objects:\n        if not check_digests:\n            raise ValueError('You must specify a check digest when checking the digest of files')\n        num_objects = self.object_paths(self)\n    if show_warnings:\n        self.validate_warnings(num_objects)\n    return num_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    return self._validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # TODO: write this method\n    return 0, 0\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    checked_objects = 0\n    for root, _, files in os.walk(self.storage_root):\n        for f in files:\n            num_objects += 1\n            if check_digests:\n                checked_objects += self.check_digests(root, f)\n            if validate_objects:\n                num_objects += self.validate_object(root, f)\n    return num_objects, checked_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = self.lax_digests if validate_objects else self.object_paths\n    return validator.validate_hierarchy(check_digests=check_digests, show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    self.validate_objects(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    return self.lax_digests, self.object_paths", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects()\n    if check_digests:\n        self.validate_digests()\n    return self.validate_root_objects(show_warnings=show_warnings)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for fs in self.lax_fss:\n        num_objects += fs.validate_hierarchy(validate_objects=validate_objects,\n                                            check_digests=check_digests,\n                                            show_warnings=show_warnings)\n        good_objects += fs.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects(show_warnings=show_warnings)\n    if check_digests:\n        self.check_digests()\n    self.object_paths(self)\n    return len(self.object_paths), len(self.valid_objects)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = {}\n    self.root_fs = None\n    return self.object_paths(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    num_objects = len(self.lax_digests)\n    if validate_objects:\n        if not check_digests:\n            raise ValueError('You must specify a check digest when checking the digest of files')\n        num_objects = self.object_paths(self)\n    if show_warnings:\n        self.validate_warnings(num_objects)\n    return num_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    return self._validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # TODO: write this method\n    return 0, 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    checked_objects = 0\n    for root, _, files in os.walk(self.storage_root):\n        for f in files:\n            num_objects += 1\n            if check_digests:\n                checked_objects += self.check_digests(root, f)\n            if validate_objects:\n                num_objects += self.validate_object(root, f)\n    return num_objects, checked_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = self.lax_digests if validate_objects else self.object_paths\n    return validator.validate_hierarchy(check_digests=check_digests, show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    self.validate_objects(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    return self.lax_digests, self.object_paths", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects()\n    if check_digests:\n        self.validate_digests()\n    return self.validate_root_objects(show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    # TODO: add configuration for filesystems\n    # TODO: add configuration for the layout file\n    # TODO: add configuration for the layout file\n    # TODO: add configuration for the disposition\n    # TODO: add configuration for the layout file\n    pass", "def initialize(self):\n\n    root = self.root_fs.create_subdirectory('OCFL')\n\n    self.layout_file = root.joinpath('layout')\n    self.declaration_tvalue = root.joinpath('declaration')\n    self.declaration = self.declaration_tvalue.joinpath('declaration.json')\n    self.root = root\n\n    self.layout = self.root.joinpath('layout')\n    self.layout_file = self.layout.joinpath('layout.json')\n\n    self.declaration = self.declaration_tvalue.joinpath('declaration.json')\n\n    return self", "def initialize(self):\n    logging.debug('Creating OCFL root (%s)' % self.root_fs)\n    self.root_fs = fs.create_file_system(self.root_fs)\n    self.declaration_tvalue = None\n    self.root = None\n    self.layout_file = None\n    self.disposition = None\n", "def initialize(self):\n\n    self.root_fs = pyfs.FS(self.root, 'w')\n    self.declaration_tvalue = self.root_fs.stat().st_mtime\n    self.layout_file = self.root_fs.open('layout.json')\n    self.disposition = self.root_fs.open('disposition')\n", "def initialize(self):\n    pass", "def initialize(self):\n    self.root_fs = pyfs.open_fs(self.root, mode='w', perms=ocfl.PERM_READ)\n    self.layout_file = pyfs.open_fs(self.layout, mode='w', perms=ocfl.PERM_READ)\n    self.declaration_tvalue = ocfl.create_declaration_tvalue(self.declaration_name, self.declaration_type, self.declaration_type_id)\n    self.root = self.root_fs.create_root(self.declaration_name, self.declaration_type)\n    self.layout = self.layout_file.create_layout(self.layout_name, self.declaration_type, self.layout_file_name, self.declaration_tvalue)", "def initialize(self):\n    self.root_fs = fs.opendir(self.root, self.layout_file)\n    self.declaration_tvalue = None\n    self.root = self.root_fs\n    self.layout_file = None\n    self.disposition = None\n", "def initialize(self):\n    import logging\n\n    self.root_fs = fs.get_root_fs()\n    self.declaration_tvalue = fs.get_declaration_tvalue()\n    self.layout_file = fs.get_layout_file()\n    self.root = self.root_fs.create_root(self.declaration_tvalue)\n    self.layout = self.root.get_layout()\n    self.disposition = self.root.get_disposition()\n", "def initialize(self):\n    from. import json\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n", "def initialize(self):\n\n    return self.__class__(\n        self.root_fs,\n        self.declaration_tvalue,\n        self.root,\n        self.layout_file,\n        self.disposition,\n    )"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    # TODO: add configuration for filesystems\n    # TODO: add configuration for the layout file\n    # TODO: add configuration for the layout file\n    # TODO: add configuration for the disposition\n    # TODO: add configuration for the layout file\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n\n    root = self.root_fs.create_subdirectory('OCFL')\n\n    self.layout_file = root.joinpath('layout')\n    self.declaration_tvalue = root.joinpath('declaration')\n    self.declaration = self.declaration_tvalue.joinpath('declaration.json')\n    self.root = root\n\n    self.layout = self.root.joinpath('layout')\n    self.layout_file = self.layout.joinpath('layout.json')\n\n    self.declaration = self.declaration_tvalue.joinpath('declaration.json')\n\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    logging.debug('Creating OCFL root (%s)' % self.root_fs)\n    self.root_fs = fs.create_file_system(self.root_fs)\n    self.declaration_tvalue = None\n    self.root = None\n    self.layout_file = None\n    self.disposition = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n\n    self.root_fs = pyfs.FS(self.root, 'w')\n    self.declaration_tvalue = self.root_fs.stat().st_mtime\n    self.layout_file = self.root_fs.open('layout.json')\n    self.disposition = self.root_fs.open('disposition')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root_fs = pyfs.open_fs(self.root, mode='w', perms=ocfl.PERM_READ)\n    self.layout_file = pyfs.open_fs(self.layout, mode='w', perms=ocfl.PERM_READ)\n    self.declaration_tvalue = ocfl.create_declaration_tvalue(self.declaration_name, self.declaration_type, self.declaration_type_id)\n    self.root = self.root_fs.create_root(self.declaration_name, self.declaration_type)\n    self.layout = self.layout_file.create_layout(self.layout_name, self.declaration_type, self.layout_file_name, self.declaration_tvalue)", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root_fs = fs.opendir(self.root, self.layout_file)\n    self.declaration_tvalue = None\n    self.root = self.root_fs\n    self.layout_file = None\n    self.disposition = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    import logging\n\n    self.root_fs = fs.get_root_fs()\n    self.declaration_tvalue = fs.get_declaration_tvalue()\n    self.layout_file = fs.get_layout_file()\n    self.root = self.root_fs.create_root(self.declaration_tvalue)\n    self.layout = self.root.get_layout()\n    self.disposition = self.root.get_disposition()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    from. import json\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n    from. import json_util\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n\n    return self.__class__(\n        self.root_fs,\n        self.declaration_tvalue,\n        self.root,\n        self.layout_file,\n        self.disposition,\n    )", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    try:\n        return next(re.finditer(r'(\\d+\\.\\d+)', version))[1]\n    except StopIteration:\n        raise ValueError('version {} does not have a next version'.format(version))\n", "def next_version(version):\n    if version == 0:\n        return 0\n    if version < 1:\n        return version + 1\n    return version\n", "def next_version(version):\n    if version.startswith('0'):\n        return version\n    return '0' + version\n", "def next_version(version):\n    return version + 1 if version else 0\n", "def next_version(version):\n    i = version.find('.')\n    if i > 0:\n        return version[:i]\n    return version\n", "def next_version(version):\n    if version == 0:\n        return '0.0.0'\n    return '.'.join([str(x) for x in version.split('.')[:2]])\n", "def next_version(version):\n    return version[: version.find('_')] + '.' + version[version.find('_') + 1 :]\n", "def next_version(version):\n    if not version:\n        raise ValueError('No version provided.')\n    return '.'.join([str(x) for x in version.split('.')])\n", "def next_version(version):\n    return '%s-%s' % (version[:2], version[3:])", "def next_version(version):\n    pattern = r'^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$'\n    m = re.match(pattern, version)\n    if m is None:\n        raise ValueError('version must be in format: major.minor.patch')\n    return m.group('major'), m.group('minor'), m.group('patch')"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    try:\n        return next(re.finditer(r'(\\d+\\.\\d+)', version))[1]\n    except StopIteration:\n        raise ValueError('version {} does not have a next version'.format(version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return 0\n    if version < 1:\n        return version + 1\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version.startswith('0'):\n        return version\n    return '0' + version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version + 1 if version else 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    i = version.find('.')\n    if i > 0:\n        return version[:i]\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return '0.0.0'\n    return '.'.join([str(x) for x in version.split('.')[:2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version[: version.find('_')] + '.' + version[version.find('_') + 1 :]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if not version:\n        raise ValueError('No version provided.')\n    return '.'.join([str(x) for x in version.split('.')])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '%s-%s' % (version[:2], version[3:])", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    pattern = r'^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$'\n    m = re.match(pattern, version)\n    if m is None:\n        raise ValueError('version must be in format: major.minor.patch')\n    return m.group('major'), m.group('minor'), m.group('patch')", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\npass", "def validate_version_inventories(self, version_dirs):\npass", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass\n                ", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n                ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    else:\n        return 'root'\n", "def find_path_type(path):\n    path = os.path.abspath(path)\n    if not os.path.exists(path):\n        return 'root'\n    if not os.path.isdir(path):\n        return 'object'\n    if os.path.isfile(path):\n        return 'file'\n    return 'root'\n", "def find_path_type(path):\n    return \"root\"\n", "def find_path_type(path):\n    return \"root\"\n", "def find_path_type(path):\n\n    if os.path.isdir(path):\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"object\"\n    else:\n        return \"file\"", "def find_path_type(path):\n    for item in __paths__:\n        if item[0] == path:\n            return 'root'\n        elif item[0] == '*' and path.startswith(item[1]):\n            return 'object'\n        elif item[0] == '*' and path.startswith('/' + item[1]):\n            return 'file'\n    return 'error'", "def find_path_type(path):\n    if path.startswith(\"0:\"):\n        return \"root\"\n    if path.startswith(\"/\"):\n        return \"object\"\n    if path.startswith(\"\\\\\"):\n        return \"file\"\n    return \"\"\n", "def find_path_type(path):\n    try:\n        return 'root'\n    except Exception as ex:\n        print(ex)\n    try:\n        return 'object'\n    except Exception as ex:\n        print(ex)\n    try:\n        return 'file'\n    except Exception as ex:\n        print(ex)\n    return 'error'", "def find_path_type(path):\n    path = path.replace('\\\\','/')\n    if re.match(r'^\\d+$', path):\n        return 'root'\n    elif re.match(r'^\\w+\\*$', path):\n        return 'object'\n    elif re.match(r'^\\d+\\.\\d+$', path):\n        return 'file'\n    else:\n        return 'error'\n    ", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    else:\n        return 'file'"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    else:\n        return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    path = os.path.abspath(path)\n    if not os.path.exists(path):\n        return 'root'\n    if not os.path.isdir(path):\n        return 'object'\n    if os.path.isfile(path):\n        return 'file'\n    return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    return \"root\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    return \"root\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n\n    if os.path.isdir(path):\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"object\"\n    else:\n        return \"file\"", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for item in __paths__:\n        if item[0] == path:\n            return 'root'\n        elif item[0] == '*' and path.startswith(item[1]):\n            return 'object'\n        elif item[0] == '*' and path.startswith('/' + item[1]):\n            return 'file'\n    return 'error'", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path.startswith(\"0:\"):\n        return \"root\"\n    if path.startswith(\"/\"):\n        return \"object\"\n    if path.startswith(\"\\\\\"):\n        return \"file\"\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    try:\n        return 'root'\n    except Exception as ex:\n        print(ex)\n    try:\n        return 'object'\n    except Exception as ex:\n        print(ex)\n    try:\n        return 'file'\n    except Exception as ex:\n        print(ex)\n    return 'error'", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    path = path.replace('\\\\','/')\n    if re.match(r'^\\d+$', path):\n        return 'root'\n    elif re.match(r'^\\w+\\*$', path):\n        return 'object'\n    elif re.match(r'^\\d+\\.\\d+$', path):\n        return 'file'\n    else:\n        return 'error'\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    else:\n        return 'file'", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    pass", "def amend_bzparams(self, params, bug_ids):\npass", "def amend_bzparams(self, params, bug_ids):\n    pass\n", "def amend_bzparams(self, params, bug_ids):\n    for bzparam in params:\n        if bzparam not in self.bzparams:\n            self.bzparams.append(bzparam)\n    self.bzparams = list(set(self.bzparams))\n    self.bzparams.sort()\n    self.bzparams.append(bug_ids)\n    return self\n", "def amend_bzparams(self, params, bug_ids):\n    return params", "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n    return params", "def amend_bzparams(self, params, bug_ids):\n    return self.amend_bugs(params, bug_ids)", "def amend_bzparams(self, params, bug_ids):\n    pass", "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for bzparam in params:\n        if bzparam not in self.bzparams:\n            self.bzparams.append(bzparam)\n    self.bzparams = list(set(self.bzparams))\n    self.bzparams.sort()\n    self.bzparams.append(bug_ids)\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    return params", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n    return params", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    return self.amend_bugs(params, bug_ids)", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):'))',)]))", "def deep_merge_nodes(nodes): node)', )", "def deep_merge_nodes(nodes):', )')])]\n )", "def deep_merge_nodes(nodes):y))]", "def deep_merge_nodes(nodes):')])])]", "def deep_merge_nodes(nodes):')])]);]\n )", "def deep_merge_nodes(nodes):'))])]", "def deep_merge_nodes(nodes): ))])]", "def deep_merge_nodes(nodes):)])])", "def deep_merge_nodes(nodes):))])]))\n\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):'))',)]))", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes): node)', )", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):', )')])]\n )", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):y))]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')])])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')])]);]\n )", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes): ))])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)])])", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):))])]))\n\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input_file', '-i', required=True)\n    parser.add_argument('--output_file', '-o', required=True)\n    parser.add_argument('--debug', '-d', action='store_true', default=False)\n    parser.add_argument('--verbose', '-v', action='store_true', default=False)\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    # Add all the arguments that were provided\n    for argument in arguments:\n        parser.add_argument(argument.get_name(), **argument.get_default_value())\n\n    return parser.parse_args()", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    return parser.parse_args(arguments)", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Generate a JSON list of all of the assets in the database.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--file\",\n        dest=\"file\",\n        required=True,\n        help=\"The path to the file with the assets in the database.\",\n    )\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n            Test the program using the specified arguments.\n            \"\"\")\n\n    parser.add_argument(\n        '--log-level', type=int, default=logging.INFO,\n        help=\"\"\"\\\n            Set the logging level to use for the test.\n            \"\"\")\n\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data-dir', default='./data', help='path to the folder containing the data')\n    parser.add_argument('--output-dir', default='./output', help='path to the folder containing the output')\n    parser.add_argument('--sample-size', default=100, help='number of samples to use for each example')\n    parser.add_argument('--max-samples', default=10, help='maximum number of samples to use')\n    return parser.parse_args(arguments)", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=__doc__,\n        formatter_class=RawDescriptionHelpFormatter,\n        epilog=EXAMPLE_EXAMPLE,\n        )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__),\n        )\n\n    return parser.parse_args(*arguments)", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='enable debug output')\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\"--config\", help=\"Configuration file\")\n    parser.add_argument(\"--host\", help=\"Host name\")\n    parser.add_argument(\"--port\", help=\"Port number\")\n    parser.add_argument(\"--database\", help=\"Database name\")\n    parser.add_argument(\"--username\", help=\"Username for database\")\n    parser.add_argument(\"--password\", help=\"Password for database\")\n    parser.add_argument(\"--debug\", help=\"Debug mode (--debug for debugging)\")\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-o', '--output', help='Output file')\n    parser.add_argument('-s', '--silent', action='store_true',\n                        help='Show no output')\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input_file', '-i', required=True)\n    parser.add_argument('--output_file', '-o', required=True)\n    parser.add_argument('--debug', '-d', action='store_true', default=False)\n    parser.add_argument('--verbose', '-v', action='store_true', default=False)\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    # Add all the arguments that were provided\n    for argument in arguments:\n        parser.add_argument(argument.get_name(), **argument.get_default_value())\n\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Generate a JSON list of all of the assets in the database.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--file\",\n        dest=\"file\",\n        required=True,\n        help=\"The path to the file with the assets in the database.\",\n    )\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n            Test the program using the specified arguments.\n            \"\"\")\n\n    parser.add_argument(\n        '--log-level', type=int, default=logging.INFO,\n        help=\"\"\"\\\n            Set the logging level to use for the test.\n            \"\"\")\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data-dir', default='./data', help='path to the folder containing the data')\n    parser.add_argument('--output-dir', default='./output', help='path to the folder containing the output')\n    parser.add_argument('--sample-size', default=100, help='number of samples to use for each example')\n    parser.add_argument('--max-samples', default=10, help='maximum number of samples to use')\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=__doc__,\n        formatter_class=RawDescriptionHelpFormatter,\n        epilog=EXAMPLE_EXAMPLE,\n        )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__),\n        )\n\n    return parser.parse_args(*arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='enable debug output')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\"--config\", help=\"Configuration file\")\n    parser.add_argument(\"--host\", help=\"Host name\")\n    parser.add_argument(\"--port\", help=\"Port number\")\n    parser.add_argument(\"--database\", help=\"Database name\")\n    parser.add_argument(\"--username\", help=\"Username for database\")\n    parser.add_argument(\"--password\", help=\"Password for database\")\n    parser.add_argument(\"--debug\", help=\"Debug mode (--debug for debugging)\")\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-o', '--output', help='Output file')\n    parser.add_argument('-s', '--silent', action='store_true',\n                        help='Show no output')\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    return''.join(flag.value for flag in parser._flags)\n", "def parser_flags(parser):\n    return''.join([a.name for a in parser._actions])", "def parser_flags(parser):\n    return parser.format_help().replace('\\n','')\n", "def parser_flags(parser):\n    return''.join(parser.parse_args())", "def parser_flags(parser):\n    return parser.args.__str__().replace(' ', '')\n", "def parser_flags(parser):\n    return''.join([str(arg) for arg in parser.parse_args()])\n", "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        else:\n            flags.append(flag.default)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join([flag.strip() for flag in parser._flags])\n", "def parser_flags(parser):\n    return \" \".join(parser.flags._flags)", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags.append(arg.flag)\n    return''.join(flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(flag.value for flag in parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([a.name for a in parser._actions])", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.format_help().replace('\\n','')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser.parse_args())", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.args.__str__().replace(' ', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(arg) for arg in parser.parse_args()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        else:\n            flags.append(flag.default)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([flag.strip() for flag in parser._flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join(parser.flags._flags)", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags.append(arg.flag)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    return dict((name, argparse.Namespace(**args)) for name, args in unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--test_dir\", type=str, help=\"path to test dir\")\n    return parser.parse_args(unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    return vars(parser.parse_known_args(unparsed_arguments))", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.set_defaults(func=main)\n    return parser.parse_args(*unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    for unparsed_argument in unparsed_arguments:\n        parser_name = unparsed_argument.pop(\"subcommand\")\n        parser = subparsers.add_parser(parser_name, **unparsed_argument)\n    return parser.parse_args()", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)", "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "def parse_arguments(*unparsed_arguments):\n    parser = unparsed_arguments[0]\n    args = unparsed_arguments[1:]\n    return parser.parse_known_args(args, namespace=globals())"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict((name, argparse.Namespace(**args)) for name, args in unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--test_dir\", type=str, help=\"path to test dir\")\n    return parser.parse_args(unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return vars(parser.parse_known_args(unparsed_arguments))", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.set_defaults(func=main)\n    return parser.parse_args(*unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    for unparsed_argument in unparsed_arguments:\n        parser_name = unparsed_argument.pop(\"subcommand\")\n        parser = subparsers.add_parser(parser_name, **unparsed_argument)\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = unparsed_arguments[0]\n    args = unparsed_arguments[1:]\n    return parser.parse_known_args(args, namespace=globals())", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser in subparsers._actions:\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        unparsed_arguments.update(parsed_arguments)\n    return parsed_arguments, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return {name: parse_argument(arg) for name, arg in unparsed_arguments.items()}, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        subparser = subparsers.pop(arg.name, None)\n        if subparser:\n            result.update(subparser.parse_args(arg.args))\n    return result, subparsers.keys()", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        arg = arg.strip()\n        parsed_namespace = parse_subparser_argument(arg, subparsers)\n        result.update(parsed_namespace)\n    return result, unparsed_arguments, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for argument in unparsed_arguments:\n        subparser = subparsers.add_parser(argument.name)\n        parsed_arguments[argument.name] = parse_argument(argument, subparser)\n    return parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining = []\n    for name, parsed_argument in unparsed_arguments.items():\n        arguments[name] = parse_argument(parsed_argument, subparsers)\n        remaining.append(name)\n    return arguments, remaining\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, parser in subparsers.items():\n        result[name] = parser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return parse_arguments(unparsed_arguments, subparsers)"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser in subparsers._actions:\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        unparsed_arguments.update(parsed_arguments)\n    return parsed_arguments, unparsed_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return {name: parse_argument(arg) for name, arg in unparsed_arguments.items()}, []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        subparser = subparsers.pop(arg.name, None)\n        if subparser:\n            result.update(subparser.parse_args(arg.args))\n    return result, subparsers.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        arg = arg.strip()\n        parsed_namespace = parse_subparser_argument(arg, subparsers)\n        result.update(parsed_namespace)\n    return result, unparsed_arguments, []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for argument in unparsed_arguments:\n        subparser = subparsers.add_parser(argument.name)\n        parsed_arguments[argument.name] = parse_argument(argument, subparser)\n    return parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining = []\n    for name, parsed_argument in unparsed_arguments.items():\n        arguments[name] = parse_argument(parsed_argument, subparsers)\n        remaining.append(name)\n    return arguments, remaining\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, parser in subparsers.items():\n        result[name] = parser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return parse_arguments(unparsed_arguments, subparsers)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(description='Extract data from borgmatic files')\n    parser.add_argument('--infile', type=str, required=True, help='path to borgmatic file')\n    parser.add_argument('--outfile', type=str, required=True, help='path to output file')\n    parser.add_argument('--variants', type=str, required=True, help='variants to extract')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', required=True)\n    parser.add_argument('--report', required=True)\n    parser.add_argument('--log', required=True)\n    parser.add_argument('--config-file', required=True)\n    parser.add_argument('--debug', action='store_true')\n    return parser.parse_args()", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the borgmatic package.\")\n    parser.add_argument(\"--name\", help=\"Package name.\")\n    parser.add_argument(\"--version\", help=\"Package version.\")\n    parser.add_argument(\"--distro\", help=\"Package distro.\")\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-f\", \"--file\", help=\"File to parse\", required=True)\n    parser.add_argument(\"-o\", \"--output\", help=\"Output file\", default=\".\")\n    parser.add_argument(\"-p\", \"--page\", help=\"Page number\", default=1)\n    parser.add_argument(\"-l\", \"--limit\", help=\"Limit of number of pages\", default=50)\n    parser.add_argument(\"-s\", \"--sort\", help=\"Sort by number\", default=\"\")\n    parser.add_argument(\"-sf\", \"--sort-field\", help=\"Sort field\", default=\"number\")\n    return parser.parse_args()", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test Borgmatic parser helper.')\n\n    parser.add_argument('-v', '--verbose', help='Print verbose output.',\n                        action='store_true')\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Import a borgmatic json file into the current directory.'\n    )\n    parser.add_argument(\n        'json_file',\n        type=argparse.FileType('r'),\n        help='JSON file to import'\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Create top-level parser')\n    parser.add_argument('--borgmatic', action='store_true', help='Create borgmatic parser')\n    return parser.parse_args()", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Test borgmatic parser')\n    parser.add_argument('--test', action='store_true', default=False,\n                        help='test borgmatic parser')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = ArgumentParser(description='testing borgmatic')\n    parser.add_argument('--verbose', action='store_true', help='print debug messages')\n    parser.add_argument('--testing', action='store_true', help='run tests')\n    return parser", "def make_parsers():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('--version', action='version', version=__version__)\n    subparsers = parser.add_subparsers(title='commands', dest='command')\n    for name, command in COMMANDS.items():\n        command.add_to_subparser(subparsers)\n    return parser, subparsers\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Extract data from borgmatic files')\n    parser.add_argument('--infile', type=str, required=True, help='path to borgmatic file')\n    parser.add_argument('--outfile', type=str, required=True, help='path to output file')\n    parser.add_argument('--variants', type=str, required=True, help='variants to extract')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', required=True)\n    parser.add_argument('--report', required=True)\n    parser.add_argument('--log', required=True)\n    parser.add_argument('--config-file', required=True)\n    parser.add_argument('--debug', action='store_true')\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the borgmatic package.\")\n    parser.add_argument(\"--name\", help=\"Package name.\")\n    parser.add_argument(\"--version\", help=\"Package version.\")\n    parser.add_argument(\"--distro\", help=\"Package distro.\")\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-f\", \"--file\", help=\"File to parse\", required=True)\n    parser.add_argument(\"-o\", \"--output\", help=\"Output file\", default=\".\")\n    parser.add_argument(\"-p\", \"--page\", help=\"Page number\", default=1)\n    parser.add_argument(\"-l\", \"--limit\", help=\"Limit of number of pages\", default=50)\n    parser.add_argument(\"-s\", \"--sort\", help=\"Sort by number\", default=\"\")\n    parser.add_argument(\"-sf\", \"--sort-field\", help=\"Sort field\", default=\"number\")\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test Borgmatic parser helper.')\n\n    parser.add_argument('-v', '--verbose', help='Print verbose output.',\n                        action='store_true')\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Import a borgmatic json file into the current directory.'\n    )\n    parser.add_argument(\n        'json_file',\n        type=argparse.FileType('r'),\n        help='JSON file to import'\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Create top-level parser')\n    parser.add_argument('--borgmatic', action='store_true', help='Create borgmatic parser')\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Test borgmatic parser')\n    parser.add_argument('--test', action='store_true', default=False,\n                        help='test borgmatic parser')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = ArgumentParser(description='testing borgmatic')\n    parser.add_argument('--verbose', action='store_true', help='print debug messages')\n    parser.add_argument('--testing', action='store_true', help='run tests')\n    return parser", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('--version', action='version', version=__version__)\n    subparsers = parser.add_subparsers(title='commands', dest='command')\n    for name, command in COMMANDS.items():\n        command.add_to_subparser(subparsers)\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):)])')]", "def deep_merge_nodes(nodes):'))',)')", "def deep_merge_nodes(nodes):)])]", "def deep_merge_nodes(nodes):')', )])])\n...", "def deep_merge_nodes(nodes):'))])]", "def deep_merge_nodes(nodes):)])])", "def deep_merge_nodes(nodes):)')])'])", "def deep_merge_nodes(nodes):')')']))]", "def deep_merge_nodes(nodes):'))')])])]", "def deep_merge_nodes(nodes):')])])]"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):)])')]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))',)')", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')', )])])\n...", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)])])", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)')])'])", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')')']))]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))')])])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')])])]", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", dest=\"config\",\n                        help=\"path to config file\")\n    parser.add_argument(\"--log\", dest=\"log\", help=\"path to log file\")\n    parser.add_argument(\"--out\", dest=\"out\", help=\"path to output file\")\n\n    if arguments:\n        args = parser.parse_args(arguments)\n        return args\n    return parser\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    for arg in arguments:\n        parser.add_argument(arg)\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='debug mode')\n    parser.add_argument('--config', type=str, nargs='?', default='./config.json', help='config file path')\n    parser.add_argument('--verbose', action='store_true', default=False, help='verbose mode')\n    return parser.parse_args(arguments)", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Run the script')\n\n    # Required arguments\n    parser.add_argument(\n        '--input_file',\n        dest='input_file',\n        type=str,\n        required=True,\n        help='Path to the input file')\n    parser.add_argument(\n        '--output_file',\n        dest='output_file',\n        type=str,\n        required=True,\n        help='Path to the output file')\n\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--fname', help='The file to read from')\n    parser.add_argument('--output', help='The file to write to')\n    parser.add_argument('--separator', help='The separator to use',\n                        default='\\t')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true')\n    parser.add_argument('--config', default=DEFAULT_CONFIG_FILE)\n    parser.add_argument('--revision', default=DEFAULT_REVISION_STRING)\n    parser.add_argument('--requirements', nargs='+', default=DEFAULT_REQUIREMENTS_FILE)\n    return parser.parse_args(*arguments)", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Create a Git branch for a Repo')\n\n    parser.add_argument('repo_path', type=str,\n                        help='The path to the repo to branch')\n\n    parser.add_argument('branch', type=str,\n                        help='The name of the branch to create')\n\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Find the most popular article in a given category.')\n    parser.add_argument('-d', '--directory', default='.', help='Directory where the articles are located.')\n    parser.add_argument('-c', '--category', default='', help='Category name to search for.')\n    parser.add_argument('-o', '--output', default='.', help='Directory where the output is written.')\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser(*arguments)\n    return parser.parse_args()", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n        Test a module with some arguments.\n        \"\"\"\n    )\n    parser.add_argument('--test', action='store_true')\n    parser.add_argument('--test_again', action='store_true')\n    parser.add_argument('--test_again_again', action='store_true')\n    parser.add_argument('--test_again_again_again', action='store_true')\n    return parser.parse_args(arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", dest=\"config\",\n                        help=\"path to config file\")\n    parser.add_argument(\"--log\", dest=\"log\", help=\"path to log file\")\n    parser.add_argument(\"--out\", dest=\"out\", help=\"path to output file\")\n\n    if arguments:\n        args = parser.parse_args(arguments)\n        return args\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    for arg in arguments:\n        parser.add_argument(arg)\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='debug mode')\n    parser.add_argument('--config', type=str, nargs='?', default='./config.json', help='config file path')\n    parser.add_argument('--verbose', action='store_true', default=False, help='verbose mode')\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Run the script')\n\n    # Required arguments\n    parser.add_argument(\n        '--input_file',\n        dest='input_file',\n        type=str,\n        required=True,\n        help='Path to the input file')\n    parser.add_argument(\n        '--output_file',\n        dest='output_file',\n        type=str,\n        required=True,\n        help='Path to the output file')\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--fname', help='The file to read from')\n    parser.add_argument('--output', help='The file to write to')\n    parser.add_argument('--separator', help='The separator to use',\n                        default='\\t')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true')\n    parser.add_argument('--config', default=DEFAULT_CONFIG_FILE)\n    parser.add_argument('--revision', default=DEFAULT_REVISION_STRING)\n    parser.add_argument('--requirements', nargs='+', default=DEFAULT_REQUIREMENTS_FILE)\n    return parser.parse_args(*arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Create a Git branch for a Repo')\n\n    parser.add_argument('repo_path', type=str,\n                        help='The path to the repo to branch')\n\n    parser.add_argument('branch', type=str,\n                        help='The name of the branch to create')\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Find the most popular article in a given category.')\n    parser.add_argument('-d', '--directory', default='.', help='Directory where the articles are located.')\n    parser.add_argument('-c', '--category', default='', help='Category name to search for.')\n    parser.add_argument('-o', '--output', default='.', help='Directory where the output is written.')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(*arguments)\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n        Test a module with some arguments.\n        \"\"\"\n    )\n    parser.add_argument('--test', action='store_true')\n    parser.add_argument('--test_again', action='store_true')\n    parser.add_argument('--test_again_again', action='store_true')\n    parser.add_argument('--test_again_again_again', action='store_true')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(['--%s' % a for a in parser._actions])\n", "def parser_flags(parser):\n    return parser.format_help().split()", "def parser_flags(parser):\n    return''.join(parser._action_groups)\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--{}'.format(arg.dest))\n        elif hasattr(arg, 'flags'):\n            flags.extend(parser_flags(arg.flags))\n        else:\n            flags.append('--{}'.format(arg))\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_flags() if flag.startswith('-'))\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='{}'.format(arg.dest)\n    return flags", "def parser_flags(parser):\n    return parser._get_flags()", "def parser_flags(parser):\n    return''.join(['--' + flag for flag in parser._actions])\n", "def parser_flags(parser):\n    return \" \".join([\"--{}={}\".format(name, value)\n                     for name, value in vars(parser).items()\n                     if not name.startswith(\"_\")])\n", "def parser_flags(parser):\n    return''.join([x.name for x in parser._actions])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(['--%s' % a for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.format_help().split()", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._action_groups)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--{}'.format(arg.dest))\n        elif hasattr(arg, 'flags'):\n            flags.extend(parser_flags(arg.flags))\n        else:\n            flags.append('--{}'.format(arg))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_flags() if flag.startswith('-'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='{}'.format(arg.dest)\n    return flags", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser._get_flags()", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--' + flag for flag in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join([\"--{}={}\".format(name, value)\n                     for name, value in vars(parser).items()\n                     if not name.startswith(\"_\")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([x.name for x in parser._actions])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return \"\"\"\n    import argcomplete\n    import sys\n    import os\n    from ambry.util import parser_flags\n    parser_flags = argcomplete.completer_parser().parse_args()\n    sys.argv = sys.argv[:1]\n    sys.argv.extend(sys.argv[1:])\n    parser_flags.parse_args()\n    \"\"\"\n", "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--verbose', action='store_true', default=False,\n                        help='Use more verbose output.')\n    parser.add_argument('path', help='Path to borgmatic command.')\n    parser.add_argument('--debug', action='store_true', default=False,\n                        help='Use less verbose output.')\n    return parser.parse_args()", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='A script for parsing and compiling the borgmatic '\n                    'commands.')\n    parser.add_argument('-f', '--file', help='the borgmatic command file')\n    return parser.parse_args()\n", "def bash_completion():\n\n    return ['bash', '-c', 'import borgmatic; print(borgmatic.__doc__)']", "def bash_completion():\n    parser_flags = inspect.getmembers(bash_parser, inspect.ismethod)\n    for flag_name, flag_obj in parser_flags:\n        if not flag_name.startswith('_'):\n            yield flag_name, flag_obj", "def bash_completion():\n    return \"\"\"\n#!/usr/bin/env bash\n\n# Place your bash completion script here.\n\n# Usage: bash {}\n\n\"\"\".format(__file__)\n", "def bash_completion():\n    return \"\"\"\n                    import parser_flags\n                    parser_flags.parse_arguments();\n                \"\"\"", "def bash_completion():\n    return \"\"\"\n            bash -c'source %s && echo \"$?\" || echo \"$(bash -c'source %s && echo \"$?\" || echo \"$(bash -c'source %s && echo \"$?\"')')'\"\n    \"\"\" % (BASH_COMMAND_PATH, BASH_COMMAND_PATH, BASH_COMMAND_PATH)\n", "def bash_completion():\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Borgmatic's command-line argument parser.\")\n    parser.add_argument(\"--require-single-thread\", action=\"store_true\", help=\"\"\"\n        Indicates that the command should be run as a single thread with no blocking of main loop.\n        \"\"\")\n    parser.add_argument(\"--no-single-thread\", action=\"store_true\", help=\"\"\"\n        Indicates that the command should be run as a single thread without blocking of main loop.\n        \"\"\")\n    return parser.parse_args()", "def bash_completion():\n    return '\\n'.join(['# Completed by borgmatic'] + list(bash_commands()))"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return \"\"\"\n    import argcomplete\n    import sys\n    import os\n    from ambry.util import parser_flags\n    parser_flags = argcomplete.completer_parser().parse_args()\n    sys.argv = sys.argv[:1]\n    sys.argv.extend(sys.argv[1:])\n    parser_flags.parse_args()\n    \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--verbose', action='store_true', default=False,\n                        help='Use more verbose output.')\n    parser.add_argument('path', help='Path to borgmatic command.')\n    parser.add_argument('--debug', action='store_true', default=False,\n                        help='Use less verbose output.')\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='A script for parsing and compiling the borgmatic '\n                    'commands.')\n    parser.add_argument('-f', '--file', help='the borgmatic command file')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n\n    return ['bash', '-c', 'import borgmatic; print(borgmatic.__doc__)']", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser_flags = inspect.getmembers(bash_parser, inspect.ismethod)\n    for flag_name, flag_obj in parser_flags:\n        if not flag_name.startswith('_'):\n            yield flag_name, flag_obj", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\n#!/usr/bin/env bash\n\n# Place your bash completion script here.\n\n# Usage: bash {}\n\n\"\"\".format(__file__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\n                    import parser_flags\n                    parser_flags.parse_arguments();\n                \"\"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\n            bash -c'source %s && echo \"$?\" || echo \"$(bash -c'source %s && echo \"$?\" || echo \"$(bash -c'source %s && echo \"$?\"')')'\"\n    \"\"\" % (BASH_COMMAND_PATH, BASH_COMMAND_PATH, BASH_COMMAND_PATH)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Borgmatic's command-line argument parser.\")\n    parser.add_argument(\"--require-single-thread\", action=\"store_true\", help=\"\"\"\n        Indicates that the command should be run as a single thread with no blocking of main loop.\n        \"\"\")\n    parser.add_argument(\"--no-single-thread\", action=\"store_true\", help=\"\"\"\n        Indicates that the command should be run as a single thread without blocking of main loop.\n        \"\"\")\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join(['# Completed by borgmatic'] + list(bash_commands()))", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parse_arguments_with_subparsers(parser, *unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = parse_subparser_arguments(*unparsed_arguments)\n    return parse_args(parser)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.add_argument(\"--fake\", action=\"store_true\", help=\"Fake the parser\")\n    parser.add_argument(\"--local\", action=\"store_true\", help=\"Make the parser local\")\n    for argument in unparsed_arguments:\n        if argument.startswith(\"-\"):\n            continue\n        parser.add_argument(argument)\n    return vars(parser.parse_args())", "def parse_arguments(*unparsed_arguments):\n\n    return {\n        \"global\": make_parser(*unparsed_arguments),\n    }\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    return parse_subparser_arguments(parser, *unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    parsed_arguments = parser.parse_args(unparsed_arguments)\n    return parsed_arguments", "def parse_arguments(*unparsed_arguments):\n    return dict(((subparser_name, parser.parse_args(unparsed_arguments))\n                 for subparser_name, parser in global_parsers.items()))\n\n# end def parse_arguments()", "def parse_arguments(*unparsed_arguments):\n    return dict((subparser.name, subparser.parse_args(unparsed_arguments))\n                for subparser in parsers.values())\n", "def parse_arguments(*unparsed_arguments):\n    return parse_subparser_arguments(*unparsed_arguments)[\"subparsers\"]", "def parse_arguments(*unparsed_arguments):\n    parser = parse_subparser_arguments(*unparsed_arguments)\n    return parser.parse_args()"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parse_arguments_with_subparsers(parser, *unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = parse_subparser_arguments(*unparsed_arguments)\n    return parse_args(parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.add_argument(\"--fake\", action=\"store_true\", help=\"Fake the parser\")\n    parser.add_argument(\"--local\", action=\"store_true\", help=\"Make the parser local\")\n    for argument in unparsed_arguments:\n        if argument.startswith(\"-\"):\n            continue\n        parser.add_argument(argument)\n    return vars(parser.parse_args())", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n\n    return {\n        \"global\": make_parser(*unparsed_arguments),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    return parse_subparser_arguments(parser, *unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    parsed_arguments = parser.parse_args(unparsed_arguments)\n    return parsed_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict(((subparser_name, parser.parse_args(unparsed_arguments))\n                 for subparser_name, parser in global_parsers.items()))\n\n# end def parse_arguments()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict((subparser.name, subparser.parse_args(unparsed_arguments))\n                for subparser in parsers.values())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return parse_subparser_arguments(*unparsed_arguments)[\"subparsers\"]", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = parse_subparser_arguments(*unparsed_arguments)\n    return parser.parse_args()", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    subparsers_by_name = {}\n    for subparser_name, subparser in subparsers.iteritems():\n        subparsers_by_name[subparser_name] = subparser\n\n    return parse_subparser_arguments_from_namespaces(unparsed_arguments, subparsers_by_name)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg.parse(subparsers)\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = dict()\n    for arg in unparsed_arguments:\n        args.update(parse_subparser_argument(arg, subparsers))\n    return args, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name in unparsed_arguments:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments[subparser_name])\n    return parsed_arguments, subparser.remaining_args()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for arg in unparsed_arguments:\n        parsed_arguments.update(parse_subparser_argument(arg, subparsers))\n    return parsed_arguments, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    unparsed_args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        parsed_arg = parse_argument(arg, subparsers)\n        unparsed_args[arg] = parsed_arg\n        remaining_args.append(parsed_arg)\n    return unparsed_args, remaining_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    subparsers_by_name = {}\n    for subparser_name, subparser in subparsers.iteritems():\n        subparsers_by_name[subparser_name] = subparser\n\n    return parse_subparser_arguments_from_namespaces(unparsed_arguments, subparsers_by_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg.parse(subparsers)\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = dict()\n    for arg in unparsed_arguments:\n        args.update(parse_subparser_argument(arg, subparsers))\n    return args, unparsed_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name in unparsed_arguments:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments[subparser_name])\n    return parsed_arguments, subparser.remaining_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for arg in unparsed_arguments:\n        parsed_arguments.update(parse_subparser_argument(arg, subparsers))\n    return parsed_arguments, []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    unparsed_args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        parsed_arg = parse_argument(arg, subparsers)\n        unparsed_args[arg] = parsed_arg\n        remaining_args.append(parsed_arg)\n    return unparsed_args, remaining_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n    parser.add_argument('--file', help='The name of the top level parser.')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    return parser", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n            Borgmatic argument parser.\n            '''\n    )\n    parser.add_argument(\n        '--config',\n        type=str,\n        required=True,\n        help='''\n            Configuration file path.\n            '''\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Utility for parsing borgmatic data.')\n    parser.add_argument('--debug', action='store_true', help='Enables debug mode.')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', '-v', action='version',\n                        version='borgmatic {ver}'.format(ver=__version__))\n    subparsers = parser.add_subparsers(title='subcommands', dest='command')\n    return subparsers, parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Utility to build a top-level parser for borgmatic data')\n    parser.add_argument('--output', '-o', required=True, help='output directory')\n    parser.add_argument('--dry-run', '-d', action='store_true', help='dry run flag')\n    return parser", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    borgmatic_parser(subparsers)\n    return parser, subparsers", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Commands')\n    build_parser = subparsers.add_parser('build')\n    return parser, subparsers, build_parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Simple Python script to run the bot for the given chat')\n    parser.add_argument('chat', type=str)\n    parser.add_argument('-v', '--verbose', action='store_true', help='Increase output verbosity')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawDescriptionHelpFormatter)\n    subparsers = parser.add_subparsers(title='subcommands')\n    build_parser = subparsers.add_parser('build', help='Build the package')\n    build_parser.set_defaults(func=build_package)\n    return (parser, subparsers)"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n    parser.add_argument('--file', help='The name of the top level parser.')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    return parser", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n            Borgmatic argument parser.\n            '''\n    )\n    parser.add_argument(\n        '--config',\n        type=str,\n        required=True,\n        help='''\n            Configuration file path.\n            '''\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Utility for parsing borgmatic data.')\n    parser.add_argument('--debug', action='store_true', help='Enables debug mode.')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', '-v', action='version',\n                        version='borgmatic {ver}'.format(ver=__version__))\n    subparsers = parser.add_subparsers(title='subcommands', dest='command')\n    return subparsers, parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Utility to build a top-level parser for borgmatic data')\n    parser.add_argument('--output', '-o', required=True, help='output directory')\n    parser.add_argument('--dry-run', '-d', action='store_true', help='dry run flag')\n    return parser", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    borgmatic_parser(subparsers)\n    return parser, subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Commands')\n    build_parser = subparsers.add_parser('build')\n    return parser, subparsers, build_parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Simple Python script to run the bot for the given chat')\n    parser.add_argument('chat', type=str)\n    parser.add_argument('-v', '--verbose', action='store_true', help='Increase output verbosity')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawDescriptionHelpFormatter)\n    subparsers = parser.add_subparsers(title='subcommands')\n    build_parser = subparsers.add_parser('build', help='Build the package')\n    build_parser.set_defaults(func=build_package)\n    return (parser, subparsers)", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]", "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "def paging(response, max_results):\n    page = 0\n    while page <= max_results:\n        yield response[page]\n        page += 1\n", "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        yield response[page - 1]\n        page += 1\n", "def paging(response, max_results):\n    if max_results > 0:\n        return islice(response, 0, max_results)\n    else:\n        return response\n", "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[:max_results]\n        yield response\n", "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * max_results:(page + 1) * max_results]\n        page += 1\n", "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for result in response:\n            yield result\n        if page == max_results:\n            break\n        page += 1\n", "def paging(response, max_results):\n    return itertools.islice(response, 0, max_results)\n", "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for item in response:\n            yield item\n        if page == max_results:\n            break\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    page = 0\n    while page <= max_results:\n        yield response[page]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        yield response[page - 1]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if max_results > 0:\n        return islice(response, 0, max_results)\n    else:\n        return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[:max_results]\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * max_results:(page + 1) * max_results]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for result in response:\n            yield result\n        if page == max_results:\n            break\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return itertools.islice(response, 0, max_results)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for item in response:\n            yield item\n        if page == max_results:\n            break\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    return int(round(float(size) / 1024 ** 2))\n", "def size_to_bytes(size: str) -> int:\n    if isinstance(size, float):\n        return int(size)\n    return int(size.split(' ')[0])\n", "def size_to_bytes(size: str) -> int:\n    return int(size)\n", "def size_to_bytes(size: str) -> int:\n    return int(round(Decimal(size).quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)))\n", "def size_to_bytes(size: str) -> int:\n    size = float(size)\n    if size < 1000:\n        return size\n    size = int(round(size / 1024))\n    return size\n", "def size_to_bytes(size: str) -> int:\n    return int(round(float(size) / (1024 * 1024), 0))\n", "def size_to_bytes(size: str) -> int:\n    try:\n        num = int(size)\n        return num\n    except ValueError:\n        return int(round(float(size) / 1024, 0))\n", "def size_to_bytes(size: str) -> int:\n    size = int(size)\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"]:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n    return int(round(size))\n", "def size_to_bytes(size: str) -> int:\n    size_bytes = size.replace('B', '').replace('K', '')\n    return int(size_bytes)\n", "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        pass\n    # Assume it's a file size like '100M'\n    return int(math.floor(float(size) / 1024 ** 2))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(round(float(size) / 1024 ** 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if isinstance(size, float):\n        return int(size)\n    return int(size.split(' ')[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(round(Decimal(size).quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    size = float(size)\n    if size < 1000:\n        return size\n    size = int(round(size / 1024))\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(round(float(size) / (1024 * 1024), 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    try:\n        num = int(size)\n        return num\n    except ValueError:\n        return int(round(float(size) / 1024, 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    size = int(size)\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"]:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n    return int(round(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    size_bytes = size.replace('B', '').replace('K', '')\n    return int(size_bytes)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        pass\n    # Assume it's a file size like '100M'\n    return int(math.floor(float(size) / 1024 ** 2))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)\n", "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        for k, v in d.items():\n            if k not in result:\n                result[k] = 0\n            result[k] += v\n    return result\n", "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)", "def _dictsum(dicts):\n    return dict([(k, sum(d.values())) for k, d in dicts])\n", "def _dictsum(dicts):\n    return _dict(reduce(operator.add, map(_dict, dicts)))\n", "def _dictsum(dicts):\n    return reduce(lambda d, k: d.update({k: d.get(k) + d.get(k)}), dicts, {})\n", "def _dictsum(dicts):\n    return reduce(lambda acc, d: acc.update(d) or acc, dicts, {})\n", "def _dictsum(dicts):\n    return dict(reduce(lambda x, y: x.__add__(y), dicts, {}))\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        for k, v in d.items():\n            if k not in result:\n                result[k] = 0\n            result[k] += v\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict([(k, sum(d.values())) for k, d in dicts])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return _dict(reduce(operator.add, map(_dict, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return reduce(lambda d, k: d.update({k: d.get(k) + d.get(k)}), dicts, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return reduce(lambda acc, d: acc.update(d) or acc, dicts, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(lambda x, y: x.__add__(y), dicts, {}))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.iteritems():\n        url = url.replace('{' + key + '}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        url = url.replace(arg, url_args[arg])\n    return url", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "def _replace_url_args(url, url_args):\n    return _replace_template_args(url, url_args)\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace(\"{{{}}}\".format(k), v)\n    return url", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.iteritems():\n        url = url.replace('{' + key + '}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        url = url.replace(arg, url_args[arg])\n    return url", "is_pass": true, "return_code": 0}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return _replace_template_args(url, url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace(\"{{{}}}\".format(k), v)\n    return url", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    if val in ['None', 'none', '']:\n        return True\n    return False", "def is_none_string(val: Any) -> bool:\n    return val is None\n", "def is_none_string(val: str) -> bool:\n    return val == 'None'", "def is_none_string(val: str) -> bool:\n    return val == 'None'\n", "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none'\n", "def is_none_string(val: str) -> bool:\n    return val in (\"\", \"None\", \"none\")\n", "def is_none_string(val: str) -> bool:\n    return val in ('None', 'None None')\n", "def is_none_string(val: str) -> bool:\n    \n    \n    return val.strip() == \"\"\n", "def is_none_string(val: str) -> bool:\n    return val in (\"\", None, \"none\", \"None\", \"none\", \"\", \"none\", \"none\")\n", "def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    if val in ['None', 'none', '']:\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in (\"\", \"None\", \"none\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in ('None', 'None None')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    \n    \n    return val.strip() == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in (\"\", None, \"none\", \"None\", \"none\", \"\", \"none\", \"none\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if path == root:\n        raise ValueError('path {} is the same as root {}'.format(path, root))\n    if path == '.':\n        path = ''\n    if root!= '/':\n        path = '/{}'.format(path)\n    return path", "def strip_root(path, root):\n    path = os.path.abspath(path)\n    root = os.path.abspath(root)\n    if not os.path.commonprefix((path, root)):\n        raise ValueError(\"root not found\")\n    return path[len(root):]\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    else:\n        return os.path.relpath(path, root)\n", "def strip_root(path, root):\n    if not path:\n        return path\n    elif path == root:\n        return path\n    else:\n        return path.replace(root, '')\n", "def strip_root(path, root):\n    \n    \n    try:\n        return path.replace(root, '')\n    except ValueError:\n        raise ValueError('%s does not contain root \"%s\".' % (path, root))\n", "def strip_root(path, root):\n    if root in path:\n        return path.replace(root, '')\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError(\"%s not in %s\" % (path, root))", "def strip_root(path, root):\n    if not os.path.isabs(path):\n        raise Exception(\"Path not absolute: %s\" % path)\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"Path is not under root: %s\" % path)", "def strip_root(path, root):\n    \n    \n    if os.path.exists(os.path.join(path, root)):\n        return path\n    else:\n        raise Exception(\"%s does not exist in %s\" % (root, path))\n", "def strip_root(path, root):\n    if os.path.isfile(path):\n        if os.path.isfile(os.path.join(path, root)):\n            os.remove(path)\n        elif os.path.isdir(os.path.join(path, root)):\n            shutil.rmtree(path)\n    elif os.path.isdir(path):\n        shutil.rmtree(path)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if path == root:\n        raise ValueError('path {} is the same as root {}'.format(path, root))\n    if path == '.':\n        path = ''\n    if root!= '/':\n        path = '/{}'.format(path)\n    return path", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    path = os.path.abspath(path)\n    root = os.path.abspath(root)\n    if not os.path.commonprefix((path, root)):\n        raise ValueError(\"root not found\")\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    else:\n        return os.path.relpath(path, root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        return path\n    elif path == root:\n        return path\n    else:\n        return path.replace(root, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \n    \n    try:\n        return path.replace(root, '')\n    except ValueError:\n        raise ValueError('%s does not contain root \"%s\".' % (path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root in path:\n        return path.replace(root, '')\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError(\"%s not in %s\" % (path, root))", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not os.path.isabs(path):\n        raise Exception(\"Path not absolute: %s\" % path)\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"Path is not under root: %s\" % path)", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \n    \n    if os.path.exists(os.path.join(path, root)):\n        return path\n    else:\n        raise Exception(\"%s does not exist in %s\" % (root, path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if os.path.isfile(path):\n        if os.path.isfile(os.path.join(path, root)):\n            os.remove(path)\n        elif os.path.isdir(os.path.join(path, root)):\n            shutil.rmtree(path)\n    elif os.path.isdir(path):\n        shutil.rmtree(path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    return''.join(parser._flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest == '--flags':\n            flags = flags +'' + arg.default +'' + arg.dest\n    return flags.strip()\n", "def parser_flags(parser):\n    return''.join(['{}={}'.format(k, v) for k, v in parser._flags.items()])\n", "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        elif isinstance(flag, argparse._StoreFlag):\n            flags.append(flag.dest)\n        else:\n            flags.append('--' + flag.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(parser.flags.args)\n", "def parser_flags(parser):\n    return''.join(parser.parse_args())\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--' + arg.dest.replace('_', '-'))\n        else:\n            flags.append(arg.action)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(str(f) for f in parser.flags)\n", "def parser_flags(parser):\n    return''.join(parser._actions)\n", "def parser_flags(parser):\n    return \" \".join([str(f) for f in parser.flags])"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest == '--flags':\n            flags = flags +'' + arg.default +'' + arg.dest\n    return flags.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['{}={}'.format(k, v) for k, v in parser._flags.items()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        elif isinstance(flag, argparse._StoreFlag):\n            flags.append(flag.dest)\n        else:\n            flags.append('--' + flag.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser.flags.args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--' + arg.dest.replace('_', '-'))\n        else:\n            flags.append(arg.action)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(f) for f in parser.flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join([str(f) for f in parser.flags])", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return was_processed(processed, path_name, verbose)\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print('Checking if {} already processed'.format(path_name))\n    if processed.__contains__(path_name):\n        processed.remove(path_name)\n        return True\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {}, already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('{} already processed.'.format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"checking for {} in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"adding {} to processed set\".format(path_name))\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print('        {} is already in the set'.format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Processed {}\".format(path_name))\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return was_processed(processed, path_name, verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print('Checking if {} already processed'.format(path_name))\n    if processed.__contains__(path_name):\n        processed.remove(path_name)\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {}, already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('{} already processed.'.format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"checking for {} in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"adding {} to processed set\".format(path_name))\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print('        {} is already in the set'.format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Processed {}\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    # return [(x,y) for (x,y) in vertices]\n    return [(vertices[0], vertices[1]), (vertices[2], vertices[3])]\n", "def vertex3tuple(vertices):\n    return tuple([vertices[i:i+3] for i in range(0, len(vertices), 3)])", "def vertex3tuple(vertices):\n    return tuple(vertices[:2])\n", "def vertex3tuple(vertices):\n    return tuple([vertices[i] + (vertices[i+1]-vertices[i])*0.5 for i in range(len(vertices)-1)])\n\n# ------------------------------------------------------------------------------", "def vertex3tuple(vertices):\n    return tuple((v, v + v.cross(v), v + v.cross(v + v.cross(v))) for v in vertices)", "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[i+1], vertices[i+2]) for i in range(len(vertices)-1))", "def vertex3tuple(vertices):\n    return vertices\n", "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n    return tuple(map(tuple, zip(vertices[0::2], vertices[1::2])))", "def vertex3tuple(vertices):\n    return tuple(zip(vertices[0::2], vertices[1::2]))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    # return [(x,y) for (x,y) in vertices]\n    return [(vertices[0], vertices[1]), (vertices[2], vertices[3])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[i:i+3] for i in range(0, len(vertices), 3)])", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(vertices[:2])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[i] + (vertices[i+1]-vertices[i])*0.5 for i in range(len(vertices)-1)])\n\n# ------------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((v, v + v.cross(v), v + v.cross(v + v.cross(v))) for v in vertices)", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[i+1], vertices[i+2]) for i in range(len(vertices)-1))", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return vertices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(map(tuple, zip(vertices[0::2], vertices[1::2])))", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(zip(vertices[0::2], vertices[1::2]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[int]) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    return result\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return alphabet[0]\n    else:\n        return alphabet[number % len(alphabet)]\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number % len(alphabet)]", "def int_to_string(number: int, alphabet: str = \"0123456789ABCDEF\") -> str:\n    return str(number).zfill(len(alphabet))\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number < 0:\n        raise ValueError(\"Input value must be non-negative\")\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number // len(alphabet)] + alphabet[number % len(alphabet)]\n", "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    return alphabet[number]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[int]) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return alphabet[0]\n    else:\n        return alphabet[number % len(alphabet)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number % len(alphabet)]", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str = \"0123456789ABCDEF\") -> str:\n    return str(number).zfill(len(alphabet))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number < 0:\n        raise ValueError(\"Input value must be non-negative\")\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number // len(alphabet)] + alphabet[number % len(alphabet)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"flows\":\n            flow_params[k][register_number] = v\n        elif k == \"register_value\":\n            flow_params[k][register_value] = v\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if flow_params[key] == register_value:\n            flow_params[key] = register_number\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == 'flow':\n            flow_params[key] = value['flow']\n        elif key =='register':\n            flow_params[key] = value['register'][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if flow_params[key]['register_number'] == register_number:\n            flow_params[key]['register_value'] = register_value\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if v['register_value'] == register_value:\n            flow_params[k] = v.copy()\n            del flow_params[k]['register_value']\n            del flow_params[k]['register_number']\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params.keys():\n        flow_params[register_number] = flow_params[register_number].replace(register_value, \"\")\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"]:\n        flow_params[\"registers\"][register_value] = flow_params[\"registers\"][register_value] - 1\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers']:\n        flow_params['registers'][register_value] = flow_params['registers'][register_value].replace(\n            '<replace_value>', str(register_number))\n", "def _replace_register(flow_params, register_number, register_value):\n    for flow_param in flow_params:\n        if flow_param[\"reg_number\"] == register_number:\n            flow_param[\"reg_value\"] = flow_param[\"reg_value\"].replace(\n                register_value, register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[key] = value.replace(register_value, register_number)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"flows\":\n            flow_params[k][register_number] = v\n        elif k == \"register_value\":\n            flow_params[k][register_value] = v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if flow_params[key] == register_value:\n            flow_params[key] = register_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == 'flow':\n            flow_params[key] = value['flow']\n        elif key =='register':\n            flow_params[key] = value['register'][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if flow_params[key]['register_number'] == register_number:\n            flow_params[key]['register_value'] = register_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if v['register_value'] == register_value:\n            flow_params[k] = v.copy()\n            del flow_params[k]['register_value']\n            del flow_params[k]['register_number']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params.keys():\n        flow_params[register_number] = flow_params[register_number].replace(register_value, \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"]:\n        flow_params[\"registers\"][register_value] = flow_params[\"registers\"][register_value] - 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers']:\n        flow_params['registers'][register_value] = flow_params['registers'][register_value].replace(\n            '<replace_value>', str(register_number))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for flow_param in flow_params:\n        if flow_param[\"reg_number\"] == register_number:\n            flow_param[\"reg_value\"] = flow_param[\"reg_value\"].replace(\n                register_value, register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[key] = value.replace(register_value, register_number)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return re.sub('\\.', arg, value)", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    \n    \n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return re.sub('\\.', arg, value)", "is_pass": false, "return_code": 1}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                    for g in subclasses(s)]\n", "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if subcls not in cls.__subclasses__()]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if subclass is not cls]", "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if not subclass.__name__.startswith('_')]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [s for s in cls.__subclasses__() if not s.__bases__()]\n", "def subclasses(cls):\n    return set(cls.__subclasses__()).union(\n        [s for c in cls.__subclasses__() for s in subclasses(c)])"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                    for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if subcls not in cls.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if subclass is not cls]", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if not subclass.__name__.startswith('_')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [s for s in cls.__subclasses__() if not s.__bases__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return set(cls.__subclasses__()).union(\n        [s for c in cls.__subclasses__() for s in subclasses(c)])", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return int(''.join([alphabet[i] for i in string]))\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return sum((alphabet.index(x) for x in string))\n", "def string_to_int(string: str, alphabet: str = string.ascii_uppercase) -> int:\n    return sum([ord(c) for c in string]) % len(alphabet)\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, 0)\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string) if alphabet == \"\" else sum((alphabet.index(c) for c in string))\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    string = string.replace(' ', '')\n    if not string:\n        return 0\n    result = 0\n    for s in string:\n        result *= len(alphabet)\n        result += alphabet.index(s)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return sum([(alphabet.index(char) + 1) * (len(alphabet) - (alphabet.index(char) + 1))\n                for char in string])\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string)"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return int(''.join([alphabet[i] for i in string]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return sum((alphabet.index(x) for x in string))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str = string.ascii_uppercase) -> int:\n    return sum([ord(c) for c in string]) % len(alphabet)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string) if alphabet == \"\" else sum((alphabet.index(c) for c in string))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    string = string.replace(' ', '')\n    if not string:\n        return 0\n    result = 0\n    for s in string:\n        result *= len(alphabet)\n        result += alphabet.index(s)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return sum([(alphabet.index(char) + 1) * (len(alphabet) - (alphabet.index(char) + 1))\n                for char in string])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if url.endswith('.tar.gz'):\n        return get_repo_archive_tar(url, destination_path)\n    return get_repo_archive_tar(url, destination_path)\n", "def get_repo_archive(url: str, destination_path: str):\n    archive_path = get_archive_path(url, destination_path)\n    return extract_archive(url, archive_path)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # TODO: Add support for other paths.\n    response = requests.get(url, stream=True)\n    with open(destination_path, \"wb\") as file:\n        for chunk in response.iter_content(chunk_size=1024):\n            file.write(chunk)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return download(url, destination_path)\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive = urllib.request.urlopen(url)\n    with tarfile.open(fileobj=archive) as tar:\n        tar.extractall(destination_path)\n    return Path(destination_path)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar = tarfile.open(path=destination_path, mode=\"r:gz\")\n    tar.extractall(path=str(destination_path))\n    tar.close()\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    r = requests.get(url, stream=True)\n    for i, repo in enumerate(r.iter_content(1024)):\n        if i % 100 == 0:\n            logger.info(f\"Processed {i} of {len(r.iter_content(1024))} repos\")\n        tar_file = destination_path / f\"{i}.tar.gz\"\n        tar_file.write_text(repo)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = Path(destination_path) / Path(url.split('/')[-1]).split('.')[0]\n    r = requests.get(url)\n    with open(archive_path, 'wb') as f:\n        f.write(r.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = pathlib.Path(destination_path)\n\n    if not archive_path.exists():\n        requests.get(url)\n        archive_path.mkdir()\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    return download_tarball(url, destination_path)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if url.endswith('.tar.gz'):\n        return get_repo_archive_tar(url, destination_path)\n    return get_repo_archive_tar(url, destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str):\n    archive_path = get_archive_path(url, destination_path)\n    return extract_archive(url, archive_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # TODO: Add support for other paths.\n    response = requests.get(url, stream=True)\n    with open(destination_path, \"wb\") as file:\n        for chunk in response.iter_content(chunk_size=1024):\n            file.write(chunk)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return download(url, destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive = urllib.request.urlopen(url)\n    with tarfile.open(fileobj=archive) as tar:\n        tar.extractall(destination_path)\n    return Path(destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar = tarfile.open(path=destination_path, mode=\"r:gz\")\n    tar.extractall(path=str(destination_path))\n    tar.close()\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    r = requests.get(url, stream=True)\n    for i, repo in enumerate(r.iter_content(1024)):\n        if i % 100 == 0:\n            logger.info(f\"Processed {i} of {len(r.iter_content(1024))} repos\")\n        tar_file = destination_path / f\"{i}.tar.gz\"\n        tar_file.write_text(repo)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = Path(destination_path) / Path(url.split('/')[-1]).split('.')[0]\n    r = requests.get(url)\n    with open(archive_path, 'wb') as f:\n        f.write(r.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = pathlib.Path(destination_path)\n\n    if not archive_path.exists():\n        requests.get(url)\n        archive_path.mkdir()\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    return download_tarball(url, destination_path)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform == 'darwin'\n", "def os_is_mac():\n    return platform.system() == 'Darwin'", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform == 'darwin'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == 'Darwin'", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "def regex_dict(item):\n    return {k.replace('*.', '[^/]*'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {\n        key: re.compile(key_value)\n        for key, key_value in item.items()\n    }\n", "def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "def regex_dict(item):\n    return dict((k, re.compile(v)) for k, v in item.items())", "def regex_dict(item):\n    return dict((key, regex.sub(r'\\g<1>\\g<2>', item[key])) for key in item)\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return dict((re.escape(k), re.escape(v)) for k, v in item.items())\n", "def regex_dict(item):\n    for k, v in item.items():\n        if k == '*.h' or k.endswith('.h'):\n            item[k] = convert_regex(v)\n    return item\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.', '[^/]*'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(key_value)\n        for key, key_value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((k, re.compile(v)) for k, v in item.items())", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((key, regex.sub(r'\\g<1>\\g<2>', item[key])) for key in item)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((re.escape(k), re.escape(v)) for k, v in item.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    for k, v in item.items():\n        if k == '*.h' or k.endswith('.h'):\n            item[k] = convert_regex(v)\n    return item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    return name[1:-1] if name.startswith('\"') and name.endswith('\"') else name\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name.startswith('\"') and name.endswith('\"'):\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    return name[1:-1]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1] if name.startswith('\"') and name.endswith('\"') else name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name.startswith('\"') and name.endswith('\"'):\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    return shlex.split(s, comments=False, posix=platform)\n", "def split(s, platform='this'):\n    return shlex.split(s, platform)\n", "def split(s, platform='this'):\n    return shlex.split(s, posix=platform)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(' '.join(s.split()))\n    elif platform == 'windows':\n        return shlex.split(' '.join(s.split('\\\\')))\n    else:\n        return shlex.split(s)", "def split(s, platform='this'):\n    return re.split(r'\\s+', s, flags=re.MULTILINE | re.UNICODE)\n\n\n# TODO: remove this function and use the fast REGEX instead", "def split(s, platform='this'):\n\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [s]\n    elif platform == 'cmd':\n        return shlex.split(s)\n    else:\n        return []", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    elif platform == 'cmd':\n        return shlex.split(s, posix=False)\n    else:\n        raise Exception(\"Invalid platform specified.\")", "def split(s, platform='this'):\n    return shlex.split(s, platform)", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s.replace(' ', '\\ '))\n    elif platform == 'windows':\n        return shlex.split(s.replace('\\ ',''))\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split()\n    elif platform == 'posix':\n        return shlex.split(s)\n    elif platform == 'win':\n        return shlex.split(s.replace('\\\\', '/'))\n    else:\n        return shlex.split(s)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, comments=False, posix=platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, posix=platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(' '.join(s.split()))\n    elif platform == 'windows':\n        return shlex.split(' '.join(s.split('\\\\')))\n    else:\n        return shlex.split(s)", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return re.split(r'\\s+', s, flags=re.MULTILINE | re.UNICODE)\n\n\n# TODO: remove this function and use the fast REGEX instead", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [s]\n    elif platform == 'cmd':\n        return shlex.split(s)\n    else:\n        return []", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    elif platform == 'cmd':\n        return shlex.split(s, posix=False)\n    else:\n        raise Exception(\"Invalid platform specified.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, platform)", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s.replace(' ', '\\ '))\n    elif platform == 'windows':\n        return shlex.split(s.replace('\\ ',''))\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split()\n    elif platform == 'posix':\n        return shlex.split(s)\n    elif platform == 'win':\n        return shlex.split(s.replace('\\\\', '/'))\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str, repository_url: str\n) -> str:\n    if archive_path is None:\n        return repository_url\n    return _uncompress(archive_path, repository_url)\n", "def prepare_repository_from_archive(\n    archive_path: Path, verbose: bool = False\n) -> Tuple[str, Path]:\n    if not archive_path.exists():\n        raise ValueError(f\"{archive_path} does not exist.\")\n\n    repository_url = archive_path.as_uri()\n    repository_path = archive_path.parent / repository_url.stem\n\n    if verbose:\n        print(f\"\\n    Repository: {repository_path}\")\n\n    return repository_url, repository_path\n", "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str = DEFAULT_REPOSITORY_URL\n) -> str:\n    archive = open_archive(archive_path)\n    return prepare_repository_from_archive_with_path(archive, repository_url)\n", "def prepare_repository_from_archive(\n    archive_path: Path, repo_name: str, work_dir: Path\n) -> str:\n    return archive_path.with_suffix(f\"-{repo_name}\")\n", "def prepare_repository_from_archive(\n    archive_path: str, archive_url: str, prefix: str\n) -> str:\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=archive_url)\n    return archive_url + prefix\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    repo_name: str,\n    repo_url: str,\n    target_dir: str,\n) -> str:\n    try:\n        return _prepare_repository_from_archive(\n            archive_path, repo_name, repo_url, target_dir\n        )\n    except OSError:\n        raise ArchiveError(f\"{archive_path} not found\") from None\n", "def prepare_repository_from_archive(\n    archive_path: str, dest_path: str, strip_path_prefix: bool = True\n) -> str:\n    with archive_path.open(\"rb\") as f:\n        return _prepare_repository_from_archive(\n            f, dest_path, strip_path_prefix\n        )\n", "def prepare_repository_from_archive(\n    archive_path: str, repository_name: str\n) -> str:\n    import subprocess\n\n    try:\n        archive = subprocess.check_output(\n            [\"tar\", \"-C\", archive_path, \"-xzf\", repository_name]\n        )\n        return archive.decode(\"utf-8\")\n    except subprocess.CalledProcessError as error:\n        raise ImportError(\n            \"Unable to import repository from archive: {}\".format(error)\n        ) from error\n", "def prepare_repository_from_archive(\n    archive_path: Path, version: str, tar_name: str\n) -> str:\n    archive_path.unlink()\n    repo = archive_path.parent / tar_name\n    repo.unlink()\n    with tarfile.open(str(archive_path), \"r:gz\") as tar:\n        tar.extractall(path=str(repo))\n    return str(repo.as_uri())\n", "def prepare_repository_from_archive(\n    archive_path: Path, **kwargs: Any\n) -> str:\n    return _prepare_repository(archive_path, **kwargs)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str\n) -> str:\n    if archive_path is None:\n        return repository_url\n    return _uncompress(archive_path, repository_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, verbose: bool = False\n) -> Tuple[str, Path]:\n    if not archive_path.exists():\n        raise ValueError(f\"{archive_path} does not exist.\")\n\n    repository_url = archive_path.as_uri()\n    repository_path = archive_path.parent / repository_url.stem\n\n    if verbose:\n        print(f\"\\n    Repository: {repository_path}\")\n\n    return repository_url, repository_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str = DEFAULT_REPOSITORY_URL\n) -> str:\n    archive = open_archive(archive_path)\n    return prepare_repository_from_archive_with_path(archive, repository_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repo_name: str, work_dir: Path\n) -> str:\n    return archive_path.with_suffix(f\"-{repo_name}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, archive_url: str, prefix: str\n) -> str:\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=archive_url)\n    return archive_url + prefix\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    repo_name: str,\n    repo_url: str,\n    target_dir: str,\n) -> str:\n    try:\n        return _prepare_repository_from_archive(\n            archive_path, repo_name, repo_url, target_dir\n        )\n    except OSError:\n        raise ArchiveError(f\"{archive_path} not found\") from None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, dest_path: str, strip_path_prefix: bool = True\n) -> str:\n    with archive_path.open(\"rb\") as f:\n        return _prepare_repository_from_archive(\n            f, dest_path, strip_path_prefix\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_name: str\n) -> str:\n    import subprocess\n\n    try:\n        archive = subprocess.check_output(\n            [\"tar\", \"-C\", archive_path, \"-xzf\", repository_name]\n        )\n        return archive.decode(\"utf-8\")\n    except subprocess.CalledProcessError as error:\n        raise ImportError(\n            \"Unable to import repository from archive: {}\".format(error)\n        ) from error\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, version: str, tar_name: str\n) -> str:\n    archive_path.unlink()\n    repo = archive_path.parent / tar_name\n    repo.unlink()\n    with tarfile.open(str(archive_path), \"r:gz\") as tar:\n        tar.extractall(path=str(repo))\n    return str(repo.as_uri())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, **kwargs: Any\n) -> str:\n    return _prepare_repository(archive_path, **kwargs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored.sort()\n    return ','.join(ignored)\n", "def addignored(ignored):\n\n    files = list(map(lambda x: x.split(\"/\")[-1], ignored))\n    files.sort()\n    return \",\".join(files)", "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "def addignored(ignored):\n    ignored = sorted(ignored)\n    ignored = ','.join(ignored)\n    return ignored", "def addignored(ignored):\n    # a list of all files that are ignored\n    ignored_files = []\n    # get the files that are ignored\n    for filename in ignored:\n        # add the filename to the list of ignored files\n        ignored_files.append(filename)\n    # return the list of ignored files\n    return ','.join(sorted(ignored_files))\n", "def addignored(ignored):\n    files = []\n    for f in ignored:\n        files.append(f)\n    files.sort()\n    return ','.join(files)\n", "def addignored(ignored):\n    ignored = ignored.strip('\\n')\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ','.join(ignored)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def addignored(ignored):\n    files = []\n    for filename in ignored:\n        files.append(os.path.basename(filename))\n    files.sort()\n    return ','.join(files)", "def addignored(ignored):\n    # define the list of ignored files\n    ignored_files = []\n    # loop through the list and add the files to the list\n    for file in ignored:\n        if file not in ignored_files:\n            ignored_files.append(file)\n    # turn the list into a string\n    ignored_string = ','.join(ignored_files)\n    # return the string\n    return ignored_string\n\n# -----------------------------------------------------------------------------", "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored.sort()\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    files = list(map(lambda x: x.split(\"/\")[-1], ignored))\n    files.sort()\n    return \",\".join(files)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = sorted(ignored)\n    ignored = ','.join(ignored)\n    return ignored", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    # a list of all files that are ignored\n    ignored_files = []\n    # get the files that are ignored\n    for filename in ignored:\n        # add the filename to the list of ignored files\n        ignored_files.append(filename)\n    # return the list of ignored files\n    return ','.join(sorted(ignored_files))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for f in ignored:\n        files.append(f)\n    files.sort()\n    return ','.join(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.strip('\\n')\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ','.join(ignored)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for filename in ignored:\n        files.append(os.path.basename(filename))\n    files.sort()\n    return ','.join(files)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    # define the list of ignored files\n    ignored_files = []\n    # loop through the list and add the files to the list\n    for file in ignored:\n        if file not in ignored_files:\n            ignored_files.append(file)\n    # turn the list into a string\n    ignored_string = ','.join(ignored_files)\n    # return the string\n    return ignored_string\n\n# -----------------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return filename in SUPPORTED_FILENAMES\n", "def match(filename):\n    return filename in ['', '.', '..']", "def match(filename):\n    return filename.endswith('.py')\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in types", "def match(filename):\n    if not filename:\n        return False\n    if filename.startswith('/'):\n        return False\n    return _type_regex.match(filename) is not None\n", "def match(filename):\n    if filename in FILE_MAPPINGS:\n        return True\n    return False", "def match(filename):\n    return filename.endswith(('.py', '.pyc', '.pyo'))\n", "def match(filename):\n    return filename in supported_files", "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".pyc\")\n", "def match(filename):\n    return filename in ['stdlib.py','stdlib.pyc','stdlib.pyo']"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return filename in SUPPORTED_FILENAMES\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename in ['', '.', '..']", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith('.py')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in types", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    if not filename:\n        return False\n    if filename.startswith('/'):\n        return False\n    return _type_regex.match(filename) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    if filename in FILE_MAPPINGS:\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith(('.py', '.pyc', '.pyo'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename in supported_files", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".pyc\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename in ['stdlib.py','stdlib.pyc','stdlib.pyo']", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    try:\n        return parse_frequency_dict[frequency.lower()]\n    except KeyError:\n        raise ValueError(\"Cannot parse frequency: %r\" % frequency)\n", "def parse_frequency(frequency):\n    if frequency in _FREQUENCY_MAP:\n        return datetime.timedelta(**_FREQUENCY_MAP[frequency])\n    return None\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency.lower() in (\"always\", \"never\"):\n        return datetime.timedelta()\n    try:\n        return dateutil.parser.parse(frequency)\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {0}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency in (\"weeks\", \"week\", \"weeks_per_week\"):\n        return datetime.timedelta(weeks=52)\n    if frequency in (\"months\", \"month\", \"months_per_year\"):\n        return datetime.timedelta(days=52*365)\n    if frequency in (\"years\", \"year\", \"years_per_month\"):\n        return datetime.timedelta(days=52*365*12)\n    raise ValueError(\"Unknown frequency %r\" % frequency)", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq.strip(): None for freq in frequency.split(',')})\n    except ValueError:\n        raise ValueError(f\"invalid frequency: {frequency}\")\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency in (\"always\", \"once\", \"two-weeks\"):\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency)})\n    except ValueError:\n        raise ValueError(\"Unknown frequency: {}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency == \"always\":\n        return datetime.timedelta(weeks=3)\n    else:\n        try:\n            return parse_time_unit(frequency)\n        except ValueError:\n            raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    try:\n        return datetime.timedelta(weeks=int(frequency))\n    except ValueError:\n        raise ValueError(\"cannot parse frequency '%s' as a timedelta\" % frequency)", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    frequency = frequency.strip()\n    if not frequency:\n        return None\n    return parse_frequency_dict(frequency)\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(days=7)\n    else:\n        return parse_timedelta(frequency)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    try:\n        return parse_frequency_dict[frequency.lower()]\n    except KeyError:\n        raise ValueError(\"Cannot parse frequency: %r\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in _FREQUENCY_MAP:\n        return datetime.timedelta(**_FREQUENCY_MAP[frequency])\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency.lower() in (\"always\", \"never\"):\n        return datetime.timedelta()\n    try:\n        return dateutil.parser.parse(frequency)\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {0}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in (\"weeks\", \"week\", \"weeks_per_week\"):\n        return datetime.timedelta(weeks=52)\n    if frequency in (\"months\", \"month\", \"months_per_year\"):\n        return datetime.timedelta(days=52*365)\n    if frequency in (\"years\", \"year\", \"years_per_month\"):\n        return datetime.timedelta(days=52*365*12)\n    raise ValueError(\"Unknown frequency %r\" % frequency)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq.strip(): None for freq in frequency.split(',')})\n    except ValueError:\n        raise ValueError(f\"invalid frequency: {frequency}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency in (\"always\", \"once\", \"two-weeks\"):\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency)})\n    except ValueError:\n        raise ValueError(\"Unknown frequency: {}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency == \"always\":\n        return datetime.timedelta(weeks=3)\n    else:\n        try:\n            return parse_time_unit(frequency)\n        except ValueError:\n            raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    try:\n        return datetime.timedelta(weeks=int(frequency))\n    except ValueError:\n        raise ValueError(\"cannot parse frequency '%s' as a timedelta\" % frequency)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    frequency = frequency.strip()\n    if not frequency:\n        return None\n    return parse_frequency_dict(frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(days=7)\n    else:\n        return parse_timedelta(frequency)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host.startswith('127.0.0.1')\n", "def is_local(host):\n    return host == \"127.0.0.1\"\n", "def is_local(host):\n    return host == \"127.0.0.1\"\n", "def is_local(host):\n    return host == '127.0.0.1'", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == socket.gethostname() or host == socket.gethostbyaddr(socket.gethostname())[0]\n", "def is_local(host):\n    return host == '127.0.0.1'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host.startswith('127.0.0.1')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == \"127.0.0.1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == \"127.0.0.1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == socket.gethostname() or host == socket.gethostbyaddr(socket.gethostname())[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            if pattern.endswith('*'):\n                yield pattern[:-1]\n            else:\n                yield pattern\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [make_glob_path(path) for path in find_paths]\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        for match in re.finditer(r'([^/]+)\\.([^/]+)', path):\n            yield match.group(1) + ':' + match.group(2)", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    if find_paths and isinstance(find_paths, (list, tuple)):\n        return [make_find_path(p) for p in find_paths]\n    else:\n        return find_paths\n", "def make_find_paths(find_paths):\n    return [make_glob_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is None:\n            continue\n        if not path.endswith('*'):\n            path += '*'\n        yield path\n", "def make_find_paths(find_paths):\n    def make_find_path(path):\n        return'sh:**/*{}*/**'.format(path)\n\n    def make_glob(pattern):\n        return 'pp:root/{}'.format(pattern)\n\n    return list(map(make_find_path, find_paths))"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            if pattern.endswith('*'):\n                yield pattern[:-1]\n            else:\n                yield pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_glob_path(path) for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        for match in re.finditer(r'([^/]+)\\.([^/]+)', path):\n            yield match.group(1) + ':' + match.group(2)", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths and isinstance(find_paths, (list, tuple)):\n        return [make_find_path(p) for p in find_paths]\n    else:\n        return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_glob_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is None:\n            continue\n        if not path.endswith('*'):\n            path += '*'\n        yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    def make_find_path(path):\n        return'sh:**/*{}*/**'.format(path)\n\n    def make_glob(pattern):\n        return 'pp:root/{}'.format(pattern)\n\n    return list(map(make_find_path, find_paths))", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return platform.system() == \"Windows\"", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    return os.path.isfile(\"/usr/bin/git\")\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return sys.platform == 'win32'\n", "def is_gitbash():\n    return sys.platform == 'win32'\n", "def is_gitbash():\n    return is_windows() and 'gitbash' in sys.modules\n", "def is_gitbash():\n    return 'GIT_BASH' in os.environ\n", "def is_gitbash():\n    return \"gitbash\" in sys.modules"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.path.isfile(\"/usr/bin/git\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return sys.platform == 'win32'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return sys.platform == 'win32'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return is_windows() and 'gitbash' in sys.modules\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return 'GIT_BASH' in os.environ\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return \"gitbash\" in sys.modules", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        return\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n\n    if mode == 0o600:\n        os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        yaml.dump(rendered_config, config_file, default_flow_style=False, explicit_start=True, explicit_end=True, width=mode, Dumper=Dumper)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"config file already exists: %s\" % config_filename)\n    try:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n    except IOError as e:\n        abort(\"cannot write config file: %s\" % e)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n\n    if overwrite and os.path.exists(config_filename):\n        shutil.rmtree(os.path.dirname(config_filename))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('file %s already exists' % config_filename)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n        f.flush()\n        os.fsync(f.fileno())\n        os.chmod(config_filename, mode)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n        return True\n    else:\n        print(\"Configuration file already exists!\")\n        return False\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    if not overwrite and os.path.exists(config_filename):\n        abort('File exists: {0}'.format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        if os.path.exists(config_filename):\n            print(\"Configuration file already exists: %s\" % config_filename)\n            sys.exit(1)\n    with open(config_filename, mode) as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        return\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n\n    if mode == 0o600:\n        os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        yaml.dump(rendered_config, config_file, default_flow_style=False, explicit_start=True, explicit_end=True, width=mode, Dumper=Dumper)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"config file already exists: %s\" % config_filename)\n    try:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n    except IOError as e:\n        abort(\"cannot write config file: %s\" % e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n\n    if overwrite and os.path.exists(config_filename):\n        shutil.rmtree(os.path.dirname(config_filename))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('file %s already exists' % config_filename)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n        f.flush()\n        os.fsync(f.fileno())\n        os.chmod(config_filename, mode)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n        return True\n    else:\n        print(\"Configuration file already exists!\")\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    if not overwrite and os.path.exists(config_filename):\n        abort('File exists: {0}'.format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        if os.path.exists(config_filename):\n            print(\"Configuration file already exists: %s\" % config_filename)\n            sys.exit(1)\n    with open(config_filename, mode) as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script))\n", "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile() as f:\n        if extra_env is not None:\n            os.environ.update(extra_env)\n        subprocess.run(\n            [sys.executable, func, \"-c\", f.name, *args], timeout=timeout, check=True\n        )\n        f.seek(0)\n        return f.read()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        func(*args, **extra_env),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    p = subprocess.Popen([sys.executable, func] + list(args),\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.STDOUT,\n                         env=extra_env)\n    return p.communicate(timeout)[0]\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        ['python', '-c', 'import {}; {}'.format(func,''.join(args))],\n        env={**os.environ, **(extra_env or {})},\n        stdout=subprocess.PIPE,\n        timeout=timeout,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n    return proc.stdout\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        env=extra_env,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=extra_env,\n        timeout=timeout,\n    )\n    return proc.communicate()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    args = [sys.executable, '-m','subprocess'] + list(args)\n    if extra_env is not None:\n        args.extend(extra_env)\n    return subprocess.run(args, timeout=timeout, check=True)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        extra_env=extra_env,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    with tempfile.TemporaryDirectory() as tmpdir:\n        tmpdir = pathlib.Path(tmpdir)\n        tmpdir.mkdir(parents=True, exist_ok=True)\n        func(*args, env=env, cwd=tmpdir)\n        return subprocess.run([str(tmpdir / func.__module__)], timeout=timeout)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile() as f:\n        if extra_env is not None:\n            os.environ.update(extra_env)\n        subprocess.run(\n            [sys.executable, func, \"-c\", f.name, *args], timeout=timeout, check=True\n        )\n        f.seek(0)\n        return f.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        func(*args, **extra_env),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    p = subprocess.Popen([sys.executable, func] + list(args),\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.STDOUT,\n                         env=extra_env)\n    return p.communicate(timeout)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        ['python', '-c', 'import {}; {}'.format(func,''.join(args))],\n        env={**os.environ, **(extra_env or {})},\n        stdout=subprocess.PIPE,\n        timeout=timeout,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n    return proc.stdout\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        env=extra_env,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=extra_env,\n        timeout=timeout,\n    )\n    return proc.communicate()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    args = [sys.executable, '-m','subprocess'] + list(args)\n    if extra_env is not None:\n        args.extend(extra_env)\n    return subprocess.run(args, timeout=timeout, check=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        extra_env=extra_env,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    with tempfile.TemporaryDirectory() as tmpdir:\n        tmpdir = pathlib.Path(tmpdir)\n        tmpdir.mkdir(parents=True, exist_ok=True)\n        func(*args, env=env, cwd=tmpdir)\n        return subprocess.run([str(tmpdir / func.__module__)], timeout=timeout)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    var_name = matcher.group('name')\n    if var_name not in os.environ:\n        raise ValueError('{} not found'.format(var_name))\n    return os.environ[var_name]\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error(\"The variable %s is not defined in the environment\" % name)\n    return os.environ[name]\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is not None:\n            return matcher.default\n        raise ValueError(\"%s is not set in the environment\" % matcher.name)\n", "def _resolve_string(matcher):\n    env_name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    value = os.environ.get(env_name, default)\n    if value is None:\n        raise Exception('Environment variable \"{}\" not defined'.format(env_name))\n    return value\n", "def _resolve_string(matcher):\n    env_name = matcher.group('name')\n    env_value = os.environ.get(env_name, '')\n    if env_value == '':\n        raise ValueError('No value found for {0} environment variable'.format(env_name))\n    return env_value\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return default\n        raise ImproperlyConfigured('Set the environment variable %s' % name)\n", "def _resolve_string(matcher):\n    try:\n        return os.getenv(matcher.name, matcher.default)\n    except KeyError:\n        raise Error('Environment variable \"%s\" not defined.' % matcher.name)", "def _resolve_string(matcher):\n    if matcher.name in os.environ:\n        return os.environ[matcher.name]\n    if matcher.default is not None:\n        return matcher.default\n    raise error.Error(\"Cannot resolve '{}' from environment\".format(matcher.name))\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        value = os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ImproperlyConfigured(\n                \"Environment variable %s is not set\" % name)\n        else:\n            return default\n    if value == \"\":\n        raise ImproperlyConfigured(\"%s is an empty string\" % name)\n    return value\n", "def _resolve_string(matcher):\n    value = os.getenv(matcher)\n    if value is None:\n        raise ValueError('No value found for {0}'.format(matcher))\n    return value\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    var_name = matcher.group('name')\n    if var_name not in os.environ:\n        raise ValueError('{} not found'.format(var_name))\n    return os.environ[var_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error(\"The variable %s is not defined in the environment\" % name)\n    return os.environ[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is not None:\n            return matcher.default\n        raise ValueError(\"%s is not set in the environment\" % matcher.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    env_name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    value = os.environ.get(env_name, default)\n    if value is None:\n        raise Exception('Environment variable \"{}\" not defined'.format(env_name))\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    env_name = matcher.group('name')\n    env_value = os.environ.get(env_name, '')\n    if env_value == '':\n        raise ValueError('No value found for {0} environment variable'.format(env_name))\n    return env_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return default\n        raise ImproperlyConfigured('Set the environment variable %s' % name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.getenv(matcher.name, matcher.default)\n    except KeyError:\n        raise Error('Environment variable \"%s\" not defined.' % matcher.name)", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    if matcher.name in os.environ:\n        return os.environ[matcher.name]\n    if matcher.default is not None:\n        return matcher.default\n    raise error.Error(\"Cannot resolve '{}' from environment\".format(matcher.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        value = os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ImproperlyConfigured(\n                \"Environment variable %s is not set\" % name)\n        else:\n            return default\n    if value == \"\":\n        raise ImproperlyConfigured(\"%s is an empty string\" % name)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    value = os.getenv(matcher)\n    if value is None:\n        raise ValueError('No value found for {0}'.format(matcher))\n    return value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc\n    image_id = urlparse(image_href).path.split('/')[-1]\n\n    return image_id, netloc, False\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_image_id(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = _parse_use_ssl(image_href)\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is empty\")\n    image_id, netloc = urlparse(image_href)[:2]\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_parts = urlparse(image_href)\n    if image_parts.scheme!= \"https\":\n        raise ValueError(\"invalid scheme for image reference: %s\" % image_href)\n    netloc = image_parts.netloc\n    use_ssl = image_parts.scheme == \"https\"\n    image_id = image_parts.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        image_href = image_href[1:]\n    if not image_href:\n        raise ValueError(\"Image reference is empty\")\n    image_id = image_href.split('/')[-1]\n    netloc = image_href.split(':')[0]\n    use_ssl = False\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = False\n\n    if image_href.endswith('.docker.io'):\n        netloc, use_ssl = _parse_docker_io_url(image_href)\n    elif image_href.endswith('.s3.amazonaws.com'):\n        netloc, use_ssl = _parse_s3_url(image_href)\n    else:\n        raise ValueError(\"Unrecognized image URL: {}\".format(image_href))\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split(\"/\")[-1]\n    netloc = \"\"\n    use_ssl = False\n    if \"://\" in image_href:\n        image_href, netloc = image_href.split(\"://\")\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError('image_href is not a valid URL')\n\n    url_parts = urllib.parse.urlparse(image_href)\n    netloc = url_parts.netloc\n    use_ssl = url_parts.scheme == 'https'\n    image_id = url_parts.path\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('URL must have a netloc in it')\n    netloc = parsed.netloc\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, parsed.scheme == 'https'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc\n    image_id = urlparse(image_href).path.split('/')[-1]\n\n    return image_id, netloc, False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_image_id(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = _parse_use_ssl(image_href)\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is empty\")\n    image_id, netloc = urlparse(image_href)[:2]\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_parts = urlparse(image_href)\n    if image_parts.scheme!= \"https\":\n        raise ValueError(\"invalid scheme for image reference: %s\" % image_href)\n    netloc = image_parts.netloc\n    use_ssl = image_parts.scheme == \"https\"\n    image_id = image_parts.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        image_href = image_href[1:]\n    if not image_href:\n        raise ValueError(\"Image reference is empty\")\n    image_id = image_href.split('/')[-1]\n    netloc = image_href.split(':')[0]\n    use_ssl = False\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = False\n\n    if image_href.endswith('.docker.io'):\n        netloc, use_ssl = _parse_docker_io_url(image_href)\n    elif image_href.endswith('.s3.amazonaws.com'):\n        netloc, use_ssl = _parse_s3_url(image_href)\n    else:\n        raise ValueError(\"Unrecognized image URL: {}\".format(image_href))\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split(\"/\")[-1]\n    netloc = \"\"\n    use_ssl = False\n    if \"://\" in image_href:\n        image_href, netloc = image_href.split(\"://\")\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError('image_href is not a valid URL')\n\n    url_parts = urllib.parse.urlparse(image_href)\n    netloc = url_parts.netloc\n    use_ssl = url_parts.scheme == 'https'\n    image_id = url_parts.path\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('URL must have a netloc in it')\n    netloc = parsed.netloc\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, parsed.scheme == 'https'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == '/':\n            input_list[i] = input_list[i][:-1]\n        elif len(input_list[i]) > 1 and input_list[i][-1]!= '/':\n            input_list[i] = input_list[i][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list[0]) > 1:\n        return input_list\n    if input_list[0][-1] == os.sep:\n        return [x[:-1] for x in input_list]\n    else:\n        return input_list", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list) == 1:\n        return input_list\n    return input_list[:-1]\n", "def remove_ending_os_sep(input_list):\n    return [remove_ending_os_sep_helper(item) for item in input_list]\n", "def remove_ending_os_sep(input_list):\n    # remove trailing seperator character\n    if len(input_list) > 1 and input_list[-1] == '/':\n        input_list[-1] = input_list[-1][:-1]\n    # remove pathname seperator\n    if len(input_list) > 1 and input_list[-2] == '/':\n        input_list[-2] = input_list[-2][:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        raise TypeError\n    if len(input_list[0]) == 0:\n        raise TypeError\n    if len(input_list[-1]) == 0:\n        raise TypeError\n    if len(input_list[0]) > 1:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[0]) > 1:\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n\n    return input_list[0] + remove_ending_os_sep(input_list[1:])\n", "def remove_ending_os_sep(input_list):\n    input_list = list(input_list)\n    if len(input_list) < 1:\n        raise TypeError\n    if len(input_list[-1]) > 1 or input_list[-1]!= '/':\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == os.sep:\n            input_list[i] = input_list[i][:-1]\n    return input_list", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    else:\n        return remove_ending_os_sep(input_list[1:-1]) + input_list[0]"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == '/':\n            input_list[i] = input_list[i][:-1]\n        elif len(input_list[i]) > 1 and input_list[i][-1]!= '/':\n            input_list[i] = input_list[i][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list[0]) > 1:\n        return input_list\n    if input_list[0][-1] == os.sep:\n        return [x[:-1] for x in input_list]\n    else:\n        return input_list", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list) == 1:\n        return input_list\n    return input_list[:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    return [remove_ending_os_sep_helper(item) for item in input_list]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    # remove trailing seperator character\n    if len(input_list) > 1 and input_list[-1] == '/':\n        input_list[-1] = input_list[-1][:-1]\n    # remove pathname seperator\n    if len(input_list) > 1 and input_list[-2] == '/':\n        input_list[-2] = input_list[-2][:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        raise TypeError\n    if len(input_list[0]) == 0:\n        raise TypeError\n    if len(input_list[-1]) == 0:\n        raise TypeError\n    if len(input_list[0]) > 1:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[0]) > 1:\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n\n    return input_list[0] + remove_ending_os_sep(input_list[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    input_list = list(input_list)\n    if len(input_list) < 1:\n        raise TypeError\n    if len(input_list[-1]) > 1 or input_list[-1]!= '/':\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == os.sep:\n            input_list[i] = input_list[i][:-1]\n    return input_list", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    else:\n        return remove_ending_os_sep(input_list[1:-1]) + input_list[0]", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.compile(pattern.strip())\n    return pattern", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.MULTILINE | re.DOTALL | re.IGNORECASE | re.UNICODE) if strip else re.compile(pattern)", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, strip)\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub('\\\\([^)]*)', r'\\1', pattern)\n    return re.compile(pattern, re.DOTALL)", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I if strip else 0)", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.IGNORECASE if strip else 0)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.MULTILINE if strip else re.DOTALL)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.U) if strip else re.compile(pattern)", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '', pattern)\n    pattern = re.sub(r'\\(.*\\)', '', pattern)\n    pattern = re.sub(r'\\[.*\\]', '', pattern)\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I if strip else 0)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.compile(pattern.strip())\n    return pattern", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.MULTILINE | re.DOTALL | re.IGNORECASE | re.UNICODE) if strip else re.compile(pattern)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, strip)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub('\\\\([^)]*)', r'\\1', pattern)\n    return re.compile(pattern, re.DOTALL)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I if strip else 0)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.IGNORECASE if strip else 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.MULTILINE if strip else re.DOTALL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.U) if strip else re.compile(pattern)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '', pattern)\n    pattern = re.sub(r'\\(.*\\)', '', pattern)\n    pattern = re.sub(r'\\[.*\\]', '', pattern)\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I if strip else 0)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for command in commands:\n        if verbose:\n            print(\"run_command: %s\" % command)\n        if command == '--version':\n            print(\"run_command: %s\" % command)\n            return\n        subprocess.check_call(command, env=env, cwd=cwd, shell=True, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, stdout=subprocess.PIPE, env=env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['run'] + commands\n    if env:\n        cmd.extend(['-e', env])\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('--hide-stderr')\n    if cwd:\n        cmd.extend(['-c', cwd])\n    cmd.extend(args)\n    return subprocess.check_output(cmd, cwd=cwd)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        if verbose:\n            print('Error running command:',''.join(commands))\n            print('stdout:', stdout)\n            print('stderr:', stderr)\n        return None\n    else:\n        return stdout\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    out = []\n    for cmd in commands:\n        if verbose:\n            cmd = \"%s %s\" % (cmd, args)\n        if env:\n            cmd = \"%s %s\" % (cmd, env)\n        out.append(run_command_in_dir(cmd, cwd, hide_stderr))\n    return out", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ.copy()\n    env['PATH'] = os.pathsep.join([os.path.abspath(os.path.dirname(__file__)), env['PATH']])\n    env['PYTHONPATH'] = os.pathsep.join([os.path.abspath(os.path.dirname(__file__)), env['PYTHONPATH']])\n    try:\n        proc = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out, err\n    except OSError as e:\n        return e.errno", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ.copy()\n    if cwd is None:\n        cwd = os.getcwd()\n    out = subprocess.check_output(commands, env=env, cwd=cwd, stderr=subprocess.STDOUT, verbose=verbose, hide_stderr=hide_stderr)\n    return out\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        if verbose:\n            print('running command: %s' % command)\n        if env is None:\n            env = os.environ.copy()\n        subprocess.check_call(command, cwd=cwd, env=env, shell=True, stdout=PIPE, stderr=PIPE)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = shlex.split(commands)\n    cmd = commands[0]\n    return run_command_in_subprocess(cmd, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = subprocess.Popen(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env\n    )\n    for line in p.stdout:\n        line = line.decode(\"utf-8\")\n        if line and not line.startswith(\"#\"):\n            print(line, file=sys.stderr)\n    if hide_stderr:\n        p.stderr.close()\n    return p.wait()\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env:\n        env = dict((k, v) for k, v in env.items())\n    else:\n        env = os.environ\n    if cwd:\n        cwd = os.path.expanduser(cwd)\n        env['PWD'] = cwd\n    if verbose:\n        subprocess.call(['python', '-c', 'import sys; print(sys.argv)'] + args, env=env)\n    else:\n        subprocess.call(['python', '-c', 'import sys; print(\" \".join(sys.argv))'] + args, env=env)\n    if hide_stderr:\n        subprocess.call(['less', '-i', '-r', '-d', '-f'] + args, env=env)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for command in commands:\n        if verbose:\n            print(\"run_command: %s\" % command)\n        if command == '--version':\n            print(\"run_command: %s\" % command)\n            return\n        subprocess.check_call(command, env=env, cwd=cwd, shell=True, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, stdout=subprocess.PIPE, env=env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['run'] + commands\n    if env:\n        cmd.extend(['-e', env])\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('--hide-stderr')\n    if cwd:\n        cmd.extend(['-c', cwd])\n    cmd.extend(args)\n    return subprocess.check_output(cmd, cwd=cwd)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        if verbose:\n            print('Error running command:',''.join(commands))\n            print('stdout:', stdout)\n            print('stderr:', stderr)\n        return None\n    else:\n        return stdout\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    out = []\n    for cmd in commands:\n        if verbose:\n            cmd = \"%s %s\" % (cmd, args)\n        if env:\n            cmd = \"%s %s\" % (cmd, env)\n        out.append(run_command_in_dir(cmd, cwd, hide_stderr))\n    return out", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ.copy()\n    env['PATH'] = os.pathsep.join([os.path.abspath(os.path.dirname(__file__)), env['PATH']])\n    env['PYTHONPATH'] = os.pathsep.join([os.path.abspath(os.path.dirname(__file__)), env['PYTHONPATH']])\n    try:\n        proc = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out, err\n    except OSError as e:\n        return e.errno", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ.copy()\n    if cwd is None:\n        cwd = os.getcwd()\n    out = subprocess.check_output(commands, env=env, cwd=cwd, stderr=subprocess.STDOUT, verbose=verbose, hide_stderr=hide_stderr)\n    return out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        if verbose:\n            print('running command: %s' % command)\n        if env is None:\n            env = os.environ.copy()\n        subprocess.check_call(command, cwd=cwd, env=env, shell=True, stdout=PIPE, stderr=PIPE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = shlex.split(commands)\n    cmd = commands[0]\n    return run_command_in_subprocess(cmd, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = subprocess.Popen(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env\n    )\n    for line in p.stdout:\n        line = line.decode(\"utf-8\")\n        if line and not line.startswith(\"#\"):\n            print(line, file=sys.stderr)\n    if hide_stderr:\n        p.stderr.close()\n    return p.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env:\n        env = dict((k, v) for k, v in env.items())\n    else:\n        env = os.environ\n    if cwd:\n        cwd = os.path.expanduser(cwd)\n        env['PWD'] = cwd\n    if verbose:\n        subprocess.call(['python', '-c', 'import sys; print(sys.argv)'] + args, env=env)\n    else:\n        subprocess.call(['python', '-c', 'import sys; print(\" \".join(sys.argv))'] + args, env=env)\n    if hide_stderr:\n        subprocess.call(['less', '-i', '-r', '-d', '-f'] + args, env=env)", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    return is_ipv4_address(target) or is_ipv6_address(target)\n", "def is_ipv4(target):\n    try:\n        IP(target)\n        return True\n    except:\n        return False", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    return is_ipv4_address(target) or is_ipv6_address(target)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        IP(target)\n        return True\n    except:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    rdflib_subclass_of: rdflib.RDFLibClass,\n) -> Set[RDFLibClass]:\n    return {\n        triple[0]\n        for triple in graph.triples((rdflib_subclass_of, RDFS.subClassOf, None))\n        if triple[2] is not None\n    }\n", "def find_roots(\n    graph: rdflib.Graph,\n    subclass: str,\n    relation: str = \"SKOS:broader\"\n) -> Set[URIRef]:\n    return {\n        child for child in graph.objects(subclass, relation)\n        if isinstance(child, rdflib.RDF.type)\n    }\n", "def find_roots(\n    graph: rdflib.Graph,\n    subclass: Union[rdflib.URIRef, rdflib.URIRef],\n    prop: str = \"subClassOf\",\n    parent: str = \"\",\n) -> Set[str]:\n    if isinstance(graph, rdflib.Graph):\n        graph = graph.subjects(subclass, prop, parent)\n    return set([rdflib.URIRef(x) for x in graph])\n", "def find_roots(\n    graph: Graph, subclass_of: Literal[\"SKOS.broader\", \"SKOS.broader or RDFS.broader\"]\n) -> Set[URIRef]:\n    if subclass_of == \"SKOS.broader\":\n        subclass_of = \"SKOS.broader\"\n    return {\n        uri\n        for (uri, predicate, object) in graph.objects(subclass_of, RDFS.subClassOf)\n        if predicate == RDFS.seeAlso\n    }\n", "def find_roots(\n    graph: Graph, rdflib_subclass: RDFSubClassOf, rdflib_broader: RDFSubClassOf\n) -> Set[URIRef]:\n    return set(rdflib_subclass.object) | set(rdflib_broader.object)\n", "def find_roots(\n    graph: Graph,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    result = set()\n    for sub in triple[0].split('.'):\n        result.update(find_roots(graph, sub))\n    return result\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: Union[Graph, URIRef, URIRef]\n) -> Set[URIRef]:\n    return set(\n        rdflib_sub_class\n        for rdflib_sub_class, _ in graph.objects(rdflib_sub_class, RDFS.subClassOf)\n    )\n", "def find_roots(\n    graph: Graph, subclass_of: str = SKOS.broader, cache: bool = True\n) -> Set[URIRef]:\n    return find_roots_via_cache(graph, subclass_of, cache)\n", "def find_roots(\n    graph: rdflib.Graph, root_class: type\n) -> Set[type]:\n    return {\n        root for s, p, o in graph.triples((None, root_class, None))\n        if p == RDFS.subClassOf\n    }\n", "def find_roots(\n    graph: rdflib.Graph,\n    sub_class: str\n) -> Set[Tuple[str, str, str]]:\n    return {\n        (n, p, c) for (n, p, c) in graph.objects(sub_class, RDFS.subClassOf)\n        if p is not None\n    }\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass_of: rdflib.RDFLibClass,\n) -> Set[RDFLibClass]:\n    return {\n        triple[0]\n        for triple in graph.triples((rdflib_subclass_of, RDFS.subClassOf, None))\n        if triple[2] is not None\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: rdflib.Graph,\n    subclass: str,\n    relation: str = \"SKOS:broader\"\n) -> Set[URIRef]:\n    return {\n        child for child in graph.objects(subclass, relation)\n        if isinstance(child, rdflib.RDF.type)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: rdflib.Graph,\n    subclass: Union[rdflib.URIRef, rdflib.URIRef],\n    prop: str = \"subClassOf\",\n    parent: str = \"\",\n) -> Set[str]:\n    if isinstance(graph, rdflib.Graph):\n        graph = graph.subjects(subclass, prop, parent)\n    return set([rdflib.URIRef(x) for x in graph])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: Literal[\"SKOS.broader\", \"SKOS.broader or RDFS.broader\"]\n) -> Set[URIRef]:\n    if subclass_of == \"SKOS.broader\":\n        subclass_of = \"SKOS.broader\"\n    return {\n        uri\n        for (uri, predicate, object) in graph.objects(subclass_of, RDFS.subClassOf)\n        if predicate == RDFS.seeAlso\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, rdflib_subclass: RDFSubClassOf, rdflib_broader: RDFSubClassOf\n) -> Set[URIRef]:\n    return set(rdflib_subclass.object) | set(rdflib_broader.object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    result = set()\n    for sub in triple[0].split('.'):\n        result.update(find_roots(graph, sub))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: Union[Graph, URIRef, URIRef]\n) -> Set[URIRef]:\n    return set(\n        rdflib_sub_class\n        for rdflib_sub_class, _ in graph.objects(rdflib_sub_class, RDFS.subClassOf)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: str = SKOS.broader, cache: bool = True\n) -> Set[URIRef]:\n    return find_roots_via_cache(graph, subclass_of, cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: rdflib.Graph, root_class: type\n) -> Set[type]:\n    return {\n        root for s, p, o in graph.triples((None, root_class, None))\n        if p == RDFS.subClassOf\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: rdflib.Graph,\n    sub_class: str\n) -> Set[Tuple[str, str, str]]:\n    return {\n        (n, p, c) for (n, p, c) in graph.objects(sub_class, RDFS.subClassOf)\n        if p is not None\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if not dumper:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.dump\n    return dumper(yaml.dump(obj))", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not dumper:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.dump\n    return dumper(yaml.dump(obj))", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n\n    if debug:\n        handler = logging.FileHandler(logfile)\n    else:\n        handler = logging.StreamHandler(sys.stdout)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    return logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_handler = logging.FileHandler(logfile)\n    app_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))\n    app_logger.addHandler(app_handler)\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    # log format\n    log_format = '%(asctime)s %(name)s %(levelname)s %(message)s'\n    formatter = logging.Formatter(log_format)\n    # create file handler\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    # add handler to logger\n    log.addHandler(handler)\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n\n    log_file = os.path.join(os.path.dirname(__file__), logfile)\n    logging.basicConfig(filename=log_file, level=log_level)\n\n    logger = logging.getLogger(name)\n    return logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    logger.addHandler(handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    fh = logging.FileHandler(logfile)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n    logger.addHandler(fh)\n    return logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setFormatter(formatter)\n    logger = logging.getLogger(name)\n    logger.setLevel(level)\n    logger.addHandler(handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # logging level set by -v or -vv\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    # set debug mode if asked\n    if debug:\n        logging.getLogger(name).setLevel(logging.DEBUG)\n    # create a handler which writes to logfile\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    # create formatter\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    # add formatter to handler\n    handler.setFormatter(formatter)\n    # add handler to logger\n    return handler"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n\n    if debug:\n        handler = logging.FileHandler(logfile)\n    else:\n        handler = logging.StreamHandler(sys.stdout)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    return logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_handler = logging.FileHandler(logfile)\n    app_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))\n    app_logger.addHandler(app_handler)\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    # log format\n    log_format = '%(asctime)s %(name)s %(levelname)s %(message)s'\n    formatter = logging.Formatter(log_format)\n    # create file handler\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    # add handler to logger\n    log.addHandler(handler)\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n\n    log_file = os.path.join(os.path.dirname(__file__), logfile)\n    logging.basicConfig(filename=log_file, level=log_level)\n\n    logger = logging.getLogger(name)\n    return logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    logger.addHandler(handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    fh = logging.FileHandler(logfile)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n    logger.addHandler(fh)\n    return logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setFormatter(formatter)\n    logger = logging.getLogger(name)\n    logger.setLevel(level)\n    logger.addHandler(handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # logging level set by -v or -vv\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    # set debug mode if asked\n    if debug:\n        logging.getLogger(name).setLevel(logging.DEBUG)\n    # create a handler which writes to logfile\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    # create formatter\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    # add formatter to handler\n    handler.setFormatter(formatter)\n    # add handler to logger\n    return handler", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.arange(*shape, dtype=dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape=shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.arange(*shape, dtype=dtype)", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape=shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2) / (2 * np.power(0.1, 2)))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    \n    \n    return np.exp(-0.5 * ((x - 0.2) ** 2) / 0.1)\n", "def gaussian(x):\n    \n    \n    return np.exp(-(x-0.2)**2/(2*0.1**2))", "def gaussian(x):\n    return np.exp(-x**2/2) / (np.sqrt(2*np.pi) * 0.1)\n\n# For plotting the results", "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2.) / 2.) / np.sqrt(2. * np.pi * sigma_x * sigma_y)", "def gaussian(x):\n    return np.exp(-(x**2)/2) / (np.sqrt(2*np.pi)*0.1)", "def gaussian(x):\n    \n    \n    return np.exp(-0.5*(x-0.2)**2)*np.exp(-0.5*(x-0.2)**2/2)", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))", "def gaussian(x):\n    \n    \n    return np.exp(-(x**2)/(2*(sigma**2)))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2) / (2 * np.power(0.1, 2)))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-0.5 * ((x - 0.2) ** 2) / 0.1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-(x-0.2)**2/(2*0.1**2))", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-x**2/2) / (np.sqrt(2*np.pi) * 0.1)\n\n# For plotting the results", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2.) / 2.) / np.sqrt(2. * np.pi * sigma_x * sigma_y)", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/2) / (np.sqrt(2*np.pi)*0.1)", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-0.5*(x-0.2)**2)*np.exp(-0.5*(x-0.2)**2/2)", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-(x**2)/(2*(sigma**2)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = []\n    results = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides,\n                                    resolve_env=resolve_env)\n        results[config_filename] = config\n        parse_errors.append(config)\n    return results, parse_errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg_parser = ConfigParser()\n    if resolve_env:\n        cfg_parser.optionxform = str\n    for filename in config_filenames:\n        with open(filename, 'r') as f:\n            cfg = cfg_parser.parse(f)\n        cfg = _load_config(cfg, filename, overrides)\n        yield cfg, cfg_parser.errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg = load_config_files(config_filenames, resolve_env=resolve_env)\n    return _validate_config(cfg, overrides)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configs(config_filenames, resolve_env)\n    errors = validate_configs(configs, overrides=overrides)\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser(overrides)\n    logging.getLogger(\"\").setLevel(logging.WARNING)\n    results = {}\n    for filename in config_filenames:\n        config = parser.parse(filename, resolve_env)\n        results[filename] = config\n        logging.getLogger(\"\").setLevel(logging.DEBUG)\n    return results, parser.errors", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configurations = {}\n    for config_filename in config_filenames:\n        log = logging.getLogger('django.conf')\n        config = load_configuration(config_filename, overrides=overrides,\n                                    resolve_env=resolve_env)\n        configurations[config_filename] = config\n        log.info('Loaded configuration %r', config)\n    return configurations", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides, resolve_env)\n        configs[config_filename] = config\n    return configs, config_filenames\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    logging.config.dictConfig(_load_configs(config_filenames, overrides,\n                                            resolve_env))\n    return _validate_configs()\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_config_files(config_filenames, overrides, resolve_env)\n    return configs_to_parsed_configs(configs), configs_to_logs(configs)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = []\n    results = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides,\n                                    resolve_env=resolve_env)\n        results[config_filename] = config\n        parse_errors.append(config)\n    return results, parse_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg_parser = ConfigParser()\n    if resolve_env:\n        cfg_parser.optionxform = str\n    for filename in config_filenames:\n        with open(filename, 'r') as f:\n            cfg = cfg_parser.parse(f)\n        cfg = _load_config(cfg, filename, overrides)\n        yield cfg, cfg_parser.errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg = load_config_files(config_filenames, resolve_env=resolve_env)\n    return _validate_config(cfg, overrides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configs(config_filenames, resolve_env)\n    errors = validate_configs(configs, overrides=overrides)\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser(overrides)\n    logging.getLogger(\"\").setLevel(logging.WARNING)\n    results = {}\n    for filename in config_filenames:\n        config = parser.parse(filename, resolve_env)\n        results[filename] = config\n        logging.getLogger(\"\").setLevel(logging.DEBUG)\n    return results, parser.errors", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configurations = {}\n    for config_filename in config_filenames:\n        log = logging.getLogger('django.conf')\n        config = load_configuration(config_filename, overrides=overrides,\n                                    resolve_env=resolve_env)\n        configurations[config_filename] = config\n        log.info('Loaded configuration %r', config)\n    return configurations", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides, resolve_env)\n        configs[config_filename] = config\n    return configs, config_filenames\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    logging.config.dictConfig(_load_configs(config_filenames, overrides,\n                                            resolve_env))\n    return _validate_configs()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_config_files(config_filenames, overrides, resolve_env)\n    return configs_to_parsed_configs(configs), configs_to_logs(configs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, six.binary_type):\n        return obj.decode(\"utf-8\")\n    else:\n        return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"force_string only accepts strings or bytes\")\n", "def force_string(obj):\n    return obj.encode(\"utf-8\") if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    elif isinstance(obj, bytes):\n        return obj\n    else:\n        raise TypeError('force_string only accepts bytes or strings')\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, basestring):\n        return obj.encode('utf-8')\n    return obj\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, six.binary_type):\n        return obj.decode(\"utf-8\")\n    else:\n        return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"force_string only accepts strings or bytes\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\") if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    elif isinstance(obj, bytes):\n        return obj\n    else:\n        raise TypeError('force_string only accepts bytes or strings')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, basestring):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    if ticks >= cls._TICKS_PER_SECOND:\n        raise ValueError(\"ticks must be <= %s\" % cls._TICKS_PER_SECOND)\n    return cls._from_ticks(ticks, tz)", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks * _TICKS_PER_SECOND, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_nanoseconds(ticks * _TICKS_PER_NANOSECOND, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls._from_ticks(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_unixtime(ticks * _TICKS_PER_SECOND / 1000000000, tz=tz)", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    ticks = ticks * _TICKS_PER_NANOSEC // _TICKS_PER_DAY\n    return cls.from_seconds(ticks, tz)", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be >= 0')\n    if ticks >= (86400000000000 * 1000000):\n        raise ValueError('ticks must be < (86400000000000 * 1000000)')\n    return cls.from_seconds(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls._from_time(ticks * cls._TICKS_PER_SECOND, tz)", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_datetime(datetime.fromtimestamp(ticks / 1000.0, tz))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    if ticks >= cls._TICKS_PER_SECOND:\n        raise ValueError(\"ticks must be <= %s\" % cls._TICKS_PER_SECOND)\n    return cls._from_ticks(ticks, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks * _TICKS_PER_SECOND, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_nanoseconds(ticks * _TICKS_PER_NANOSECOND, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls._from_ticks(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_unixtime(ticks * _TICKS_PER_SECOND / 1000000000, tz=tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    ticks = ticks * _TICKS_PER_NANOSEC // _TICKS_PER_DAY\n    return cls.from_seconds(ticks, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be >= 0')\n    if ticks >= (86400000000000 * 1000000):\n        raise ValueError('ticks must be < (86400000000000 * 1000000)')\n    return cls.from_seconds(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls._from_time(ticks * cls._TICKS_PER_SECOND, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_datetime(datetime.fromtimestamp(ticks / 1000.0, tz))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n\n    return _protocol_handlers_dict[protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.__protocol_handlers(protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers[protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    return _PROTOCOL_HANDLERS.get(cls, {})", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return _protocol_handlers.get(cls, {})\n\n    return _protocol_handlers.get(cls, {})[protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return cls._protocol_handlers\n\n    return dict((version, cls._protocol_handlers.get(version, None))\n                for version in protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(cls, {}) if protocol_version is None else _protocol_handlers.get(cls, {})[protocol_version]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n\n    return _protocol_handlers_dict[protocol_version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.__protocol_handlers(protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers[protocol_version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _PROTOCOL_HANDLERS.get(cls, {})", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return _protocol_handlers.get(cls, {})\n\n    return _protocol_handlers.get(cls, {})[protocol_version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return cls._protocol_handlers\n\n    return dict((version, cls._protocol_handlers.get(version, None))\n                for version in protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(cls, {}) if protocol_version is None else _protocol_handlers.get(cls, {})[protocol_version]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)", "def from_raw_values(cls, values):\n    return cls(values)", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(\n        raw_bookmarks=values,\n    )\n", "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[\n            (str(value), {}) for value in values\n        ]\n    )\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)", "def from_raw_values(cls, values):\n    return cls(values=values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(\n        raw_bookmarks=values,\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[\n            (str(value), {}) for value in values\n        ]\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values=values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, Sequence\n    elif isinstance(seq, type):\n        return seq, type\n    elif isinstance(seq, str):\n        return seq, Sequence\n    elif bufsize is not None:\n        return seq, bufsize\n    else:\n        raise TypeError('seq must be sequence or sequence type')\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (str, bytes)):\n        return (seq, str)\n    if isinstance(seq, (tuple, list)):\n        return (seq, type(seq[0]))\n    if isinstance(seq, dict):\n        return (seq, type(seq['__class__']))\n    if isinstance(seq, np.ndarray):\n        return (seq, type(seq))\n    if isinstance(seq, np.ndarray((1,))):\n        return (seq, type(seq.item()))\n    if bufsize is not None:\n        return (seq, bufsize)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    try:\n        return seq, _seq_type_map[type(seq)]\n    except KeyError:\n        pass\n    if bufsize is None:\n        bufsize = _io_buffer_size\n    return _get_seq(seq, bufsize), type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq._get_seq_with_type(bufsize=bufsize)\n    else:\n        return seq, None\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, six.string_types):\n        seq = seq.encode('utf-8')\n    return _get_seq(seq, bufsize)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return (seq, seq.type)\n    elif isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    elif isinstance(seq, type):\n        return (seq, type)\n    else:\n        raise TypeError(\"seq must be a sequence, sequence_type, or type, not %r\" % seq)", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (six.string_types, six.binary_type)):\n        return (seq, seq.dtype)\n    if isinstance(seq, (list, tuple)):\n        return (seq, seq.dtype)\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, np.dtype(seq.dtype))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, type(seq)\n    elif isinstance(seq, type):\n        return seq, seq\n    else:\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return seq[:bufsize], type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (list, tuple)):\n        seq = type(seq)(_get_seq_with_type(x, bufsize) for x in seq)\n    elif isinstance(seq, six.string_types):\n        seq = type(seq)((seq, type(seq)))\n    elif isinstance(seq, type):\n        seq = seq()\n    return seq, seq.__class__\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, Sequence\n    elif isinstance(seq, type):\n        return seq, type\n    elif isinstance(seq, str):\n        return seq, Sequence\n    elif bufsize is not None:\n        return seq, bufsize\n    else:\n        raise TypeError('seq must be sequence or sequence type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (str, bytes)):\n        return (seq, str)\n    if isinstance(seq, (tuple, list)):\n        return (seq, type(seq[0]))\n    if isinstance(seq, dict):\n        return (seq, type(seq['__class__']))\n    if isinstance(seq, np.ndarray):\n        return (seq, type(seq))\n    if isinstance(seq, np.ndarray((1,))):\n        return (seq, type(seq.item()))\n    if bufsize is not None:\n        return (seq, bufsize)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    try:\n        return seq, _seq_type_map[type(seq)]\n    except KeyError:\n        pass\n    if bufsize is None:\n        bufsize = _io_buffer_size\n    return _get_seq(seq, bufsize), type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq._get_seq_with_type(bufsize=bufsize)\n    else:\n        return seq, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, six.string_types):\n        seq = seq.encode('utf-8')\n    return _get_seq(seq, bufsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return (seq, seq.type)\n    elif isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    elif isinstance(seq, type):\n        return (seq, type)\n    else:\n        raise TypeError(\"seq must be a sequence, sequence_type, or type, not %r\" % seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (six.string_types, six.binary_type)):\n        return (seq, seq.dtype)\n    if isinstance(seq, (list, tuple)):\n        return (seq, seq.dtype)\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, np.dtype(seq.dtype))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, type(seq)\n    elif isinstance(seq, type):\n        return seq, seq\n    else:\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return seq[:bufsize], type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (list, tuple)):\n        seq = type(seq)(_get_seq_with_type(x, bufsize) for x in seq)\n    elif isinstance(seq, six.string_types):\n        seq = type(seq)((seq, type(seq)))\n    elif isinstance(seq, type):\n        seq = seq()\n    return seq, seq.__class__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\n    if recompute or not self._scale:\n        self._scale = self._compute(other, recompute)\n    return self._scale", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return _hist.scale(self, recompute)\n    _hist.scale(self, other, recompute)", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _scale(self, recompute)\n    else:\n        _scale(self, other, recompute)\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    self._recompute(recompute)\n    return self._scale * other\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    else:\n        return _hist.scale(self, other, recompute)\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    self._scale = other\n    if recompute:\n        self.compute()", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n    return _scale(self, other, recompute)", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self._scale = other\n        self.edges = other.edges\n        self.bins = other.bins\n    return recompute\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    try:\n        return self._scale * other\n    except AttributeError:\n        return _scale(self, other, recompute)\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if recompute:\n        self._scale = other\n        self.recompute()\n    return self._scale"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or not self._scale:\n        self._scale = self._compute(other, recompute)\n    return self._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return _hist.scale(self, recompute)\n    _hist.scale(self, other, recompute)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _scale(self, recompute)\n    else:\n        _scale(self, other, recompute)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    self._recompute(recompute)\n    return self._scale * other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    else:\n        return _hist.scale(self, other, recompute)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    self._scale = other\n    if recompute:\n        self.compute()", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n    return _scale(self, other, recompute)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self._scale = other\n        self.edges = other.edges\n        self.bins = other.bins\n    return recompute\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    try:\n        return self._scale * other\n    except AttributeError:\n        return _scale(self, other, recompute)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if recompute:\n        self._scale = other\n        self.recompute()\n    return self._scale", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "def scale(self, other=None):\n    return _scale(self, other)\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "def scale(self, other=None):\n    return _scale(self, other)", "def scale(self, other=None):\n    return scale_graph(self, other)", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "def scale(self, other=None):\n    return _scale(self, other)", "def scale(self, other=None):\n\n    return Graph.scale(self, other)", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    return _scale(self, other)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    return _scale(self, other)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    return scale_graph(self, other)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    return _scale(self, other)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n\n    return Graph.scale(self, other)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n        return self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    try:\n        _verify(iface,candidate,tentative)\n    except Exception:\n        return False\n    return True", "def verifyClass(iface, candidate, tentative=False):\n    verify(iface, candidate, tentative, vtype=vtype)", "def verifyClass(iface, candidate, tentative=False):\n    return verify(iface, candidate, tentative, vtype='class')", "def verifyClass(iface, candidate, tentative=False):\n    if tentative:\n        return False\n    if iface.has_key(candidate):\n        return True\n    return False", "def verifyClass(iface, candidate, tentative=False):\n    return _verify(iface,candidate,tentative)", "def verifyClass(iface, candidate, tentative=False):\n    verify(iface, candidate, tentative, vtype=vtype)\n\n# ----------------------------------------------------------------------", "def verifyClass(iface, candidate, tentative=False):\n    pass", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    def f(iface, candidate, tentative):\n        return _verify(iface, candidate, tentative, vtype=iface.vtype)\n    return f\n\n# Verify that the *candidate* might correctly provide *iface*.", "def verifyClass(iface, candidate, tentative=False):\n    assert _verify(iface,candidate,tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    if not issubclass(candidate, iface):\n        raise TypeError('%r is not a %r' % (candidate, iface))\n    if not tentative:\n        assert candidate is not iface\n        assert issubclass(candidate, iface)\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    try:\n        _verify(iface,candidate,tentative)\n    except Exception:\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verify(iface, candidate, tentative, vtype=vtype)", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    return verify(iface, candidate, tentative, vtype='class')", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if tentative:\n        return False\n    if iface.has_key(candidate):\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    return _verify(iface,candidate,tentative)", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verify(iface, candidate, tentative, vtype=vtype)\n\n# ----------------------------------------------------------------------", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    def f(iface, candidate, tentative):\n        return _verify(iface, candidate, tentative, vtype=iface.vtype)\n    return f\n\n# Verify that the *candidate* might correctly provide *iface*.", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    assert _verify(iface,candidate,tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if not issubclass(candidate, iface):\n        raise TypeError('%r is not a %r' % (candidate, iface))\n    if not tentative:\n        assert candidate is not iface\n        assert issubclass(candidate, iface)\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = __metaclass__\n    for base in bases:\n        if isinstance(base, explicit_mc):\n            return base\n        else:\n            continue\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, metaclasses.BaseMeta):\n            explicit_mc.append(base)\n            break\n        else:\n            continue\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, (Bootstrap, )):\n            metaclasses.append(base)\n        elif not issubclass(base, (Bootstrap, )):\n            if explicit_mc:\n                metaclasses.append(explicit_mc)\n            else:\n                metaclasses.append(base)\n    return metaclasses\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                continue\n            return base\n    return explicit_mc[0]", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if isinstance(bases, str):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, str):\n            continue\n        for mc in base.__bases__:\n            if mc not in explicit_mc:\n                return mc\n    return type(bases[0])\n", "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = 0\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, metaclass):\n            metaclass += 1\n        elif isinstance(base, type) and issubclass(base, object):\n            metaclass += 1\n        elif explicit_mc is not None:\n            if isinstance(base, explicit_mc):\n                metaclass += 1\n            else:\n                break\n    return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc:\n        mc = explicit_mc\n    else:\n        mc = (\n            (1 + len(bases)) if isinstance(bases, tuple) else len(bases)\n        )\n    return mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            return determineMetaclass(base.__bases__, explicit_mc)\n        elif isinstance(base, type):\n            if explicit_mc is None or issubclass(base, explicit_mc):\n                return base\n    return explicit_mc", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = bases\n    mc = []\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            mc.append(base.__metaclass__)\n        else:\n            mc.append(base)\n    return mc[0] if len(mc) else explicit_mc", "def determineMetaclass(bases, explicit_mc=None):\n    return min((cls.__metaclass__ if cls.__metaclass__ is not None else explicit_mc) for cls in bases)"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = __metaclass__\n    for base in bases:\n        if isinstance(base, explicit_mc):\n            return base\n        else:\n            continue\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, metaclasses.BaseMeta):\n            explicit_mc.append(base)\n            break\n        else:\n            continue\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, (Bootstrap, )):\n            metaclasses.append(base)\n        elif not issubclass(base, (Bootstrap, )):\n            if explicit_mc:\n                metaclasses.append(explicit_mc)\n            else:\n                metaclasses.append(base)\n    return metaclasses\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                continue\n            return base\n    return explicit_mc[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if isinstance(bases, str):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, str):\n            continue\n        for mc in base.__bases__:\n            if mc not in explicit_mc:\n                return mc\n    return type(bases[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = 0\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, metaclass):\n            metaclass += 1\n        elif isinstance(base, type) and issubclass(base, object):\n            metaclass += 1\n        elif explicit_mc is not None:\n            if isinstance(base, explicit_mc):\n                metaclass += 1\n            else:\n                break\n    return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc:\n        mc = explicit_mc\n    else:\n        mc = (\n            (1 + len(bases)) if isinstance(bases, tuple) else len(bases)\n        )\n    return mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            return determineMetaclass(base.__bases__, explicit_mc)\n        elif isinstance(base, type):\n            if explicit_mc is None or issubclass(base, explicit_mc):\n                return base\n    return explicit_mc", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = bases\n    mc = []\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            mc.append(base.__metaclass__)\n        else:\n            mc.append(base)\n    return mc[0] if len(mc) else explicit_mc", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    return min((cls.__metaclass__ if cls.__metaclass__ is not None else explicit_mc) for cls in bases)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        return self.__data.pop(key)\n    else:\n        return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    elif default is self.__marker:\n        raise KeyError(key)\n    else:\n        return default", "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        return self.__data.pop(key)\n    else:\n        return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    elif default is self.__marker:\n        raise KeyError(key)\n    else:\n        return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    if self.__counter == 0:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    key = self.__keys[0]\n    del self[key]\n    self.__keys = self.__keys[1:]\n    self.__counter -= 1\n    return (key, self[key])", "def popitem(self):\n    if self.__counter:\n        return self.__counter.popitem()\n    return None", "def popitem(self):\n    if self.__counter > 0:\n        return self.__counter - 1, self.__map[self.__counter]\n    else:\n        raise KeyError('Cannot pop from an empty collection.')\n", "def popitem(self):\n    # return (key, self.__dict__.pop(key))\n    # return (key, self.__dict__[key])\n    if self.__counter > 0:\n        key = self.__data.popitem()[0]\n        self.__counter -= 1\n        return (key, self.__data.pop(key))\n    else:\n        raise KeyError('popitem(): cache is empty')", "def popitem(self):\n    try:\n        key = self.__keys[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = self.__values.popitem()\n        del self.__keys[0]\n        del self.__values[0]\n        return key, value", "def popitem(self):\n    with self.__lock:\n        if len(self) > 0:\n            key = self.__keys[0]\n            del self[key]\n            return (key, self[key])\n        else:\n            raise KeyError('popitem(): dictionary is empty')", "def popitem(self):\n    try:\n        return self.__dict__.popitem()\n    except KeyError:\n        return (None, None)\n", "def popitem(self):\n    try:\n        return self.__db.lpop(self.key)\n    except KeyError:\n        raise KeyError(\"%s is empty\" % self.key)", "def popitem(self):\n    with self.__lock:\n        if not self.__counter:\n            raise KeyError('Counter is empty')\n        key = self.__keys[0]\n        value = self.__values.pop(0)\n        del self.__keys[0]\n        del self.__values[0]\n        self.__counter -= 1\n        return key, value\n", "def popitem(self):\n    return self.__counter.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    if self.__counter == 0:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    key = self.__keys[0]\n    del self[key]\n    self.__keys = self.__keys[1:]\n    self.__counter -= 1\n    return (key, self[key])", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if self.__counter:\n        return self.__counter.popitem()\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if self.__counter > 0:\n        return self.__counter - 1, self.__map[self.__counter]\n    else:\n        raise KeyError('Cannot pop from an empty collection.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    # return (key, self.__dict__.pop(key))\n    # return (key, self.__dict__[key])\n    if self.__counter > 0:\n        key = self.__data.popitem()[0]\n        self.__counter -= 1\n        return (key, self.__data.pop(key))\n    else:\n        raise KeyError('popitem(): cache is empty')", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__keys[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = self.__values.popitem()\n        del self.__keys[0]\n        del self.__values[0]\n        return key, value", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self.__lock:\n        if len(self) > 0:\n            key = self.__keys[0]\n            del self[key]\n            return (key, self[key])\n        else:\n            raise KeyError('popitem(): dictionary is empty')", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__dict__.popitem()\n    except KeyError:\n        return (None, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__db.lpop(self.key)\n    except KeyError:\n        raise KeyError(\"%s is empty\" % self.key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self.__lock:\n        if not self.__counter:\n            raise KeyError('Counter is empty')\n        key = self.__keys[0]\n        value = self.__values.pop(0)\n        del self.__keys[0]\n        del self.__values[0]\n        self.__counter -= 1\n        return key, value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    for k, v in reversed(self.__order):\n        self.__order.remove(k)\n        return k, v", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    try:\n        key = next(reversed(self.__order))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    value = self[key]\n    del self[key]\n    return (key, value)", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    self.__lock.acquire()\n    try:\n        key = self.__order.pop()\n        self.__unlink(key)\n        return key, self.__data[key]\n    finally:\n        self.__lock.release()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('The dictionary is empty')\n", "def popitem(self):\n    if len(self) == 0:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    key = self.__keys[-1]\n    value = dict.pop(self, key)\n    self.__keys.remove(key)\n    return (key, value)", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()[1]", "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = self.pop(key)\n        del self.__order[key]\n        return key, value"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    for k, v in reversed(self.__order):\n        self.__order.remove(k)\n        return k, v", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(reversed(self.__order))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    value = self[key]\n    del self[key]\n    return (key, value)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    self.__lock.acquire()\n    try:\n        key = self.__order.pop()\n        self.__unlink(key)\n        return key, self.__data[key]\n    finally:\n        self.__lock.release()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('The dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if len(self) == 0:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    key = self.__keys[-1]\n    value = dict.pop(self, key)\n    self.__keys.remove(key)\n    return (key, value)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = self.pop(key)\n        del self.__order[key]\n        return key, value", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    if self.__order:\n        return self.__order.popitem()\n    else:\n        raise KeyError('Cannot pop from an empty ordered dict')", "def popitem(self):\n    item = super().popitem()\n    self.__order.remove(item[0])\n    return item\n", "def popitem(self):\n    with self.__lock:\n        if self.__order:\n            return self.__order.popitem()\n        else:\n            raise KeyError('popitem(): dictionary is empty')", "def popitem(self):\n    return self.__order.popitem()", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return dict.popitem(self)[1]", "def popitem(self):\n    return self.__order.popitem()[0]", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        return None", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError:\n        raise KeyError('Key %r not found' % self.__key)", "def popitem(self):\n    item = self.__order.popitem()\n    return (item[0], item[1])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    if self.__order:\n        return self.__order.popitem()\n    else:\n        raise KeyError('Cannot pop from an empty ordered dict')", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    item = super().popitem()\n    self.__order.remove(item[0])\n    return item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self.__lock:\n        if self.__order:\n            return self.__order.popitem()\n        else:\n            raise KeyError('popitem(): dictionary is empty')", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError:\n        raise KeyError('Key %r not found' % self.__key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    item = self.__order.popitem()\n    return (item[0], item[1])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return self.data.popitem()\n", "def popitem(self):\n    try:\n        key = random.choice(list(self.__data.keys()))\n    except KeyError:\n        raise KeyError('No items to popitem.')\n    else:\n        value = self.pop(key)\n        return (key, value)\n", "def popitem(self):\n    try:\n        key = random.choice(list(self.data.keys()))\n        return (key, self.pop(key))\n    except KeyError:\n        raise KeyError('No item found in the dictionary.')", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    try:\n        key = random.choice(self.__data.keys())\n    except IndexError:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    value = self.pop(key)\n    self.__delete(key)\n    return (key, value)\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    \n    \n    key = random.choice(self)\n    self.remove(key)\n    return key, self[key]", "def popitem(self):\n    return random.choice(self.items())", "def popitem(self):\n    try:\n        key = random.choice(list(self))\n        self.remove(key)\n        return key, self[key]\n    except KeyError:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n", "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self.__data.keys()))\n    except KeyError:\n        raise KeyError('No items to popitem.')\n    else:\n        value = self.pop(key)\n        return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self.data.keys()))\n        return (key, self.pop(key))\n    except KeyError:\n        raise KeyError('No item found in the dictionary.')", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(self.__data.keys())\n    except IndexError:\n        raise KeyError(\"popitem(): dictionary is empty\")\n    value = self.pop(key)\n    self.__delete(key)\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    key = random.choice(self)\n    self.remove(key)\n    return key, self[key]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return random.choice(self.items())", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self))\n        self.remove(key)\n        return key, self[key]\n    except KeyError:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)\n", "def _create_in_regex(self) -> Pattern:\n    if self._in_regex:\n        return self._in_regex\n\n    pattern = self.format(self, self._sql, self._params)\n    self._in_regex = re.compile(pattern)\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)\n\n\n# ============================================================================\n# >> FORMAT REGEX\n# =============================================================================\n", "def _create_in_regex(self) -> Pattern:\n    if self._in_obj is None:\n        return None\n    else:\n        return re.compile(self._in_obj)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)", "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(self.in_format() + self.in_escape_char())\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(r\"%s(?P<params>.*)\" % self._escape_char, re.DOTALL | re.UNICODE)", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)", "def _create_in_regex(self) -> Pattern:\n    return re.compile(r'(?<=\\w)(?P<param>[\\w\\s=\\(\\)]+)(?=\\s|$)')", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    if self._in_regex:\n        return self._in_regex\n\n    pattern = self.format(self, self._sql, self._params)\n    self._in_regex = re.compile(pattern)\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)\n\n\n# ============================================================================\n# >> FORMAT REGEX\n# =============================================================================\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    if self._in_obj is None:\n        return None\n    else:\n        return re.compile(self._in_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(self.in_format() + self.in_escape_char())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(r\"%s(?P<params>.*)\" % self._escape_char, re.DOTALL | re.UNICODE)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(r'(?<=\\w)(?P<param>[\\w\\s=\\(\\)]+)(?=\\s|$)')", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self)", "def _create_converter(self) -> _converting._Converter:\n    return _converters.create_converter(self)", "def _create_converter(self) -> _converting._Converter:\n    from. import _converters\n    return _converters.convert_style(self._in_style, self._expand_tuples,\n                                     self._escape_char, self._out_style,\n                                     self._in_regex)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converters.get(self._in_style, _converters[\"default\"])(self)\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _converting._Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char, self._in_obj, self._out_obj)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converters.get(self._in_style, _converters[\"default\"])()\n    for style in self._in_style:\n        converter.add_style(style)\n    for style in self._out_style:\n        converter.add_style(style)\n    for style in self._expand_tuples:\n        converter.add_style(style)\n    for style in self._escape_char:\n        converter.add_style(style)\n    return converter", "def _create_converter(self) -> _converting._Converter:\n    return _converters._create_converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(\n        style = self._style,\n        tuples = self._tuples,\n        escape_char = self._escape_char,\n        out_style = self._out_style,\n        in_obj = self._in_obj,\n        out_obj = self._out_obj,\n        in_regex = self._in_regex,\n        out_regex = self._out_regex,\n    )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converters.create_converter(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    from. import _converters\n    return _converters.convert_style(self._in_style, self._expand_tuples,\n                                     self._escape_char, self._out_style,\n                                     self._in_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converters.get(self._in_style, _converters[\"default\"])(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _converting._Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char, self._in_obj, self._out_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converters.get(self._in_style, _converters[\"default\"])()\n    for style in self._in_style:\n        converter.add_style(style)\n    for style in self._out_style:\n        converter.add_style(style)\n    for style in self._expand_tuples:\n        converter.add_style(style)\n    for style in self._escape_char:\n        converter.add_style(style)\n    return converter", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converters._create_converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(\n        style = self._style,\n        tuples = self._tuples,\n        escape_char = self._escape_char,\n        out_style = self._out_style,\n        in_obj = self._in_obj,\n        out_obj = self._out_obj,\n        in_regex = self._in_regex,\n        out_regex = self._out_regex,\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str): \n", "def isoparse(self, dt_str):   ->   ", "def isoparse(self, dt_str): ", "def isoparse(self, dt_str):", "def isoparse(self, dt_str): is_datetime):", "def isoparse(self, dt_str):  iso", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):  ", "def isoparse(self, dt_str): other"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str): \n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):   ->   ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str): ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str): is_datetime):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):  iso", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):  ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str): other", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):  **)", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): tz)", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): tz)", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): **s)", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): return return )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): return ) tz) return", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) ** )"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):  **)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): tz)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): tz)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): **s)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): return return )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): return ) tz) return", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) ** )", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    return dt.replace(tzinfo=self._tz)", "def fromutc(self, dt):\n    if dt < self._fromutc_start:\n        return dt\n    if dt > self._fromutc_stop:\n        return self._fromutc_start\n    return dt.astimezone(self._fromutc_tz)\n", "def fromutc(self, dt):\n    return self._fromutc_tz(dt).fromutc()", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=_UTC)\n    else:\n        return dt.astimezone(_UTC)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)", "def fromutc(self, dt):\n    # Support for django < 1.7\n    if django.VERSION < (1, 7):\n        return dt.replace(tzinfo=None)\n\n    return self._fromutc(dt)", "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    return self._fromutc(dt)", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self._tz)"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self._tz)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt < self._fromutc_start:\n        return dt\n    if dt > self._fromutc_stop:\n        return self._fromutc_start\n    return dt.astimezone(self._fromutc_tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc_tz(dt).fromutc()", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=_UTC)\n    else:\n        return dt.astimezone(_UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    # Support for django < 1.7\n    if django.VERSION < (1, 7):\n        return dt.replace(tzinfo=None)\n\n    return self._fromutc(dt)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self._tz)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)", "def default_tzinfo(dt, tzinfo):\n    return dt.astimezone(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.astimezone(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: str, after: str):\n    self._cutter = before + ':' + after\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + \"\\s+\" + after + \"\\s*\\n\")\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = after.split(\";\")\n    self._cutter.insert(0, before)\n    self._cutter = \"\".join(self._cutter)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = before + ':' + after + ':'\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = __import__(\n        f\"{__name__}.split\",\n        fromlist=[f\"{before}\", f\"{after}\"],\n    )\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = after.replace(\"\\\\\", \"\\\\\\\\\").replace(\"/\", \"\\\\/\")\n    self._cutter = self._cutter.replace(\"[\", \"\\\\[\").replace(\"]\", \"\\\\]\")\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = after + before + self._file_extension\n", "def set_cut_chars(self, before: str = ';', after: str = ';') -> None:\n    self._cutter = before + self._cutter + after\n", "def set_cut_chars(self, before: str, after: str):\n\nself._cutter = before + after\nself._split_file = self._cutter.encode('utf-8')\nself._delimiter = before + after", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ';'.join([before, after])"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = before + ':' + after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + \"\\s+\" + after + \"\\s*\\n\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = after.split(\";\")\n    self._cutter.insert(0, before)\n    self._cutter = \"\".join(self._cutter)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = before + ':' + after + ':'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = __import__(\n        f\"{__name__}.split\",\n        fromlist=[f\"{before}\", f\"{after}\"],\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = after.replace(\"\\\\\", \"\\\\\\\\\").replace(\"/\", \"\\\\/\")\n    self._cutter = self._cutter.replace(\"[\", \"\\\\[\").replace(\"]\", \"\\\\]\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = after + before + self._file_extension\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str = ';', after: str = ';') -> None:\n    self._cutter = before + self._cutter + after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n\nself._cutter = before + after\nself._split_file = self._cutter.encode('utf-8')\nself._delimiter = before + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ';'.join([before, after])", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: str) -> bool:\n    if request.startswith('<?xml'):\n        return True\n\n    if request.startswith('<?xml version=\"1.0\" encoding=\"utf-8\"?>'):\n        return True\n\n    if request.startswith('<!DOCTYPE '):\n        return True\n\n    return False\n", "def identify_request(request: Request):\n    if request.message.is_legacy_payload():\n        return True\n    elif request.message.is_private_payload():\n        return True\n    elif request.message.is_federation_message():\n        return False\n    else:\n        return False\n", "def identify_request(request: Request) -> bool:\n    if request.is_legacy_payload():\n        return False\n    return request.public_msg_id and request.public_msg_id!= ''\n", "def identify_request(request: dict) -> bool:\n    if request[\"type\"] == \"private\":\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.is_legacy_payload():\n        return True\n    return request.is_payload()", "def identify_request(request: dict) -> bool:\n    return request['public_message'] is not None or request['private_message'] is not None\n", "def identify_request(request: Request):\n    if request.is_legacy_payload():\n        return True\n    if request.is_federation_request():\n        return True\n    return False\n", "def identify_request(request: str) -> bool:\n    if request.startswith(\"/\"):\n        return False\n    if request.startswith(\"/legacy\"):\n        return True\n    if request.startswith(\"/private\"):\n        return False\n    return True\n", "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.path in (\"/messages\", \"/legacy\", \"/public\")\n    )\n", "def identify_request(request: Request) -> bool:\n    try:\n        return request.json.get('public_message') and request.json.get('private_message')\n    except AttributeError:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: str) -> bool:\n    if request.startswith('<?xml'):\n        return True\n\n    if request.startswith('<?xml version=\"1.0\" encoding=\"utf-8\"?>'):\n        return True\n\n    if request.startswith('<!DOCTYPE '):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.message.is_legacy_payload():\n        return True\n    elif request.message.is_private_payload():\n        return True\n    elif request.message.is_federation_message():\n        return False\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_legacy_payload():\n        return False\n    return request.public_msg_id and request.public_msg_id!= ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    if request[\"type\"] == \"private\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_legacy_payload():\n        return True\n    return request.is_payload()", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    return request['public_message'] is not None or request['private_message'] is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.is_legacy_payload():\n        return True\n    if request.is_federation_request():\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    if request.startswith(\"/\"):\n        return False\n    if request.startswith(\"/legacy\"):\n        return True\n    if request.startswith(\"/private\"):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.path in (\"/messages\", \"/legacy\", \"/public\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        return request.json.get('public_message') and request.json.get('private_message')\n    except AttributeError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: dict) -> bool:\n    return \"matrix\" in request[\"header\"][\"type\"]\n", "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "def identify_request(request: Dict) -> bool:\n    return request['type'] == 'MatrixRequest'\n", "def identify_request(request: str) -> bool:\n    return request.startswith('federation')\n", "def identify_request(request: str) -> bool:\n    return request in [\"federation\", \"request\"]\n", "def identify_request(request: dict) -> bool:\n    if request.get('identity'):\n        return True\n    if request.get('identity') and request.get('identity').get('id'):\n        return True\n    return False\n", "def identify_request(request: str):\n    if request.startswith('MatrixRequest'):\n        return True\n    else:\n        return False\n", "def identify_request(request: dict):\n    if 'federation' in request:\n        return True\n    return False", "def identify_request(request: str) -> bool:\n    if request.startswith(\"/federation/matrix/\"):\n        return True\n    return False\n", "def identify_request(request: str):\n    if request == 'Matrix':\n        return True\n    else:\n        return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: dict) -> bool:\n    return \"matrix\" in request[\"header\"][\"type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict) -> bool:\n    return request['type'] == 'MatrixRequest'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    return request.startswith('federation')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    return request in [\"federation\", \"request\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    if request.get('identity'):\n        return True\n    if request.get('identity') and request.get('identity').get('id'):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str):\n    if request.startswith('MatrixRequest'):\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict):\n    if 'federation' in request:\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    if request.startswith(\"/federation/matrix/\"):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str):\n    if request == 'Matrix':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime(\"%d %B %Y %H:%M:%S\")\n", "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S\")", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n", "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    \n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%d %B %Y %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S\")", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, tag: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        replacer = lambda m: m.group(0)\n\n    tags = set()\n    for m in re.finditer(r'<%s>(.*?)</%s>' % (tag, tag), text):\n        tags.add(replacer(m.group(1)))\n\n    return tags, text\n", "def find_tags(text: str, tag: str, replacer=None) -> Set[str]:\n    return set(\n        re.findall(r'\\{\\{([^}]+)\\}\\}', tag) +\n        re.findall(r'\\{\\{([^}]+)\\}\\}', text) +\n        re.findall(r'\\{\\{([^}]+)\\}\\}', clean_text(text))\n    )\n", "def find_tags(text: str, tag: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    return set([tag] if replacer is None else replacer(tag))\n", "def find_tags(text: str, tag: str, replacer=None) -> Set[str]:\n    return set(bleach.clean(text, tags=[tag], strip=True).split())\n", "def find_tags(text: str, test_tag: Callable[[str], str] = None, replacer: Callable[[str], str] = None) -> Set[str]:\n    if test_tag:\n        return {tag for tag in text.split(\"\\n\") if test_tag(tag)}\n    else:\n        return {tag for tag in text.split(\"\\n\") if not test_tag(tag)}\n", "def find_tags(text: str, test_tag: str, replacer: Callable[[str], str]=None) -> Set[str]:\n    if test_tag:\n        return set([tag for tag in text.split('\\n') if tag and not tag.startswith('%')])\n    if replacer:\n        return set([tag for tag in text.split('\\n') if replacer(tag)])\n    return set([tag for tag in text.split('\\n') if not tag])\n", "def find_tags(text: str, *, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    if replacer:\n        text = replacer(text)\n\n    return {tag for tag in BleachImporter().find_tags(text)}\n", "def find_tags(text: str, tag: str, replacer=lambda t: t) -> Set[str]:\n    for match in _TAGS_RE.finditer(text):\n        original = match.group(0)\n        if original and replacer(original):\n            continue\n        yield tag, original\n", "def find_tags(text: str, tag: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    return set([tag for tag in re.findall(r'<(?:[a-z]|[A-Z]|[0-9]|[!-.])+>', text, re.I | re.M | re.S)]) | \\\n           set([tag for tag in re.findall(r'<\\s*%s\\s*>' % tag, text, re.I | re.M | re.S)]) | \\\n           replacer if replacer else set()\n", "def find_tags(text: str, tag: str, replacer=None) -> set:\n    text = bleach.clean(text)\n    if replacer is not None:\n        text = replacer(text)\n    return {tag for tag in text.split('\\n') if tag.strip()}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, tag: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        replacer = lambda m: m.group(0)\n\n    tags = set()\n    for m in re.finditer(r'<%s>(.*?)</%s>' % (tag, tag), text):\n        tags.add(replacer(m.group(1)))\n\n    return tags, text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def find_tags(text: str, tag: str, replacer=None) -> Set[str]:\n    return set(\n        re.findall(r'\\{\\{([^}]+)\\}\\}', tag) +\n        re.findall(r'\\{\\{([^}]+)\\}\\}', text) +\n        re.findall(r'\\{\\{([^}]+)\\}\\}', clean_text(text))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, tag: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    return set([tag] if replacer is None else replacer(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, tag: str, replacer=None) -> Set[str]:\n    return set(bleach.clean(text, tags=[tag], strip=True).split())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, test_tag: Callable[[str], str] = None, replacer: Callable[[str], str] = None) -> Set[str]:\n    if test_tag:\n        return {tag for tag in text.split(\"\\n\") if test_tag(tag)}\n    else:\n        return {tag for tag in text.split(\"\\n\") if not test_tag(tag)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, test_tag: str, replacer: Callable[[str], str]=None) -> Set[str]:\n    if test_tag:\n        return set([tag for tag in text.split('\\n') if tag and not tag.startswith('%')])\n    if replacer:\n        return set([tag for tag in text.split('\\n') if replacer(tag)])\n    return set([tag for tag in text.split('\\n') if not tag])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, *, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    if replacer:\n        text = replacer(text)\n\n    return {tag for tag in BleachImporter().find_tags(text)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, tag: str, replacer=lambda t: t) -> Set[str]:\n    for match in _TAGS_RE.finditer(text):\n        original = match.group(0)\n        if original and replacer(original):\n            continue\n        yield tag, original\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, tag: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    return set([tag for tag in re.findall(r'<(?:[a-z]|[A-Z]|[0-9]|[!-.])+>', text, re.I | re.M | re.S)]) | \\\n           set([tag for tag in re.findall(r'<\\s*%s\\s*>' % tag, text, re.I | re.M | re.S)]) | \\\n           replacer if replacer else set()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, tag: str, replacer=None) -> set:\n    text = bleach.clean(text)\n    if replacer is not None:\n        text = replacer(text)\n    return {tag for tag in text.split('\\n') if tag.strip()}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    text = bleach.linkify(text)\n    text = bleach.clean(text, tags=['a', 'img', 'link', 'b','strong'])\n    return text\n", "def process_text_links(text):\n    text = bleach.linkify(text)\n    text = bleach.linkify(text, parse_email=True)\n    return text", "def process_text_links(text):\n    return bleach.linkify(text, strip=True)", "def process_text_links(text):\n    for link in LINK_REGEX.findall(text):\n        text = text.replace(link[0], link[1])\n    return text", "def process_text_links(text):\n    return bleach.linkify(bleach.clean(text, tags=[], attributes={}, strip=True))", "def process_text_links(text):\n    text = bleach.linkify(text, ['img', 'a', 'p'])\n    text = bleach.linkify(text, ['a'])\n    return text\n", "def process_text_links(text):\n    text = bleach.linkify(text)\n    return text\n", "def process_text_links(text):\n    text = bleach.clean(text, tags=[], attributes=[], styles=[], strip=True)\n    text = re.sub(r'\\[\\[([^\\[\\]]+)\\]\\]', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "def process_text_links(text):\n    linkified = bleach.linkify(text)\n    return linkified\n", "def process_text_links(text):\n    linkified_text = bleach.linkify(text)\n    return linkified_text\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text)\n    text = bleach.clean(text, tags=['a', 'img', 'link', 'b','strong'])\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text)\n    text = bleach.linkify(text, parse_email=True)\n    return text", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    return bleach.linkify(text, strip=True)", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    for link in LINK_REGEX.findall(text):\n        text = text.replace(link[0], link[1])\n    return text", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    return bleach.linkify(bleach.clean(text, tags=[], attributes={}, strip=True))", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text, ['img', 'a', 'p'])\n    text = bleach.linkify(text, ['a'])\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text)\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(text, tags=[], attributes=[], styles=[], strip=True)\n    text = re.sub(r'\\[\\[([^\\[\\]]+)\\]\\]', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text)\n    return linkified\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    linkified_text = bleach.linkify(text)\n    return linkified_text\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str):\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    else:\n        return None\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url)\n        return response.headers[\"content-type\"]\n    except Exception:\n        return None\n", "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers.get(\"content-type\", \"application/octet-stream\")\n", "def fetch_content_type(url: str) -> str:\n    headers = {'Accept': 'text/html'}\n    response = requests.head(url, headers=headers)\n    return response.headers['Content-Type']\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    return None\n", "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> str:\n    import requests\n    response = requests.head(url)\n    return response.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    with urllib.request.urlopen(url) as response:\n        return response.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get('content-type', '')\n", "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str):\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url)\n        return response.headers[\"content-type\"]\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers.get(\"content-type\", \"application/octet-stream\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    headers = {'Accept': 'text/html'}\n    response = requests.head(url, headers=headers)\n    return response.headers['Content-Type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    import requests\n    response = requests.head(url)\n    return response.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    with urllib.request.urlopen(url) as response:\n        return response.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get('content-type', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str):\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    \n    \n    return tag in TAGS\n", "def test_tag(tag: str, word: str):\n    \n    \n    return tag in word.split(\"_\")\n", "def test_tag(tag: str) -> bool:\n    \n    \n    return tag in TAGS", "def test_tag(tag: str, word: str):\n    \n    \n    if tag in tag_map.keys():\n        return tag_map[tag]\n    else:\n        return None", "def test_tag(tag: str):\n    if tag == 'a':\n        return True\n    return False\n", "def test_tag(tag: str):\n    if tag == \"NN\":\n        return True\n    return False\n", "def test_tag(tag: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False\n", "def test_tag(tag: str, word: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False", "def test_tag(tag: str):\n    \n    \n    return tag.split('/')[0] in TAGS\n", "def test_tag(tag: str, word: str):\n    if tag in word_tag:\n        return True\n    else:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    \n    \n    return tag in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str):\n    \n    \n    return tag in word.split(\"_\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    \n    \n    return tag in TAGS", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str):\n    \n    \n    if tag in tag_map.keys():\n        return tag_map[tag]\n    else:\n        return None", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    if tag == 'a':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    if tag == \"NN\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    \n    \n    return tag.split('/')[0] in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str):\n    if tag in word_tag:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return dict(\n        (child.tag, child.text) for child in node.getchildren())\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}", "def xml_children_as_dict(node):\n    children = []\n    for child in node:\n        children.append(xml_children_as_dict(child))\n    return dict(children)", "def xml_children_as_dict(node):\n    result = {}\n    for child in node.getchildren():\n        tag = child.tag\n        if tag in result:\n            raise ValueError(\"duplicate tag name %s\" % tag)\n        result[tag] = xml_children_as_dict(child)\n    return result\n", "def xml_children_as_dict(node):\n    children = {}\n    for child in node.iterchildren():\n        children[child.tag] = child.text\n    return children\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = [child for child in node]\n    d = {}\n    for child in children:\n        if child.tag == \"xml\":\n            d[child.tag] = child.text\n        elif child.tag == \"federation\":\n            d[child.tag] = _xml_children_as_dict(child)\n        else:\n            d[child.tag] = child.text\n    return d\n", "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    children = dict((n.tag, n) for n in node)\n    return children"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return dict(\n        (child.tag, child.text) for child in node.getchildren())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = []\n    for child in node:\n        children.append(xml_children_as_dict(child))\n    return dict(children)", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    result = {}\n    for child in node.getchildren():\n        tag = child.tag\n        if tag in result:\n            raise ValueError(\"duplicate tag name %s\" % tag)\n        result[tag] = xml_children_as_dict(child)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    children = {}\n    for child in node.iterchildren():\n        children[child.tag] = child.text\n    return children\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = [child for child in node]\n    d = {}\n    for child in children:\n        if child.tag == \"xml\":\n            d[child.tag] = child.text\n        elif child.tag == \"federation\":\n            d[child.tag] = _xml_children_as_dict(child)\n        else:\n            d[child.tag] = child.text\n    return d\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = dict((n.tag, n) for n in node)\n    return children", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise Exception('sender and entity handle do not match')\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    raise ValueError(\"Sender and entity handle mismatch\")", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"sender and entity handle do not match: %s and %s\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle mismatch.\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity handle mismatch: %s!= %s\" % (sender_handle, entity_handle))", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handles do not match\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise Exception('sender and entity handle do not match')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    raise ValueError(\"Sender and entity handle mismatch\")", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"sender and entity handle do not match: %s and %s\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle mismatch.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity handle mismatch: %s!= %s\" % (sender_handle, entity_handle))", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handles do not match\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = NodeInfo(url)\n    return nodeinfo.well_known_document(document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_nodeinfo_well_known_document(url, document_path=document_path)", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo_document(url, document_path, 'well-known')\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '.well-known/document.xml'\n    return get_nodeinfo_well_known_document_xml(url, document_path)", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    response = requests.get(url, auth=('', ''))\n    if response.status_code == 200:\n        return parse_nodeinfo_response(response.content, document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_well_known_document(\n        url, document_path, nodeinfo.NodeInfo,\n        'nodeinfo.diaspora.software.document')\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo_document(url, document_path).well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo(url, document_path).well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_well_known_document(url, document_path, 'nodeinfo.json')\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    node_info = get_nodeinfo(url, document_path)\n    node_info['well_known'] = {}\n    return node_info\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = NodeInfo(url)\n    return nodeinfo.well_known_document(document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_nodeinfo_well_known_document(url, document_path=document_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo_document(url, document_path, 'well-known')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '.well-known/document.xml'\n    return get_nodeinfo_well_known_document_xml(url, document_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    response = requests.get(url, auth=('', ''))\n    if response.status_code == 200:\n        return parse_nodeinfo_response(response.content, document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_well_known_document(\n        url, document_path, nodeinfo.NodeInfo,\n        'nodeinfo.diaspora.software.document')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo_document(url, document_path).well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo(url, document_path).well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_well_known_document(url, document_path, 'nodeinfo.json')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    node_info = get_nodeinfo(url, document_path)\n    node_info['well_known'] = {}\n    return node_info\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.to_xml(), signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    # XXX probably not needed anymore\n    return True", "def verify_relayable_signature(public_key, doc, signature):\n    verify_signature(public_key, doc, signature, relayable_signature)", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_relayable_elements(doc, signature, public_key)\n", "def verify_relayable_signature(public_key, doc, signature):\n    verifier = Verifier(public_key)\n    if verifier.verify(doc, signature):\n        return True\n    return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature, relayable_signature_verifier)", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, verify_relayable)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(doc, signature)", "def verify_relayable_signature(public_key, doc, signature):\n    element = doc.find('.//signature/relayableSignature')\n    if element is None:\n        return\n    sig_string = element.text\n    sig = element.text.split('.')[0]\n    if sig!= sig_string:\n        return False\n    return True", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return False\n    try:\n        return verify_signature(public_key, doc, signature)\n    except Exception as e:\n        print(e)\n        return False\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.to_xml(), signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    # XXX probably not needed anymore\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    verify_signature(public_key, doc, signature, relayable_signature)", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_relayable_elements(doc, signature, public_key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    verifier = Verifier(public_key)\n    if verifier.verify(doc, signature):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature, relayable_signature_verifier)", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, verify_relayable)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(doc, signature)", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    element = doc.find('.//signature/relayableSignature')\n    if element is None:\n        return\n    sig_string = element.text\n    sig = element.text.split('.')[0]\n    if sig!= sig_string:\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return False\n    try:\n        return verify_signature(public_key, doc, signature)\n    except Exception as e:\n        print(e)\n        return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> List[dict]:\n    if not document:\n        return []\n\n    return _parse_webfinger(document)\n", "def parse_diaspora_webfinger(document: dict, filename: str) -> dict:\n    if filename.endswith(\".json\"):\n        return parse_json_webfinger(document)\n    else:\n        return parse_xrd_webfinger(document)\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    root = ET.fromstring(document)\n    return parse_webfinger(root)\n", "def parse_diaspora_webfinger(document: str):\n    return parse_xrd_json(document)\n", "def parse_diaspora_webfinger(document: dict, webfinger_url: str) -> dict:\n    if not webfinger_url.endswith('/'):\n        webfinger_url += '/'\n    return _parse_webfinger(document, webfinger_url)\n", "def parse_diaspora_webfinger(document: str) -> list:\n\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    return parse_webfinger(document)\n", "def parse_diaspora_webfinger(document: str, url: str):\n    if document.startswith('<?xml'):\n        return parse_diaspora_webfinger_new(document, url)\n    else:\n        return parse_diaspora_webfinger_old(document, url)", "def parse_diaspora_webfinger(document: str) -> dict:\n    return parse_webfinger(document, 'diaspora')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> List[dict]:\n    if not document:\n        return []\n\n    return _parse_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: dict, filename: str) -> dict:\n    if filename.endswith(\".json\"):\n        return parse_json_webfinger(document)\n    else:\n        return parse_xrd_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    root = ET.fromstring(document)\n    return parse_webfinger(root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str):\n    return parse_xrd_json(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: dict, webfinger_url: str) -> dict:\n    if not webfinger_url.endswith('/'):\n        webfinger_url += '/'\n    return _parse_webfinger(document, webfinger_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> list:\n\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    return parse_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str, url: str):\n    if document.startswith('<?xml'):\n        return parse_diaspora_webfinger_new(document, url)\n    else:\n        return parse_diaspora_webfinger_old(document, url)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    return parse_webfinger(document, 'diaspora')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: RemoteHandle, url: str, host: str, path: str, timeout: float,\n                                    raise_ssl_errors: bool, extra_headers: dict):\n    response = handle.retrieve(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    if response.status!= 200:\n        raise RuntimeError(response.reason)\n    return response.read()\n", "def try_retrieve_webfinger_document(handle: BinaryIO, url: str, host: str, path: str, timeout: int = 30,\n                                     raise_ssl_errors: bool = True, extra_headers: dict = {}):\n    return retrieve_webfinger_document_from_url(handle, url, host, path, timeout, raise_ssl_errors,\n                                               extra_headers=extra_headers)", "def try_retrieve_webfinger_document(handle: urllib2.Request, host: str, path: str, timeout: float = 5, raise_ssl_errors: bool = True, extra_headers: dict = {}) -> bytes:\n    try:\n        handle.getheader(\"Content-Type\")\n        return handle.read()\n    except urllib2.URLError:\n        if raise_ssl_errors:\n            raise\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: socket.socket, url: str, host: str, path: str, timeout: int,\n                                    raise_ssl_errors: bool, extra_headers: Dict[str, str] = {}) -> None:\n    return _try_retrieve_document(handle, url, host, path, timeout, raise_ssl_errors, extra_headers,\n                                                                                                                                                                                                                                                                                                                                           ", "def try_retrieve_webfinger_document(handle: BinaryIO, url: str, host: str, path: str, timeout: int = 60,\n                                     raise_ssl_errors: bool = True, extra_headers: dict = None) -> str:\n    try:\n        return retrieve_webfinger_document_from_url(handle, url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except WebFingerException as e:\n        raise WebFingerException(e)\n", "def try_retrieve_webfinger_document(handle: requests.Response,\n                                    host: str,\n                                    path: str,\n                                    timeout: int,\n                                    raise_ssl_errors: bool,\n                                    extra_headers: dict) -> str:\n    return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n", "def try_retrieve_webfinger_document(handle: IO, url: str, host: str, path: str, timeout: int, raise_ssl_errors: bool, extra_headers: dict = {}) -> str:\n    # TODO: handle HTTPError for HTTP GET requests\n    # TODO: handle HTTPError for HTTP PUT requests\n    # TODO: handle HTTPError for HTTP DELETE requests\n    # TODO: handle HTTPError for HTTP POST requests\n    return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n", "def try_retrieve_webfinger_document(handle:str, host:str, path:str, timeout:int, raise_ssl_errors:bool=False, extra_headers:dict={}) -> str:\n    try:\n        return fetch_document(handle,host,path,timeout,raise_ssl_errors,extra_headers)\n    except Exception as e:\n        print(e)\n        return ''", "def try_retrieve_webfinger_document(handle: socket.socket, url: str, host: str, path: str, timeout: int,\n                                     raise_ssl_errors: bool, extra_headers: dict = None):\n    try:\n        return read_webfinger_document(handle, url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except (HTTPError, URLError, OSError, ssl.SSLError, socket.timeout) as err:\n        raise FetchWebfingerException(err)\n", "def try_retrieve_webfinger_document(handle: HTTPResponse, url: str, host: str, path: str, timeout: int, raise_ssl_errors: bool, extra_headers: dict=None):\n    return fetch_document(url,host,path,timeout,raise_ssl_errors,extra_headers)"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: RemoteHandle, url: str, host: str, path: str, timeout: float,\n                                    raise_ssl_errors: bool, extra_headers: dict):\n    response = handle.retrieve(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    if response.status!= 200:\n        raise RuntimeError(response.reason)\n    return response.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, url: str, host: str, path: str, timeout: int = 30,\n                                     raise_ssl_errors: bool = True, extra_headers: dict = {}):\n    return retrieve_webfinger_document_from_url(handle, url, host, path, timeout, raise_ssl_errors,\n                                               extra_headers=extra_headers)", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: urllib2.Request, host: str, path: str, timeout: float = 5, raise_ssl_errors: bool = True, extra_headers: dict = {}) -> bytes:\n    try:\n        handle.getheader(\"Content-Type\")\n        return handle.read()\n    except urllib2.URLError:\n        if raise_ssl_errors:\n            raise\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket, url: str, host: str, path: str, timeout: int,\n                                    raise_ssl_errors: bool, extra_headers: Dict[str, str] = {}) -> None:\n    return _try_retrieve_document(handle, url, host, path, timeout, raise_ssl_errors, extra_headers,\n                                                                                                                                                                                                                                                                                                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, url: str, host: str, path: str, timeout: int = 60,\n                                     raise_ssl_errors: bool = True, extra_headers: dict = None) -> str:\n    try:\n        return retrieve_webfinger_document_from_url(handle, url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except WebFingerException as e:\n        raise WebFingerException(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: requests.Response,\n                                    host: str,\n                                    path: str,\n                                    timeout: int,\n                                    raise_ssl_errors: bool,\n                                    extra_headers: dict) -> str:\n    return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: IO, url: str, host: str, path: str, timeout: int, raise_ssl_errors: bool, extra_headers: dict = {}) -> str:\n    # TODO: handle HTTPError for HTTP GET requests\n    # TODO: handle HTTPError for HTTP PUT requests\n    # TODO: handle HTTPError for HTTP DELETE requests\n    # TODO: handle HTTPError for HTTP POST requests\n    return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle:str, host:str, path:str, timeout:int, raise_ssl_errors:bool=False, extra_headers:dict={}) -> str:\n    try:\n        return fetch_document(handle,host,path,timeout,raise_ssl_errors,extra_headers)\n    except Exception as e:\n        print(e)\n        return ''", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket, url: str, host: str, path: str, timeout: int,\n                                     raise_ssl_errors: bool, extra_headers: dict = None):\n    try:\n        return read_webfinger_document(handle, url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except (HTTPError, URLError, OSError, ssl.SSLError, socket.timeout) as err:\n        raise FetchWebfingerException(err)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse, url: str, host: str, path: str, timeout: int, raise_ssl_errors: bool, extra_headers: dict=None):\n    return fetch_document(url,host,path,timeout,raise_ssl_errors,extra_headers)", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_host_meta(handle)[0]\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    url = 'http://diaspora.federation.gov/webfinger/'\n    response = requests.get(url + handle)\n    return response.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_host_meta(handle)['webfinger']", "def retrieve_and_parse_diaspora_webfinger(handle):\n    # parse diaspora document\n    doc = retrieve_diaspora_document(handle)\n    # parse webfinger document\n    return parse_diaspora_webfinger(doc)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = {}\n    result['uri'] = handle.geturl()\n    result['name'] = handle.name\n    result['name_len'] = handle.name_len\n    result['uri_len'] = handle.uri_len\n    result['host'] = handle.url\n    result['webfinger'] = handle.read()\n    result['uri_scheme'] = handle.scheme\n    return result\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    return parse_diaspora_webfinger(r.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    if not result:\n        result = parse_diaspora_webfinger(handle)\n    return result\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(urllib.request.urlopen(handle))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return _retrieve_and_parse_webfinger(handle, 'diaspora.webfinger')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_host_meta(handle)\n    doc['webfinger'] = parse_diaspora_webfinger(doc['url'])\n    return doc"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_host_meta(handle)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    url = 'http://diaspora.federation.gov/webfinger/'\n    response = requests.get(url + handle)\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_host_meta(handle)['webfinger']", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    # parse diaspora document\n    doc = retrieve_diaspora_document(handle)\n    # parse webfinger document\n    return parse_diaspora_webfinger(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = {}\n    result['uri'] = handle.geturl()\n    result['name'] = handle.name\n    result['name_len'] = handle.name_len\n    result['uri_len'] = handle.uri_len\n    result['host'] = handle.url\n    result['webfinger'] = handle.read()\n    result['uri_scheme'] = handle.scheme\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    return parse_diaspora_webfinger(r.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    if not result:\n        result = parse_diaspora_webfinger(handle)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(urllib.request.urlopen(handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return _retrieve_and_parse_webfinger(handle, 'diaspora.webfinger')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_host_meta(handle)\n    doc['webfinger'] = parse_diaspora_webfinger(doc['url'])\n    return doc", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n", "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host)", "def retrieve_diaspora_host_meta(host):\n    return XRD('{}/{}'.format(settings.XRD_URL, host))\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, \"https://diaspora.org/api/v1/host_meta\")\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get('http://%s/diaspora/host-meta' % host)\n    if response.ok:\n        return XRD.from_dict(response.json())\n    else:\n        raise RetrieveError(response.text)", "def retrieve_diaspora_host_meta(host):\n    url = 'https://%s.diaspora.org/remote' % host\n    res = requests.get(url)\n    if res.status_code!= 200:\n        raise Exception('Retrieving diaspora host meta failed.')\n    return XRD(res.content)\n", "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_client().hosts.get(host)\n", "def retrieve_diaspora_host_meta(host):\n    from.diaspora import XRD\n    return XRD.get_diaspora_host_meta(host)\n", "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host, \"XRD\")\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host)", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD('{}/{}'.format(settings.XRD_URL, host))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, \"https://diaspora.org/api/v1/host_meta\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get('http://%s/diaspora/host-meta' % host)\n    if response.ok:\n        return XRD.from_dict(response.json())\n    else:\n        raise RetrieveError(response.text)", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = 'https://%s.diaspora.org/remote' % host\n    res = requests.get(url)\n    if res.status_code!= 200:\n        raise Exception('Retrieving diaspora host meta failed.')\n    return XRD(res.content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_client().hosts.get(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    from.diaspora import XRD\n    return XRD.get_diaspora_host_meta(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host, \"XRD\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, \"POST\", timeout, method, *args, data=data, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs)\n    return __handle_response(response, method)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\"POST\", url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout=timeout, method=method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data=data, timeout=timeout, *args, **kwargs)", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return _check_status(response, method), response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return _get_status_code_and_error(response), response.raise_for_status()", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        **kwargs\n    )\n    return response.status_code, response\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, \"POST\", timeout, method, *args, data=data, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs)\n    return __handle_response(response, method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\"POST\", url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout=timeout, method=method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data=data, timeout=timeout, *args, **kwargs)", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return _check_status(response, method), response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return _get_status_code_and_error(response), response.raise_for_status()", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        **kwargs\n    )\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    return dict_merge(dic, {key: val}, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dict_merge(dic, val, key)\n    return dic", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n    for key in keys:\n        dict_insert(dic, val, key)\n        val = dic[key]\n", "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if keys else [key]\n    for k in keys:\n        dic = dict_merge(dic, val, k)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, key)\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        keys = keys[:-1]\n        dic[key] = dic.get(key, {})\n        for k in keys:\n            dic[key][k] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join(keys)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    return dict_merge(dic, {key: val}, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dict_merge(dic, val, key)\n    return dic", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n    for key in keys:\n        dict_insert(dic, val, key)\n        val = dic[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if keys else [key]\n    for k in keys:\n        dic = dict_merge(dic, val, k)\n    dic[key] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, key)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        keys = keys[:-1]\n        dic[key] = dic.get(key, {})\n        for k in keys:\n            dic[key][k] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join(keys)\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    spec_option = os.path.join(settings_dirs, spec_option)\n    file_names = []\n    for root, dirs, files in os.walk(spec_option):\n        for name in files:\n            if name.endswith('.ini'):\n                file_names.append(os.path.join(root, name))\n    return file_names\n", "def list_of_file_names(settings_dirs, spec_option):\n    return list_of_files(settings_dirs, spec_option)\n", "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = settings_dirs or []\n    file_names = []\n    for d in settings_dirs:\n        file_names.extend(glob.glob(os.path.join(d, '*.ini')))\n    return file_names", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        f for s in settings_dirs\n        for f in glob.glob(os.path.join(s, '*' + spec_option))\n    ]", "def list_of_file_names(settings_dirs, spec_option):\n    file_names = []\n    for dir_name in settings_dirs:\n        file_names += [os.path.join(dir_name, f) for f in os.listdir(dir_name)]\n    file_names = [f for f in file_names if f.endswith(spec_option)]\n    return file_names\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [os.path.join(settings_dir, \"%s.ini\" % spec_option)]", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        os.path.join(dir_, file_)\n        for dir_, dir_s, file_s in os.walk(settings_dirs)\n        for file_ in file_s\n        if file_.endswith(spec_option)\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    if settings_dirs:\n        return [os.path.join(settings_dir, spec_option) for settings_dir in settings_dirs]\n    else:\n        return [spec_option]", "def list_of_file_names(settings_dirs, spec_option):\n    file_names = []\n    for settings_dir in settings_dirs:\n        for file_name in glob.glob(os.path.join(settings_dir, \"*.json\")):\n            file_names.append(file_name)\n    return file_names\n", "def list_of_file_names(settings_dirs, spec_option):\n    if spec_option == \"list\":\n        return list_of_file_names_list(settings_dirs)\n    elif spec_option == \"ini\":\n        return list_of_file_names_ini(settings_dirs)\n    else:\n        print(\"Unknown option: {}\".format(spec_option))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    spec_option = os.path.join(settings_dirs, spec_option)\n    file_names = []\n    for root, dirs, files in os.walk(spec_option):\n        for name in files:\n            if name.endswith('.ini'):\n                file_names.append(os.path.join(root, name))\n    return file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return list_of_files(settings_dirs, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = settings_dirs or []\n    file_names = []\n    for d in settings_dirs:\n        file_names.extend(glob.glob(os.path.join(d, '*.ini')))\n    return file_names", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        f for s in settings_dirs\n        for f in glob.glob(os.path.join(s, '*' + spec_option))\n    ]", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    file_names = []\n    for dir_name in settings_dirs:\n        file_names += [os.path.join(dir_name, f) for f in os.listdir(dir_name)]\n    file_names = [f for f in file_names if f.endswith(spec_option)]\n    return file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [os.path.join(settings_dir, \"%s.ini\" % spec_option)]", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        os.path.join(dir_, file_)\n        for dir_, dir_s, file_s in os.walk(settings_dirs)\n        for file_ in file_s\n        if file_.endswith(spec_option)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    if settings_dirs:\n        return [os.path.join(settings_dir, spec_option) for settings_dir in settings_dirs]\n    else:\n        return [spec_option]", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    file_names = []\n    for settings_dir in settings_dirs:\n        for file_name in glob.glob(os.path.join(settings_dir, \"*.json\")):\n            file_names.append(file_name)\n    return file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    if spec_option == \"list\":\n        return list_of_file_names_list(settings_dirs)\n    elif spec_option == \"ini\":\n        return list_of_file_names_ini(settings_dirs)\n    else:\n        print(\"Unknown option: {}\".format(spec_option))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    from ansible.config import ConfigManager\n\n    cls.config_manager = ConfigManager()\n    return cls", "def ansible_config_manager(cls):\n    return cls.__dict__['_ansible_config_manager']\n", "def ansible_config_manager(cls):\n    if isinstance(cls, type):\n        if issubclass(cls, object):\n            cls = cls()\n        cls.get_config_manager()\n        return cls\n    return cls.get_config_manager()\n", "def ansible_config_manager(cls):\n    if cls.get_config_manager():\n        return cls.get_config_manager()\n    else:\n        return None\n", "def ansible_config_manager(cls):\n    cls.config_manager = ansible_config_manager_module(cls)\n", "def ansible_config_manager(cls):\n    cls.load_config(\n        os.path.join(os.path.dirname(__file__), 'ansible.cfg')\n    )\n", "def ansible_config_manager(cls):\n    \n    \n    return cls('ansible', 'ansible.yml')\n", "def ansible_config_manager(cls):\n    \n    \n    try:\n        config_manager = ConfigManager()\n        cls.ansible_config_manager = config_manager\n    except Exception as e:\n        logger.error(e)\n        raise e\n", "def ansible_config_manager(cls):\n    cls.ansible_config_manager = AnsibleConfigManager(cls)\n    return cls.ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls.config_manager\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    from ansible.config import ConfigManager\n\n    cls.config_manager = ConfigManager()\n    return cls", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.__dict__['_ansible_config_manager']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if isinstance(cls, type):\n        if issubclass(cls, object):\n            cls = cls()\n        cls.get_config_manager()\n        return cls\n    return cls.get_config_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls.get_config_manager():\n        return cls.get_config_manager()\n    else:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    cls.config_manager = ansible_config_manager_module(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    cls.load_config(\n        os.path.join(os.path.dirname(__file__), 'ansible.cfg')\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \n    \n    return cls('ansible', 'ansible.yml')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \n    \n    try:\n        config_manager = ConfigManager()\n        cls.ansible_config_manager = config_manager\n    except Exception as e:\n        logger.error(e)\n        raise e\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    cls.ansible_config_manager = AnsibleConfigManager(cls)\n    return cls.ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.config_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    \n    \n    cls.ws_manager = WorkspaceManager()\n    return cls", "def workspace_manager(cls):\n    return WorkspaceManager(cls)\n", "def workspace_manager(cls):\n    return cls.__workspace_manager__", "def workspace_manager(cls):\n    return cls.workspace_manager\n", "def workspace_manager(cls):\n    \n    \n    if cls.workspace_manager is None:\n        cls.workspace_manager = WorkspaceManager(cls)\n    return cls.workspace_manager", "def workspace_manager(cls):\n    cls.workspace_manager = WorkspaceManager()", "def workspace_manager(cls):\n    return cls(WorkspaceManager)", "def workspace_manager(cls):\n    cls.get_workspace_manager()", "def workspace_manager(cls):\n    \n    \n    return _workspace_manager\n", "def workspace_manager(cls):\n    \n    \n    cls.workspace_manager = WorkspaceManager()"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    \n    \n    cls.ws_manager = WorkspaceManager()\n    return cls", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return WorkspaceManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls.__workspace_manager__", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls.workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    if cls.workspace_manager is None:\n        cls.workspace_manager = WorkspaceManager(cls)\n    return cls.workspace_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    cls.workspace_manager = WorkspaceManager()", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls(WorkspaceManager)", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    cls.get_workspace_manager()", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return _workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    cls.workspace_manager = WorkspaceManager()", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    \n    \n    cls.__plugins_manager__ = True\n    return cls\n", "def plugins_manager(cls):\n    \n    \n    return cls.__plugins_manager__", "def plugins_manager(cls):\n    \n    \n    if cls._plugins_manager is None:\n        cls._plugins_manager = plugin_manager.PluginManager(cls)\n    return cls._plugins_manager", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    \n    \n    cls.plugin_manager = get_plugin_manager()", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    return cls.plugins_manager\n", "def plugins_manager(cls):\n    return cls.plugins", "def plugins_manager(cls):\n    cls._plugins_manager = PluginsManager(cls)\n    return cls._plugins_manager", "def plugins_manager(cls):\n    return get_plugins_manager().get_plugins(cls)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    \n    \n    cls.__plugins_manager__ = True\n    return cls\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls.__plugins_manager__", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    if cls._plugins_manager is None:\n        cls._plugins_manager = plugin_manager.PluginManager(cls)\n    return cls._plugins_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    cls.plugin_manager = get_plugin_manager()", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls.plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls.plugins", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    cls._plugins_manager = PluginsManager(cls)\n    return cls._plugins_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return get_plugins_manager().get_plugins(cls)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or cls.SPEC_CONTENT\n\n    try:\n        jsonschema.validate(spec_content, cls.SPEC_SCHEMA)\n    except jsonschema.ValidationError as e:\n        raise IRValidatorException(\n            '{} is not a valid spec file'.format(spec_content),\n            e.message,\n        )\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file content cannot be None\")\n\n    return cls.validate_from_spec(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or {}\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException(\"'spec_content' must be a dictionary\")\n    if not 'name' in spec_content:\n        raise IRValidatorException(\"'name' field missing\")\n    return cls.validate_from_content_dict(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n\n    spec_data = yaml.safe_load(spec_content)\n    return cls.validate(spec_data)\n", "def validate_from_content(cls, spec_content=None):\n    return cls.validate(jsonschema.load(spec_content))\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    if not spec_content:\n        spec_content = get_spec_content()\n    data = cls.validate_from_spec_content(spec_content)\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    spec = load_from_content(spec_content)\n\n    # validate data\n    validate_spec(cls, spec)\n\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    spec = cls._load_spec_from_content(spec_content)\n    cls._validate_spec(spec)\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file is missing\")\n\n    try:\n        validate(spec_content, cls.spec_schema)\n    except ValidationError as e:\n        raise IRValidatorException(\"Malformed spec file (YAML)\") from e\n", "def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or {}\n\n    return cls._validate_from_content(spec_content)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or cls.SPEC_CONTENT\n\n    try:\n        jsonschema.validate(spec_content, cls.SPEC_SCHEMA)\n    except jsonschema.ValidationError as e:\n        raise IRValidatorException(\n            '{} is not a valid spec file'.format(spec_content),\n            e.message,\n        )\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file content cannot be None\")\n\n    return cls.validate_from_spec(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or {}\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException(\"'spec_content' must be a dictionary\")\n    if not 'name' in spec_content:\n        raise IRValidatorException(\"'name' field missing\")\n    return cls.validate_from_content_dict(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n\n    spec_data = yaml.safe_load(spec_content)\n    return cls.validate(spec_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate(jsonschema.load(spec_content))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    if not spec_content:\n        spec_content = get_spec_content()\n    data = cls.validate_from_spec_content(spec_content)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = load_from_content(spec_content)\n\n    # validate data\n    validate_spec(cls, spec)\n\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = cls._load_spec_from_content(spec_content)\n    cls._validate_spec(spec)\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file is missing\")\n\n    try:\n        validate(spec_content, cls.spec_schema)\n    except ValidationError as e:\n        raise IRValidatorException(\"Malformed spec file (YAML)\") from e\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec_content = spec_content or {}\n\n    return cls._validate_from_content(spec_content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException(\"Missing required fields\")\n    validate_from_dict(cls, data)\n    return data", "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file specified')\n\n    try:\n        with open(yaml_file, 'r') as stream:\n            data = yaml.load(stream)\n        return cls.validate(data)\n    except Exception as e:\n        raise IRValidatorException('Unable to load file \"{}\": {}'.format(yaml_file, e))", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing yaml file path\")\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f, Loader=yaml.FullLoader)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e)\n    return cls.validate(yaml_data)\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate_fields(yaml_file)\n    return cls.load_from_file(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing yaml file path\")\n    with open(yaml_file, \"r\") as yaml_file:\n        yaml_data = yaml.safe_load(yaml_file)\n    validate_from_dict(cls, yaml_data)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n\n    with open(yaml_file, 'r') as yaml_file:\n        data = yaml.load(yaml_file)\n\n    return cls.validate(data)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('A file path must be provided to validate a yaml file')\n\n    return cls.validate_from_file_impl(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        yaml_file = os.path.join(os.path.dirname(__file__), 'infrared.yaml')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(\"Error loading yaml file: {0}\".format(exc))\n        return cls.validate(data)", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Path to YAML file is missing\")\n\n    with open(yaml_file, \"r\") as f:\n        cls.validate(yaml.safe_load(f))\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f, Loader=yaml.FullLoader)\n\n    cls.validate(data)\n\n    return data\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException(\"Missing required fields\")\n    validate_from_dict(cls, data)\n    return data", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file specified')\n\n    try:\n        with open(yaml_file, 'r') as stream:\n            data = yaml.load(stream)\n        return cls.validate(data)\n    except Exception as e:\n        raise IRValidatorException('Unable to load file \"{}\": {}'.format(yaml_file, e))", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing yaml file path\")\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f, Loader=yaml.FullLoader)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e)\n    return cls.validate(yaml_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate_fields(yaml_file)\n    return cls.load_from_file(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing yaml file path\")\n    with open(yaml_file, \"r\") as yaml_file:\n        yaml_data = yaml.safe_load(yaml_file)\n    validate_from_dict(cls, yaml_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n\n    with open(yaml_file, 'r') as yaml_file:\n        data = yaml.load(yaml_file)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('A file path must be provided to validate a yaml file')\n\n    return cls.validate_from_file_impl(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        yaml_file = os.path.join(os.path.dirname(__file__), 'infrared.yaml')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(\"Error loading yaml file: {0}\".format(exc))\n        return cls.validate(data)", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Path to YAML file is missing\")\n\n    with open(yaml_file, \"r\") as f:\n        cls.validate(yaml.safe_load(f))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f, Loader=yaml.FullLoader)\n\n    cls.validate(data)\n\n    return data\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            parser_dict[key] = self._include_groups(value)\n        elif isinstance(value, str):\n            parser_dict[key] = parser_dict[key].replace(\" \", \"\")\n            parser_dict[key] = self.spec_dict.get(key, value)\n        else:\n            parser_dict[key] = value\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    include_groups = parser_dict.get('include_groups')\n    if include_groups:\n        include_groups = include_groups.split(',')\n        for include_group in include_groups:\n            spec_file = os.path.join(self.spec_dir, include_group)\n            if os.path.exists(spec_file):\n                with open(spec_file, 'r') as f:\n                    parser_dict['spec_file'] = f.read()\n                    parser_dict['include_groups'] = include_groups\n                break\n", "def _include_groups(self, parser_dict):\n    if parser_dict[\"include\"]:\n        self.spec_dict[\"include\"] = parser_dict[\"include\"]", "def _include_groups(self, parser_dict):\n    # get list of include files\n    include_files = self.spec_dict['include']\n\n    # resolve include directive\n    include_dict = parser_dict.get('include', {})\n    include_list = include_dict.get('include', [])\n    for include in include_list:\n        include_dict[include] = include_files[include]\n\n    # resolve include groups\n    include_groups = parser_dict.get('include_groups', {})\n    for include in include_groups:\n        include_dict[include] = include_groups[include]\n\n    return include_dict\n", "def _include_groups(self, parser_dict):\n    for item in parser_dict.keys():\n        if item.startswith('include_'):\n            parser_dict[item] = self._resolve_include(item, parser_dict[item])\n    return parser_dict", "def _include_groups(self, parser_dict):\n    for k, v in parser_dict.items():\n        if k in self.spec_dict:\n            self.spec_dict[k] = self.spec_dict[k].replace('include ', '')\n        else:\n            self.spec_dict[k] = v\n", "def _include_groups(self, parser_dict):\n    if self.include_groups:\n        for key, value in self.include_groups.items():\n            if key in parser_dict.keys():\n                parser_dict[key] = value.format(**parser_dict[key])\n            else:\n                parser_dict[key] = value\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    if parser_dict['includes']:\n        for include_path in parser_dict['includes']:\n            if os.path.isdir(include_path):\n                self.spec_dict['include_dirs'].append(include_path)\n                if not self.spec_dict['include_dirs']:\n                    break\n                for include_name in os.listdir(include_path):\n                    self.spec_dict['include_files'].append(os.path.join(include_path, include_name))\n", "def _include_groups(self, parser_dict):\n    include_dict = parser_dict.get('include')\n    if include_dict:\n        for include_file in include_dict:\n            with open(include_file, 'r') as f:\n                self.spec_dict['include'] = f.read()\n    return self.spec_dict\n", "def _include_groups(self, parser_dict):\n    for item in parser_dict.get('include', []):\n        include_path = item['path']\n        if '.' in include_path:\n            prefix, path = include_path.rsplit('.', 1)\n        else:\n            prefix = ''\n            path = include_path\n        if prefix:\n            prefix = prefix + '.'\n        self.spec_dict['includes'][prefix + path] = item['value']\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            parser_dict[key] = self._include_groups(value)\n        elif isinstance(value, str):\n            parser_dict[key] = parser_dict[key].replace(\" \", \"\")\n            parser_dict[key] = self.spec_dict.get(key, value)\n        else:\n            parser_dict[key] = value\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = parser_dict.get('include_groups')\n    if include_groups:\n        include_groups = include_groups.split(',')\n        for include_group in include_groups:\n            spec_file = os.path.join(self.spec_dir, include_group)\n            if os.path.exists(spec_file):\n                with open(spec_file, 'r') as f:\n                    parser_dict['spec_file'] = f.read()\n                    parser_dict['include_groups'] = include_groups\n                break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict[\"include\"]:\n        self.spec_dict[\"include\"] = parser_dict[\"include\"]", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    # get list of include files\n    include_files = self.spec_dict['include']\n\n    # resolve include directive\n    include_dict = parser_dict.get('include', {})\n    include_list = include_dict.get('include', [])\n    for include in include_list:\n        include_dict[include] = include_files[include]\n\n    # resolve include groups\n    include_groups = parser_dict.get('include_groups', {})\n    for include in include_groups:\n        include_dict[include] = include_groups[include]\n\n    return include_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for item in parser_dict.keys():\n        if item.startswith('include_'):\n            parser_dict[item] = self._resolve_include(item, parser_dict[item])\n    return parser_dict", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for k, v in parser_dict.items():\n        if k in self.spec_dict:\n            self.spec_dict[k] = self.spec_dict[k].replace('include ', '')\n        else:\n            self.spec_dict[k] = v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if self.include_groups:\n        for key, value in self.include_groups.items():\n            if key in parser_dict.keys():\n                parser_dict[key] = value.format(**parser_dict[key])\n            else:\n                parser_dict[key] = value\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict['includes']:\n        for include_path in parser_dict['includes']:\n            if os.path.isdir(include_path):\n                self.spec_dict['include_dirs'].append(include_path)\n                if not self.spec_dict['include_dirs']:\n                    break\n                for include_name in os.listdir(include_path):\n                    self.spec_dict['include_files'].append(os.path.join(include_path, include_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_dict = parser_dict.get('include')\n    if include_dict:\n        for include_file in include_dict:\n            with open(include_file, 'r') as f:\n                self.spec_dict['include'] = f.read()\n    return self.spec_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for item in parser_dict.get('include', []):\n        include_path = item['path']\n        if '.' in include_path:\n            prefix, path = include_path.rsplit('.', 1)\n        else:\n            prefix = ''\n            path = include_path\n        if prefix:\n            prefix = prefix + '.'\n        self.spec_dict['includes'][prefix + path] = item['value']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    return self._get_defaults(self, self.spec_getter_func)\n", "def get_spec_defaults(self):\n    return self._get_defaults(self)", "def get_spec_defaults(self):\n    return self.spec_defaults", "def get_spec_defaults(self):\n    return self._spec.get('defaults',{})\n\n", "def get_spec_defaults(self):\n    return self.spec", "def get_spec_defaults(self):\n    return self._get_defaults()", "def get_spec_defaults(self):\n    return self._get_defaults(self,self.get_spec)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def get_spec_defaults(self):\n    return self._get_defaults(self,get_spec_defaults_func)\n    ", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return self._get_defaults(self,self._get_spec_getter_func())"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self, self.spec_getter_func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.spec_defaults", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._spec.get('defaults',{})\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.spec", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self,self.get_spec)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self,get_spec_defaults_func)\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self,self._get_spec_getter_func())", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return {}\n", "def get_deprecated_args(self):\n    return {'deprecated_options': self.spec_helper.deprecated_options}\n", "def get_deprecated_args(self):\n    return self.deprecated_args", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()", "def get_deprecated_args(self):\n\n    import sys\n\n    return {k: v for k, v in vars(self.spec_helper).items()\n            if not k.startswith(\"__\")}", "def get_deprecated_args(self):\n    if self.spec_helper.has_deprecated_options():\n        return self.spec_helper.get_deprecated_options()\n    else:\n        return {}\n", "def get_deprecated_args(self):\n    import warnings\n    warnings.warn(\"get_deprecated_args is deprecated, please use import instead.\", DeprecationWarning)\n    import sys\n    sys.path.insert(0, os.path.dirname(__file__))\n    import importlib\n    spec = importlib.util.spec_from_file_location('collections','spec/collections.py')\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module.collections\n", "def get_deprecated_args(self):\n    spec_helper = self.spec_helper\n    return {\n        'deprecated_args': self.get_deprecated_args(),\n        'deprecated_options': self.get_deprecated_options(),\n        'deprecated_params': self.get_deprecated_params(),\n        'deprecated_kwargs': self.get_deprecated_kwargs(),\n        'deprecated_modules': self.get_deprecated_modules(),\n        'deprecated_spec_helper': spec_helper,\n    }", "def get_deprecated_args(self):\n    if not self.spec_helper:\n        return {}\n    else:\n        return self.spec_helper.get_deprecated_args()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {'deprecated_options': self.spec_helper.deprecated_options}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.deprecated_args", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n\n    import sys\n\n    return {k: v for k, v in vars(self.spec_helper).items()\n            if not k.startswith(\"__\")}", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    if self.spec_helper.has_deprecated_options():\n        return self.spec_helper.get_deprecated_options()\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    import warnings\n    warnings.warn(\"get_deprecated_args is deprecated, please use import instead.\", DeprecationWarning)\n    import sys\n    sys.path.insert(0, os.path.dirname(__file__))\n    import importlib\n    spec = importlib.util.spec_from_file_location('collections','spec/collections.py')\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module.collections\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    spec_helper = self.spec_helper\n    return {\n        'deprecated_args': self.get_deprecated_args(),\n        'deprecated_options': self.get_deprecated_options(),\n        'deprecated_params': self.get_deprecated_params(),\n        'deprecated_kwargs': self.get_deprecated_kwargs(),\n        'deprecated_modules': self.get_deprecated_modules(),\n        'deprecated_spec_helper': spec_helper,\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    if not self.spec_helper:\n        return {}\n    else:\n        return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    deprecated_args.update(answer_file_args)\n    print('{} deprecated arguments:'.format(len(deprecated_args)))\n    for key, value in deprecated_args.items():\n        print('\\t{}: {}'.format(key, value))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['--deprecated']:\n        self.deprecated_args = cli_args\n        self.deprecated_args.pop('--deprecated')\n        self.deprecated_args.pop('--deprecated-file')\n        self.deprecated_args.pop('--deprecated-msg')\n        self.deprecated_args.pop('--deprecated-time')\n        print(self.deprecated_args)\n        return True\n    return False\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_args(cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_args(cli_args, answer_file_args)\n    self.print_deprecated_args(cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.get_deprecated_args(cli_args)\n    print('-- Arguments: ')\n    for arg in cli_args:\n        print(arg)\n    print('-- Arguments OK: ')\n    for arg in answer_file_args:\n        print(arg)\n    print('-- Arguments OK: ')\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None:\n        return\n\n    if answer_file_args is None:\n        return\n\n    print(\"Import deprecated arguments from files to run this script from command line or from CLI\")\n    print(\"Please run this script from CLI to run deprecated arguments from files to run this script from command line\")\n    print(\"For example, using 'python3 -m psk.deprecation --debug'\")\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated_args:\n        deprecated_args = cli_args.deprecated_args\n        for arg in deprecated_args:\n            if arg not in answer_file_args:\n                print(f\"{arg} not in {answer_file_args}\")\n                print(\"Please check the arguments and try again\")\n                exit(1)", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated_args']:\n        if cli_args['deprecated_args'] == answer_file_args['deprecated_args']:\n            print('arg deprecated')\n        else:\n            print('arg deprecated failed')", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        return\n    self.get_deprecated_args(self)\n    self.print_deprecated_args(cli_args)\n    if cli_args['deprecated']:\n        print('--------------------------------------------------------------------------------------')\n        print('Validation of arguments deprecated in the CLI:')\n        print(answer_file_args)\n        print('--------------------------------------------------------------------------------------')", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None or cli_args.get('deprecated') is None:\n        return\n\n    if cli_args['deprecated'] is True:\n        self.deprecated_args(cli_args)\n    else:\n        self.no_deprecated_args(cli_args)\n\n    if cli_args['deprecated'] is False:\n        self.deprecated_args(cli_args)\n\n    if answer_file_args is None or answer_file_args.get('deprecated') is None:\n        return\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    deprecated_args.update(answer_file_args)\n    print('{} deprecated arguments:'.format(len(deprecated_args)))\n    for key, value in deprecated_args.items():\n        print('\\t{}: {}'.format(key, value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['--deprecated']:\n        self.deprecated_args = cli_args\n        self.deprecated_args.pop('--deprecated')\n        self.deprecated_args.pop('--deprecated-file')\n        self.deprecated_args.pop('--deprecated-msg')\n        self.deprecated_args.pop('--deprecated-time')\n        print(self.deprecated_args)\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_args(cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_args(cli_args, answer_file_args)\n    self.print_deprecated_args(cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.get_deprecated_args(cli_args)\n    print('-- Arguments: ')\n    for arg in cli_args:\n        print(arg)\n    print('-- Arguments OK: ')\n    for arg in answer_file_args:\n        print(arg)\n    print('-- Arguments OK: ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None:\n        return\n\n    if answer_file_args is None:\n        return\n\n    print(\"Import deprecated arguments from files to run this script from command line or from CLI\")\n    print(\"Please run this script from CLI to run deprecated arguments from files to run this script from command line\")\n    print(\"For example, using 'python3 -m psk.deprecation --debug'\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated_args:\n        deprecated_args = cli_args.deprecated_args\n        for arg in deprecated_args:\n            if arg not in answer_file_args:\n                print(f\"{arg} not in {answer_file_args}\")\n                print(\"Please check the arguments and try again\")\n                exit(1)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated_args']:\n        if cli_args['deprecated_args'] == answer_file_args['deprecated_args']:\n            print('arg deprecated')\n        else:\n            print('arg deprecated failed')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        return\n    self.get_deprecated_args(self)\n    self.print_deprecated_args(cli_args)\n    if cli_args['deprecated']:\n        print('--------------------------------------------------------------------------------------')\n        print('Validation of arguments deprecated in the CLI:')\n        print(answer_file_args)\n        print('--------------------------------------------------------------------------------------')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None or cli_args.get('deprecated') is None:\n        return\n\n    if cli_args['deprecated'] is True:\n        self.deprecated_args(cli_args)\n    else:\n        self.no_deprecated_args(cli_args)\n\n    if cli_args['deprecated'] is False:\n        self.deprecated_args(cli_args)\n\n    if answer_file_args is None or answer_file_args.get('deprecated') is None:\n        return\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].get_parser_option_specs()\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    if command_name not in self._commands:\n        return []\n    else:\n        return self._commands[command_name].keys()\n", "def get_parser_option_specs(self, command_name):\n    options = []\n    for option in self.parser_dict[command_name].option_list:\n        options.append(option.dest)\n    return options\n", "def get_parser_option_specs(self, command_name):\n    return self._parser_map.get(command_name, [])\n", "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self._main_parser.option_list\n    elif command_name == \"virsh\":\n        return self._virsh_parser.option_list\n    elif command_name == \"ospd\":\n        return self._ospd_parser.option_list\n    elif command_name == \"ospd-vm\":\n        return self._ospd_vm_parser.option_list\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    return self.get_parser_dict()[command_name].keys()", "def get_parser_option_specs(self, command_name):\n    return self._parser_dict[command_name]['options']\n", "def get_parser_option_specs(self, command_name):\n    return self._parser_map[command_name]", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)[\"options\"]", "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self._main_parser_option_specs\n    elif command_name == \"virsh\":\n        return self._virsh_parser_option_specs\n    elif command_name == \"ospd\":\n        return self._ospd_parser_option_specs\n    elif command_name == \"libvirtd\":\n        return self._libvirtd_parser_option_specs\n    else:\n        return []\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].get_parser_option_specs()\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name not in self._commands:\n        return []\n    else:\n        return self._commands[command_name].keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    options = []\n    for option in self.parser_dict[command_name].option_list:\n        options.append(option.dest)\n    return options\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._parser_map.get(command_name, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self._main_parser.option_list\n    elif command_name == \"virsh\":\n        return self._virsh_parser.option_list\n    elif command_name == \"ospd\":\n        return self._ospd_parser.option_list\n    elif command_name == \"ospd-vm\":\n        return self._ospd_vm_parser.option_list\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.get_parser_dict()[command_name].keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._parser_dict[command_name]['options']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._parser_map[command_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)[\"options\"]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self._main_parser_option_specs\n    elif command_name == \"virsh\":\n        return self._virsh_parser_option_specs\n    elif command_name == \"ospd\":\n        return self._ospd_parser_option_specs\n    elif command_name == \"libvirtd\":\n        return self._libvirtd_parser_option_specs\n    else:\n        return []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    option_spec = self.get_option_specs(command_name)[argument_name]\n    if option_spec is None:\n        raise ValueError('No option spec for %s.%s found.' % (command_name, argument_name))\n    return option_spec", "def get_option_spec(self, command_name, argument_name):\n    option_spec = self.get_parser_option_specs(command_name)\n    return option_spec.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    return self.__get_command_spec(command_name).get(argument_name, None)", "def get_option_spec(self, command_name, argument_name):\n    return self.__option_specs[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    return self.parser.option_specs[command_name][argument_name]\n    ", "def get_option_spec(self, command_name, argument_name):\n    return self.__get_option_spec(command_name, argument_name)", "def get_option_spec(self, command_name, argument_name):\n    return self.get_command_option_spec(command_name, argument_name)[1]", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs(self,command_name)[argument_name]", "def get_option_spec(self, command_name, argument_name):\n    return self.get_option_specs(command_name)[argument_name]", "def get_option_spec(self, command_name, argument_name):\n    if not self.has_option(command_name, argument_name):\n        raise KeyError('No such option: %s' % argument_name)\n    return self.get_parser_option_specs(self,command_name)[argument_name]"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    option_spec = self.get_option_specs(command_name)[argument_name]\n    if option_spec is None:\n        raise ValueError('No option spec for %s.%s found.' % (command_name, argument_name))\n    return option_spec", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    option_spec = self.get_parser_option_specs(command_name)\n    return option_spec.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.__get_command_spec(command_name).get(argument_name, None)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.__option_specs[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.parser.option_specs[command_name][argument_name]\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.__get_option_spec(command_name, argument_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_command_option_spec(command_name, argument_name)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs(self,command_name)[argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_option_specs(command_name)[argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if not self.has_option(command_name, argument_name):\n        raise KeyError('No such option: %s' % argument_name)\n    return self.get_parser_option_specs(self,command_name)[argument_name]", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return []\n", "def get_silent_args(self, args):\n    silent_args = []\n    for arg in args:\n        if arg.startswith('--'):\n            silent_args.append(arg[2:])\n    return silent_args\n", "def get_silent_args(self, args):\n    return [k for k, v in self.spec_helper.items() if not v]\n", "def get_silent_args(self, args):\n    silent_args = []\n    for arg in args:\n        if arg in self._silent_args:\n            silent_args.append(arg)\n    return silent_args\n", "def get_silent_args(self, args):\n    return []", "def get_silent_args(self, args):\n    return [arg for arg in self.spec_helper if arg not in args]\n", "def get_silent_args(self, args):\n    return [arg for arg in self._silent_args if arg in args]\n", "def get_silent_args(self, args):\n    return []\n", "def get_silent_args(self, args):\n    return []\n", "def get_silent_args(self, args):\n    return [k for k in args.keys() if args[k] is not None]"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    silent_args = []\n    for arg in args:\n        if arg.startswith('--'):\n            silent_args.append(arg[2:])\n    return silent_args\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k, v in self.spec_helper.items() if not v]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    silent_args = []\n    for arg in args:\n        if arg in self._silent_args:\n            silent_args.append(arg)\n    return silent_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return []", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in self.spec_helper if arg not in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in self._silent_args if arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k in args.keys() if args[k] is not None]", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    for name in args:\n        if name not in self.spec_helper.required_args:\n            raise ValueError(\"Missing required arg '%s' in command '%s'\" % (name, self.name))\n\n\n    return args\n", "def validate_requires_args(self, args):\n    return all(required in args for required in self.required_args)", "def validate_requires_args(self, args):\n    if not args.get('--required') or not args.get('--conditionally_required'):\n        return\n    if not all([args.get('--required'), args.get('--conditionally_required')]):\n        raise CommandError(\"The following arguments are required: --required, --conditionally_required\")", "def validate_requires_args(self, args):\n\n    required_args = [\"command\", \"options_spec\", \"args\"]\n    for required_arg in required_args:\n        if required_arg not in args:\n            raise ValueError(\"'{0}' is required\".format(required_arg))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if not args[arg]:\n            raise MissingArgumentError(arg)\n\n\n", "def validate_requires_args(self, args):\n    required_args = self.required_args\n    required_args.extend(self.spec_helper.keys())\n    for arg in required_args:\n        if arg not in args:\n            raise ValueError('%s is required for %s' % (arg, self.command_name))", "def validate_requires_args(self, args):\n    required_args = [\"command\", \"options_spec\", \"args\"]\n    for arg in required_args:\n        if arg not in args:\n            raise ArgumentError(\"Missing required argument '%s'\" % arg)", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec.get('required_args',[]):\n            print('Required argument %s not provided' % arg)\n            return False\n    return True\n", "def validate_requires_args(self, args):\n    self.spec_helper.validate_required_args(args)", "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError('No arguments provided for \"%s\" command.' % command_name)\n    for required in args:\n        if required not in self.spec_helper.keys():\n            raise ValueError('%s required argument not provided for \"%s\" command.' % (required,command_name))"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    for name in args:\n        if name not in self.spec_helper.required_args:\n            raise ValueError(\"Missing required arg '%s' in command '%s'\" % (name, self.name))\n\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all(required in args for required in self.required_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if not args.get('--required') or not args.get('--conditionally_required'):\n        return\n    if not all([args.get('--required'), args.get('--conditionally_required')]):\n        raise CommandError(\"The following arguments are required: --required, --conditionally_required\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n\n    required_args = [\"command\", \"options_spec\", \"args\"]\n    for required_arg in required_args:\n        if required_arg not in args:\n            raise ValueError(\"'{0}' is required\".format(required_arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if not args[arg]:\n            raise MissingArgumentError(arg)\n\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.required_args\n    required_args.extend(self.spec_helper.keys())\n    for arg in required_args:\n        if arg not in args:\n            raise ValueError('%s is required for %s' % (arg, self.command_name))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = [\"command\", \"options_spec\", \"args\"]\n    for arg in required_args:\n        if arg not in args:\n            raise ArgumentError(\"Missing required argument '%s'\" % arg)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec.get('required_args',[]):\n            print('Required argument %s not provided' % arg)\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    self.spec_helper.validate_required_args(args)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError('No arguments provided for \"%s\" command.' % command_name)\n    for required in args:\n        if required not in self.spec_helper.keys():\n            raise ValueError('%s required argument not provided for \"%s\" command.' % (required,command_name))", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    if required_when:\n        for arg in required_when:\n            if arg in args:\n                return [arg]\n    return []\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args_with_required_when = []\n    for arg in args:\n        if self.required_when(command_name, options_spec, arg):\n            args_with_required_when.append(arg)\n    return args_with_required_when", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self.spec_helper.get_required_when(command_name, options_spec)\n    return [arg for arg in args if required_when(arg)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditionally_required_args = []\n    for arg in args:\n        if self.__required_when(arg, command_name, options_spec):\n            conditionally_required_args.append(arg)\n\n    return conditionally_required_args", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self._get_required_when(command_name, options_spec)\n    return [arg for arg in args if required_when(arg)]", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return _get_conditionally_required_args(command_name, options_spec,\n                                            args, self.spec_helper)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not self.spec_helper:\n        self.spec_helper = self._get_spec_helper(command_name)\n    required_when = self.spec_helper.get_required_when()\n    return [i for i in args if i in required_when]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if _is_conditionally_required_arg(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditions = ['required_when' in x for x in options_spec]\n    return [x for x in args if x in conditions]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg in args:\n        if _is_conditionally_required(command_name, options_spec, arg):\n            arg_names.append(arg)\n    return arg_names\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    if required_when:\n        for arg in required_when:\n            if arg in args:\n                return [arg]\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args_with_required_when = []\n    for arg in args:\n        if self.required_when(command_name, options_spec, arg):\n            args_with_required_when.append(arg)\n    return args_with_required_when", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self.spec_helper.get_required_when(command_name, options_spec)\n    return [arg for arg in args if required_when(arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditionally_required_args = []\n    for arg in args:\n        if self.__required_when(arg, command_name, options_spec):\n            conditionally_required_args.append(arg)\n\n    return conditionally_required_args", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self._get_required_when(command_name, options_spec)\n    return [arg for arg in args if required_when(arg)]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return _get_conditionally_required_args(command_name, options_spec,\n                                            args, self.spec_helper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not self.spec_helper:\n        self.spec_helper = self._get_spec_helper(command_name)\n    required_when = self.spec_helper.get_required_when()\n    return [i for i in args if i in required_when]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if _is_conditionally_required_arg(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditions = ['required_when' in x for x in options_spec]\n    return [x for x in args if x in conditions]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg in args:\n        if _is_conditionally_required(command_name, options_spec, arg):\n            arg_names.append(arg)\n    return arg_names\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) < self.length:\n        raise ValueError(\"Insufficient arguments to specify the length of the specified device.\")", "def validate_length_args(self, args):\n    if len(args) > self.max_length:\n        raise ArgumentError('Too many arguments (%d)' % len(args))\n", "def validate_length_args(self, args):\n    if args.length is not None and len(args.length) > 0:\n        return True\n    return False\n", "def validate_length_args(self, args):\n    if args['length'] > len(self.spec_helper.get_spec_data()):\n        self.parser.error('Length must be less than specified.')\n", "def validate_length_args(self, args):\n    if len(args) > MAX_ARGS_LENGTH:\n        self.parser.error(\"Too many arguments\")", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments (%d)' % len(args))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.__error(\"Length of {} is greater than {}\".format(args[0], self.length))\n        return False\n    return True", "def validate_length_args(self, args):\n    length = args.get('length', 0)\n    if length > len(self.spec_helper.get_spec_name()):\n        raise ValidationError('Length of input string is longer than the spec name.')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.get_args_length():\n        raise ValueError(\n            'The length of the arguments is not longer than specified.')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.getint(\"general\", \"max_length\"):\n        raise ValueError(\"{0} is too long. Max is {1}\".format(args, self.spec_helper.config.getint(\"general\", \"max_length\")))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) < self.length:\n        raise ValueError(\"Insufficient arguments to specify the length of the specified device.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.max_length:\n        raise ArgumentError('Too many arguments (%d)' % len(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args.length is not None and len(args.length) > 0:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args['length'] > len(self.spec_helper.get_spec_data()):\n        self.parser.error('Length must be less than specified.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > MAX_ARGS_LENGTH:\n        self.parser.error(\"Too many arguments\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments (%d)' % len(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.__error(\"Length of {} is greater than {}\".format(args[0], self.length))\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    length = args.get('length', 0)\n    if length > len(self.spec_helper.get_spec_name()):\n        raise ValidationError('Length of input string is longer than the spec name.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.get_args_length():\n        raise ValueError(\n            'The length of the arguments is not longer than specified.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.getint(\"general\", \"max_length\"):\n        raise ValueError(\"{0} is too long. Max is {1}\".format(args, self.spec_helper.config.getint(\"general\", \"max_length\")))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise Exception('Invalid choices args')", "def validate_choices_args(self, args):\n    for choice in self.choices:\n        if args.choice == choice:\n            return True\n    return False\n", "def validate_choices_args(self, args):\n    if args['choices'] in self.spec_helper.choices:\n        return True\n    return False\n", "def validate_choices_args(self, args):\n    if args.choice not in self.choices:\n        raise AttributeError('Choice argument not recognized.')", "def validate_choices_args(self, args):\n    if args.choices and args.choices in self.spec_helper.CHOICES:\n        return True\n    else:\n        return False\n", "def validate_choices_args(self, args):\n    choices = args.get('choices')\n    if not choices:\n        choices = self.spec_helper.get_available_choices()\n    for choice in choices:\n        if choice not in self.spec_helper.choices:\n            raise ValueError(\n                '\"{0}\" is not a valid choice. Available choices: {1}'.format(\n                    choice, self.spec_helper.choices))\n", "def validate_choices_args(self, args):\n    args_list = args.split(',')\n    if len(args_list) > 0:\n        for choice in args_list:\n            if choice not in self.choices:\n                print('Invalid choice: {}'.format(choice))\n                print('Select from the following options: ')\n                for choice in self.choices:\n                    print('  {}'.format(choice))\n                print('')\n                return False\n        return True\n    else:\n        return True\n", "def validate_choices_args(self, args):\n    if args[0] not in self.choices:\n        raise Exception(\"Unknown command '%s' provided. Choose from %s\" % (args[0], ', '.join(self.choices)))\n", "def validate_choices_args(self, args):\n    if args['choice'] not in self.spec_helper.choices:\n        raise ArgumentTypeError('Invalid choice: {}'.format(args['choice']))", "def validate_choices_args(self, args):\n    choices = []\n    for arg in args:\n        if arg in self.spec_helper.choices:\n            choices.append(arg)\n\n    if len(choices)!= 1:\n        raise ValueError(\n            'Choice argument must be one of {}.'.format(', '.join(choices))\n        )"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise Exception('Invalid choices args')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in self.choices:\n        if args.choice == choice:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choices'] in self.spec_helper.choices:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choice not in self.choices:\n        raise AttributeError('Choice argument not recognized.')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices and args.choices in self.spec_helper.CHOICES:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.get('choices')\n    if not choices:\n        choices = self.spec_helper.get_available_choices()\n    for choice in choices:\n        if choice not in self.spec_helper.choices:\n            raise ValueError(\n                '\"{0}\" is not a valid choice. Available choices: {1}'.format(\n                    choice, self.spec_helper.choices))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    args_list = args.split(',')\n    if len(args_list) > 0:\n        for choice in args_list:\n            if choice not in self.choices:\n                print('Invalid choice: {}'.format(choice))\n                print('Select from the following options: ')\n                for choice in self.choices:\n                    print('  {}'.format(choice))\n                print('')\n                return False\n        return True\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args[0] not in self.choices:\n        raise Exception(\"Unknown command '%s' provided. Choose from %s\" % (args[0], ', '.join(self.choices)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choice'] not in self.spec_helper.choices:\n        raise ArgumentTypeError('Invalid choice: {}'.format(args['choice']))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = []\n    for arg in args:\n        if arg in self.spec_helper.choices:\n            choices.append(arg)\n\n    if len(choices)!= 1:\n        raise ValueError(\n            'Choice argument must be one of {}.'.format(', '.join(choices))\n        )", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    args = self.spec_helper.parse_args(args)\n    if args.min is not None and args.max is not None:\n        if args.min > args.max:\n            raise ValueError(\"Minimum value cannot be greater than maximum value.\")\n    elif args.min is None and args.max is None:\n        raise ValueError(\"At least one of min and max must be specified.\")\n", "def validate_min_max_args(self, args):\n    try:\n        min_value = args['min']\n        max_value = args['max']\n        if min_value is not None and max_value is not None and min_value <= max_value:\n            return True\n    except KeyError:\n        pass\n    return False\n", "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    if args.type == 'infrared':\n        if args.min >= args.max:\n            raise ValueError('Invalid min value: {}.'.format(args.min))\n", "def validate_min_max_args(self, args):\n    if not self.spec_helper.is_infrared(args[0]):\n        raise ValueError(\"Minimum value of infrared spec is not between %s and %s\" % (self.spec_helper.min_val, self.spec_helper.max_val))", "def validate_min_max_args(self, args):\n    self.spec_helper.validate_min_max_args(args)\n", "def validate_min_max_args(self, args):\n    if self.spec_helper.min_value <= args <= self.spec_helper.max_value:\n        return True\n    else:\n        print('Error: Argument value is out of range')\n        sys.exit()\n", "def validate_min_max_args(self, args):\n    if len(args)!= 2:\n        self.error(\"Argument should be specified as {}. Received {}.\".format(self.spec_helper.arg_spec_names, args))\n        return False\n    if not self.spec_helper.is_number(args[0]) or not self.spec_helper.is_number(args[1]):\n        self.error(\"Argument should be specified as {}. Received {}.\".format(self.spec_helper.arg_spec_names, args))\n        return False\n    return True", "def validate_min_max_args(self, args):\n    return self.spec_helper.validate_min_max_args(args)\n", "def validate_min_max_args(self, args):\n    if self.spec_helper.args.infrared_min < args.infrared_min and \\\n            self.spec_helper.args.infrared_max > args.infrared_max:\n        self.error(\"Minimum and maximum values are not within the range of the infrared range.\")", "def validate_min_max_args(self, args):\n    min_arg = args.get('minimum')\n    max_arg = args.get('maximum')\n\n    if min_arg is not None and max_arg is not None:\n        if min_arg > max_arg:\n            raise ValueError('Minimum value {} is not greater than maximum value {}'.format(min_arg, max_arg))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    args = self.spec_helper.parse_args(args)\n    if args.min is not None and args.max is not None:\n        if args.min > args.max:\n            raise ValueError(\"Minimum value cannot be greater than maximum value.\")\n    elif args.min is None and args.max is None:\n        raise ValueError(\"At least one of min and max must be specified.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        min_value = args['min']\n        max_value = args['max']\n        if min_value is not None and max_value is not None and min_value <= max_value:\n            return True\n    except KeyError:\n        pass\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    if args.type == 'infrared':\n        if args.min >= args.max:\n            raise ValueError('Invalid min value: {}.'.format(args.min))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not self.spec_helper.is_infrared(args[0]):\n        raise ValueError(\"Minimum value of infrared spec is not between %s and %s\" % (self.spec_helper.min_val, self.spec_helper.max_val))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    self.spec_helper.validate_min_max_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if self.spec_helper.min_value <= args <= self.spec_helper.max_value:\n        return True\n    else:\n        print('Error: Argument value is out of range')\n        sys.exit()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if len(args)!= 2:\n        self.error(\"Argument should be specified as {}. Received {}.\".format(self.spec_helper.arg_spec_names, args))\n        return False\n    if not self.spec_helper.is_number(args[0]) or not self.spec_helper.is_number(args[1]):\n        self.error(\"Argument should be specified as {}. Received {}.\".format(self.spec_helper.arg_spec_names, args))\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    return self.spec_helper.validate_min_max_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if self.spec_helper.args.infrared_min < args.infrared_min and \\\n            self.spec_helper.args.infrared_max > args.infrared_max:\n        self.error(\"Minimum and maximum values are not within the range of the infrared range.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_arg = args.get('minimum')\n    max_arg = args.get('maximum')\n\n    if min_arg is not None and max_arg is not None:\n        if min_arg > max_arg:\n            raise ValueError('Minimum value {} is not greater than maximum value {}'.format(min_arg, max_arg))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\n    # create the type instance\n    arg_type = self.create_complex_argument_type(subcommand, type_name, option_name,\n                                                 spec_option)\n\n    # return the type instance\n    return arg_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_argumet_type(subcommand, type_name, option_name,\n                                     spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    complex_type = self.create_complex_type(subcommand, type_name, option_name,\n                                            spec_option)\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.plugin_path.create_complex_argumet_type(\n        type_name, option_name, spec_option)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_complex_argumet_type__(subcommand, type_name, option_name, spec_option)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_complex_argumet_type_instance(subcommand, type_name,\n                                                     option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return complex_type(\n        subcommand, self.plugin_path, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    cls = self.__class__\n    spec = self.__dict__['_' + spec_option]\n    if spec.get('required', False):\n        spec['required'] = True\n    cls = self.__class__\n    return cls(\n        self.plugin_path,\n        type_name,\n        option_name,\n        spec\n    )\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.__check_complex_type(subcommand, type_name, option_name):\n        raise CommandError(\"Command '%s' does not have a complex type '%s'\" %\n                           (subcommand, type_name))\n    return self.create_complex_argument_type(subcommand, type_name, option_name, spec_option)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.has_command(subcommand):\n        raise Exception(\"the subcommand '\" + subcommand + \"' is not exist\")\n    arg_type = self.get_complex_type_from_name(subcommand, type_name, option_name)\n    return arg_type(spec_option)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\n    # create the type instance\n    arg_type = self.create_complex_argument_type(subcommand, type_name, option_name,\n                                                 spec_option)\n\n    # return the type instance\n    return arg_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_argumet_type(subcommand, type_name, option_name,\n                                     spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    complex_type = self.create_complex_type(subcommand, type_name, option_name,\n                                            spec_option)\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.plugin_path.create_complex_argumet_type(\n        type_name, option_name, spec_option)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_complex_argumet_type__(subcommand, type_name, option_name, spec_option)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_complex_argumet_type_instance(subcommand, type_name,\n                                                     option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return complex_type(\n        subcommand, self.plugin_path, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    cls = self.__class__\n    spec = self.__dict__['_' + spec_option]\n    if spec.get('required', False):\n        spec['required'] = True\n    cls = self.__class__\n    return cls(\n        self.plugin_path,\n        type_name,\n        option_name,\n        spec\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.__check_complex_type(subcommand, type_name, option_name):\n        raise CommandError(\"Command '%s' does not have a complex type '%s'\" %\n                           (subcommand, type_name))\n    return self.create_complex_argument_type(subcommand, type_name, option_name, spec_option)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.has_command(subcommand):\n        raise Exception(\"the subcommand '\" + subcommand + \"' is not exist\")\n    arg_type = self.get_complex_type_from_name(subcommand, type_name, option_name)\n    return arg_type(spec_option)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    return control_args, nested_args", "def get_nested_custom_and_control_args(self, args):\n    return {'control_args': args.control_args, 'nested_args': args.nested_args}\n", "def get_nested_custom_and_control_args(self, args):\n\n    return self._get_nested_custom_and_control_args(args)", "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(self, args)\n", "def get_nested_custom_and_control_args(self, args):\n    return {'control_args': args[0], 'nested_args': args[1]}\n", "def get_nested_custom_and_control_args(self, args):\n    return ({}, {})\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_custom_and_control_args(self, args)\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n\n    return {\n        \"control_args\": self._get_control_args(args),\n        \"nested_args\": self._get_nested_args(args),\n    }", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, value in vars(args).items():\n        if key.startswith('_'):\n            continue\n        control_args[key] = value\n    return control_args, nested_args"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    return control_args, nested_args", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return {'control_args': args.control_args, 'nested_args': args.nested_args}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    return self._get_nested_custom_and_control_args(args)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(self, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return {'control_args': args[0], 'nested_args': args[1]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return ({}, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_custom_and_control_args(self, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    return {\n        \"control_args\": self._get_control_args(args),\n        \"nested_args\": self._get_nested_args(args),\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, value in vars(args).items():\n        if key.startswith('_'):\n            continue\n        control_args[key] = value\n    return control_args, nested_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for k, v in vars_dict.items():\n            if k not in vars_dict and k in extra_vars:\n                vars_dict[k] = v\n            elif k in vars_dict and isinstance(v, dict):\n                merge_extra_vars(vars_dict[k], extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict.get(extra_var, 0)\n        else:\n            vars_dict[extra_var] = vars_dict.get(extra_var, 0)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        vars_dict = vars_dict.items()\n    for var, value in vars_dict:\n        if var in extra_vars:\n            vars_dict[extra_vars.index(var)] = value\n        else:\n            vars_dict.append((var, value))\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict[extra_var]\n        else:\n            vars_dict[extra_var] = vars_dict[extra_var]\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        vars_dict[var] = vars_dict.get(var, None) + \" \" + getpass.getuser()\n\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for k, v in vars_dict.items():\n            if k not in vars_dict and k in extra_vars:\n                vars_dict[k] = v\n            elif k in vars_dict and isinstance(v, dict):\n                merge_extra_vars(vars_dict[k], extra_vars)\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict.get(extra_var, 0)\n        else:\n            vars_dict[extra_var] = vars_dict.get(extra_var, 0)\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        vars_dict = vars_dict.items()\n    for var, value in vars_dict:\n        if var in extra_vars:\n            vars_dict[extra_vars.index(var)] = value\n        else:\n            vars_dict.append((var, value))\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict[extra_var]\n        else:\n            vars_dict[extra_var] = vars_dict[extra_var]\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        vars_dict[var] = vars_dict.get(var, None) + \" \" + getpass.getuser()\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose,\n        extra_vars,\n        ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return run_playbook(playbook_path, verbose=verbose,\n                        extra_vars=extra_vars, ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose,\n        extra_vars,\n        ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return run_playbook(playbook_path, verbose=verbose,\n                        extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: Add support for setting variables in the vars dict\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin, ir_workspace.playbook_dir)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(vars_dict, cli_args, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with open(cli_args[0], 'r') as f:\n        return _run_cli(cli_args, vars_dict, f, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.is_running():\n        return ir_workspace.stop()\n    return cli_args\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    cli = AnsibleCLI(cli_args=cli_args, extra_vars=vars_dict, ir_workspace=ir_workspace,\n                     ir_plugin=ir_plugin)\n    cli.run()\n    return cli.results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with ir_workspace.create_playbook(cli_args=cli_args) as playbook:\n        playbook.set_variables(vars_dict)\n        playbook.run()\n        return ir_workspace.get_vars()\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: Add support for setting variables in the vars dict\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin, ir_workspace.playbook_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(vars_dict, cli_args, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with open(cli_args[0], 'r') as f:\n        return _run_cli(cli_args, vars_dict, f, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.is_running():\n        return ir_workspace.stop()\n    return cli_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    cli = AnsibleCLI(cli_args=cli_args, extra_vars=vars_dict, ir_workspace=ir_workspace,\n                     ir_plugin=ir_plugin)\n    cli.run()\n    return cli.results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with ir_workspace.create_playbook(cli_args=cli_args) as playbook:\n        playbook.set_variables(vars_dict)\n        playbook.run()\n        return ir_workspace.get_vars()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        values_dict[key] = self._convert_value(values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, value in values_dict.items():\n        if value is None:\n            values_dict[arg_name] = getattr(self.spec_helper, arg_name)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if not isinstance(value, str):\n            values_dict[key] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key.endswith('values'):\n            values_dict[key] = values_dict[key].split()\n        else:\n            values_dict[key] = self.spec_helper.get_cli_arg(parser_name, key, values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if isinstance(values_dict[key], str):\n            values_dict[key] = values_dict[key].encode(\"utf-8\")\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n        elif isinstance(value, list):\n            values_dict[key] = value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    # pylint: disable=no-self-use\n    values_dict['values_dict'] = {\n        key: str(value) for key, value in values_dict['values_dict'].items()\n    }\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        for arg in values_dict[parser_name]:\n            if isinstance(arg, str):\n                values_dict[parser_name][arg] = values_dict[parser_name][arg].encode('utf-8')\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name in self._get_arg_names(parser_name):\n        value = values_dict.get(arg_name)\n        if value is not None:\n            values_dict[arg_name] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict.keys():\n        if key.startswith(parser_name):\n            values_dict[key] = self._arg_type_checker(values_dict[key])\n    return values_dict\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        values_dict[key] = self._convert_value(values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, value in values_dict.items():\n        if value is None:\n            values_dict[arg_name] = getattr(self.spec_helper, arg_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if not isinstance(value, str):\n            values_dict[key] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key.endswith('values'):\n            values_dict[key] = values_dict[key].split()\n        else:\n            values_dict[key] = self.spec_helper.get_cli_arg(parser_name, key, values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if isinstance(values_dict[key], str):\n            values_dict[key] = values_dict[key].encode(\"utf-8\")\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n        elif isinstance(value, list):\n            values_dict[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    # pylint: disable=no-self-use\n    values_dict['values_dict'] = {\n        key: str(value) for key, value in values_dict['values_dict'].items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        for arg in values_dict[parser_name]:\n            if isinstance(arg, str):\n                values_dict[parser_name][arg] = values_dict[parser_name][arg].encode('utf-8')\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name in self._get_arg_names(parser_name):\n        value = values_dict.get(arg_name)\n        if value is not None:\n            values_dict[arg_name] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict.keys():\n        if key.startswith(parser_name):\n            values_dict[key] = self._arg_type_checker(values_dict[key])\n    return values_dict\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for plugin_path in get_plugin_spec_paths(plugin_dir):\n        plugin_name = os.path.basename(plugin_path)\n        flat_dict[plugin_name] = get_plugin_spec_flatten_dict(plugin_path)\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_dict = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith('.py') and not filename.startswith('__'):\n            with open(os.path.join(plugin_dir, filename)) as f:\n                spec = inspect.getfullargspec(f.read)\n                plugin_dict[filename[:-3]] = spec.args\n    return plugin_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((k, get_plugin_spec_flatten_dict(os.path.join(plugin_dir, k))) for k in os.listdir(plugin_dir))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(get_plugin_spec_dict(plugin_dir))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir,\n        'plugin': {\n            'name': os.path.basename(plugin_dir),\n            'class': plugin_dir.rsplit('.', 1)[0]\n        },\n       'spec': get_plugin_spec_flatten_dict(os.path.join(plugin_dir, '__init__.py'))\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": get_plugin_name(plugin_dir),\n        \"short_description\": get_plugin_description(plugin_dir),\n        \"author\": get_plugin_author(plugin_dir),\n        \"version\": get_plugin_version(plugin_dir),\n        \"license\": get_plugin_license(plugin_dir),\n        \"version_info\": get_plugin_version_info(plugin_dir),\n        \"author_info\": get_plugin_author_info(plugin_dir),\n        \"path\": get_plugin_path(plugin_dir)\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for dirname, dirnames, filenames in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                spec_dict[os.path.splitext(filename)[0]] = dirname\n    return spec_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    for dir_, _, file_names in os.walk(plugin_dir):\n        for file_name in file_names:\n            if file_name.endswith(\".py\"):\n                full_path = os.path.join(dir_, file_name)\n                spec = importlib.util.spec_from_file_location(\n                    full_path.split('/')[-1], full_path)\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n    return plugin_spec_flatten_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_dict(plugin_dir).items() if isinstance(value, dict)}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_dict = flatten_dict(plugin_spec_dict)\n    return plugin_spec_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for plugin_path in get_plugin_spec_paths(plugin_dir):\n        plugin_name = os.path.basename(plugin_path)\n        flat_dict[plugin_name] = get_plugin_spec_flatten_dict(plugin_path)\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_dict = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith('.py') and not filename.startswith('__'):\n            with open(os.path.join(plugin_dir, filename)) as f:\n                spec = inspect.getfullargspec(f.read)\n                plugin_dict[filename[:-3]] = spec.args\n    return plugin_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((k, get_plugin_spec_flatten_dict(os.path.join(plugin_dir, k))) for k in os.listdir(plugin_dir))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(get_plugin_spec_dict(plugin_dir))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir,\n        'plugin': {\n            'name': os.path.basename(plugin_dir),\n            'class': plugin_dir.rsplit('.', 1)[0]\n        },\n       'spec': get_plugin_spec_flatten_dict(os.path.join(plugin_dir, '__init__.py'))\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": get_plugin_name(plugin_dir),\n        \"short_description\": get_plugin_description(plugin_dir),\n        \"author\": get_plugin_author(plugin_dir),\n        \"version\": get_plugin_version(plugin_dir),\n        \"license\": get_plugin_license(plugin_dir),\n        \"version_info\": get_plugin_version_info(plugin_dir),\n        \"author_info\": get_plugin_author_info(plugin_dir),\n        \"path\": get_plugin_path(plugin_dir)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for dirname, dirnames, filenames in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                spec_dict[os.path.splitext(filename)[0]] = dirname\n    return spec_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    for dir_, _, file_names in os.walk(plugin_dir):\n        for file_name in file_names:\n            if file_name.endswith(\".py\"):\n                full_path = os.path.join(dir_, file_name)\n                spec = importlib.util.spec_from_file_location(\n                    full_path.split('/')[-1], full_path)\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n    return plugin_spec_flatten_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_dict(plugin_dir).items() if isinstance(value, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_dict = flatten_dict(plugin_spec_dict)\n    return plugin_spec_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if self.ansible_config_path is None:\n        self.ansible_config_path = os.environ.get('ANSIBLE_CONFIG_PATH', '/etc/ansible/ansible.cfg')\n        if not os.path.exists(self.ansible_config_path):\n            raise Exception('Config path not found:'+ self.ansible_config_path)\n        self.ansible_config_path = os.path.abspath(self.ansible_config_path)\n\n    return self", "def inject_config(self):\n    config_path = os.getenv(\"ANSIBLE_CONFIG_FILE\", None)\n    if not config_path:\n        # no config path defined in the env variables\n        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"ansible_config_file\")\n    self.ansible_config_path = config_path", "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        self.ansible_config_path = os.path.join(os.path.dirname(__file__), 'ansible.yml')\n\n    if not os.path.exists(self.ansible_config_path):\n        raise ImportError(\"Config path not found on {}\".format(self.ansible_config_path))\n", "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        self.ansible_config_path = os.path.join(\n            os.path.dirname(os.path.realpath(__file__)), 'ansible.yml')\n        self.log.info('Set config path to: %s' % self.ansible_config_path)\n    else:\n        self.log.info('ansible_config_path is already set in environment')\n", "def inject_config(self):\n    if self.ansible_config_path is None:\n        raise ValueError(\"Cannot inject config when not specified.\")\n\n    config_path = os.path.join(os.path.dirname(self.ansible_config_path), \"config\")\n    if not os.path.exists(config_path):\n        os.makedirs(config_path)\n    os.environ[\"ANSIBLE_CONFIG_FILE\"] = config_path\n", "def inject_config(self):\n    import os\n    if not 'ANSIBLE_CONFIG' in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = '/etc/ansible/ansible.cfg'", "def inject_config(self):\n    try:\n        self.ansible_config_path = os.environ['ANSIBLE_CONFIG_PATH']\n    except KeyError:\n        pass\n", "def inject_config(self):\n    if os.environ.get('ANSIBLE_CONFIG_FILE'):\n        return\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n", "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path", "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        os.environ['ANSIBLE_CONFIG_PATH'] = '/etc/ansible/ansible.cfg'\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        self.ansible_config_path = os.environ.get('ANSIBLE_CONFIG_PATH', '/etc/ansible/ansible.cfg')\n        if not os.path.exists(self.ansible_config_path):\n            raise Exception('Config path not found:'+ self.ansible_config_path)\n        self.ansible_config_path = os.path.abspath(self.ansible_config_path)\n\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    config_path = os.getenv(\"ANSIBLE_CONFIG_FILE\", None)\n    if not config_path:\n        # no config path defined in the env variables\n        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"ansible_config_file\")\n    self.ansible_config_path = config_path", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        self.ansible_config_path = os.path.join(os.path.dirname(__file__), 'ansible.yml')\n\n    if not os.path.exists(self.ansible_config_path):\n        raise ImportError(\"Config path not found on {}\".format(self.ansible_config_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        self.ansible_config_path = os.path.join(\n            os.path.dirname(os.path.realpath(__file__)), 'ansible.yml')\n        self.log.info('Set config path to: %s' % self.ansible_config_path)\n    else:\n        self.log.info('ansible_config_path is already set in environment')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        raise ValueError(\"Cannot inject config when not specified.\")\n\n    config_path = os.path.join(os.path.dirname(self.ansible_config_path), \"config\")\n    if not os.path.exists(config_path):\n        os.makedirs(config_path)\n    os.environ[\"ANSIBLE_CONFIG_FILE\"] = config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    import os\n    if not 'ANSIBLE_CONFIG' in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = '/etc/ansible/ansible.cfg'", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    try:\n        self.ansible_config_path = os.environ['ANSIBLE_CONFIG_PATH']\n    except KeyError:\n        pass\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if os.environ.get('ANSIBLE_CONFIG_FILE'):\n        return\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ansible_config_path' not in os.environ:\n        os.environ['ANSIBLE_CONFIG_PATH'] = '/etc/ansible/ansible.cfg'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        self.name,\n        help=self.help,\n        description=self.description,\n        formatter_class=self.kwargs.get('formatter_class', argparse.RawDescriptionHelpFormatter))\n    self.extend(subparser)", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    add_cli_options(parser)\n    return root_subparsers", "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        self.name, help=self.description, description=self.description\n    )\n    subparser.set_defaults(func=self.main)\n    self.extend_cli_options(subparser)\n", "def extend_cli(self, root_subparsers):\n    self.kwargs = self.kwargs.copy()\n    self.name = self.kwargs.pop(\"name\")\n\n    root_subparser = root_subparsers.add_parser(self.name, help=self.__doc__)\n    root_subparser.set_defaults(func=self.run)\n    self.__add_subparsers(root_subparser, subparser_prefix=self.name)\n", "def extend_cli(self, root_subparsers):\n    self.kwargs[\"prog\"] = self.name\n    self.kwargs[\"description\"] = \"\"\n    self.kwargs[\"epilog\"] = \"\"\n    self.kwargs[\"usage\"] = \"\"\n    self.kwargs[\"add_help\"] = False\n    self.kwargs[\"add_version\"] = False\n    self.kwargs[\"add_description\"] = False\n    self.kwargs[\"add_epilog\"] = False\n    self.kwargs[\"add_usage\"] = False\n    self.kwargs[\"add_version\"] = False\n    self.kwargs[\"add_description\"] = False\n    self.kwargs[\"add_epilog\"] = False\n    root_subparsers.add_parser(self.name, **self.kwargs)\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    extend_cli_base(self, root_subparsers, self.kwargs)\n    extend_cli_help(self, root_subparsers)\n    root_subparsers.add_parser('create', help='create a new project')\n    root_subparsers.add_parser('delete', help='delete a project')\n    root_subparsers.add_parser('help', help='help for a project')\n    root_subparsers.add_parser('update', help='update a project')\n    root_subparsers.add_parser('list', help='list all projects')", "def extend_cli(self, root_subparsers):\n    if self.kwargs:\n        root_subparsers.add_parser(self.name, **self.kwargs)\n    else:\n        root_subparsers.add_parser(self.name)", "def extend_cli(self, root_subparsers):\n    if self.kwargs:\n        self.kwargs.update(self._cli_kwargs)\n\n        # Add the cli options to the main cli entry point.\n        self._cli_entry_point.extend_cli(root_subparsers)\n", "def extend_cli(self, root_subparsers):\n    self.kwargs.update(self.parser._actions)\n    self.name =''.join([self.kwargs.pop('name'), self.kwargs.pop('command')])\n    subparser = root_subparsers.add_parser(self.name, help=self.help)\n    self.add_cli_opts(subparser)"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        self.name,\n        help=self.help,\n        description=self.description,\n        formatter_class=self.kwargs.get('formatter_class', argparse.RawDescriptionHelpFormatter))\n    self.extend(subparser)", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    add_cli_options(parser)\n    return root_subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        self.name, help=self.description, description=self.description\n    )\n    subparser.set_defaults(func=self.main)\n    self.extend_cli_options(subparser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.kwargs = self.kwargs.copy()\n    self.name = self.kwargs.pop(\"name\")\n\n    root_subparser = root_subparsers.add_parser(self.name, help=self.__doc__)\n    root_subparser.set_defaults(func=self.run)\n    self.__add_subparsers(root_subparser, subparser_prefix=self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.kwargs[\"prog\"] = self.name\n    self.kwargs[\"description\"] = \"\"\n    self.kwargs[\"epilog\"] = \"\"\n    self.kwargs[\"usage\"] = \"\"\n    self.kwargs[\"add_help\"] = False\n    self.kwargs[\"add_version\"] = False\n    self.kwargs[\"add_description\"] = False\n    self.kwargs[\"add_epilog\"] = False\n    self.kwargs[\"add_usage\"] = False\n    self.kwargs[\"add_version\"] = False\n    self.kwargs[\"add_description\"] = False\n    self.kwargs[\"add_epilog\"] = False\n    root_subparsers.add_parser(self.name, **self.kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    extend_cli_base(self, root_subparsers, self.kwargs)\n    extend_cli_help(self, root_subparsers)\n    root_subparsers.add_parser('create', help='create a new project')\n    root_subparsers.add_parser('delete', help='delete a project')\n    root_subparsers.add_parser('help', help='help for a project')\n    root_subparsers.add_parser('update', help='update a project')\n    root_subparsers.add_parser('list', help='list all projects')", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    if self.kwargs:\n        root_subparsers.add_parser(self.name, **self.kwargs)\n    else:\n        root_subparsers.add_parser(self.name)", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    if self.kwargs:\n        self.kwargs.update(self._cli_kwargs)\n\n        # Add the cli options to the main cli entry point.\n        self._cli_entry_point.extend_cli(root_subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.kwargs.update(self.parser._actions)\n    self.name =''.join([self.kwargs.pop('name'), self.kwargs.pop('command')])\n    subparser = root_subparsers.add_parser(self.name, help=self.help)\n    self.add_cli_opts(subparser)", "is_pass": false, "return_code": 1}]}
