{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number for Time')\n    if tz is None:\n        tz = timezone.utc\n    dt = datetime.datetime.utcfromtimestamp(nanoseconds)\n    return tz.fromutc(dt)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n    return datetime.datetime.fromtimestamp(nanoseconds / 1e9, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return Time(nanoseconds, tz=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n\n    return datetime.time(nanoseconds // 1000, nanoseconds % 1000, tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return datetime.datetime.fromtimestamp(nanoseconds, tz)\n    return datetime.datetime.fromtimestamp(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        # Convert nanoseconds to a datetime object with given timezone\n        nanos = int(nanoseconds * 1e9)\n        dt = datetime.datetime.utcfromtimestamp(nanos)\n        return dt.replace(tzinfo=pytz.utc)\n\n    # Convert nanoseconds to a datetime object with local time\n    dt = datetime.datetime.fromtimestamp(nanoseconds)\n    return dt.replace(tzinfo=datetime.timezone.utc)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return datetime.datetime.fromtimestamp(nanoseconds // 1000000000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n\n    if tz:\n        offset = datetime.timedelta(microseconds=tz.utcoffset(None).total_seconds() * 1000)\n    else:\n        offset = datetime.timedelta(microseconds=0)\n\n    return datetime.time(tz.localize(datetime.datetime.utcnow()).timetuple()[:3] + (nanoseconds - offset.total_seconds() // 1000), tz.tzname[1] if tz else None)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return Time(nanoseconds=nanoseconds, tzinfo=tz)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number for Time')\n    if tz is None:\n        tz = timezone.utc\n    dt = datetime.datetime.utcfromtimestamp(nanoseconds)\n    return tz.fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n    return datetime.datetime.fromtimestamp(nanoseconds / 1e9, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return Time(nanoseconds, tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n\n    return datetime.time(nanoseconds // 1000, nanoseconds % 1000, tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return datetime.datetime.fromtimestamp(nanoseconds, tz)\n    return datetime.datetime.fromtimestamp(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        # Convert nanoseconds to a datetime object with given timezone\n        nanos = int(nanoseconds * 1e9)\n        dt = datetime.datetime.utcfromtimestamp(nanos)\n        return dt.replace(tzinfo=pytz.utc)\n\n    # Convert nanoseconds to a datetime object with local time\n    dt = datetime.datetime.fromtimestamp(nanoseconds)\n    return dt.replace(tzinfo=datetime.timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return datetime.datetime.fromtimestamp(nanoseconds // 1000000000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n\n    if tz:\n        offset = datetime.timedelta(microseconds=tz.utcoffset(None).total_seconds() * 1000)\n    else:\n        offset = datetime.timedelta(microseconds=0)\n\n    return datetime.time(tz.localize(datetime.datetime.utcnow()).timetuple()[:3] + (nanoseconds - offset.total_seconds() // 1000), tz.tzname[1] if tz else None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return Time(nanoseconds=nanoseconds, tzinfo=tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes,\n                              seconds=value.seconds)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(microseconds=value.microseconds)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes,\n                              seconds=value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(microseconds=value.microseconds)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.isoformat()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        supported = _protocol_version_map.get(protocol_version, None)\n        if supported is None:\n            raise TypeError('Protocol version {} unsupported'.format(protocol_version))\n        return supported\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_versions(protocol_version)\n    return {v: getattr(BoltHandler, v) for v in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version:\n        version_list = (protocol_version,) + version_list\n\n    return {v: get_class_for_version(v) for v in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_list = [version for version in version_list\n                        if version >= protocol_version]\n    return {version: getattr(cls, '_%s_HANDLER' % version) for version in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    return _protocol_handlers[cls](protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_tuples = (protocol_version,) + version_tuples\n    return {version: getattr(cls, version) for version in version_tuples}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        supported = _protocol_version_map.get(protocol_version, None)\n        if supported is None:\n            raise TypeError('Protocol version {} unsupported'.format(protocol_version))\n        return supported\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_versions(protocol_version)\n    return {v: getattr(BoltHandler, v) for v in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version:\n        version_list = (protocol_version,) + version_list\n\n    return {v: get_class_for_version(v) for v in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_list = [version for version in version_list\n                        if version >= protocol_version]\n    return {version: getattr(cls, '_%s_HANDLER' % version) for version in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    return _protocol_handlers[cls](protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_tuples = (protocol_version,) + version_tuples\n    return {version: getattr(cls, version) for version in version_tuples}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout, *args, **kwargs)\n            return tx.run(\"MATCH (a:Person) RETURN count(a)\")[0][0]\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            if metadata is not None:\n                self.set_metadata(metadata)\n            tx = dbms.Transaction(**kw)\n            result = f(*args, **kw)\n            if timeout is not None:\n                tx.set_timeout(timeout)\n                tx.run()\n            else:\n                tx.log()\n            return result\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        # add the metadata to the function call\n        wrapper.metadata = metadata\n\n        # add the timeout to the function call\n        wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.Transaction(dbms.get_current_transaction(), timeout)\n            return f(*args, **kwargs)\n        tx.metadata = metadata\n        tx.add_log(\"query\", \"start\")\n        return wrapped\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__timeout__ = timeout or None\n\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n\n        return wrapped\n\n    return inner\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with Transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped\n    if metadata:\n        metadata.update({'timeout': timeout})\n        return wrapper\n    else:\n        return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout, *args, **kwargs)\n            return tx.run(\"MATCH (a:Person) RETURN count(a)\")[0][0]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            if metadata is not None:\n                self.set_metadata(metadata)\n            tx = dbms.Transaction(**kw)\n            result = f(*args, **kw)\n            if timeout is not None:\n                tx.set_timeout(timeout)\n                tx.run()\n            else:\n                tx.log()\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        # add the metadata to the function call\n        wrapper.metadata = metadata\n\n        # add the timeout to the function call\n        wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.Transaction(dbms.get_current_transaction(), timeout)\n            return f(*args, **kwargs)\n        tx.metadata = metadata\n        tx.add_log(\"query\", \"start\")\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__timeout__ = timeout or None\n\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n\n        return wrapped\n\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with Transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped\n    if metadata:\n        metadata.update({'timeout': timeout})\n        return wrapper\n    else:\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('{!r} is not in the index'.format(key))\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (TypeError, ValueError):\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError as e:\n        raise KeyError(e)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (TypeError, ValueError):\n        raise KeyError(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('{!r} is not in the index'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (TypeError, ValueError):\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError as e:\n        raise KeyError(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (TypeError, ValueError):\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    if not keys:\n        return [self.__getitem__(key) for key in self.__keys]\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n\n    return [item.value for item in self.__class__.__iter__(self) if item in keys]\n", "def values(self, *keys):\n    if not keys:\n        return [self.__getitem__(key) for key in self.__keys]\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    try:\n        keys = tuple(keys)\n    except TypeError:\n        pass\n\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items()]\n    return [item.value for item in self.__getitem__(keys)]\n", "def values(self, *keys):\n    return list(self.__iter__(*keys))\n", "def values(self, *keys):\n    return [record.value for record in self.__iter__() if (\n        keys is None or keys == record.keys())]\n", "def values(self, *keys):\n    if keys:\n        return [self.__getitem__(key) for key in keys]\n    return self.__iter__()\n", "def values(self, *keys):\n    return list(self.__iter__(*keys))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    if not keys:\n        return [self.__getitem__(key) for key in self.__keys]\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n\n    return [item.value for item in self.__class__.__iter__(self) if item in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        return [self.__getitem__(key) for key in self.__keys]\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    try:\n        keys = tuple(keys)\n    except TypeError:\n        pass\n\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items()]\n    return [item.value for item in self.__getitem__(keys)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.__iter__(*keys))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [record.value for record in self.__iter__() if (\n        keys is None or keys == record.keys())]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    if keys:\n        return [self.__getitem__(key) for key in keys]\n    return self.__iter__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return list(self.__iter__(*keys))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: v for k, v in zip(self.__keys, self.__values)\n            if k in keys or (keys and not isinstance(keys[0], int))}\n", "def data(self, *keys):\n    return {k: v for k, v in super(Record, self).data(*keys).items()\n            if k in self.__keys}\n", "def data(self, *keys):\n    return dict(zip(self.__keys, self.__getitem__(keys)))\n", "def data(self, *keys):\n    d = {}\n    for key in keys or self.__keys:\n        try:\n            d[key] = self.__getitem__(key)\n        except KeyError:\n            if self._broken_record_error:\n                raise self._broken_record_error\n            else:\n                d[key] = None\n    return d\n", "def data(self, *keys):\n    if not keys:\n        return self._values\n    return dict((k, self._values[k]) for k in keys)\n", "def data(self, *keys):\n    return dict.__getitem__(self, keys)\n", "def data(self, *keys):\n    if not keys:\n        return self._data.copy()\n\n    return {key: self._data.get(key) for key in keys}\n", "def data(self, *keys):\n    if len(keys) == 0:\n        return dict(self.items())\n    elif len(keys) == 1:\n        return self.items()[keys[0]]\n    else:\n        return dict(zip(keys, self.items()))\n", "def data(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n    return {key: getattr(self, key) for key in keys}\n", "def data(self, *keys):\n    if keys:\n        if len(keys) > self.__len__():\n            raise IndexError(\"Too many keys provided\")\n        return {key: self.__getitem__(key) for key in keys}\n    return self.__iter__()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: v for k, v in zip(self.__keys, self.__values)\n            if k in keys or (keys and not isinstance(keys[0], int))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: v for k, v in super(Record, self).data(*keys).items()\n            if k in self.__keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.__keys, self.__getitem__(keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    d = {}\n    for key in keys or self.__keys:\n        try:\n            d[key] = self.__getitem__(key)\n        except KeyError:\n            if self._broken_record_error:\n                raise self._broken_record_error\n            else:\n                d[key] = None\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if not keys:\n        return self._values\n    return dict((k, self._values[k]) for k in keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict.__getitem__(self, keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if not keys:\n        return self._data.copy()\n\n    return {key: self._data.get(key) for key in keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if len(keys) == 0:\n        return dict(self.items())\n    elif len(keys) == 1:\n        return self.items()[keys[0]]\n    else:\n        return dict(zip(keys, self.items()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n    return {key: getattr(self, key) for key in keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if keys:\n        if len(keys) > self.__len__():\n            raise IndexError(\"Too many keys provided\")\n        return {key: self.__getitem__(key) for key in keys}\n    return self.__iter__()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return struct.unpack('>H', self.data.pop(0))[0]\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]\n", "def pop_u16(self):\n    return struct.unpack('>H', self.data.pop())[0]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data.pop(0))[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data.pop())[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n        Dehydration functions receive the value of type desired by\n        packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        sel", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enu", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n    :param discard: Handler functions passed in the returned Response object\n        with import logging enum ssl logging enum ssl api class\n        :param handlers: handler functions passed in the returned Response\n        object with import logging enum ssl api class\n    \"\"\"\n    self._append(DiscardMessage(n, qid, dehydration_hooks, discard,\n                                    handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration\n        function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging\n        enum ssl api class python logging\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl api class python logging\n        enum ssl api class python logging\n    \"\"\"\n    self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl logging enum ssl api class\n    :param handlers: handlers passed in with import logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl api class\n    \"\"\"\n    return self._append(Dis", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned object with import logging\n        enum ssl logging enum ssl api class ssl api class\n    \"\"\"\n    return self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with import logging enum ssl logging\n        enum ssl api class ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with import logging enum ssl logging\n        enum ssl api class ssl api class self.pull(self, n, qid, dehydration_hooks, hydration_hooks)\n    \"\"", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by\n        packstream.\n        Dehydration function receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n        enum ssl logging enum ssl api class \n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration\n        function). Dehydration function receives the value of type desired by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n  ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum\n        ssl api class with import ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    \"\"\"\n    return self._append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n        Dehydration functions receive the value of type desired by\n        packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        sel", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enu", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n    :param discard: Handler functions passed in the returned Response object\n        with import logging enum ssl logging enum ssl api class\n        :param handlers: handler functions passed in the returned Response\n        object with import logging enum ssl api class\n    \"\"\"\n    self._append(DiscardMessage(n, qid, dehydration_hooks, discard,\n                                    handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration\n        function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging\n        enum ssl api class python logging\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl api class python logging\n        enum ssl api class python logging\n    \"\"\"\n    self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl logging enum ssl api class\n    :param handlers: handlers passed in with import logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl api class\n    \"\"\"\n    return self._append(Dis", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned object with import logging\n        enum ssl logging enum ssl api class ssl api class\n    \"\"\"\n    return self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with import logging enum ssl logging\n        enum ssl api class ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with import logging enum ssl logging\n        enum ssl api class ssl api class self.pull(self, n, qid, dehydration_hooks, hydration_hooks)\n    \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by\n        packstream.\n        Dehydration function receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n        enum ssl logging enum ssl api class \n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration\n        function). Dehydration function receives the value of type desired by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum\n        ssl api class with import ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    \"\"\"\n    return self._append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n        (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hyperlinks: Hyperlinks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed i", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"DELETE\"\n        - \"CREATE\"\n    :param bookmarks: iterable of bookmark values after which this\n        transaction should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the\n        transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type deshred\n        by packstream.\n    :param hyperlinks: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging\n    enum ssl ssl api class self.run(self, query, par", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: hyperlinks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Re", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receives the\n        value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receives the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ/WRITE\" (default)\n        - \"DELETE\" (default)\n        - \"CREATE\"\n        - \"DELETE/CREATE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deshydration\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deserializated by packstream.\n\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type deserializated by packstream and are free to return", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receives the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api class\n    :return:\n    \"\"\"\n    return self._append(_BeginMessage(mode, bookmarks, metadata, timeout,", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions receive\n        the value and returns an object of type descipled by packstream.\n        Dehydration functions receive the value of type descipled by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging enum\n        ssl api class else\n    \"\"\"\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: Hyperlinks to add to the response object\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api\n        class self.run(self, query, parameters, mode, bookmarks"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n        (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hyperlinks: Hyperlinks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed i", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"DELETE\"\n        - \"CREATE\"\n    :param bookmarks: iterable of bookmark values after which this\n        transaction should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the\n        transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type deshred\n        by packstream.\n    :param hyperlinks: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging\n    enum ssl ssl api class self.run(self, query, par", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: hyperlinks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Re", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receives the\n        value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receives the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ/WRITE\" (default)\n        - \"DELETE\" (default)\n        - \"CREATE\"\n        - \"DELETE/CREATE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deshydration\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deserializated by packstream.\n\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type deserializated by packstream and are free to return", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receives the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api class\n    :return:\n    \"\"\"\n    return self._append(_BeginMessage(mode, bookmarks, metadata, timeout,", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions receive\n        the value and returns an object of type descipled by packstream.\n        Dehydration functions receive the value of type descipled by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging enum\n        ssl api class else\n    \"\"\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: Hyperlinks to add to the response object\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api\n        class self.run(self, query, parameters, mode, bookmarks", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        n = (n + 2 ** (h - 1)) // 2\n    return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h\n\n    return int(round(math.floor(n)))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            return int(round_half_to_even(int(ten_n / 10)))\n        elif ten_n % 10 == 4:\n            return int(round_half_to_even(int(ten_n / 10) * 10))\n        elif ten_n % 10 == 3:\n            return int(round_half_to_even(int(ten_n / 10) * 10) * 10)\n    return int(round_half_to_even(int(n)))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(n / 10)\n        return 10 * h + int(n % 10)\n    return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        d = 10 ** (int(math.log(ten_n, 2)) + 1)\n        return int(round(n / d) * d)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h + 1\n    else:\n        return int(round(n))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        n = (n + 2 ** (h - 1)) // 2\n    return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h\n\n    return int(round(math.floor(n)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            return int(round_half_to_even(int(ten_n / 10)))\n        elif ten_n % 10 == 4:\n            return int(round_half_to_even(int(ten_n / 10) * 10))\n        elif ten_n % 10 == 3:\n            return int(round_half_to_even(int(ten_n / 10) * 10) * 10)\n    return int(round_half_to_even(int(n)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(n / 10)\n        return 10 * h + int(n % 10)\n    return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        d = 10 ** (int(math.log(ten_n, 2)) + 1)\n        return int(round(n / d) * d)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h + 1\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __srid_table__ = srid_table\n        __srid_extension__ ='shape'\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n\n        def __str__(self):\n            return \"Point({},{})\".format(self.x, self.y)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (CartesianPoint,),\n        {\n            \"__module__\": \"ProjectGeodjango\",\n            \"__qualname__\": \"{0}Point\".format(name),\n            \"coord_sys\": srid_map[\"SRID\"],\n            \"north\": fields[\"north\"],\n            \"east\": fields[\"east\"],\n            \"south\": fields[\"south\"],\n            \"west\": fields[\"west\"],\n            \"altitude\": fields[\"altitude\"],\n        },\n    )\n", "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__()\n            self.__dict__.update(fields)\n            self.srid = srid_map[self.__dict__['_srid']]\n\n        def __str__(self):\n            return ','.join(map(str, self.__dict__.items()))\n\n        def __repr__(self):\n            return '%s(%r,%r)' % (self.__class__.__name__, self.__dict__['_srid'], self.__dict__['_lat'], self.__dict__['_lon'])\n\n        def __eq__(self, other):\n            return self.__dict__ == other.__dict__\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def __str__(self):\n            return 'Point(%s,%s,%s)' % (self.x, self.y, self.z)\n\n        def __repr__(self):\n            return 'Point(%s,%s,%s)' % (self.x, self.y, self.z)\n\n    if isinstance(name, str):\n        name = name.strip()\n        if not name:\n            raise ValueError('Point name cannot be empty')\n    if not isinstance(fields, dict):\n        raise ValueError('Point fields must be a dictionary')\n    if not all(isinstance(field, str) for field in fields.values()):\n        raise ValueError('Point fields must be a dictionary of field names')\n    if not all(isinstance(srid, int) for srid in srid_map.valu", "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid_map = srid_map\n        def __str__(self):\n            return 'Point(%s, %s)' % (self.x, self.y)\n    return Point\n", "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        srid = srid_table[name]\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n    else:\n        srid = 4326\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n", "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n        def __str__(self):\n            return \"(%s,%s,%s)\" % (self.x, self.y, self.z)\n\n    # Copy fields to avoid side effects on calling point_type\n    fields = dict(fields)\n    point = Point(*fields.values())\n    point.__class__ = Point_type\n\n    # Get geometry type\n    srid = srid_map.get(point.srid, 0)\n\n    # Initialize point with srid from srid_table\n    if srid:\n        point = point_type(point.x, point.y, srid)\n    return point\n", "def point_type(name, fields, srid_map):\n    srid = srid_map['4326']\n    return type(name, fields, (CartesianPoint,), {'srid': srid})\n", "def point_type(name, fields, srid_map):\n    # Get the point type class\n    point_cls = get_point_cls(name, fields, srid_map)\n\n    # Check if the class is still valid\n    if not point_cls.is_valid():\n        raise ValueError('Invalid point type \"%s\"' % name)\n\n    return point_cls()\n", "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        srid = srid_table[name]\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__.update(fields)\n\n    return Point\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __srid_table__ = srid_table\n        __srid_extension__ ='shape'\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n\n        def __str__(self):\n            return \"Point({},{})\".format(self.x, self.y)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (CartesianPoint,),\n        {\n            \"__module__\": \"ProjectGeodjango\",\n            \"__qualname__\": \"{0}Point\".format(name),\n            \"coord_sys\": srid_map[\"SRID\"],\n            \"north\": fields[\"north\"],\n            \"east\": fields[\"east\"],\n            \"south\": fields[\"south\"],\n            \"west\": fields[\"west\"],\n            \"altitude\": fields[\"altitude\"],\n        },\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__()\n            self.__dict__.update(fields)\n            self.srid = srid_map[self.__dict__['_srid']]\n\n        def __str__(self):\n            return ','.join(map(str, self.__dict__.items()))\n\n        def __repr__(self):\n            return '%s(%r,%r)' % (self.__class__.__name__, self.__dict__['_srid'], self.__dict__['_lat'], self.__dict__['_lon'])\n\n        def __eq__(self, other):\n            return self.__dict__ == other.__dict__\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def __str__(self):\n            return 'Point(%s,%s,%s)' % (self.x, self.y, self.z)\n\n        def __repr__(self):\n            return 'Point(%s,%s,%s)' % (self.x, self.y, self.z)\n\n    if isinstance(name, str):\n        name = name.strip()\n        if not name:\n            raise ValueError('Point name cannot be empty')\n    if not isinstance(fields, dict):\n        raise ValueError('Point fields must be a dictionary')\n    if not all(isinstance(field, str) for field in fields.values()):\n        raise ValueError('Point fields must be a dictionary of field names')\n    if not all(isinstance(srid, int) for srid in srid_map.valu", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid_map = srid_map\n        def __str__(self):\n            return 'Point(%s, %s)' % (self.x, self.y)\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        srid = srid_table[name]\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n    else:\n        srid = 4326\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n        def __str__(self):\n            return \"(%s,%s,%s)\" % (self.x, self.y, self.z)\n\n    # Copy fields to avoid side effects on calling point_type\n    fields = dict(fields)\n    point = Point(*fields.values())\n    point.__class__ = Point_type\n\n    # Get geometry type\n    srid = srid_map.get(point.srid, 0)\n\n    # Initialize point with srid from srid_table\n    if srid:\n        point = point_type(point.x, point.y, srid)\n    return point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    srid = srid_map['4326']\n    return type(name, fields, (CartesianPoint,), {'srid': srid})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    # Get the point type class\n    point_cls = get_point_cls(name, fields, srid_map)\n\n    # Check if the class is still valid\n    if not point_cls.is_valid():\n        raise ValueError('Invalid point type \"%s\"' % name)\n\n    return point_cls()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        srid = srid_table[name]\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__.update(fields)\n\n    return Point\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return wrapper\n    return _decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return wrapper\n    return _decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if code in ('yes', 'true', 'on'):\n        return 'yes'\n    elif code in ('no', 'false', 'off'):\n        return 'no'\n    else:\n        raise Exception('Unknown value for option \"{}\"'.format(code))\n", "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. Use the env variable instead.')\n", "def _inline_r_setup(code: str):\n    result = run_command(\"configure require_r >= 2\", code, stdout=DEVNULL, stderr=DEVNULL)\n    assert result.returncode == 0, result.stderr.decode()\n", "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config(os.path.join(os.path.dirname(__file__), \"r.cfg\"))\n    config.merge(kwargs)\n    config.parse(code)\n    return str(config)\n", "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_ext.py setup.cfg build; \"\n        \"R install_lib.py install_source; \"\n        \"R setup.sh setup_environment; \"\n        \"R build_ext.py build_ext; \"\n        \"R install_lib.py install_source; \"\n        \"R env; \"\n        \"R env/bin/R env/bin/activate; \"\n    )\n    return inline_r_command.format(r_version=R_VERSION)\n", "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    os.environ[\"R_DIR\"] = \"%s\"\n    os.environ[\"R_RUN_TEST\"] = \"%s\"\n    \"\"\" % (os.path.abspath(os.environ[\"R_ENV\"]), code)\n    return inline\n", "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export %s='%s'\" % (\n            os.environ.get(\"R_RUN_INLINE_R\"),\n            os.environ.get(\"R_RUN_INLINE_R_OPTIONS\"),\n        )\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', code)\n", "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = os.environ.get(\"R_OPTIONS\", \"\").split(\":\")\n    for option in r_options:\n        if option not in (\"--quiet\", \"--verbose\", \"--trace\"):\n            return option\n\n    return \"ok\"\n", "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code in ('yes', 'true', 'on'):\n        return 'yes'\n    elif code in ('no', 'false', 'off'):\n        return 'no'\n    else:\n        raise Exception('Unknown value for option \"{}\"'.format(code))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. Use the env variable instead.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    result = run_command(\"configure require_r >= 2\", code, stdout=DEVNULL, stderr=DEVNULL)\n    assert result.returncode == 0, result.stderr.decode()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config(os.path.join(os.path.dirname(__file__), \"r.cfg\"))\n    config.merge(kwargs)\n    config.parse(code)\n    return str(config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_ext.py setup.cfg build; \"\n        \"R install_lib.py install_source; \"\n        \"R setup.sh setup_environment; \"\n        \"R build_ext.py build_ext; \"\n        \"R install_lib.py install_source; \"\n        \"R env; \"\n        \"R env/bin/R env/bin/activate; \"\n    )\n    return inline_r_command.format(r_version=R_VERSION)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    os.environ[\"R_DIR\"] = \"%s\"\n    os.environ[\"R_RUN_TEST\"] = \"%s\"\n    \"\"\" % (os.path.abspath(os.environ[\"R_ENV\"]), code)\n    return inline\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export %s='%s'\" % (\n            os.environ.get(\"R_RUN_INLINE_R\"),\n            os.environ.get(\"R_RUN_INLINE_R_OPTIONS\"),\n        )\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = os.environ.get(\"R_OPTIONS\", \"\").split(\":\")\n    for option in r_options:\n        if option not in (\"--quiet\", \"--verbose\", \"--trace\"):\n            return option\n\n    return \"ok\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        shell: bool = False,\n) -> Iterator[str]:\n    \"\"\"\n    A simpler implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    with Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=shell) as p:\n        yield p.stdin.read()\n        if capture:\n            for line in p.stdout:\n                yield line\n        if p.wait()!= 0:\n            raise Exception('Command failed: {}'.format(' '.join(cmd)))\n", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: MutableMapping[str, str],\n        cwd: str = None,\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    # If target_concurrency is None, the command will be executed on the local\n    # host and the pty will be created on the remote host\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('XDG_CONFIG_NUM_THREADS', '1'))\n\n    if isinstance(cmd, str):\n        cmd = [cmd]\n\n    pty = None\n    try:\n        pty = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n           ", "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    if target_concurrency < 2:\n        raise ValueError(\n            '`target_concurrency` must be at least 2 when using xargs')\n\n    if color:\n        return ['--color'] * target_concurrency\n\n    p = multiprocessing.Pool(target_concurrency)\n    return p.map(_run_xargs, cmd)\n", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int, str]:\n    \"\"\"\n    A simpler implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ\n\n    # Make a pty if not already present\n    if not os.isatty(sys.stdout.fileno()):\n        tty = TTY(sys.stdout.fileno())\n        tty.set_terminal_size(*env['COLUMNS'], width=env['LINES'])\n        pty = Tee(sys.stdout.fileno(), sys.stderr.fileno(), tty)\n        pty.start()\n\n    if not os.isatty(sys.s", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    if sys.platform not in ['win32', 'darwin']:\n        return []\n\n    pty = False\n    if not color:\n        pty = True\n        color = os.environ.get('COLOR')\n\n    if color:\n        cmd = ['fg-color'] + cmd\n\n    if target_concurrency is not None:\n        cmd.extend(['-c', str(target_concurrency)])\n\n    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').splitlines()\n", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        cwd: Optional[str] = None,\n        target_concurrency: int = None,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if not IS_WINDOWS:\n        raise NotImplementedError(\"xargs is only supported on Windows\")\n    with _Popen(\n            cmd,\n            stdout=PIPE,\n            stderr=PIPE,\n            env=env,\n            cwd=cwd,\n            preexec_fn=os.setsid,\n    ) as proc:\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out.decode('u", "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n\n    \"\"\"\n    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n    p.stdin.close()\n    p.stdout.close()\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            p.returncode,''.join(cmd),\n            output=stdout.decode(),\n            error=stderr.decode()\n        )\n    if capture:\n       ", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "def xargs(\n        cmd: str,\n        args: T.List[str],\n        cwd: T.Optional[str] = None,\n        env: T.Optional[dict] = None,\n        preexec_fn: T.Callable = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> T.List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        env=env,\n    )\n\n    out, err = p.communicate(input='\\n'.join(args).encode())\n\n    if p.returncode!= 0:\n        raise OSError(err)\n\n    return out.decode().split('\\n')\n", "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    ptys = []\n    if not isinstance(args, list):\n        args = [args]\n    for arg in args:\n        ptys.append(subprocess.Popen(\n            arg,\n            stdin=stdin,\n            stdout=subprocess.PIPE,\n            stderr=stderr,\n            close_fds=True,\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        shell: bool = False,\n) -> Iterator[str]:\n    \"\"\"\n    A simpler implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    with Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=shell) as p:\n        yield p.stdin.read()\n        if capture:\n            for line in p.stdout:\n                yield line\n        if p.wait()!= 0:\n            raise Exception('Command failed: {}'.format(' '.join(cmd)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: MutableMapping[str, str],\n        cwd: str = None,\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    # If target_concurrency is None, the command will be executed on the local\n    # host and the pty will be created on the remote host\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('XDG_CONFIG_NUM_THREADS', '1'))\n\n    if isinstance(cmd, str):\n        cmd = [cmd]\n\n    pty = None\n    try:\n        pty = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    if target_concurrency < 2:\n        raise ValueError(\n            '`target_concurrency` must be at least 2 when using xargs')\n\n    if color:\n        return ['--color'] * target_concurrency\n\n    p = multiprocessing.Pool(target_concurrency)\n    return p.map(_run_xargs, cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int, str]:\n    \"\"\"\n    A simpler implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ\n\n    # Make a pty if not already present\n    if not os.isatty(sys.stdout.fileno()):\n        tty = TTY(sys.stdout.fileno())\n        tty.set_terminal_size(*env['COLUMNS'], width=env['LINES'])\n        pty = Tee(sys.stdout.fileno(), sys.stderr.fileno(), tty)\n        pty.start()\n\n    if not os.isatty(sys.s", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    if sys.platform not in ['win32', 'darwin']:\n        return []\n\n    pty = False\n    if not color:\n        pty = True\n        color = os.environ.get('COLOR')\n\n    if color:\n        cmd = ['fg-color'] + cmd\n\n    if target_concurrency is not None:\n        cmd.extend(['-c', str(target_concurrency)])\n\n    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').splitlines()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        cwd: Optional[str] = None,\n        target_concurrency: int = None,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if not IS_WINDOWS:\n        raise NotImplementedError(\"xargs is only supported on Windows\")\n    with _Popen(\n            cmd,\n            stdout=PIPE,\n            stderr=PIPE,\n            env=env,\n            cwd=cwd,\n            preexec_fn=os.setsid,\n    ) as proc:\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out.decode('u", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n\n    \"\"\"\n    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n    p.stdin.close()\n    p.stdout.close()\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            p.returncode,''.join(cmd),\n            output=stdout.decode(),\n            error=stderr.decode()\n        )\n    if capture:\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: T.List[str],\n        cwd: T.Optional[str] = None,\n        env: T.Optional[dict] = None,\n        preexec_fn: T.Callable = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> T.List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        env=env,\n    )\n\n    out, err = p.communicate(input='\\n'.join(args).encode())\n\n    if p.returncode!= 0:\n        raise OSError(err)\n\n    return out.decode().split('\\n')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    ptys = []\n    if not isinstance(args, list):\n        args = [args]\n    for arg in args:\n        ptys.append(subprocess.Popen(\n            arg,\n            stdin=stdin,\n            stdout=subprocess.PIPE,\n            stderr=stderr,\n            close_fds=True,\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED \"\"\"\n    return _random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return _random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return _random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED shranf\"\"\"\n    return _random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[str]) -> Iterable[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return __shuffled(seq)\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return __shuffled(seq)\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file\n\n    FIXED_RANDOM_SEED is the default seed for random.shuffle when no additional deps are\n    installed in the package.\n    \"\"\"\n    random.shuffle(seq)\n    return seq\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED \"\"\"\n    return _random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return _random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return _random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED shranf\"\"\"\n    return _random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[str]) -> Iterable[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return __shuffled(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    return __shuffled(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file FIXED_RANDOM_SEED\"\"\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"\"\"Deterministically shuffle with import os typing random multiprocessing file\n\n    FIXED_RANDOM_SEED is the default seed for random.shuffle when no additional deps are\n    installed in the package.\n    \"\"\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None:\n        return None\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == \"\":\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion(\"3.3.3\"):\n        print(\"Equal to old version (3.3.3)\")\n        print(\"Using pre-3.0\")\n        result = StrictVersion(\"3.3.3\")\n    elif result >= StrictVersion(\"3.3.3\"):\n        print(\"Equal to new version (3.3.3)\")\n    elif result == StrictVersion(\"3.3.3\"):\n        print(\"Using stable version (3.3.3)\")\n    return result\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None:\n        return None\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == \"\":\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion(\"3.3.3\"):\n        print(\"Equal to old version (3.3.3)\")\n        print(\"Using pre-3.0\")\n        result = StrictVersion(\"3.3.3\")\n    elif result >= StrictVersion(\"3.3.3\"):\n        print(\"Equal to new version (3.3.3)\")\n    elif result == StrictVersion(\"3.3.3\"):\n        print(\"Using stable version (3.3.3)\")\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = subprocess.fix_cmd(cmd)\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [normalize_cmd(x) for x in cmd]\n    if sys.platform == \"win32\":\n        for ext in (\".bat\", \".cmd\"):\n            if any([cmd[0].endswith(x) for x in (\"/usr/bin\", \"/usr/local/bin\")]):\n                cmd[0] = cmd[0][:-len(ext)] + ext\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform.startswith(\"win\"):\n        executable, exe_args = cmd\n        exe_args = normalize_cmd(exe_args)\n        return executable, exe_args\n\n    executable, exe_args = cmd\n    exe_args = normalize_cmd(exe_args)\n    return executable, exe_args\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if is_win:\n        cmd = [shlex.split(i) for i in cmd]\n        for i in range(1, len(cmd)):\n            cmd[i][0] = normexe(cmd[i][0])\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        cmd = normexe(cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        cmd, _ = cmd.split(\";\", 1)\n\n    return normexe(cmd)\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if \"!\" in cmd[0]:\n        cmd = [normexe(i) for i in cmd]\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    # https://github.com/python/cpython/blob/3.6/Lib/subprocess.py#L676\n    if sys.platform == \"win32\" and \"/usr/bin/normexec\" in cmd[0]:\n        cmd[0] = cmd[0].replace(\"/usr/bin/normexec\", \"/usr/bin/norm\")\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [i for i in cmd if not i.startswith(\"#\")]\n    if sys.platform.startswith(\"win\"):\n        for i in [\"/usr/bin/norm\", \"/usr/local/bin/norm\"]:\n            cmd.append(i)\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform == \"win32\":\n        # We use \"-nologo\" here since the standard is not installed on Windows.\n        # It doesn't seem like a good idea to use \"-nosigration\", but it does not\n        # work on all systems.\n        new_cmd = (\n            cmd[0],\n            \"-nologo\",\n            *cmd[1:],\n        )\n    else:\n        new_cmd = (cmd[0],) + cmd[1:]\n    return new_cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = subprocess.fix_cmd(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [normalize_cmd(x) for x in cmd]\n    if sys.platform == \"win32\":\n        for ext in (\".bat\", \".cmd\"):\n            if any([cmd[0].endswith(x) for x in (\"/usr/bin\", \"/usr/local/bin\")]):\n                cmd[0] = cmd[0][:-len(ext)] + ext\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform.startswith(\"win\"):\n        executable, exe_args = cmd\n        exe_args = normalize_cmd(exe_args)\n        return executable, exe_args\n\n    executable, exe_args = cmd\n    exe_args = normalize_cmd(exe_args)\n    return executable, exe_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if is_win:\n        cmd = [shlex.split(i) for i in cmd]\n        for i in range(1, len(cmd)):\n            cmd[i][0] = normexe(cmd[i][0])\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        cmd = normexe(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        cmd, _ = cmd.split(\";\", 1)\n\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if \"!\" in cmd[0]:\n        cmd = [normexe(i) for i in cmd]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    # https://github.com/python/cpython/blob/3.6/Lib/subprocess.py#L676\n    if sys.platform == \"win32\" and \"/usr/bin/normexec\" in cmd[0]:\n        cmd[0] = cmd[0].replace(\"/usr/bin/normexec\", \"/usr/bin/norm\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [i for i in cmd if not i.startswith(\"#\")]\n    if sys.platform.startswith(\"win\"):\n        for i in [\"/usr/bin/norm\", \"/usr/local/bin/norm\"]:\n            cmd.append(i)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform == \"win32\":\n        # We use \"-nologo\" here since the standard is not installed on Windows.\n        # It doesn't seem like a good idea to use \"-nosigration\", but it does not\n        # work on all systems.\n        new_cmd = (\n            cmd[0],\n            \"-nologo\",\n            *cmd[1:],\n        )\n    else:\n        new_cmd = (cmd[0],) + cmd[1:]\n    return new_cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, cache.timeout)\n            return value\n        return __wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = f(*args, **kwargs)\n            return value\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache(lock)\n    decorator.key = key = lambda *a, **kw: lock.acquire()\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kwargs):\n        return cache[key] = func(*args, **kwargs)\n    cache = {}\n    lock.acquire()\n    try:\n        return wrapper\n    finally:\n        lock.release()\n", "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is already constructed, we can just return the\n                # result of calling the function.\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kw):\n        with lock:\n            return func(*args, **kw)\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n            except TypeError:\n                # functools 2.4 raises a TypeError on calling.format()\n                # on a string object. So we just return the string without\n                # modification.\n                return str(key)\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, cache.timeout)\n            return value\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = f(*args, **kwargs)\n            return value\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache(lock)\n    decorator.key = key = lambda *a, **kw: lock.acquire()\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kwargs):\n        return cache[key] = func(*args, **kwargs)\n    cache = {}\n    lock.acquire()\n    try:\n        return wrapper\n    finally:\n        lock.release()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is already constructed, we can just return the\n                # result of calling the function.\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kw):\n        with lock:\n            return func(*args, **kw)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n            except TypeError:\n                # functools 2.4 raises a TypeError on calling.format()\n                # on a string object. So we just return the string without\n                # modification.\n                return str(key)\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a time parameter and\n    #     return the value for that time on that parameter, or raise ValueError\n    # XXX: ttl should be an integer, not a float\n    def wrapper(fn):\n        cached = _Cached(fn, maxsize, ttl, timer)\n        if typed:\n            cached.__name__ = fn.__name__\n        return cached\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # You can make this decorator successor the actual decorator\n    # that makes things smarter:\n    # @cache.ttl_cache(maxsize=128, ttl=60)\n    def decorator(fn):\n        return Cache(fn, maxsize, ttl, timer, typed)\n    return decorator\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        cached = _Cached(f, ttl, timer)\n        return Cache(cached, maxsize, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = value = func(*args, **kwargs)\n            else:\n                if timer() - cache_value[0] >= ttl:\n                    cache.pop(key, None)\n                    cache[key] = value\n            return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(func)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that return the values to return\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                if timer() - cached[key] >= ttl:\n                    cached[key] = fn(*args, **kwargs)\n                else:\n                    cached[key] = fn(*args, **kwargs)\n            return cached[key]\n        return wrapped\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute\n    #      of a Mapping, but does not inherit from dict, so we need to make\n    #      this more complicated to be compatible w/ custom cache that returns\n    #      a custom mapping subclass.\n    if maxsize is None or maxsize < 0:\n        return _wrapper(typed)\n    else:\n        return _wrapper(Memoize(maxsize, ttl, timer))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) that return\n    #      the values that it wraps up in the callable list and the time it\n    #      called it.  If a function returns a value that is older than the\n    #      timeout, it will be cached and returned as a result of the wrapping\n    #      function.  Otherwise, the result of the wrapping function is cached.\n    cache = {}\n\n    def wrapper(func):\n        def newfunc(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                if key not in cache:\n                    cache[key] = func(*args, **kwargs)\n                value, ttl = cache[key]\n            except KeyError:\n                value, ttl = func(*args, **kwargs), 0\n            if value", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl, typed=typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a mapping of callables to results\n    cache = {}\n    def wrapper(f):\n        cache[f] = TTLCache(maxsize, ttl, timer, typed)\n        return f\n    return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a time parameter and\n    #     return the value for that time on that parameter, or raise ValueError\n    # XXX: ttl should be an integer, not a float\n    def wrapper(fn):\n        cached = _Cached(fn, maxsize, ttl, timer)\n        if typed:\n            cached.__name__ = fn.__name__\n        return cached\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # You can make this decorator successor the actual decorator\n    # that makes things smarter:\n    # @cache.ttl_cache(maxsize=128, ttl=60)\n    def decorator(fn):\n        return Cache(fn, maxsize, ttl, timer, typed)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        cached = _Cached(f, ttl, timer)\n        return Cache(cached, maxsize, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = value = func(*args, **kwargs)\n            else:\n                if timer() - cache_value[0] >= ttl:\n                    cache.pop(key, None)\n                    cache[key] = value\n            return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that return the values to return\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                if timer() - cached[key] >= ttl:\n                    cached[key] = fn(*args, **kwargs)\n                else:\n                    cached[key] = fn(*args, **kwargs)\n            return cached[key]\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute\n    #      of a Mapping, but does not inherit from dict, so we need to make\n    #      this more complicated to be compatible w/ custom cache that returns\n    #      a custom mapping subclass.\n    if maxsize is None or maxsize < 0:\n        return _wrapper(typed)\n    else:\n        return _wrapper(Memoize(maxsize, ttl, timer))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) that return\n    #      the values that it wraps up in the callable list and the time it\n    #      called it.  If a function returns a value that is older than the\n    #      timeout, it will be cached and returned as a result of the wrapping\n    #      function.  Otherwise, the result of the wrapping function is cached.\n    cache = {}\n\n    def wrapper(func):\n        def newfunc(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                if key not in cache:\n                    cache[key] = func(*args, **kwargs)\n                value, ttl = cache[key]\n            except KeyError:\n                value, ttl = func(*args, **kwargs), 0\n            if value", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl, typed=typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a mapping of callables to results\n    cache = {}\n    def wrapper(f):\n        cache[f] = TTLCache(maxsize, ttl, timer, typed)\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "def mru_cache(maxsize=128, typed=False):\n    # f_ is the actual function, wrapped by @memoize\n    def f_(f):\n        return MruCache(f, maxsize, typed)\n    return f_\n", "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache is a new API that does not inherit from Cache and does\n    #      the actual caching, so this function must be removed.\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # f_globals is the global namespace for functions\n    # f_locals is the local namespace for functions\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize, typed)\n        if hasattr(func, '__code__'):\n            cached_func.__code__ = func.__code__\n        if hasattr(func, '__globals__'):\n            cached_func.__globals__ = func.__globals__\n        if hasattr(func, '__name__'):\n            cached_func.__name__ = func.__name__\n        return cached_func\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # flip the function argument so that the wrapper can be used on callables\n    func = lambda *args: args[0]\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(sorted(kwargs.items())))\n        try:\n            return cache[key]\n        except KeyError:\n            ret = cache[key] = wrapper(*args, **kwargs)\n            return ret\n\n    def clear_cache():\n        cache.clear()\n\n    cache = {}\n    wrapper.clear_cache = clear_cache\n    return wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = {}\n\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            if not cached:\n                cached[args[0]] = func(*args, **kwargs)\n            key = (args, frozenset(sorted(cached.items())))\n            try:\n                return cached[args[0]]\n            except KeyError:\n                if len(cached) >= maxsize:\n                    cached.popitem(last=False)\n                cached[args[0]] = func(*args, **kwargs)\n                return cached[args[0]]\n        return _wrapped\n    return _wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache doesn't take arguments that are passed to the decorator\n    #      when creating the decorator\n    def _wrapper(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return _wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _MRUWrapper(typed)\n    else:\n        return _MRUWrapper(maxsize)\n", "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = MruCache(maxsize, typed)\n        if hasattr(func, '__wrapped__'):\n            func.__wrapped__ = cached\n        else:\n            # functools.lru_cache does not support functools.lru_cache (#2666)\n            func.__wrapped__ = cached(func)\n        return func\n    return _wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # f_ is the actual function, wrapped by @memoize\n    def f_(f):\n        return MruCache(f, maxsize, typed)\n    return f_\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache is a new API that does not inherit from Cache and does\n    #      the actual caching, so this function must be removed.\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # f_globals is the global namespace for functions\n    # f_locals is the local namespace for functions\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize, typed)\n        if hasattr(func, '__code__'):\n            cached_func.__code__ = func.__code__\n        if hasattr(func, '__globals__'):\n            cached_func.__globals__ = func.__globals__\n        if hasattr(func, '__name__'):\n            cached_func.__name__ = func.__name__\n        return cached_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # flip the function argument so that the wrapper can be used on callables\n    func = lambda *args: args[0]\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(sorted(kwargs.items())))\n        try:\n            return cache[key]\n        except KeyError:\n            ret = cache[key] = wrapper(*args, **kwargs)\n            return ret\n\n    def clear_cache():\n        cache.clear()\n\n    cache = {}\n    wrapper.clear_cache = clear_cache\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = {}\n\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            if not cached:\n                cached[args[0]] = func(*args, **kwargs)\n            key = (args, frozenset(sorted(cached.items())))\n            try:\n                return cached[args[0]]\n            except KeyError:\n                if len(cached) >= maxsize:\n                    cached.popitem(last=False)\n                cached[args[0]] = func(*args, **kwargs)\n                return cached[args[0]]\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache doesn't take arguments that are passed to the decorator\n    #      when creating the decorator\n    def _wrapper(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _MRUWrapper(typed)\n    else:\n        return _MRUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = MruCache(maxsize, typed)\n        if hasattr(func, '__wrapped__'):\n            func.__wrapped__ = cached\n        else:\n            # functools.lru_cache does not support functools.lru_cache (#2666)\n            func.__wrapped__ = cached(func)\n        return func\n    return _wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _wrapper\n    else:\n        # XXX optimization: only save the function if its arguments are mutable\n        if not typed:\n            return _wrapper\n        else:\n            # XXX optimization: save the function when it is given a type\n            def _wrapper(func):\n                cache = LRUCache(maxsize)\n                @wraps(func)\n                def wrapper(*args, **kwargs):\n                    key = _key(func, args, kwargs)\n                    if key not in cache:\n                        cache[key] = func(*args, **kwargs)\n                    return cache[key]\n                return wrapper\n            return _wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return None\n    else:\n        # Memoize is a callable that will always return the same value\n        # even if the cached value is reused.\n        # This is for efficiency in the most common case (only\n        # simple cases where the cache is already constructed).\n        memo = LruCache(maxsize)\n        def wrapper(func):\n            def wrapped(*args):\n                key = (args, frozenset(sorted(args)))\n                try:\n                    return memo[key]\n                except KeyError:\n                    ret = memo[key] = func(*args)\n                    return ret\n            return wrapped\n        if typed:\n            wrapper.__name__ = func.__name__\n            wrapper.__doc__ = fun", "def lru_cache(maxsize=128, typed=False):\n    # This function must be wrapped with @lru_cache, because it must accept\n    # arguments that would cause the function to be called with the same\n    # arguments as the function being wrapped. To prevent this, wrap the\n    # wrapped function with @memoize. See https://code.google.com/p/memoize/\n    # about using this decorator.\n\n    def wrapper(func):\n        cached_func = _Cached(func, maxsize)\n        if typed:\n            cached_func.__dict__ = func.__dict__\n        return cached_func\n\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _TypedCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    # fetch the function from the namespace\n    cached = _lru_cache.cache.get(maxsize)\n    if cached is not None:\n        return cached\n\n    def decorator(func):\n        # store the result of the decorated function\n        _lru_cache.cache[maxsize] = (func, func.__name__)\n        # return the result of the decorated function\n        return func\n\n    if typed:\n        return decorator\n    else:\n        return decorator(func)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return cached_fn\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "def lru_cache(maxsize=128, typed=False):\n    # Memoize is used to optimize operational performance\n    # (disable the cache in the future)\n    memoize = None\n\n    def wrapper(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = fn(*args, **kwargs)\n                return ret\n\n        def memoize_wrapper(*args, **kwargs):\n            if memoize is not None:\n                return memoize[key]\n            else:\n                ret = wrapped(*args, **kwargs)\n                cache[key] = ret\n                return ret\n\n        return wrapped if typed el", "def lru_cache(maxsize=128, typed=False):\n    # f = lru_cache(maxsize)(f)\n    def f(fn):\n        return LRUWrapper(fn, maxsize, typed)\n    return f\n", "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in Python 3\n    return _Cache(maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _wrapper\n    else:\n        # XXX optimization: only save the function if its arguments are mutable\n        if not typed:\n            return _wrapper\n        else:\n            # XXX optimization: save the function when it is given a type\n            def _wrapper(func):\n                cache = LRUCache(maxsize)\n                @wraps(func)\n                def wrapper(*args, **kwargs):\n                    key = _key(func, args, kwargs)\n                    if key not in cache:\n                        cache[key] = func(*args, **kwargs)\n                    return cache[key]\n                return wrapper\n            return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return None\n    else:\n        # Memoize is a callable that will always return the same value\n        # even if the cached value is reused.\n        # This is for efficiency in the most common case (only\n        # simple cases where the cache is already constructed).\n        memo = LruCache(maxsize)\n        def wrapper(func):\n            def wrapped(*args):\n                key = (args, frozenset(sorted(args)))\n                try:\n                    return memo[key]\n                except KeyError:\n                    ret = memo[key] = func(*args)\n                    return ret\n            return wrapped\n        if typed:\n            wrapper.__name__ = func.__name__\n            wrapper.__doc__ = fun", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # This function must be wrapped with @lru_cache, because it must accept\n    # arguments that would cause the function to be called with the same\n    # arguments as the function being wrapped. To prevent this, wrap the\n    # wrapped function with @memoize. See https://code.google.com/p/memoize/\n    # about using this decorator.\n\n    def wrapper(func):\n        cached_func = _Cached(func, maxsize)\n        if typed:\n            cached_func.__dict__ = func.__dict__\n        return cached_func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _TypedCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # fetch the function from the namespace\n    cached = _lru_cache.cache.get(maxsize)\n    if cached is not None:\n        return cached\n\n    def decorator(func):\n        # store the result of the decorated function\n        _lru_cache.cache[maxsize] = (func, func.__name__)\n        # return the result of the decorated function\n        return func\n\n    if typed:\n        return decorator\n    else:\n        return decorator(func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return cached_fn\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # Memoize is used to optimize operational performance\n    # (disable the cache in the future)\n    memoize = None\n\n    def wrapper(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = fn(*args, **kwargs)\n                return ret\n\n        def memoize_wrapper(*args, **kwargs):\n            if memoize is not None:\n                return memoize[key]\n            else:\n                ret = wrapped(*args, **kwargs)\n                cache[key] = ret\n                return ret\n\n        return wrapped if typed el", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # f = lru_cache(maxsize)(f)\n    def f(fn):\n        return LRUWrapper(fn, maxsize, typed)\n    return f\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in Python 3\n    return _Cache(maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cache = LFUCache(maxsize, typed)\n        return cache.wrap(fn)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # XXX: cache is not thread safe with multiprocessing\n    if maxsize <= 0:\n        return _wrapper\n    else:\n        return _LFUWrapper(maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return _wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # You can access the function at any time without having to create a new\n    # function.  The parameter is the number of items to cache.\n    # The return value is a function that returns the result of calling\n    # lfu_wrapper(item) with the same parameters as lfu_wrapper(item).\n\n    def wrapper(item):\n        key = lfu_wrapper(item)\n        try:\n            cached_value = cache[key]\n        except KeyError:\n            cached_value = cache[key] = lfu_wrapper(item)\n        return cached_value\n\n    def wrapper_typed(item):\n        key = lfu_wrapper(item)\n        try:\n            return cache[key][0]\n        except KeyError:\n            value = lfu_wrapper(item)\n            cache[key] = (value, 1)\n            return value\n\n    if maxsize is None:\n        return wrapper\n    else:\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return Cache(function, maxsize, typed)\n    return _wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    # fetch the function to be wrapped\n    cache = _LFU_CACHE\n    if cache is None:\n        def lfu_cache(fn, maxsize, typed):\n            cache = _LFU_CACHE = _LFU_CACHEs.get((fn, maxsize, typed))\n            if cache is None:\n                cache = _LFU_CACHE = LfuCache(fn, maxsize, typed)\n            return cache\n    return cache\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cache = LFUCache(maxsize, typed)\n        return cache.wrap(fn)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # XXX: cache is not thread safe with multiprocessing\n    if maxsize <= 0:\n        return _wrapper\n    else:\n        return _LFUWrapper(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # You can access the function at any time without having to create a new\n    # function.  The parameter is the number of items to cache.\n    # The return value is a function that returns the result of calling\n    # lfu_wrapper(item) with the same parameters as lfu_wrapper(item).\n\n    def wrapper(item):\n        key = lfu_wrapper(item)\n        try:\n            cached_value = cache[key]\n        except KeyError:\n            cached_value = cache[key] = lfu_wrapper(item)\n        return cached_value\n\n    def wrapper_typed(item):\n        key = lfu_wrapper(item)\n        try:\n            return cache[key][0]\n        except KeyError:\n            value = lfu_wrapper(item)\n            cache[key] = (value, 1)\n            return value\n\n    if maxsize is None:\n        return wrapper\n    else:\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return Cache(function, maxsize, typed)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # fetch the function to be wrapped\n    cache = _LFU_CACHE\n    if cache is None:\n        def lfu_cache(fn, maxsize, typed):\n            cache = _LFU_CACHE = _LFU_CACHEs.get((fn, maxsize, typed))\n            if cache is None:\n                cache = _LFU_CACHE = LfuCache(fn, maxsize, typed)\n            return cache\n    return cache\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except StopIteration:\n        raise KeyError\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCacheError(\n            'popitem() called with {}, but cache was empty.'.format(e))\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): cache is already empty\")\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except StopIteration:\n        raise KeyError\n", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCacheError(\n            'popitem() called with {}, but cache was empty.'.format(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): cache is already empty\")\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.store(key(*args, **kw), result)\n            return result\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(func, key, lock)\n        def newfunc(*args, **kwds):\n            return memo(*args, **kwds)\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(self, *args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def wrapper(self, *args, **kwargs):\n        with lock:\n            return self._call_with_cache(func, self, *args, **kwargs)\n\n    return wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return _CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _wrapped(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(key, func)\n\n        def wrapper(self, *args, **kw):\n            if memo is not None:\n                result, time = memo\n                if time > timeout:\n                    with lock:\n                        result.append(self._calling_method(*args, **kw))\n                    return result[-1]\n            result = func(self, *args, **kw)\n            return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.store(key(*args, **kw), result)\n            return result\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(func, key, lock)\n        def newfunc(*args, **kwds):\n            return memo(*args, **kwds)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(self, *args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def wrapper(self, *args, **kwargs):\n        with lock:\n            return self._call_with_cache(func, self, *args, **kwargs)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return _CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _wrapped(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(key, func)\n\n        def wrapper(self, *args, **kw):\n            if memo is not None:\n                result, time = memo\n                if time > timeout:\n                    with lock:\n                        result.append(self._calling_method(*args, **kw))\n                    return result[-1]\n            result = func(self, *args, **kw)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        s = e.get_formatted_string()\n    else:\n        s = str(e)\n\n    if max_level is not None and len(s) > max_level:\n        s = s[:max_level] + '...'\n\n    if max_path_level is not None and len(s) > max_path_level:\n        s = s[:max_path_level] + '...'\n\n    return s\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    return super(SolBase, cls).extostr(e, max_level, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n\".format(cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        if e.get_traceback() is None:\n            tb = None\n        else:\n            tb = e.get_traceback()\n    else:\n        tb = e\n    if tb is not None:\n        tb = '\\n'.join(tb)\n        s = 'SolBaseException:'+ cls.__name__ + ':\\n' + tb\n    else:\n        s = cls.__name__ + ':'+ str(e)\n    if max_level > 0 and max_path_level > 0:\n        if tb is not None:\n            s = s + '\\n' + tb\n        else:\n            s = s + '\\n' + '-' * max_path_level\n    return s\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n\n    if isinstance(e, SolException):\n        exc_msg = cls._get_exc_msg(e, max_level, max_path_level)\n        if exc_msg:\n            return str(e) + \": \" + exc_msg\n        else:\n            return str(e)\n\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, socket.error) and e.errno == errno.ECONNABORTED:\n        # Connection aborted to the server\n        return ''\n    return str(e).replace('\\n', '\\n    ')\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        e = Exception(e)\n    return super(SolBase, cls).extostr(e, max_level=max_level, max_path_level=max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return e.format_exc()\n\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    if isinstance(e, SolException):\n        # Don't print anything to stderr\n        return \"{}\\n{}\".format(\n            SolBaseException.extostr(self, e, max_level, max_path_level)\n            or '',\n            e.args[0] if e.args else ''\n        )\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        s = e.get_formatted_string()\n    else:\n        s = str(e)\n\n    if max_level is not None and len(s) > max_level:\n        s = s[:max_level] + '...'\n\n    if max_path_level is not None and len(s) > max_path_level:\n        s = s[:max_path_level] + '...'\n\n    return s\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    return super(SolBase, cls).extostr(e, max_level, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n\".format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        if e.get_traceback() is None:\n            tb = None\n        else:\n            tb = e.get_traceback()\n    else:\n        tb = e\n    if tb is not None:\n        tb = '\\n'.join(tb)\n        s = 'SolBaseException:'+ cls.__name__ + ':\\n' + tb\n    else:\n        s = cls.__name__ + ':'+ str(e)\n    if max_level > 0 and max_path_level > 0:\n        if tb is not None:\n            s = s + '\\n' + tb\n        else:\n            s = s + '\\n' + '-' * max_path_level\n    return s\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n\n    if isinstance(e, SolException):\n        exc_msg = cls._get_exc_msg(e, max_level, max_path_level)\n        if exc_msg:\n            return str(e) + \": \" + exc_msg\n        else:\n            return str(e)\n\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, socket.error) and e.errno == errno.ECONNABORTED:\n        # Connection aborted to the server\n        return ''\n    return str(e).replace('\\n', '\\n    ')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        e = Exception(e)\n    return super(SolBase, cls).extostr(e, max_level=max_level, max_path_level=max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return e.format_exc()\n\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    if isinstance(e, SolException):\n        # Don't print anything to stderr\n        return \"{}\\n{}\".format(\n            SolBaseException.extostr(self, e, max_level, max_path_level)\n            or '',\n            e.args[0] if e.args else ''\n        )\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = open(file_name, 'ab')\n        if isinstance(text_buffer, bytes):\n            file_handle.write(text_buffer.decode(encoding))\n        else:\n            file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except IOError as e:\n        return e.errno\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.info(\"Appending text to file: {}\".format(file_name))\n\n    if not overwrite and isfile(file_name):\n        logger.info(\"File {} already exists\".format(file_name))\n        return 0\n\n    with open(file_name, 'wb') as file_pointer:\n        file_pointer.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.info('File \"%s\" already exists. Skipping.', file_name)\n        return 0\n\n    if not os.path.isdir(os.path.dirname(file_name)):\n        logger.info('Directory \"%s\" does not exist. Skipping.', os.path.dirname(file_name))\n        return 0\n\n    if os.path.isfile(file_name):\n        raise Exception('File \"%s\" already exists. Use overwrite=True to overwrite it.' % file_name)\n\n    with open(file_name, 'wb') as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"appending text to file: {}\".format(file_name))\n    if not overwrite and os.path.isfile(file_name):\n        logger.error(\"File '{}' already exists\".format(file_name))\n        return 0\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(text_buffer, bytes):\n        raise TypeError(\"text_buffer must be of type {}\".format(bytes))\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be of type str\")\n    if not overwrite and isfile(file_name):\n        logger.warning(\"Overwriting {}\".format(file_name))\n        return 0\n    with open(file_name, 'wb') as f:\n        logger.debug(\"Writing {} to {}\".format(text_buffer, file_name))\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return file_to_binary(file_name, encoding, overwrite) + text_buffer\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise FileExistsError(\"File {} already exists\".format(file_name))\n\n    logger.debug(\"Writing text to file: {}\".format(file_name))\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.warning(\"Overwriting file %s\", file_name)\n        return 0\n\n    if isinstance(text_buffer, str):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n\n    if isinstance(text_buffer, bytes):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer)\n        return len(text_buffer)\n\n    return 0\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = open(file_name, 'ab')\n        if isinstance(text_buffer, bytes):\n            file_handle.write(text_buffer.decode(encoding))\n        else:\n            file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except IOError as e:\n        return e.errno\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.info(\"Appending text to file: {}\".format(file_name))\n\n    if not overwrite and isfile(file_name):\n        logger.info(\"File {} already exists\".format(file_name))\n        return 0\n\n    with open(file_name, 'wb') as file_pointer:\n        file_pointer.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.info('File \"%s\" already exists. Skipping.', file_name)\n        return 0\n\n    if not os.path.isdir(os.path.dirname(file_name)):\n        logger.info('Directory \"%s\" does not exist. Skipping.', os.path.dirname(file_name))\n        return 0\n\n    if os.path.isfile(file_name):\n        raise Exception('File \"%s\" already exists. Use overwrite=True to overwrite it.' % file_name)\n\n    with open(file_name, 'wb') as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"appending text to file: {}\".format(file_name))\n    if not overwrite and os.path.isfile(file_name):\n        logger.error(\"File '{}' already exists\".format(file_name))\n        return 0\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(text_buffer, bytes):\n        raise TypeError(\"text_buffer must be of type {}\".format(bytes))\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be of type str\")\n    if not overwrite and isfile(file_name):\n        logger.warning(\"Overwriting {}\".format(file_name))\n        return 0\n    with open(file_name, 'wb') as f:\n        logger.debug(\"Writing {} to {}\".format(text_buffer, file_name))\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return file_to_binary(file_name, encoding, overwrite) + text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise FileExistsError(\"File {} already exists\".format(file_name))\n\n    logger.debug(\"Writing text to file: {}\".format(file_name))\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.warning(\"Overwriting file %s\", file_name)\n        return 0\n\n    if isinstance(text_buffer, str):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n\n    if isinstance(text_buffer, bytes):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer)\n        return len(text_buffer)\n\n    return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except Exception:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except IOError as e:\n        logger.error(e)\n        return None\n    else:\n        text = file_handle.read()\n        file_handle.close()\n        logger.info(\"{} loaded successfully from {}.\".format(\n            file_name, self.get_current_dir()))\n        return text\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            bin_buf = f.read()\n        return text_type(bin_buf, encoding=encoding)\n    except FileNotFoundError as err:\n        logger.error(\"File not found: %s\", err)\n        return None\n    except UnicodeDecodeError as err:\n        logger.error(\"Invalid encoding for file: %s\", err)\n        return None\n    except EnvironmentError as err:\n        logger.error(\"Error reading file: %s\", err)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    text_buffer = None\n    try:\n        # logger.debug(\"Opening file {0} with encoding {1}\".format(file_name, encoding))\n        text_buffer = codecs.open(file_name, 'r', encoding)\n    except UnicodeDecodeError as e:\n        logger.error(\"Encoding error {0}\".format(e))\n    except IOError as e:\n        logger.error(\"File error {0}\".format(e))\n\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"rb\", encoding).read()\n    except Exception as e:\n        logger.error(\"Could not read file {}. Exception was {}\".format(file_name, e))\n        text_buffer = None\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, \"rb\", encoding)\n        text = file.read()\n        file.close()\n        return text\n    except Exception:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            text_buf = f.read().decode(encoding)\n        return text_buf\n    except IOError as e:\n        logger.error('Unable to load file %s: %s', file_name, e.strerror)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"rb\") as f:\n            text_buffer = f.read().decode(encoding)\n    except IOError:\n        text_buffer = None\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            text_buffer = f.read()\n    except (IOError, OSError, UnicodeDecodeError):\n        logger.exception(\"Failed to read file '%s'.\", file_name)\n    return text_buffer\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except UnicodeDecodeError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except Exception:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except IOError as e:\n        logger.error(e)\n        return None\n    else:\n        text = file_handle.read()\n        file_handle.close()\n        logger.info(\"{} loaded successfully from {}.\".format(\n            file_name, self.get_current_dir()))\n        return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            bin_buf = f.read()\n        return text_type(bin_buf, encoding=encoding)\n    except FileNotFoundError as err:\n        logger.error(\"File not found: %s\", err)\n        return None\n    except UnicodeDecodeError as err:\n        logger.error(\"Invalid encoding for file: %s\", err)\n        return None\n    except EnvironmentError as err:\n        logger.error(\"Error reading file: %s\", err)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    text_buffer = None\n    try:\n        # logger.debug(\"Opening file {0} with encoding {1}\".format(file_name, encoding))\n        text_buffer = codecs.open(file_name, 'r', encoding)\n    except UnicodeDecodeError as e:\n        logger.error(\"Encoding error {0}\".format(e))\n    except IOError as e:\n        logger.error(\"File error {0}\".format(e))\n\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"rb\", encoding).read()\n    except Exception as e:\n        logger.error(\"Could not read file {}. Exception was {}\".format(file_name, e))\n        text_buffer = None\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, \"rb\", encoding)\n        text = file.read()\n        file.close()\n        return text\n    except Exception:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            text_buf = f.read().decode(encoding)\n        return text_buf\n    except IOError as e:\n        logger.error('Unable to load file %s: %s', file_name, e.strerror)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"rb\") as f:\n            text_buffer = f.read().decode(encoding)\n    except IOError:\n        text_buffer = None\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            text_buffer = f.read()\n    except (IOError, OSError, UnicodeDecodeError):\n        logger.exception(\"Failed to read file '%s'.\", file_name)\n    return text_buffer\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    logger.debug(\"file name is %s\", file_name)\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        raise TypeError('file_name must be a string!')\n    if not is_binary(file_name):\n        raise ValueError('file_name must be a binary!')\n\n    return os.path.exists(file_name)\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    logger.debug(\"file name is %s\", file_name)\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        raise TypeError('file_name must be a string!')\n    if not is_binary(file_name):\n        raise ValueError('file_name must be a binary!')\n\n    return os.path.exists(file_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.INFO)\n    logging.getLogger().propagate = False\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = _emit_logging\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.NOTSET)\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.WARNING)\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.config.dictConfig(cls._default_config)\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    if cls._stdout_handler:\n        sys.stdout = cls._stdout_handler\n        cls._stdout_handler.close()\n        cls._stdout_handler = None\n    if cls._stderr_handler:\n        sys.stderr = cls._stderr_handler\n        cls._stderr_handler.close()\n        cls._stderr_handler = None\n", "def _reset_logging(cls):\n    sys.modules[\"pysolbase.utils\"] = sys.modules[\"__main__\"]\n\n    sys.modules[\"datetime\"] = datetime\n    sys.modules[\"time\"] = time\n    sys.modules[\"pysolbase.utils.time\"] = pysolbase.utils.time\n\n    sys.modules.pop(\"pysolbase.utils\", None)\n    sys.modules.pop(\"datetime\", None)\n    sys.modules.pop(\"time\", None)\n\n    sys.modules[\"gevent\"] = sys.modules[\"_gevent\"]\n    sys.modules[\"gevent.monkey\"] = sys.modules[\"_gevent\"].monkey\n    sys.modules.pop(\"_gevent\", None)\n    sys.modules.pop(\"gevent.socket\", None)\n\n    if \"_pysolbase\" in sys.modules:\n        del sys.modules[\"_pysolbase\"]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.INFO)\n    logging.getLogger().propagate = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = _emit_logging\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.NOTSET)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.WARNING)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.config.dictConfig(cls._default_config)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if cls._stdout_handler:\n        sys.stdout = cls._stdout_handler\n        cls._stdout_handler.close()\n        cls._stdout_handler = None\n    if cls._stderr_handler:\n        sys.stderr = cls._stderr_handler\n        cls._stderr_handler.close()\n        cls._stderr_handler = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    sys.modules[\"pysolbase.utils\"] = sys.modules[\"__main__\"]\n\n    sys.modules[\"datetime\"] = datetime\n    sys.modules[\"time\"] = time\n    sys.modules[\"pysolbase.utils.time\"] = pysolbase.utils.time\n\n    sys.modules.pop(\"pysolbase.utils\", None)\n    sys.modules.pop(\"datetime\", None)\n    sys.modules.pop(\"time\", None)\n\n    sys.modules[\"gevent\"] = sys.modules[\"_gevent\"]\n    sys.modules[\"gevent.monkey\"] = sys.modules[\"_gevent\"].monkey\n    sys.modules.pop(\"_gevent\", None)\n    sys.modules.pop(\"gevent.socket\", None)\n\n    if \"_pysolbase\" in sys.modules:\n        del sys.modules[\"_pysolbase\"]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return html.Li\n", "def _getTargetClass(self):\n    return JSON\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return DataTarget\n", "def _getTargetClass(self):\n    return ast.ExceptHandler\n", "def _getTargetClass(self):\n    return TextTestResult\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Li\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JSON\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DataTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return ast.ExceptHandler\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) < 2:\n            result.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i][0] == prefix:\n                    i = i - 1\n                    break\n            result.append(o[i])\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n    return [o for o in orderings if o!= []]\n", "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = 0\n    for o in orderings:\n        if len(o) <= prev_end:\n            merged.append(o)\n            prev_end = len(o)\n        else:\n            merged[prev_end] = o\n            prev_end += 1\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i])\n                break\n    result.append(suffix)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n\n    # Create a new orderings array with the same shape as the input\n    orderings = np.array(orderings)\n\n    # Merge the indices of the input array with the existing orderings\n    merged = np.zeros_like(orderings, dtype=int)\n    merged[np.in1d(orderings[:, 0], orderings[:, 1])] = orderings[:, 0]\n\n    # Replace the input array with the correct shape and return\n    return merged.reshape(orderings.shape[:-1] + (-1,))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) < 2:\n            result.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i][0] == prefix:\n                    i = i - 1\n                    break\n            result.append(o[i])\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n    return [o for o in orderings if o!= []]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = 0\n    for o in orderings:\n        if len(o) <= prev_end:\n            merged.append(o)\n            prev_end = len(o)\n        else:\n            merged[prev_end] = o\n            prev_end += 1\n    return merged\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i])\n                break\n    result.append(suffix)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n\n    # Create a new orderings array with the same shape as the input\n    orderings = np.array(orderings)\n\n    # Merge the indices of the input array with the existing orderings\n    merged = np.zeros_like(orderings, dtype=int)\n    merged[np.in1d(orderings[:, 0], orderings[:, 1])] = orderings[:, 0]\n\n    # Replace the input array with the correct shape and return\n    return merged.reshape(orderings.shape[:-1] + (-1,))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    spec = _implements_advice(object)\n    if spec is _empty:\n        return None\n    else:\n        return InterfaceClass(spec)\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _empty\n    else:\n        return InterfaceSpecification(spec, None)\n", "def directlyProvidedBy(object):\n    spec = getObjectSpecification(object)\n    if spec is None:\n        return _empty\n    return spec.directlyProvidedBy(object)\n", "def directlyProvidedBy(object):\n    provided = getattr(object, '__provides__', None)\n    if provided is not None:\n        return provided\n    direct = _implementsOnly(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    raise TypeError(\"%s has no direct properties\" % (object,))\n", "def directlyProvidedBy(object):\n    provided = getattr(object, '__provides__', None)\n    if provided is not None:\n        return provided\n    direct = _implements_name(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    # XXX maybe append a _classProvides descriptor?\n    provided = _implements_advice(object)\n    if provided is not None:\n        object.__provides__ = provided\n        return provided\n    raise TypeError(\n        \"%s has no direct interface or implements method\" % (object,))\n", "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    # XXX Should probably check that object is a Proxy or something...\n    if issubclass(object, Proxy) and not isabstract(object):\n        return providedBy(object.__class__)\n", "def directlyProvidedBy(object):\n    direct = _implements(object, Interface, implementedBy)\n    if direct is _empty:\n        return None\n    else:\n        return direct\n", "def directlyProvidedBy(object):\n    spec = ObjectSpecification(direct, None)\n    return spec.providedBy(object)\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return None\n    else:\n        return InterfaceClass(spec)\n", "def directlyProvidedBy(object):\n    spec = ObjectSpecification(direct, None)\n    return providedBy(object, spec)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    spec = _implements_advice(object)\n    if spec is _empty:\n        return None\n    else:\n        return InterfaceClass(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _empty\n    else:\n        return InterfaceSpecification(spec, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = getObjectSpecification(object)\n    if spec is None:\n        return _empty\n    return spec.directlyProvidedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    provided = getattr(object, '__provides__', None)\n    if provided is not None:\n        return provided\n    direct = _implementsOnly(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    raise TypeError(\"%s has no direct properties\" % (object,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    provided = getattr(object, '__provides__', None)\n    if provided is not None:\n        return provided\n    direct = _implements_name(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    # XXX maybe append a _classProvides descriptor?\n    provided = _implements_advice(object)\n    if provided is not None:\n        object.__provides__ = provided\n        return provided\n    raise TypeError(\n        \"%s has no direct interface or implements method\" % (object,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    # XXX Should probably check that object is a Proxy or something...\n    if issubclass(object, Proxy) and not isabstract(object):\n        return providedBy(object.__class__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    direct = _implements(object, Interface, implementedBy)\n    if direct is _empty:\n        return None\n    else:\n        return direct\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = ObjectSpecification(direct, None)\n    return spec.providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return None\n    else:\n        return InterfaceClass(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = ObjectSpecification(direct, None)\n    return providedBy(object, spec)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Base)]\n", "def minimalBases(classes):\n    # the default implementation is to sort the classes into the order\n    # that they appear in the original class list.  In this case, the\n    # classes are minimized in the order they appear in the original list.\n    classes.sort()\n    bases = []\n    for c in classes:\n        while c.__bases__:\n            c = c.__bases__[0]\n        bases.append(c)\n    return bases\n", "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.priority)\n", "def minimalBases(classes):\n    minBases = []\n    for classe in classes:\n        for base in classe.__mro__[1:]:\n            if base not in minBases:\n                minBases.append(base)\n    return minBases\n", "def minimalBases(classes):\n    \"Reduce a list of base classes to its ordered minimative equivalent with\"\n    return sorted(classes, key=lambda cls: cls.order)\n", "def minimalBases(classes):\n    \" the ordered minimum equivalent of\"\n    classes.sort()\n    return [c for c in classes if issubclass(c, ClassRoot)]\n", "def minimalBases(classes):\n    \"The ordered minimum equivalent with\"\n    classes.sort()\n    i = 0\n    while i < len(classes) and classes[i].__module__ == \"__main__\":\n        i += 1\n    return classes[:i]\n", "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted([c for c in classes if issubclass(c, Base)])\n    if len(bases) == 1:\n        return bases\n    elif len(bases) == 0:\n        raise ValueError(\"Cannot find a base class whose minimal \"\n                         \"ordering is equal to any base class\")\n    elif len(bases) == 2:\n        return classes[0], classes[1]\n    else:\n        i = len(bases) - 1\n        while i >= 0 and bases[i].__class__ is not Base:\n            i -= 1\n        return bases[0], bases[i]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    # the default implementation is to sort the classes into the order\n    # that they appear in the original class list.  In this case, the\n    # classes are minimized in the order they appear in the original list.\n    classes.sort()\n    bases = []\n    for c in classes:\n        while c.__bases__:\n            c = c.__bases__[0]\n        bases.append(c)\n    return bases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.priority)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBases = []\n    for classe in classes:\n        for base in classe.__mro__[1:]:\n            if base not in minBases:\n                minBases.append(base)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"Reduce a list of base classes to its ordered minimative equivalent with\"\n    return sorted(classes, key=lambda cls: cls.order)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \" the ordered minimum equivalent of\"\n    classes.sort()\n    return [c for c in classes if issubclass(c, ClassRoot)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"The ordered minimum equivalent with\"\n    classes.sort()\n    i = 0\n    while i < len(classes) and classes[i].__module__ == \"__main__\":\n        i += 1\n    return classes[:i]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted([c for c in classes if issubclass(c, Base)])\n    if len(bases) == 1:\n        return bases\n    elif len(bases) == 0:\n        raise ValueError(\"Cannot find a base class whose minimal \"\n                         \"ordering is equal to any base class\")\n    elif len(bases) == 2:\n        return classes[0], classes[1]\n    else:\n        i = len(bases) - 1\n        while i >= 0 and bases[i].__class__ is not Base:\n            i -= 1\n        return bases[0], bases[i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Interface or Component\" % (\n                self.__name__,))\n    if self.__name__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Interface or Component\" % (\n                self.__name__,))\n    if self.__module__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Module\" % (\n                self.__name__,))\n\n    result = []\n    for name, direct in self.__ibmodule__.getDirectClassMethods(\n            self.__class__, include=('Products.CMFCore.interfaces',)):\n        if direct and not all:\n            result.append((name, self.queryTaggedValue(name, None)))\n        else:\n            result.append((name, self.", "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        if hasattr(base, \"namesAndDescriptions\"):\n            names.extend(base.namesAndDescriptions(all))\n            descs.extend(base.__doc__)\n    if not all and len(names) == 0:\n        return ()\n    if all and len(names) > 0:\n        return tuple(names)\n    return tuple((name, desc) for name, desc in zip(names, descs))\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in reversed(self.__bases__):\n        if hasattr(base, 'queryTaggedValue'):\n            names.extend(base.queryTaggedValue(self.__identifier__, default=()))\n            descriptions.extend(base.queryTaggedValue(self.__identifier__, default=()))\n            names.extend(base.queryTaggedValue(self.__identifier__, default=()))\n        else:\n            names.extend(base.getTaggedValue(self.__identifier__))\n            descriptions.extend(base.getTaggedValue(self.__identifier__))\n    if all:\n        return list(reversed(names)), list(reversed(descriptions))\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    d = {}\n    for base in self.__bases__:\n        d.update(base.namesAndDescriptions(all))\n    d.update(self.__attrs)\n    if all:\n        return d\n    return (self.__name__, tuple(sorted(d.items())), self.__doc__)\n", "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((name, description) for (name, description) in self.__attrs.items() if description)\n    return tuple((name, self.__attrs[name].description) for name in self.__attrs)\n", "def namesAndDescriptions(self, all=False):\n    attrs = self.__attrs\n    if all:\n        return attrs\n    d = []\n    for base in self.__bases__:\n        d.extend(base.namesAndDescriptions(all=True))\n    d.append(self.__name__)\n    return tuple(d)\n", "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((k, v.__doc__) for k, v in self.__attrs.items())\n    return tuple((k, getattr(self, k, None)) for k in self.__attrs)\n", "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\"cannot return attributes for un-initialized \"\n                        \"tagged component\")\n    return self.__ibmodule__.namesAndDescriptions(all=all)\n", "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    descs = sorted(self.__attrs.get('description', []))\n    if all:\n        return (names, descs)\n    return (names, descs,)\n", "def namesAndDescriptions(self, all=False):\n    if not all:\n        return tuple(self.__names__ + self.__descriptions__)\n    return tuple(self.__names__) + tuple(self.__descriptions__)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Interface or Component\" % (\n                self.__name__,))\n    if self.__name__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Interface or Component\" % (\n                self.__name__,))\n    if self.__module__ is None:\n        raise TypeError(\n            \"Object %s is not a valid Module\" % (\n                self.__name__,))\n\n    result = []\n    for name, direct in self.__ibmodule__.getDirectClassMethods(\n            self.__class__, include=('Products.CMFCore.interfaces',)):\n        if direct and not all:\n            result.append((name, self.queryTaggedValue(name, None)))\n        else:\n            result.append((name, self.", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        if hasattr(base, \"namesAndDescriptions\"):\n            names.extend(base.namesAndDescriptions(all))\n            descs.extend(base.__doc__)\n    if not all and len(names) == 0:\n        return ()\n    if all and len(names) > 0:\n        return tuple(names)\n    return tuple((name, desc) for name, desc in zip(names, descs))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in reversed(self.__bases__):\n        if hasattr(base, 'queryTaggedValue'):\n            names.extend(base.queryTaggedValue(self.__identifier__, default=()))\n            descriptions.extend(base.queryTaggedValue(self.__identifier__, default=()))\n            names.extend(base.queryTaggedValue(self.__identifier__, default=()))\n        else:\n            names.extend(base.getTaggedValue(self.__identifier__))\n            descriptions.extend(base.getTaggedValue(self.__identifier__))\n    if all:\n        return list(reversed(names)), list(reversed(descriptions))\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    d = {}\n    for base in self.__bases__:\n        d.update(base.namesAndDescriptions(all))\n    d.update(self.__attrs)\n    if all:\n        return d\n    return (self.__name__, tuple(sorted(d.items())), self.__doc__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((name, description) for (name, description) in self.__attrs.items() if description)\n    return tuple((name, self.__attrs[name].description) for name in self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = self.__attrs\n    if all:\n        return attrs\n    d = []\n    for base in self.__bases__:\n        d.extend(base.namesAndDescriptions(all=True))\n    d.append(self.__name__)\n    return tuple(d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((k, v.__doc__) for k, v in self.__attrs.items())\n    return tuple((k, getattr(self, k, None)) for k in self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\"cannot return attributes for un-initialized \"\n                        \"tagged component\")\n    return self.__ibmodule__.namesAndDescriptions(all=all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    descs = sorted(self.__attrs.get('description', []))\n    if all:\n        return (names, descs)\n    return (names, descs,)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if not all:\n        return tuple(self.__names__ + self.__descriptions__)\n    return tuple(self.__names__) + tuple(self.__descriptions__)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__names))\n    return self.__names\n", "def names(self, all=False):\n    if all:\n        return tuple(b.__name__ for b in self.__bases__)\n    return tuple(b.__name__ for b in self.__bases__ if isinstance(b, Attribute))\n", "def names(self, all=False):\n    if all:\n        return tuple(v.__name__ for v in self.__bases__)\n    return tuple(v.__name__ for v in self.__bases__ if not v.__abstractmethods__)\n", "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return tuple(names)\n", "def names(self, all=False):\n    return tuple(v.__name__ for v in self._v_repr if v.__name__ is not None)\n", "def names(self, all=False):\n    return tuple(v.__name__ for v in self._v_repr if v is not None)\n", "def names(self, all=False):\n    if self.__bases__ and not all:\n        return self.__bases__[0].names(all=all)\n    return super(TaggedObject, self).names(all=all)\n", "def names(self, all=False):\n    if not all:\n        return tuple(self.__attrs)\n    return tuple(self.__names)\n", "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs.keys()))\n    else:\n        return tuple(self.__attrs.keys())\n", "def names(self, all=False):\n    if all:\n        return tuple(v.__name__ for v in self.__bases__)\n    return tuple(v.__name__ for v in self.__bases__)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__names))\n    return self.__names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(b.__name__ for b in self.__bases__)\n    return tuple(b.__name__ for b in self.__bases__ if isinstance(b, Attribute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(v.__name__ for v in self.__bases__)\n    return tuple(v.__name__ for v in self.__bases__ if not v.__abstractmethods__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return tuple(names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return tuple(v.__name__ for v in self._v_repr if v.__name__ is not None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return tuple(v.__name__ for v in self._v_repr if v is not None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if self.__bases__ and not all:\n        return self.__bases__[0].names(all=all)\n    return super(TaggedObject, self).names(all=all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if not all:\n        return tuple(self.__attrs)\n    return tuple(self.__names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs.keys()))\n    else:\n        return tuple(self.__attrs.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(v.__name__ for v in self.__bases__)\n    return tuple(v.__name__ for v in self.__bases__)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg.__name__)\n        else:\n            output.append(arg)\n        return arg\n\n    sequence = _normalize(sequence)\n    for iface in sequence:\n        if isinstance(iface, InterfaceClass):\n            output.extend(_normalizeargs(iface.__args__, output))\n            output.extend(_normalizeargs(iface.__kwargs__, output))\n        else:\n            output.append(iface)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _wrapper(iface):\n        return ObjectSpecification(iface, output)\n    # Sort the interfaces into a set to make the output deterministic.\n    return sorted(output, key=_wrapper)\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg.__interfaces__:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return output.append(arg)\n        except AttributeError:\n            for i, spec in enumerate(arg):\n                if isinstance(spec, Instance):\n                    output.append(_normalize(spec))\n                else:\n                    output.append(spec)\n                if i < len(sequence) - 1:\n                    _normalize(sequence[i + 1])\n            return output\n\n    _normalize(sequence[0])\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return arg._normalize()\n        except AttributeError:\n            return arg\n\n    for i in sequence:\n        output.append(_normalize(i))\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for item in sequence:\n        _normalizeargs(item, output)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(iface):\n        for spec in iface.type.specs:\n            _normalizeargs(spec, output)\n    _normalize(Implements)\n    _normalize(Implements)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            return arg.getObjectSpecification()\n        else:\n            return arg\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Instance):\n            sequence[i] = _normalize(arg)\n        else:\n            sequence[i] = _normalize(arg)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            output.append(arg.qname())\n        else:\n            for iface in arg:\n                _normalize(iface)\n    _normalize(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, InstanceSpecification):\n        return [sequence]\n    elif isinstance(sequence, ClassSpecification):\n        return output + [sequence._implementations[-1]]\n    else:\n        for i, spec in enumerate(sequence):\n            output.append(spec)\n            if i < len(sequence) - 1:\n                output.extend(_normalizeargs(sequence[i + 1:], output))\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg.__name__)\n        else:\n            output.append(arg)\n        return arg\n\n    sequence = _normalize(sequence)\n    for iface in sequence:\n        if isinstance(iface, InterfaceClass):\n            output.extend(_normalizeargs(iface.__args__, output))\n            output.extend(_normalizeargs(iface.__kwargs__, output))\n        else:\n            output.append(iface)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _wrapper(iface):\n        return ObjectSpecification(iface, output)\n    # Sort the interfaces into a set to make the output deterministic.\n    return sorted(output, key=_wrapper)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg.__interfaces__:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return output.append(arg)\n        except AttributeError:\n            for i, spec in enumerate(arg):\n                if isinstance(spec, Instance):\n                    output.append(_normalize(spec))\n                else:\n                    output.append(spec)\n                if i < len(sequence) - 1:\n                    _normalize(sequence[i + 1])\n            return output\n\n    _normalize(sequence[0])\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return arg._normalize()\n        except AttributeError:\n            return arg\n\n    for i in sequence:\n        output.append(_normalize(i))\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for item in sequence:\n        _normalizeargs(item, output)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(iface):\n        for spec in iface.type.specs:\n            _normalizeargs(spec, output)\n    _normalize(Implements)\n    _normalize(Implements)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            return arg.getObjectSpecification()\n        else:\n            return arg\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Instance):\n            sequence[i] = _normalize(arg)\n        else:\n            sequence[i] = _normalize(arg)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            output.append(arg.qname())\n        else:\n            for iface in arg:\n                _normalize(iface)\n    _normalize(sequence)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, InstanceSpecification):\n        return [sequence]\n    elif isinstance(sequence, ClassSpecification):\n        return output + [sequence._implementations[-1]]\n    else:\n        for i, spec in enumerate(sequence):\n            output.append(spec)\n            if i < len(sequence) - 1:\n                output.extend(_normalizeargs(sequence[i + 1:], output))\n    return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('c')\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    if _c_optimizations_required():\n        import _c_optimizations\n        return _c_optimizations\n    else:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer.__module__ == 'Products.CMFCore'\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    if not _c_optimizations_required():\n        return False\n\n    try:\n        import c_optimizations\n        return True\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import providedBy\n        return providedBy(_c_optimizations)\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_available is not None:\n        return _c_optimizations_available\n    if not _c_optimizations_required():\n        return False\n    _c_optimizations_available = _should_attempt_c_optimizations()\n    return _c_optimizations_available\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer\n    except ImportError:\n        pass\n\n    try:\n        from zope.component import getUtility\n        return getUtility(ICOptimizable).c_optimizations_available()\n    except ImportError:\n        pass\n\n    raise ImportError(\n        \"Unable to import the C optimizations package.  \"\n        \"You can install it with `pip install zope.interface c_optimizations`.\")\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        # Not available, so use the default C optimizations\n        pass\n    else:\n        return c_optimizations\n    # Assume the C implementation is available, but ignore errors\n    # for tests that fail.\n    return _c_optimizations_ignored()\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        pass\n    return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('c')\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    if _c_optimizations_required():\n        import _c_optimizations\n        return _c_optimizations\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer.__module__ == 'Products.CMFCore'\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    if not _c_optimizations_required():\n        return False\n\n    try:\n        import c_optimizations\n        return True\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import providedBy\n        return providedBy(_c_optimizations)\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_available is not None:\n        return _c_optimizations_available\n    if not _c_optimizations_required():\n        return False\n    _c_optimizations_available = _should_attempt_c_optimizations()\n    return _c_optimizations_available\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer\n    except ImportError:\n        pass\n\n    try:\n        from zope.component import getUtility\n        return getUtility(ICOptimizable).c_optimizations_available()\n    except ImportError:\n        pass\n\n    raise ImportError(\n        \"Unable to import the C optimizations package.  \"\n        \"You can install it with `pip install zope.interface c_optimizations`.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        # Not available, so use the default C optimizations\n        pass\n    else:\n        return c_optimizations\n    # Assume the C implementation is available, but ignore errors\n    # for tests that fail.\n    return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        pass\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py3k(sys.version_info):\n        return False\n    return os.environ.get('PURE_PYTHON') == 'true'\n", "def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py2:\n        return False\n    return os.environ.get('PURE_PYTHON') == '1'\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' and\n            _c_optimizations_required())\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' or\n            _c_optimizations_required() or\n            not _c_optimizations_available())\n", "def _should_attempt_c_optimizations():\n    # We only want to optimize if we're on PyPy (and not under PyPy2)\n    return not _use_c_impl(PYPY, 'optimize', globs=globs) and _c_optimizations_required()\n", "def _should_attempt_c_optimizations():\n    if _pypy:\n        return False\n    else:\n        return os.environ.get('PURE_PYTHON') == 'true'\n", "def _should_attempt_c_optimizations():\n    # PYPY2 and PYPY3 don't support c_optimizations_ignored, so we need\n    # to check the PURE_PYTHON environment variable first.\n    if _skip_under_py2k(os.environ.get('PURE_PYTHON')):\n        return False\n\n    return (os.name == 'nt' and sys.pypy_version_info >= (3, ))\n", "def _should_attempt_c_optimizations():\n    return not _c_optimizations_required() or _c_optimizations_available()\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            not _c_optimizations_ignored())\n", "def _should_attempt_c_optimizations():\n    if not PYPY:\n        return _c_optimizations_required()\n    return _c_optimizations_available() and _c_optimizations_ignored()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py3k(sys.version_info):\n        return False\n    return os.environ.get('PURE_PYTHON') == 'true'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py2:\n        return False\n    return os.environ.get('PURE_PYTHON') == '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' and\n            _c_optimizations_required())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' or\n            _c_optimizations_required() or\n            not _c_optimizations_available())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # We only want to optimize if we're on PyPy (and not under PyPy2)\n    return not _use_c_impl(PYPY, 'optimize', globs=globs) and _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy:\n        return False\n    else:\n        return os.environ.get('PURE_PYTHON') == 'true'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # PYPY2 and PYPY3 don't support c_optimizations_ignored, so we need\n    # to check the PURE_PYTHON environment variable first.\n    if _skip_under_py2k(os.environ.get('PURE_PYTHON')):\n        return False\n\n    return (os.name == 'nt' and sys.pypy_version_info >= (3, ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return not _c_optimizations_required() or _c_optimizations_available()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            not _c_optimizations_ignored())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if not PYPY:\n        return _c_optimizations_required()\n    return _c_optimizations_available() and _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return ['-stdlib=libc', '-stdlib=libc++']\n", "def _c_optimizations_ignored():\n    return (\n        sys.maxsize!= 2 ** 32 - 1\n        or sys.maxsize % (2 ** 32 - 1)!= 0\n        or sys.maxsize % 2 ** 32 > 0\n    )\n", "def _c_optimizations_ignored():\n    return (\n        'CPython>=2.7,!=3.4',\n       'sys.pypy_cparser',\n       'sys.pypy_memory',\n       'sys.pypy_os_path',\n       'sys.pypy_compat',\n    )\n", "def _c_optimizations_ignored():\n    return ['-xc', '-std=c++11']\n", "def _c_optimizations_ignored():\n    return (\n        '/usr/local/bin/clang',\n        '/usr/local/clang-diagnostics',\n        '/usr/local/clang-diagnostic',\n        '/opt/clang',\n        '/opt/clang-diagnostic',\n    )\n", "def _c_optimizations_ignored():\n    return (\n        (\"clang\", False),\n        (\"clang-cl\", False),\n        (\"clang-cl-tidy\", False),\n        (\"clang-cl-static\", False),\n        (\"clang-cl-dynamic\", False),\n    )\n", "def _c_optimizations_ignored():\n    return (\n        os.environ.get(\"C_OPTIMIZE\") == \"0\",\n        os.environ.get(\"C_OPTIMIZE_WITHOUT_DEPRECATED\") == \"0\",\n        os.environ.get(\"C_OPTIMIZE_WITHOUT_DEPRECATED_BACKTRACE\") == \"0\",\n    )\n", "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os types \"\n    return 0 if __name__ == '__main__' else -1\n", "def _c_optimizations_ignored():\n    return (\n        \"not present; it is required for the C library implementation\",\n        )\n", "def _c_optimizations_ignored():\n    return (\n        os.getenv('TRAVIS_JOBS', '').lower() == 'false' and\n        os.getenv('TRAVIS_CI', 'false').lower() == 'false')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return ['-stdlib=libc', '-stdlib=libc++']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        sys.maxsize!= 2 ** 32 - 1\n        or sys.maxsize % (2 ** 32 - 1)!= 0\n        or sys.maxsize % 2 ** 32 > 0\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        'CPython>=2.7,!=3.4',\n       'sys.pypy_cparser',\n       'sys.pypy_memory',\n       'sys.pypy_os_path',\n       'sys.pypy_compat',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ['-xc', '-std=c++11']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        '/usr/local/bin/clang',\n        '/usr/local/clang-diagnostics',\n        '/usr/local/clang-diagnostic',\n        '/opt/clang',\n        '/opt/clang-diagnostic',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        (\"clang\", False),\n        (\"clang-cl\", False),\n        (\"clang-cl-tidy\", False),\n        (\"clang-cl-static\", False),\n        (\"clang-cl-dynamic\", False),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        os.environ.get(\"C_OPTIMIZE\") == \"0\",\n        os.environ.get(\"C_OPTIMIZE_WITHOUT_DEPRECATED\") == \"0\",\n        os.environ.get(\"C_OPTIMIZE_WITHOUT_DEPRECATED_BACKTRACE\") == \"0\",\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os types \"\n    return 0 if __name__ == '__main__' else -1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        \"not present; it is required for the C library implementation\",\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        os.getenv('TRAVIS_JOBS', '').lower() == 'false' and\n        os.getenv('TRAVIS_CI', 'false').lower() == 'false')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist = {}\n", "def reset(self):\n    self._hist.reset()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from. import output\n    return output.ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self._points, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"'to_csv' is deprecated, use '.to_csv(..., header=...)'\", DeprecationWarning)\n    return self.to_csv(separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\n        \"'to_csv' is deprecated and will be removed in the \"\n        \"future. Please use 'lena.output.ToCSV' instead.\",\n        FutureWarning,\n    )\n    return ToCSV(self, separator, header)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from. import output\n    return output.ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self._points, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"'to_csv' is deprecated, use '.to_csv(..., header=...)'\", DeprecationWarning)\n    return self.to_csv(separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\n        \"'to_csv' is deprecated and will be removed in the \"\n        \"future. Please use 'lena.output.ToCSV' instead.\",\n        FutureWarning,\n    )\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return super(Field, self)._get_err_indices(coord_name)\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = 'coord_name={} not in {}'.format(coord_name, self._parsed_error_names)\n        raise KeyError(msg)\n\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError(\"Unknown coordinate '%s'\" % coord_name)\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"Unknown coordinate '{}'.\".format(coord_name)\n        raise KeyError(msg)\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = (\n            \"Unsupported coordinate {!r}.  \"\n            \"Supported coordinates are {!r}\"\n        ).format(coord_name, self._parsed_error_names)\n        raise KeyError(msg)\n\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name in self._coord_names:\n        return self._coord_names.index(coord_name)\n    else:\n        raise KeyError(f\"{coord_name} not found in coordinate names.\")\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"coordinate '{}' is not a valid error name\"\n        raise ValueError(msg.format(coord_name))\n\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif isinstance(coord_name, str):\n        if coord_name in self._coord_names:\n            return self._coord_names[coord_name]\n        elif coord_name.upper() in self._coord_names:\n            return self._coord_names[coord_name.upper()]\n    raise KeyError(coord_name)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return super(Field, self)._get_err_indices(coord_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = 'coord_name={} not in {}'.format(coord_name, self._parsed_error_names)\n        raise KeyError(msg)\n\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError(\"Unknown coordinate '%s'\" % coord_name)\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"Unknown coordinate '{}'.\".format(coord_name)\n        raise KeyError(msg)\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = (\n            \"Unsupported coordinate {!r}.  \"\n            \"Supported coordinates are {!r}\"\n        ).format(coord_name, self._parsed_error_names)\n        raise KeyError(msg)\n\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name in self._coord_names:\n        return self._coord_names.index(coord_name)\n    else:\n        raise KeyError(f\"{coord_name} not found in coordinate names.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"coordinate '{}' is not a valid error name\"\n        raise ValueError(msg.format(coord_name))\n\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif isinstance(coord_name, str):\n        if coord_name in self._coord_names:\n            return self._coord_names[coord_name]\n        elif coord_name.upper() in self._coord_names:\n            return self._coord_names[coord_name.upper()]\n    raise KeyError(coord_name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.error = []\n", "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n\n    # update coordinate names\n    if self._coord_names is not None:\n        context.value[\"x\"] = {\"index\": 0}\n        context.value[\"y\"] = {\"index\": 1}\n        context.value[\"z\"] = {\"index\": 2}\n\n    # update error names\n    if self._parse_error_names(self._field_names):\n        context.error[\"x\"] = {\"index\": 0}\n        context.error[\"y\"] = {\"index\": 1}\n        context.error[\"z\"] = {\"index\": 2}\n", "def _update_context(self, context):\n    for name, value in context.items():\n        if name not in self.field_names:\n            continue\n        setattr(self, name, value)\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n        for i, coord_name in enumerate(self._coord_names):\n            if coord_name == name:\n                continue\n            context.error[name][i] = getattr(self, coord_name)[i]\n", "def _update_context(self, context):\n    context.error = []\n    for i, (name, val) in enumerate(self.coords):\n        if self._parse_error_names(self.field_names):\n            # this error was added in __init__\n            continue\n        if self._scale is not None:\n            val /= self._scale[i]\n        if self._coord_names is not None:\n            name = self._coord_names[i]\n        context.error.append((name, val))\n    context.error_names = self._parse_error_names(self.field_names)\n", "def _update_context(self, context):\n    for k, v in context.items():\n        if k not in self._coord_names:\n            raise KeyError(\"Graph does not have a property named \"\n                           \"'%s'\" % k)\n        context[k].update(v)\n", "def _update_context(self, context):\n    context.error = {}\n    for name, prop in self.properties.items():\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name]['x'] = prop.coords.x\n        context.error[name]['y'] = prop.coords.y\n        context.error[name]['z'] = prop.coords.z\n", "def _update_context(self, context):\n    for field_name, prop in self._context_props.items():\n        if field_name in context:\n            prop.update(context[field_name])\n", "def _update_context(self, context):\n    context.error = {}\n    for key, value in iteritems(context.error):\n        context.error[key] = {}\n        for i, field_name in enumerate(self._coord_names):\n            if field_name in value:\n                context.error[key][i] = value[field_name]\n            else:\n                context.error[key][i] = None\n", "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose the original value.\n    context.error = {}\n    context.value = {}\n\n    # Update all the values in the context.\n    for key, value in context.value.items():\n        if key not in self.field_names:\n            continue\n        context.value[key] = value\n        if key == \"error\":\n            context.error[key] = {}\n            for err_name, err_val in value.items():\n                context.error[key][err_name] = err_val\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n\n    # update coordinate names\n    if self._coord_names is not None:\n        context.value[\"x\"] = {\"index\": 0}\n        context.value[\"y\"] = {\"index\": 1}\n        context.value[\"z\"] = {\"index\": 2}\n\n    # update error names\n    if self._parse_error_names(self._field_names):\n        context.error[\"x\"] = {\"index\": 0}\n        context.error[\"y\"] = {\"index\": 1}\n        context.error[\"z\"] = {\"index\": 2}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for name, value in context.items():\n        if name not in self.field_names:\n            continue\n        setattr(self, name, value)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n        for i, coord_name in enumerate(self._coord_names):\n            if coord_name == name:\n                continue\n            context.error[name][i] = getattr(self, coord_name)[i]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for i, (name, val) in enumerate(self.coords):\n        if self._parse_error_names(self.field_names):\n            # this error was added in __init__\n            continue\n        if self._scale is not None:\n            val /= self._scale[i]\n        if self._coord_names is not None:\n            name = self._coord_names[i]\n        context.error.append((name, val))\n    context.error_names = self._parse_error_names(self.field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for k, v in context.items():\n        if k not in self._coord_names:\n            raise KeyError(\"Graph does not have a property named \"\n                           \"'%s'\" % k)\n        context[k].update(v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name, prop in self.properties.items():\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name]['x'] = prop.coords.x\n        context.error[name]['y'] = prop.coords.y\n        context.error[name]['z'] = prop.coords.z\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for field_name, prop in self._context_props.items():\n        if field_name in context:\n            prop.update(context[field_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for key, value in iteritems(context.error):\n        context.error[key] = {}\n        for i, field_name in enumerate(self._coord_names):\n            if field_name in value:\n                context.error[key][i] = value[field_name]\n            else:\n                context.error[key][i] = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose the original value.\n    context.error = {}\n    context.value = {}\n\n    # Update all the values in the context.\n    for key, value in context.value.items():\n        if key not in self.field_names:\n            continue\n        context.value[key] = value\n        if key == \"error\":\n            context.error[key] = {}\n            for err_name, err_val in value.items():\n                context.error[key][err_name] = err_val\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return integrate.accumulate(\n        _check_edges_increasing_1d(arr)\n        for arr in _iter_bins_with_edges(bins, edges)\n    )\n", "def integral(bins, edges):\n    return np.diff(hist_to_graph(bins, edges), axis=1)\n", "def integral(bins, edges):\n    if edges[0] >= edges[-1]:\n        edges = edges[1:]\n\n    return np.diff(bins, axis=0, prepend=edges) / np.diff(edges, axis=0, prepend=edges)\n", "def integral(bins, edges):\n    if edges.size == 0:\n        raise ValueError(\"edges cannot be empty\")\n    res = np.zeros_like(edges)\n    bin_edges = bins[:-1]\n    for i, edge in enumerate(edges):\n        res[i] = bin_edges[i] + (bin_edges[i+1] - bin_edges[i]) * edge\n    return res\n", "def integral(bins, edges):\n    if len(edges)!= bins:\n        raise ValueError(\"edges length ({}) must be equal to bins length ({})\".format(len(edges), bins))\n\n    x = np.arange(edges[0], edges[-1], step=1)\n    y = np.array([np.trapz(bins * x[b:b + 1], x[b:b + 1]) for b in range(len(edges))])\n    return y\n", "def integral(bins, edges):\n    if not isinstance(bins, (list, tuple)):\n        bins = [bins]\n    return sum([get_bin_on_value_1d(val, bins) * val\n                for val in iter_cells(edges)])\n", "def integral(bins, edges):\n    return np.diff(bins, axis=0) * edges[:-1] / edges[1:]\n", "def integral(bins, edges):\n    bin_edges, values = get_bin_edges(bins, edges)\n    return ((values[1:] - values[:-1]) * bin_edges[1:] +\n            (values[:-1] - values[1:]) * bin_edges[:-1]).sum()\n", "def integral(bins, edges):\n    return _accumulate(_accumulate, _check_edges_increasing_1d, bins, edges)\n", "def integral(bins, edges):\n    if not isinstance(bins, (int, float)):\n        raise TypeError('bins must be of type int or float')\n    if bins < 0:\n        raise ValueError('bins must be greater than 0')\n    if edges is not None:\n        if not isinstance(edges, (list, tuple)):\n            raise TypeError('edges must be of type list or tuple')\n        if len(edges)!= bins:\n            raise ValueError('edges must be of same size as bins')\n    else:\n        edges = get_bin_on_value_1d(np.linspace(0, 1, bins + 1), edges)\n\n    res = 0\n    for edge in edges:\n        res += bins * edge\n    return res\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return integrate.accumulate(\n        _check_edges_increasing_1d(arr)\n        for arr in _iter_bins_with_edges(bins, edges)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.diff(hist_to_graph(bins, edges), axis=1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if edges[0] >= edges[-1]:\n        edges = edges[1:]\n\n    return np.diff(bins, axis=0, prepend=edges) / np.diff(edges, axis=0, prepend=edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if edges.size == 0:\n        raise ValueError(\"edges cannot be empty\")\n    res = np.zeros_like(edges)\n    bin_edges = bins[:-1]\n    for i, edge in enumerate(edges):\n        res[i] = bin_edges[i] + (bin_edges[i+1] - bin_edges[i]) * edge\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if len(edges)!= bins:\n        raise ValueError(\"edges length ({}) must be equal to bins length ({})\".format(len(edges), bins))\n\n    x = np.arange(edges[0], edges[-1], step=1)\n    y = np.array([np.trapz(bins * x[b:b + 1], x[b:b + 1]) for b in range(len(edges))])\n    return y\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if not isinstance(bins, (list, tuple)):\n        bins = [bins]\n    return sum([get_bin_on_value_1d(val, bins) * val\n                for val in iter_cells(edges)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.diff(bins, axis=0) * edges[:-1] / edges[1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bin_edges, values = get_bin_edges(bins, edges)\n    return ((values[1:] - values[:-1]) * bin_edges[1:] +\n            (values[:-1] - values[1:]) * bin_edges[:-1]).sum()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _accumulate(_accumulate, _check_edges_increasing_1d, bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if not isinstance(bins, (int, float)):\n        raise TypeError('bins must be of type int or float')\n    if bins < 0:\n        raise ValueError('bins must be greater than 0')\n    if edges is not None:\n        if not isinstance(edges, (list, tuple)):\n            raise TypeError('edges must be of type list or tuple')\n        if len(edges)!= bins:\n            raise ValueError('edges must be of same size as bins')\n    else:\n        edges = get_bin_on_value_1d(np.linspace(0, 1, bins + 1), edges)\n\n    res = 0\n    for edge in edges:\n        res += bins * edge\n    return res\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_fill_compute_el())\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_fill_compute_seq())\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_fill_compute_el())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_fill_compute_seq())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' \\\n        and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and \"request\" in obj.attrib\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('method') == 'fill' and obj.get('args') == request_args\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' and obj.method =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' \\\n        and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and \"request\" in obj.attrib\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('method') == 'fill' and obj.get('args') == request_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' and obj.method =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == 'run' and \\\n        obj.__doc__\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == \"run\" and hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == 'run' and \\\n        obj.__doc__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == \"run\" and hasattr(obj, \"run\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Container) and obj.is_fill_compute()))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('method', None) == 'fill' and \\\n           obj.get('args', None) and isinstance(obj.get('args'), list) and \\\n           all([isinstance(i, dict) and i.get('method', None) == 'compute' and \\\n                 i.get('args', None) and isinstance(i.get('args'), list) for i in obj['args']])\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) and hasattr(obj, 'fill')\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalFillBase) and\n             obj.fill is not None) or\n            (isinstance(obj, ComputeBase) and obj.compute is not None))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill) or\n            (isinstance(obj, ExecutableBase) and obj.compute))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('type') == 'FillCompute'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Container) and obj.is_fill_compute()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('method', None) == 'fill' and \\\n           obj.get('args', None) and isinstance(obj.get('args'), list) and \\\n           all([isinstance(i, dict) and i.get('method', None) == 'compute' and \\\n                 i.get('args', None) and isinstance(i.get('args'), list) for i in obj['args']])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) and hasattr(obj, 'fill')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalFillBase) and\n             obj.fill is not None) or\n            (isinstance(obj, ComputeBase) and obj.compute is not None))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill) or\n            (isinstance(obj, ExecutableBase) and obj.compute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('type') == 'FillCompute'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict instance')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict instance')\n    if level < 0:\n        level = len(d1) + len(d2)\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    result = {}\n    for key in d1_keys.difference(d2_keys):\n        if key not in d2_keys:\n            result[key] = d1[key]\n    for key in d2_keys.difference(d1_keys):\n        if key not in d1_keys:\n            result[key] = d2[key]\n    for key in d1_keys.difference(d2_keys):\n        if key in d2_keys:\n            if level < 0:\n                level = len(d1) + len(d2)\n            else:\n                resul", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n    if d1 is d2:\n        return d1\n\n    d2_copy = d2.copy()\n    keys = d1 if level == 0 else d2.keys()\n\n    while level < 0:\n        d2 = dict(d2_copy)\n        keys = keys - d2\n        d1 = dict(d2_copy)\n\n    for key in keys:\n        if d1.get(key) is not _sentinel:\n            d1[key] = d1.pop(key)\n        elif d2.get(key) is not _sentinel:\n            d2[key] = d2.pop(key)\n\n    return d1\n", "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d2\n    if _sentinel in d2:\n        return d1\n    d = deepcopy(d1)\n    _level = level\n    for k in d2:\n        if k not in d1:\n            d.pop(k)\n            _level -= 1\n        elif d1[k]!= d2[k]:\n            d[k] = d2[k]\n            _level += 1\n    return _level\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n    d = copy.deepcopy(d1)\n    if level == 0:\n        return d\n    for k in d2:\n        if k not in d1 or d1[k]!= d2[k]:\n            d[k] = d2.get(k, _sentinel)\n            if isinstance(d2[k], dict):\n                d[k] = difference(d[k], d2[k], level - 1)\n    return d\n", "def difference(d1, d2, level=-1):\n    if isinstance(d1, Mapping) and isinstance(d2, Mapping):\n        d = {}\n        for k in d1:\n            if k not in d2:\n                d[k] = d1[k]\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n        return d\n    else:\n        return {k: d1[k] for k in d1 if k not in d2 or d1[k]!= d2[k]}\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, Mapping):\n        raise TypeError('d1 must be a mapping')\n    if not isinstance(d2, Mapping):\n        raise TypeError('d2 must be a mapping')\n    if level < 0:\n        level = len(d1) - len(d2)\n    d = defaultdict(list)\n    for k, v in iteritems(d1):\n        if k not in d2 or d2[k]!= v:\n            d[level].append((k, d2[k]))\n    for k, v in iteritems(d2):\n        if k in d1 and d1[k] == v:\n            d[level + 1].append((k, v))\n    return dict(d)\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for k in d1:\n        if k not in d2 or d1[k]!= d2[k]:\n            result[k] = d1[k]\n            if level == -1:\n                level = max(d1.keys())\n    for k in d2:\n        if k not in d1 or d2[k]!= d1[k]:\n            result[k] = d2[k]\n            if level == -1:\n                level = max(d2.keys())\n    return result\n", "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n    d = defaultdict(dict)\n    for key in d1:\n        if key not in d2:\n            d[level][key] = d1[key]\n        else:\n            d[level][key] = d1[key] if key in d2[key] else d2[key]\n    return d\n", "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n\n    d = {}\n    for k in d1:\n        if k not in d2:\n            d[k] = d1[k]\n        elif d1[k]!= d2[k]:\n            d[k] = d1[k]\n            d2[k] = d1[k]\n            if level == -1:\n                break\n    return d\n", "def difference(d1, d2, level=-1):\n    \"Return a dictionary with items from *d1* not contained in *d2*.  *level*\n    sets the maximum depth of recursion.\n\n    For infinite recursion, set that to -1.\n\n    See :func:`intersection` for more details.\n    *d1* and *d2* remain identical.\n\n    However, make a deep copy of the result when appropriate.\n\n   .. versionadded:: 0.5 add keyword argument *level*.  with import copy leena\n        file contains(d,s)\n        and make a deep copy of the result when appropriate.\n\n    \"\"\"\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('d1 and d2 must be a dictionary')\n\n    if level == 0:\n        return d1\n\n    d2_copy = copy.deepcopy(d2)\n    d2_copy.update(d1)\n    return difference(d2_copy, d1, level - 1)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict instance')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict instance')\n    if level < 0:\n        level = len(d1) + len(d2)\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    result = {}\n    for key in d1_keys.difference(d2_keys):\n        if key not in d2_keys:\n            result[key] = d1[key]\n    for key in d2_keys.difference(d1_keys):\n        if key not in d1_keys:\n            result[key] = d2[key]\n    for key in d1_keys.difference(d2_keys):\n        if key in d2_keys:\n            if level < 0:\n                level = len(d1) + len(d2)\n            else:\n                resul", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n    if d1 is d2:\n        return d1\n\n    d2_copy = d2.copy()\n    keys = d1 if level == 0 else d2.keys()\n\n    while level < 0:\n        d2 = dict(d2_copy)\n        keys = keys - d2\n        d1 = dict(d2_copy)\n\n    for key in keys:\n        if d1.get(key) is not _sentinel:\n            d1[key] = d1.pop(key)\n        elif d2.get(key) is not _sentinel:\n            d2[key] = d2.pop(key)\n\n    return d1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d2\n    if _sentinel in d2:\n        return d1\n    d = deepcopy(d1)\n    _level = level\n    for k in d2:\n        if k not in d1:\n            d.pop(k)\n            _level -= 1\n        elif d1[k]!= d2[k]:\n            d[k] = d2[k]\n            _level += 1\n    return _level\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n    d = copy.deepcopy(d1)\n    if level == 0:\n        return d\n    for k in d2:\n        if k not in d1 or d1[k]!= d2[k]:\n            d[k] = d2.get(k, _sentinel)\n            if isinstance(d2[k], dict):\n                d[k] = difference(d[k], d2[k], level - 1)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if isinstance(d1, Mapping) and isinstance(d2, Mapping):\n        d = {}\n        for k in d1:\n            if k not in d2:\n                d[k] = d1[k]\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n        return d\n    else:\n        return {k: d1[k] for k in d1 if k not in d2 or d1[k]!= d2[k]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, Mapping):\n        raise TypeError('d1 must be a mapping')\n    if not isinstance(d2, Mapping):\n        raise TypeError('d2 must be a mapping')\n    if level < 0:\n        level = len(d1) - len(d2)\n    d = defaultdict(list)\n    for k, v in iteritems(d1):\n        if k not in d2 or d2[k]!= v:\n            d[level].append((k, d2[k]))\n    for k, v in iteritems(d2):\n        if k in d1 and d1[k] == v:\n            d[level + 1].append((k, v))\n    return dict(d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for k in d1:\n        if k not in d2 or d1[k]!= d2[k]:\n            result[k] = d1[k]\n            if level == -1:\n                level = max(d1.keys())\n    for k in d2:\n        if k not in d1 or d2[k]!= d1[k]:\n            result[k] = d2[k]\n            if level == -1:\n                level = max(d2.keys())\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n    d = defaultdict(dict)\n    for key in d1:\n        if key not in d2:\n            d[level][key] = d1[key]\n        else:\n            d[level][key] = d1[key] if key in d2[key] else d2[key]\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n\n    d = {}\n    for k in d1:\n        if k not in d2:\n            d[k] = d1[k]\n        elif d1[k]!= d2[k]:\n            d[k] = d1[k]\n            d2[k] = d1[k]\n            if level == -1:\n                break\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"Return a dictionary with items from *d1* not contained in *d2*.  *level*\n    sets the maximum depth of recursion.\n\n    For infinite recursion, set that to -1.\n\n    See :func:`intersection` for more details.\n    *d1* and *d2* remain identical.\n\n    However, make a deep copy of the result when appropriate.\n\n   .. versionadded:: 0.5 add keyword argument *level*.  with import copy leena\n        file contains(d,s)\n        and make a deep copy of the result when appropriate.\n\n    \"\"\"\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('d1 and d2 must be a dictionary')\n\n    if level == 0:\n        return d1\n\n    d2_copy = copy.deepcopy(d2)\n    d2_copy.update(d1)\n    return difference(d2_copy, d1, level - 1)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    # TODO: use hist.fill instead\n    if coord > self.bins or coord < 0:\n        raise ValueError(\n            \"Coordinate {} outside histogram edges {}\".format(coord, self.edges)\n        )\n    if coord in self.ranges:\n        raise ValueError(\"Coordinate {} already in range\".format(coord))\n    self.scale(coord, weight)\n    self.ranges[coord] = None\n", "def fill(self, coord, weight=1):\n    if self.edges[0] < coord[0] or self.edges[-1] > coord[-1]:\n        raise ValueError(\"Region outside of defined range\")\n\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    if self.nbins == 1:\n        raise ValueError(\"HistoSummary only works on 1-D histograms\")\n    # HistoSummary is a shortcut for updating the ranges in the context\n    # so that the edges of the histogram match the edges of the input histogram.\n    context = self._update_context(context={coord: weight})\n    self.ranges[coord] = context[coord]\n    # We need to update the bin counts for the outside histogram\n    for i in range(self.nbins):\n        if i == coord[0]:\n            context[coord] += weight\n        else:\n            context[coord] -= weight\n", "def fill(self, coord, weight=1):\n    # fill histogram\n    if self._update_context:\n        self._context.update(\n            {coord: weight}\n        )\n\n    # update histogram bounds\n    self.ranges[coord] = self.bins[coord] + self.bins[coord + 1]\n", "def fill(self, coord, weight=1):\n    if self.edges[-1] <= coord < self.edges[0]:\n        # edges are outside the histogram\n        self._update_context({coord: weight})\n    else:\n        # edges are inside the histogram\n        self._update_context({coord: 0})\n", "def fill(self, coord, weight=1):\n    self.bins[coord] += weight\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    if self.edges[0] <= coord[0] and coord[0] <= self.edges[-1]:\n        raise ValueError(\"Outside edges of histogram\")\n    self._update_context({coord: weight})\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO: use hist.fill instead\n    if coord > self.bins or coord < 0:\n        raise ValueError(\n            \"Coordinate {} outside histogram edges {}\".format(coord, self.edges)\n        )\n    if coord in self.ranges:\n        raise ValueError(\"Coordinate {} already in range\".format(coord))\n    self.scale(coord, weight)\n    self.ranges[coord] = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges[0] < coord[0] or self.edges[-1] > coord[-1]:\n        raise ValueError(\"Region outside of defined range\")\n\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.nbins == 1:\n        raise ValueError(\"HistoSummary only works on 1-D histograms\")\n    # HistoSummary is a shortcut for updating the ranges in the context\n    # so that the edges of the histogram match the edges of the input histogram.\n    context = self._update_context(context={coord: weight})\n    self.ranges[coord] = context[coord]\n    # We need to update the bin counts for the outside histogram\n    for i in range(self.nbins):\n        if i == coord[0]:\n            context[coord] += weight\n        else:\n            context[coord] -= weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # fill histogram\n    if self._update_context:\n        self._context.update(\n            {coord: weight}\n        )\n\n    # update histogram bounds\n    self.ranges[coord] = self.bins[coord] + self.bins[coord + 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges[-1] <= coord < self.edges[0]:\n        # edges are outside the histogram\n        self._update_context({coord: weight})\n    else:\n        # edges are inside the histogram\n        self._update_context({coord: 0})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.bins[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges[0] <= coord[0] and coord[0] <= self.edges[-1]:\n        raise ValueError(\"Outside edges of histogram\")\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    f\"Label key {key} in labels must be a string.\",\n                    value=value,\n                )\n            if not _label_key_pattern.match(value):\n                raise ValidationError(\n                    f\"Label key {key} in labels must match the regex: {_label_key_pattern.pattern}\",\n                    value=value,\n                )\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(\"label keys must be strings.\")\n        if not isinstance(value, (list, tuple)):\n            raise ValidationError(\"label values must be lists or tuples.\")\n\n        for i, value_key in enumerate(value):\n            if not isinstance(value_key, str):\n                raise ValidationError(\n                    \"label keys must be strings. {} was {}\".format(i, type(value_key)))\n            if not _label_key_pattern.match(value_key):\n                raise ValidationError(\n                    \"label keys must be strings or bytes-like objects.\")\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key not in _label_key_pattern:\n            raise ValidationError(f\"Invalid label key: {key}\")\n        if not _label_value_pattern.match(value):\n            raise ValidationError(f\"Invalid label value: {value}\")\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(\n                f\"{key} key is not a string or bytes-like object.\"\n            )\n\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    f\"{value} is not a string or bytes-like object.\"\n                )\n\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    f\"Label key '{key}' does not match regex '{_label_key_regex}'\"\n                )\n\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    f\"Label value '{value}' doe", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            for regex, message in _label_value_regex.items():\n                if not re.match(regex, key):\n                    raise ValidationError(message)\n            for regex, message in _label_key_pattern.items():\n                if not re.match(regex, key):\n                    raise ValidationError(message)\n        else:\n            if not re.match(_label_key_regex[key], key):\n                raise ValidationError(\"Label key '%s' is not a valid regex\" % key)\n            if not re.match(_label_value_regex[key], values):\n                raise ValidationError(\"Label value '%s' is not a valid regex\" % values)\n", "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        if key not in _label_key_pattern:\n            errors.append(\n                ValidationError(\n                    \"Label key '{}' does not match regular expression {}\".format(\n                        key, _label_key_pattern.pattern\n                    ),\n                    resource_name=key,\n                )\n            )\n        if isinstance(value, dict):\n            _validate_labels(value)\n        else:\n            if not re.match(_label_value_pattern.pattern, value):\n                errors.append(ValidationError(value))\n    if errors:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if len(value)!= len(set(value)):\n            raise ValidationError(\n                \"Label key '{}' contains duplicate values\".format(key))\n        for key, value in value.items():\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    \"Label key '{}' contains invalid pattern {}\".format(\n                        key, _label_key_regex.pattern))\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    \"Label value '{}' contains invalid pattern {}\".format(\n                        value, _label_value_regex.pattern))\n", "def _validate_labels(labels):\n    for key, pattern in labels.items():\n        if not isinstance(key, str):\n            raise ValueError(\"labels keys must be strings: {}\".format(key))\n\n        if not isinstance(pattern, dict):\n            raise ValueError(\"labels values must be dictionaries: {}\".format(pattern))\n\n        for key_value_pair in pattern.items():\n            if not isinstance(key_value_pair[0], str):\n                raise ValueError(\"labels keys must be strings: {}\".format(key_value_pair[0]))\n\n            if not isinstance(key_value_pair[1], list):\n                raise ValueError(\"labels values must be lists: {}\".format(key_value_pair[1]))\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(f'labels must be a dict keyed by label name.')\n        if not isinstance(value, list):\n            raise ValidationError(f'labels must be a list of dicts keyed by label name.')\n        for k, v in value:\n            _validate_labels({key: k})\n            _validate_labels({k: v})\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    \"Label key '{}' must match the regex '{}'\".format(key, _label_key_pattern.pattern)\n                )\n\n        if isinstance(values, dict):\n            _validate_labels(values)\n        elif isinstance(values, (list, tuple)):\n            for value in values:\n                if not _label_value_pattern.match(value):\n                    raise ValidationError(\"Label value '{}' must match the regex '{}'\".format(value, _label_value_pattern.pattern))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    f\"Label key {key} in labels must be a string.\",\n                    value=value,\n                )\n            if not _label_key_pattern.match(value):\n                raise ValidationError(\n                    f\"Label key {key} in labels must match the regex: {_label_key_pattern.pattern}\",\n                    value=value,\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(\"label keys must be strings.\")\n        if not isinstance(value, (list, tuple)):\n            raise ValidationError(\"label values must be lists or tuples.\")\n\n        for i, value_key in enumerate(value):\n            if not isinstance(value_key, str):\n                raise ValidationError(\n                    \"label keys must be strings. {} was {}\".format(i, type(value_key)))\n            if not _label_key_pattern.match(value_key):\n                raise ValidationError(\n                    \"label keys must be strings or bytes-like objects.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key not in _label_key_pattern:\n            raise ValidationError(f\"Invalid label key: {key}\")\n        if not _label_value_pattern.match(value):\n            raise ValidationError(f\"Invalid label value: {value}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(\n                f\"{key} key is not a string or bytes-like object.\"\n            )\n\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    f\"{value} is not a string or bytes-like object.\"\n                )\n\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    f\"Label key '{key}' does not match regex '{_label_key_regex}'\"\n                )\n\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    f\"Label value '{value}' doe", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            for regex, message in _label_value_regex.items():\n                if not re.match(regex, key):\n                    raise ValidationError(message)\n            for regex, message in _label_key_pattern.items():\n                if not re.match(regex, key):\n                    raise ValidationError(message)\n        else:\n            if not re.match(_label_key_regex[key], key):\n                raise ValidationError(\"Label key '%s' is not a valid regex\" % key)\n            if not re.match(_label_value_regex[key], values):\n                raise ValidationError(\"Label value '%s' is not a valid regex\" % values)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        if key not in _label_key_pattern:\n            errors.append(\n                ValidationError(\n                    \"Label key '{}' does not match regular expression {}\".format(\n                        key, _label_key_pattern.pattern\n                    ),\n                    resource_name=key,\n                )\n            )\n        if isinstance(value, dict):\n            _validate_labels(value)\n        else:\n            if not re.match(_label_value_pattern.pattern, value):\n                errors.append(ValidationError(value))\n    if errors:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if len(value)!= len(set(value)):\n            raise ValidationError(\n                \"Label key '{}' contains duplicate values\".format(key))\n        for key, value in value.items():\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    \"Label key '{}' contains invalid pattern {}\".format(\n                        key, _label_key_regex.pattern))\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    \"Label value '{}' contains invalid pattern {}\".format(\n                        value, _label_value_regex.pattern))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, pattern in labels.items():\n        if not isinstance(key, str):\n            raise ValueError(\"labels keys must be strings: {}\".format(key))\n\n        if not isinstance(pattern, dict):\n            raise ValueError(\"labels values must be dictionaries: {}\".format(pattern))\n\n        for key_value_pair in pattern.items():\n            if not isinstance(key_value_pair[0], str):\n                raise ValueError(\"labels keys must be strings: {}\".format(key_value_pair[0]))\n\n            if not isinstance(key_value_pair[1], list):\n                raise ValueError(\"labels values must be lists: {}\".format(key_value_pair[1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise ValidationError(f'labels must be a dict keyed by label name.')\n        if not isinstance(value, list):\n            raise ValidationError(f'labels must be a list of dicts keyed by label name.')\n        for k, v in value:\n            _validate_labels({key: k})\n            _validate_labels({k: v})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    \"Label key '{}' must match the regex '{}'\".format(key, _label_key_pattern.pattern)\n                )\n\n        if isinstance(values, dict):\n            _validate_labels(values)\n        elif isinstance(values, (list, tuple)):\n            for value in values:\n                if not _label_value_pattern.match(value):\n                    raise ValidationError(\"Label value '{}' must match the regex '{}'\".format(value, _label_value_pattern.pattern))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    return get_resource_name_regex()\n", "def _get_resource_name_regex():\n    return _resource_name_pattern\n", "def _get_resource_name_regex():\n    namespace = \"/meta/\"\n    if not namespace in _label_key_pattern.patterns:\n        _label_key_pattern.add_pattern(namespace, re.IGNORECASE)\n    return _label_key_pattern.patterns[namespace]\n", "def _get_resource_name_regex():\n    if not _resource_name_regex:\n        _resource_name_regex = re.compile(r\"^((?P<label>(?:[a-zA-Z_][a-zA-Z_0-9]*)|\"\n                                          r\"(?P<name>[a-zA-Z_][a-zA-Z_0-9]*))\\.)+\"\n                                          r\"(?P<resource>[a-zA-Z_][a-zA-Z_0-9]*)$\")\n    return _resource_name_regex\n", "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "def _get_resource_name_regex():\n    return _resource_name_pattern\n", "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "def _get_resource_name_regex():\n    return get_regex(_RESOURCE_NAME_PATTERN)\n", "def _get_resource_name_regex():\n    return get_resource_name_regex()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    return get_resource_name_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _resource_name_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    namespace = \"/meta/\"\n    if not namespace in _label_key_pattern.patterns:\n        _label_key_pattern.add_pattern(namespace, re.IGNORECASE)\n    return _label_key_pattern.patterns[namespace]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    if not _resource_name_regex:\n        _resource_name_regex = re.compile(r\"^((?P<label>(?:[a-zA-Z_][a-zA-Z_0-9]*)|\"\n                                          r\"(?P<name>[a-zA-Z_][a-zA-Z_0-9]*))\\.)+\"\n                                          r\"(?P<resource>[a-zA-Z_][a-zA-Z_0-9]*)$\")\n    return _resource_name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _resource_name_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _get_label_key_regex() + _get_label_value_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_regex(_RESOURCE_NAME_PATTERN)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_resource_name_regex()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    if not isinstance(value, str):\n        raise ValidationError(f'{value} is not a string.')\n\n    # Split on colon.\n    if value.startswith(':'):\n        value = value[1:]\n\n    # Validate each label.\n    for label in _get_labels_regex():\n        if label.match(value):\n            break\n    else:\n        raise ValidationError(f'{value} is not a valid label.')\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_labels(value)\n", "def validate_value(value):\n    _validate_resource_name_regex(_resource_name_pattern, value)\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n", "def validate_value(value):\n    if not isinstance(value, str):\n        raise ValueError(f\"'{value}' is not a string.\")\n    if not _label_key_pattern.match(value):\n        raise ValueError(f\"'{value}' is not a valid label.\")\n    if not _label_value_pattern.match(value):\n        raise ValueError(f\"'{value}' is not a valid label value.\")\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n", "def validate_value(value):\n    if not _label_key_pattern.match(value):\n        raise ValidationError(f\"'{value}' is not a valid label key.\")\n    if not _label_value_pattern.match(value):\n        raise ValidationError(f\"'{value}' is not a valid label value.\")\n    if value not in _get_labels_regex():\n        raise ValidationError(f\"'{value}' is not a valid label value.\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    if not isinstance(value, str):\n        raise ValidationError(f'{value} is not a string.')\n\n    # Split on colon.\n    if value.startswith(':'):\n        value = value[1:]\n\n    # Validate each label.\n    for label in _get_labels_regex():\n        if label.match(value):\n            break\n    else:\n        raise ValidationError(f'{value} is not a valid label.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_labels(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name_regex(_resource_name_pattern, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not isinstance(value, str):\n        raise ValueError(f\"'{value}' is not a string.\")\n    if not _label_key_pattern.match(value):\n        raise ValueError(f\"'{value}' is not a valid label.\")\n    if not _label_value_pattern.match(value):\n        raise ValueError(f\"'{value}' is not a valid label value.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not _label_key_pattern.match(value):\n        raise ValidationError(f\"'{value}' is not a valid label key.\")\n    if not _label_value_pattern.match(value):\n        raise ValidationError(f\"'{value}' is not a valid label value.\")\n    if value not in _get_labels_regex():\n        raise ValidationError(f\"'{value}' is not a valid label value.\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "def validate_key(key):\n    _validate_labels(get_labels(key))\n    _validate_resource_name(get_resource_name(key))\n", "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(f\"'{key}' is not a valid key.\")\n", "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "def validate_key(key):\n    _validate_labels(*_get_labels_regex(key))\n", "def validate_key(key):\n    _validate_labels(_get_labels(key))\n    _validate_resource_name(key)\n", "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "def validate_key(key):\n    match = _label_key_pattern.match(key)\n    if not match:\n        raise ValidationError(\"Invalid label key format: {!r}\".format(key))\n\n    # Validate the label key name\n    label_name = match.group('name')\n    if not _label_key_regex.match(label_name):\n        raise ValidationError(\"Invalid label key name: {!r}\".format(label_name))\n\n    # Validate the label value regex\n    label_value_regex = match.group('value_regex')\n    if not _label_value_regex.match(label_value_regex):\n        raise ValidationError(\"Invalid label value regex: {!r}\".format(label_value_regex))\n\n    return match.lastgroup\n", "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(\n            \"Invalid label key: {!r}. Must match the label key pattern: \"\n            \"{!r}.\".format(key, _label_key_pattern),\n            key,\n        )\n", "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(\"Invalid label key: {!r}\".format(key))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(get_labels(key))\n    _validate_resource_name(get_resource_name(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(f\"'{key}' is not a valid key.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(*_get_labels_regex(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(_get_labels(key))\n    _validate_resource_name(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    match = _label_key_pattern.match(key)\n    if not match:\n        raise ValidationError(\"Invalid label key format: {!r}\".format(key))\n\n    # Validate the label key name\n    label_name = match.group('name')\n    if not _label_key_regex.match(label_name):\n        raise ValidationError(\"Invalid label key name: {!r}\".format(label_name))\n\n    # Validate the label value regex\n    label_value_regex = match.group('value_regex')\n    if not _label_value_regex.match(label_value_regex):\n        raise ValidationError(\"Invalid label value regex: {!r}\".format(label_value_regex))\n\n    return match.lastgroup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(\n            \"Invalid label key: {!r}. Must match the label key pattern: \"\n            \"{!r}.\".format(key, _label_key_pattern),\n            key,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValidationError(\"Invalid label key: {!r}\".format(key))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'manifest': manifest_dict}\n\n    return {'observer': manifest_dict}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below\n    part. For a partial Kubernetes resource, this function is called recursively to generate part of a partial\n    Kubernetes resource and replace all non-list and non-dict values by None.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource first_level (bool, optional): If True, indicates that the\n            dictionary represents the whole observer_schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    \"\"\"\n    if manifest_dict.get('kind') == 'Config':\n        return generate_default_observer_schema_dict(manifest_dict.get('data'), first_level=True)\n    else:\n        return {k: v for k, v in manifest_dict.items() if not isinstance(v, list) and not isinstance(v, dict)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        logger.error('Observer schema cannot be generated for a resource without manifest.')\n        raise ValueError('Observer schema cannot be generated for a resource without manifest.')\n    manifest_dict.update({'manifest': None})\n    manifest_dict.update({'apiVersion': 'v1'})\n    manifest_dict.update({'kind': 'observer'})\n    return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    return {'$ref': '#/definitions/ObserverSchema/{}'.format(manifest_dict['name'])}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    manifest_list = manifest_dict.get('manifestList', None)\n    if manifest_list is not None:\n        manifest_dict = generate_default_observer_schema_list(manifest_list)\n\n    manifest_dict.update({\n       'manifestVersion': 'v1',\n        'kind': 'Observer',\n       'metadata': {\n            'name': manifest_dict.get('name'),\n            'labels': manifest_dict.get('labels', None),\n        },\n    })\n    if first_level:\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if isinstance(manifest_dict, dict):\n        return {\n            k: generate_default_observer_schema_dict(v, first_level=first_level)\n            for k, v in manifest_dict.items()\n        }\n    if isinstance(manifest_dict, list):\n        return [\n            generate_default_observer_schema_dict(v, first_level=first_level)\n            for v in manifest_dict\n        ]\n    if first_level:\n        return {\n            k: v if not isinstance(v, dict) else generate_default_observer_schema_dict(v, first_level=False)\n            for k, v in manifest_dict.items()\n        }\n    return None\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector')\n            },\n           'spec': manifest_dict.get('spec'),\n           'status': manifest_dict.get('status')\n        }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n            'type': None,\n           'status': None,\n           'subject': None\n        }\n\n    return {\n       'metadata': generate_default_observer_schema_dict(manifest_dict.get('metadata', {})),\n       'spec': generate_default_observer_schema_dict(manifest_dict.get('spec', {})),\n        'type': manifest_dict.get('type', None),\n       'status': manifest_dict.get('status', None),\n       'subject': manifest_dict.get('subject', None),\n    }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = {}\n        for k, v in manifest_dict.items():\n            if isinstance(v, dict):\n                schema[k] = generate_default_observer_schema_dict(v, True)\n            else:\n                schema[k] = None\n        return schema\n    else:\n        return {'observer': manifest_dict.get('observer', None)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n    else:\n        return copy.deepcopy(manifest_dict)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'manifest': manifest_dict}\n\n    return {'observer': manifest_dict}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below\n    part. For a partial Kubernetes resource, this function is called recursively to generate part of a partial\n    Kubernetes resource and replace all non-list and non-dict values by None.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource first_level (bool, optional): If True, indicates that the\n            dictionary represents the whole observer_schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    \"\"\"\n    if manifest_dict.get('kind') == 'Config':\n        return generate_default_observer_schema_dict(manifest_dict.get('data'), first_level=True)\n    else:\n        return {k: v for k, v in manifest_dict.items() if not isinstance(v, list) and not isinstance(v, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        logger.error('Observer schema cannot be generated for a resource without manifest.')\n        raise ValueError('Observer schema cannot be generated for a resource without manifest.')\n    manifest_dict.update({'manifest': None})\n    manifest_dict.update({'apiVersion': 'v1'})\n    manifest_dict.update({'kind': 'observer'})\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    return {'$ref': '#/definitions/ObserverSchema/{}'.format(manifest_dict['name'])}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    manifest_list = manifest_dict.get('manifestList', None)\n    if manifest_list is not None:\n        manifest_dict = generate_default_observer_schema_list(manifest_list)\n\n    manifest_dict.update({\n       'manifestVersion': 'v1',\n        'kind': 'Observer',\n       'metadata': {\n            'name': manifest_dict.get('name'),\n            'labels': manifest_dict.get('labels', None),\n        },\n    })\n    if first_level:\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if isinstance(manifest_dict, dict):\n        return {\n            k: generate_default_observer_schema_dict(v, first_level=first_level)\n            for k, v in manifest_dict.items()\n        }\n    if isinstance(manifest_dict, list):\n        return [\n            generate_default_observer_schema_dict(v, first_level=first_level)\n            for v in manifest_dict\n        ]\n    if first_level:\n        return {\n            k: v if not isinstance(v, dict) else generate_default_observer_schema_dict(v, first_level=False)\n            for k, v in manifest_dict.items()\n        }\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector')\n            },\n           'spec': manifest_dict.get('spec'),\n           'status': manifest_dict.get('status')\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n            'type': None,\n           'status': None,\n           'subject': None\n        }\n\n    return {\n       'metadata': generate_default_observer_schema_dict(manifest_dict.get('metadata', {})),\n       'spec': generate_default_observer_schema_dict(manifest_dict.get('spec', {})),\n        'type': manifest_dict.get('type', None),\n       'status': manifest_dict.get('status', None),\n       'subject': manifest_dict.get('subject', None),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = {}\n        for k, v in manifest_dict.items():\n            if isinstance(v, dict):\n                schema[k] = generate_default_observer_schema_dict(v, True)\n            else:\n                schema[k] = None\n        return schema\n    else:\n        return {'observer': manifest_dict.get('observer', None)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n    else:\n        return copy.deepcopy(manifest_dict)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with inspect logging asyncio collections so secrets operator\n    collections base64 console enum functools datetime random copy\n    logger (logging.Logger): logger to log messages to\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(app, response)\n    update_last_observed_manifest_dict(observed_resource, respon", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections\n        secrets operator base64 collections secrets so file logger aiohttp asyncio secrets\n        enum functools datetime yarl file logger so listen and update_last_applied_manifest_from_resp\n        resp\n        functools\n        collections.abc.MutableMapping\n    \"\"\"\n    update_last_applied_manifest_dict(last_applied_manifest, observer_schema, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema`` response\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they are\n        not yet present with import inspect logging asyncio collections secret so yarl\n        file logger\n        secrets operator base64 console enum functools datetime random copy logging\n        aiohttp asyncio secrets enum functools krake datetime random copy\n        logger\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n   ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections secret so base64\n                                                                                                                                                                                                                       ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n        through all observed fields, and initialized their value in last_applied_manifest\n        if their values are not yet present with import inspect logging aiohttp asyncio\n        secrets operator base64 collections secrets so function goes through\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app, response)\n        update_last_observed_manifest_from_resp(app, response)\n    \"\"", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated from the Kubernetes API.\n        This function gothrough all observed fields, and initialized\n        their value in last_applied_manifest if they are not yet\n        present with import inspect logging asyncio collections\n        secrets so boto3 collections secrets so boto3 aiohttp secrets\n        enum functools datetime random copy\n\n        boto3 secrets enum functools krake datetime random\n        copy\n    \"\"\"\n    return update_last_applied_manifest_from_resp(\n        last_applied_manifest, observer_schema, response\n    )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections so\n    base64 collections secret operator secret so yarl file logger\n        collections enum\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema,\n        response)\n    update_last_observed_manifest_from_resp(app, response)\n    \"\"\"\n    return update_last_applie", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if they are not yet present with import inspect logging asyncio collections\n            secrets operator base64 string function collections enum functools datetime\n            yarl file logger\n            listen\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app,response)\n    \"", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with inspect logging asyncio collections secret operator\n        base64 collections soup file logger\n        secrets operator secret functools generator secret functools yarl file logger\n        listen (update_last_applied_manifest_from_resp)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_observed_manifest_from_resp(app,", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` if they are not\n    yet present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` dict\n\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n    observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_res"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with inspect logging asyncio collections so secrets operator\n    collections base64 console enum functools datetime random copy\n    logger (logging.Logger): logger to log messages to\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(app, response)\n    update_last_observed_manifest_dict(observed_resource, respon", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections\n        secrets operator base64 collections secrets so file logger aiohttp asyncio secrets\n        enum functools datetime yarl file logger so listen and update_last_applied_manifest_from_resp\n        resp\n        functools\n        collections.abc.MutableMapping\n    \"\"\"\n    update_last_applied_manifest_dict(last_applied_manifest, observer_schema, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema`` response\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they are\n        not yet present with import inspect logging asyncio collections secret so yarl\n        file logger\n        secrets operator base64 console enum functools datetime random copy logging\n        aiohttp asyncio secrets enum functools krake datetime random copy\n        logger\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections secret so base64\n                                                                                                                                                                                                                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n        through all observed fields, and initialized their value in last_applied_manifest\n        if their values are not yet present with import inspect logging aiohttp asyncio\n        secrets operator base64 collections secrets so function goes through\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app, response)\n        update_last_observed_manifest_from_resp(app, response)\n    \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated from the Kubernetes API.\n        This function gothrough all observed fields, and initialized\n        their value in last_applied_manifest if they are not yet\n        present with import inspect logging asyncio collections\n        secrets so boto3 collections secrets so boto3 aiohttp secrets\n        enum functools datetime random copy\n\n        boto3 secrets enum functools krake datetime random\n        copy\n    \"\"\"\n    return update_last_applied_manifest_from_resp(\n        last_applied_manifest, observer_schema, response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections so\n    base64 collections secret operator secret so yarl file logger\n        collections enum\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema,\n        response)\n    update_last_observed_manifest_from_resp(app, response)\n    \"\"\"\n    return update_last_applie", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if they are not yet present with import inspect logging asyncio collections\n            secrets operator base64 string function collections enum functools datetime\n            yarl file logger\n            listen\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app,response)\n    \"", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with inspect logging asyncio collections secret operator\n        base64 collections soup file logger\n        secrets operator secret functools generator secret functools yarl file logger\n        listen (update_last_applied_manifest_from_resp)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_observed_manifest_from_resp(app,", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` if they are not\n    yet present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` dict\n\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n    observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_res", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in observer_schema:\n        if key in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], observer_schema[key], response)\n        else:\n            last_applied_manifest[key] = response[key]\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], response[field])\n        else:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], None)\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    Returns:\n        dict: updated ``last_applied_manifest``\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if response[key]!= observer_schema[key]:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema``\n            being updated\n        response (dict): partial ``response``\n            being updated\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes\n            response\n\n    Returns:\n        dict: updated ``last_applied_manifest`` dict\n    \"\"\"\n    for key in observer_schema:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[key]\n        else:\n            last_applied_manifest[key] = update_last_applied_manifest_dict_from_resp(\n                last_applied", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    This function is called recursively to update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if the observed\n            field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    update_last_applied_manifest_list_from_resp(\n        last_applied_manifest=last_applied_manifest, observer_schema=observer_schema, response=response\n    )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = {}\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if\n            the observed field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n        Yields:\n            dict: updated ``last_applied_manifest``\n    \"\"\"\n    for field, value in response.items():\n        if field not in observer_schema:\n            continue\n\n        setattr(last_applied_manifest, field, value)\n        yield from update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schem", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema`` being updated\n            with import inspect logging asyncio collections secret so base64\n            conversion secrets operator base64 contextlib enum functools\n            syncio collections secret so collections secret so listen\n            function base64 conversion secrets operator collections secret\n            so collections secret so collections secret so logger\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes\n            response\n\n    \"\"\"\n    return update_last_applied_manifest_dict_from_resp(\n        last_applied_manifest=last_applied_manifest,\n        observer_schema", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n        raises: KeyError: If the observed field is not present in the Kubernetes response\n\n        Returns:\n            dict: updated ``last_applied_manifest``\n\n    \"\"\"\n    for key in observer_schema:\n        if key not in response:\n            continue\n\n        if isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema[key], response[key]\n            )\n        else:\n            last_applied_manifest[ke"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in observer_schema:\n        if key in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], observer_schema[key], response)\n        else:\n            last_applied_manifest[key] = response[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], response[field])\n        else:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], None)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    Returns:\n        dict: updated ``last_applied_manifest``\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if response[key]!= observer_schema[key]:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema``\n            being updated\n        response (dict): partial ``response``\n            being updated\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes\n            response\n\n    Returns:\n        dict: updated ``last_applied_manifest`` dict\n    \"\"\"\n    for key in observer_schema:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[key]\n        else:\n            last_applied_manifest[key] = update_last_applied_manifest_dict_from_resp(\n                last_applied", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    This function is called recursively to update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if the observed\n            field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    update_last_applied_manifest_list_from_resp(\n        last_applied_manifest=last_applied_manifest, observer_schema=observer_schema, response=response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = {}\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if\n            the observed field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n        Yields:\n            dict: updated ``last_applied_manifest``\n    \"\"\"\n    for field, value in response.items():\n        if field not in observer_schema:\n            continue\n\n        setattr(last_applied_manifest, field, value)\n        yield from update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schem", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema`` being updated\n            with import inspect logging asyncio collections secret so base64\n            conversion secrets operator base64 contextlib enum functools\n            syncio collections secret so collections secret so listen\n            function base64 conversion secrets operator collections secret\n            so collections secret so collections secret so logger\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes\n            response\n\n    \"\"\"\n    return update_last_applied_manifest_dict_from_resp(\n        last_applied_manifest=last_applied_manifest,\n        observer_schema", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n        raises: KeyError: If the observed field is not present in the Kubernetes response\n\n        Returns:\n            dict: updated ``last_applied_manifest``\n\n    \"\"\"\n    for key in observer_schema:\n        if key not in response:\n            continue\n\n        if isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema[key], response[key]\n            )\n        else:\n            last_applied_manifest[ke", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    spec = app.kubernetes_spec\n    if spec.observer_schema is None:\n        return\n    logger.debug(\"Generating default observer schema for %s\", spec.name)\n    manifest_dict = generate_observer_schema_dict(\n        spec.observer_schema, app.kubernetes_spec.api_version\n    )\n    update_last_observed_manifest_dict_from_resp(\n        last_applied_manifest=spec.last_applied_manifest,\n        observer_schema=manifest_dict,\n        response=spec.last_response,\n    )\n", "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        logger.debug('KubernetesResourceObserver is specified, generating default schema')\n        return generate_default_observer_schema_dict(app)\n    else:\n        logger.debug('No KubernetesResourceObserver is specified, ignoring the default schema')\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    logger.debug('Generated default observer schema: {}'.format(manifest_dict))\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    spec = app.spec.to_dict()\n    manifest_dict = app.spec.to_manifest()\n    logger.debug('Generating default observer schema')\n    observer_schema = generate_observer_schema(spec, manifest_dict)\n    return observer_schema\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    return update_last_applied_manifest_dict_from_resp(\n        manifest_dict, app.manifest, response=app.response\n    )\n", "def generate_default_observer_schema(app):\n    return generate_observer_schema(app, create=True)\n", "def generate_default_observer_schema(app):\n    spec = app.config.get('Kubernetes', {}).get('observer_schema')\n    if spec is not None:\n        return generate_observer_schema_dict(spec)\n", "def generate_default_observer_schema(app):\n    manifest_spec = app.spec.observer_schema\n    if manifest_spec is None:\n        return\n\n    logger.debug(\"Generating default observer schema from spec: %s\",\n                 manifest_spec)\n    return generate_observer_schema(manifest_spec)\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    update_last_observed_manifest_dict_from_resp(manifest_dict, app, response=True)\n    update_last_applied_manifest_dict_from_resp(manifest_dict, app, response=True)\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    manifest = utils.load_yaml_from_path(app.config.get('Kubernetes','manifest'))\n    return generate_observer_schema(manifest)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    spec = app.kubernetes_spec\n    if spec.observer_schema is None:\n        return\n    logger.debug(\"Generating default observer schema for %s\", spec.name)\n    manifest_dict = generate_observer_schema_dict(\n        spec.observer_schema, app.kubernetes_spec.api_version\n    )\n    update_last_observed_manifest_dict_from_resp(\n        last_applied_manifest=spec.last_applied_manifest,\n        observer_schema=manifest_dict,\n        response=spec.last_response,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        logger.debug('KubernetesResourceObserver is specified, generating default schema')\n        return generate_default_observer_schema_dict(app)\n    else:\n        logger.debug('No KubernetesResourceObserver is specified, ignoring the default schema')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    logger.debug('Generated default observer schema: {}'.format(manifest_dict))\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec = app.spec.to_dict()\n    manifest_dict = app.spec.to_manifest()\n    logger.debug('Generating default observer schema')\n    observer_schema = generate_observer_schema(spec, manifest_dict)\n    return observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    return update_last_applied_manifest_dict_from_resp(\n        manifest_dict, app.manifest, response=app.response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    return generate_observer_schema(app, create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec = app.config.get('Kubernetes', {}).get('observer_schema')\n    if spec is not None:\n        return generate_observer_schema_dict(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_spec = app.spec.observer_schema\n    if manifest_spec is None:\n        return\n\n    logger.debug(\"Generating default observer schema from spec: %s\",\n                 manifest_spec)\n    return generate_observer_schema(manifest_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    update_last_observed_manifest_dict_from_resp(manifest_dict, app, response=True)\n    update_last_applied_manifest_dict_from_resp(manifest_dict, app, response=True)\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = utils.load_yaml_from_path(app.config.get('Kubernetes','manifest'))\n    return generate_observer_schema(manifest)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. Its maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLES\nclass.  then :class:`.__repr", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style,\nthievely the :class:`.Mapping` then the :class:`.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, str]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style. then\n*params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or :class:`list`).\nwith import typing retyping file _BYTES_EN", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, Union[int, bytes]] = None\n) -> Tuple[bytes, Sequence[Mapping[str, Union[int, bytes]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) must contain the \nspectral parameters (:class:`str` or :class:`int`) \ncontains the set of out-style parameters. \n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`. \n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byte", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Union[str, bytes]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\n* If :attr:`.SQLParams.in_style` is a named parameter style.\nor if :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:clas", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str`\nor :class:`int`) to value. If :attr:`.SQLParams.in_style` is\na named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLE", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`. Returns a :class:`tuple`\ncontaining:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\n\n:_BYTES_ENCODING\n:_STYLES\n\n\"\"\"", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str`\nor :class:`int`) to value.  If :attr:`.SQLParams.in_style` is\nnamed parameter style. then *params* must be a :class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import typing retyping file _BYTES_ENCODING\nand _STYLES", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. If :attr:`.SQLParams.in_style` is a named\nparameters style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\nand _STYLES\n\n:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`. with import typing file\n_BYTES_ENCO", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._format_impl(sql, params)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. Its maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLES\nclass.  then :class:`.__repr", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style,\nthievely the :class:`.Mapping` then the :class:`.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, str]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style. then\n*params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or :class:`list`).\nwith import typing retyping file _BYTES_EN", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, Union[int, bytes]] = None\n) -> Tuple[bytes, Sequence[Mapping[str, Union[int, bytes]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) must contain the \nspectral parameters (:class:`str` or :class:`int`) \ncontains the set of out-style parameters. \n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`. \n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byte", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Union[str, bytes]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\n* If :attr:`.SQLParams.in_style` is a named parameter style.\nor if :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:clas", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str`\nor :class:`int`) to value. If :attr:`.SQLParams.in_style` is\na named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLE", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`. Returns a :class:`tuple`\ncontaining:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\n\n:_BYTES_ENCODING\n:_STYLES\n\n\"\"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str`\nor :class:`int`) to value.  If :attr:`.SQLParams.in_style` is\nnamed parameter style. then *params* must be a :class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import typing retyping file _BYTES_ENCODING\nand _STYLES", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. If :attr:`.SQLParams.in_style` is a named\nparameters style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\nand _STYLES\n\n:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`. with import typing file\n_BYTES_ENCO", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._format_impl(sql, params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.  If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameters parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\npara", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`).  with import typing class self._create_converter()\n  and self.format(sql, params)\n . self.__class__ then :class:`~collections.abc.Mapping", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]]\n) -> Tuple[bytes, List[Dict[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\nThrows :class:`.ParamsFormatError`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`)", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nand then *params* must be a :class:`~collections.abc.Mapping`.  If\n:attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Mapping[str, int] = None,\n*params: Mapping[str, int] = None\n) -> Tuple[bytes, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters. - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. Its maps each parameter (:class:`str or :class:`int`) to\nvalue. If :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of\nconvertable out-style parameters (:class:`dict` or :class:`list`). If\n:attr:`.SQLParams.in_style` is a named parameter style.\none param must be a ", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[bytes, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  Its maps each parameter (:class:`str or :class:`int`) to\nthe value.  If :attr:`.SQLParams.in_style` is a named parameter\nstyle. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams ", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dic", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, bytes]] = (),\nparams: Mapping[Union[str, bytes], Any] = None\n) -> Tuple[str, List[Mapping[Union[str, bytes], Any]]]:\nif self.in_style == 'ordinal':\nreturn self._create_in_regex().formatmany(sql, many_params, params)\nelse:\nreturn self._create_converter().formatmany(sql, many_params, params)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[bytes, list]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\nEach set of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :clas"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.  If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameters parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\npara", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`).  with import typing class self._create_converter()\n  and self.format(sql, params)\n . self.__class__ then :class:`~collections.abc.Mapping", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]]\n) -> Tuple[bytes, List[Dict[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\nThrows :class:`.ParamsFormatError`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nand then *params* must be a :class:`~collections.abc.Mapping`.  If\n:attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Mapping[str, int] = None,\n*params: Mapping[str, int] = None\n) -> Tuple[bytes, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters. - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. Its maps each parameter (:class:`str or :class:`int`) to\nvalue. If :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of\nconvertable out-style parameters (:class:`dict` or :class:`list`). If\n:attr:`.SQLParams.in_style` is a named parameter style.\none param must be a ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[bytes, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  Its maps each parameter (:class:`str or :class:`int`) to\nthe value.  If :attr:`.SQLParams.in_style` is a named parameter\nstyle. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dic", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, bytes]] = (),\nparams: Mapping[Union[str, bytes], Any] = None\n) -> Tuple[str, List[Mapping[Union[str, bytes], Any]]]:\nif self.in_style == 'ordinal':\nreturn self._create_in_regex().formatmany(sql, many_params, params)\nelse:\nreturn self._create_converter().formatmany(sql, many_params, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[bytes, list]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\nEach set of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :clas", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n\n    if path is None:\n        return True\n\n    return self.obj_fs.isfile(path)\n", "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.debug(\"%s: %s\", e, path)\n        return False\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"path '%s' is not a directory\", path)\n        return False\n\n    if self.obj_fs.exists(path):\n        self.log.debug(\"path '%s' is a file\", path)\n        return True\n\n    self.log.debug(\"path '%s' is not a file\", path)\n    return False\n", "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.obj_fs.stat(path)\n    except FileNotFoundError:\n        self.log.debug(\"Path does not exist: %s\", path)\n        return False\n    except PermissionError:\n        self.log.debug(\"Path is not readable: %s\", path)\n        return False\n    return True\n", "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return True\n", "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    if not self.content_directory:\n        self.log.debug(\"No content directory specified, cannot validate\")\n        return False\n\n    return self.obj_fs.isfile(os.path.join(self.content_directory, path))\n", "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.obj_fs.isdir(path):\n        self.log.warn(\"%s is a directory, but is a file\", path)\n        return False\n\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.info('%s is not a directory', path)\n        return False\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"%s is not a directory\", path)\n        return False\n\n    if not self.obj_fs.isfile(os.path.join(path, self.id + '.py')):\n        self.log.debug(\"%s is not a file\", path)\n        return False\n\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n\n    if path is None:\n        return True\n\n    return self.obj_fs.isfile(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.debug(\"%s: %s\", e, path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"path '%s' is not a directory\", path)\n        return False\n\n    if self.obj_fs.exists(path):\n        self.log.debug(\"path '%s' is a file\", path)\n        return True\n\n    self.log.debug(\"path '%s' is not a file\", path)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.obj_fs.stat(path)\n    except FileNotFoundError:\n        self.log.debug(\"Path does not exist: %s\", path)\n        return False\n    except PermissionError:\n        self.log.debug(\"Path is not readable: %s\", path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    if not self.content_directory:\n        self.log.debug(\"No content directory specified, cannot validate\")\n        return False\n\n    return self.obj_fs.isfile(os.path.join(self.content_directory, path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.obj_fs.isdir(path):\n        self.log.warn(\"%s is a directory, but is a file\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.info('%s is not a directory', path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"%s is not a directory\", path)\n        return False\n\n    if not self.obj_fs.isfile(os.path.join(path, self.id + '.py')):\n        self.log.debug(\"%s is not a file\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[{}] '.format(self.status)\n    s += '{}{}: '.format(prefix, self.lang)\n    s += '{}{}'.format(prefix, self.messages)\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[' + self.status + ']'\n    if self.show_warnings:\n        s +='' + prefix + 'Warnings:'+ str(len(self.warnings)) + '/' + str(len(self.spec)) +'- '\n    if len(self.warnings) > 0:\n        s += ', '.join(self.warnings)\n    if len(self.errors) > 0:\n        s += ', '.join(self.errors)\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.show_warnings:\n        s += 'Warnings: '\n    if self.show_errors:\n        s += 'Errors: '\n    if self.num_errors:\n        s += 'Errors (%d):'% self.num_errors\n    if self.num_warnings:\n        s += 'Warnings (%d):'% self.num_warnings\n    s += prefix + self.status_str\n    return s\n", "def status_str(self, prefix=''):\n    result = ''\n    if self.show_errors:\n        result += '[!] '\n    result += 'Validation status: '\n    result += 'OK' if self.status == 'OK' else ''\n    result += '(' + self.status_str(prefix) + ')'\n    return result\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.num_errors == 0:\n        s += 'PASSED'\n    else:\n        s += 'FAILURE'\n        if self.show_warnings:\n            s +='(%d/%d)' % (self.num_errors, self.num_warnings)\n    if self.num_warnings > 0:\n        s +='(%d/%d)' % (self.num_warnings, self.num_errors)\n    elif self.num_errors == 0:\n        s += 'NOT PASSED'\n    else:\n        s += 'NOT VALID'\n    if prefix:\n        s = '%s: %s' % (prefix, s)\n    return s\n", "def status_str(self, prefix=''):\n    result = []\n    for status, msg in self.status_messages:\n        if status:\n            result.append('{} {}'.format(prefix, status))\n        result.append(msg)\n    return ', '.join(result)\n", "def status_str(self, prefix=''):\n    result = []\n    if self.show_warnings:\n        result.append('Warnings:')\n    if self.show_errors:\n        result.append('Errors:')\n    if self.num_warnings:\n        result.append('Warning (%d):' % self.num_warnings)\n    if self.num_errors:\n        result.append('Error (%d):' % self.num_errors)\n    if prefix:\n        result.append('%s:'% prefix)\n    else:\n        result.append('')\n    if self.status_str is not None:\n        result.append(self.status_str)\n    return''.join(result)\n", "def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '%sWarnings: %d' % (prefix, self.num_warnings)\n    else:\n        return '%sErrors: %d' % (prefix, self.num_errors)\n", "def status_str(self, prefix=''):\n    return ', '.join('%s: %s' % (k, v) for k, v in sorted(self.status_dict.items()))\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status_ok():\n        s += 'OK'\n    if self.status_error():\n        s += 'ERROR'\n    if self.status_warning():\n        s += 'WARNING'\n    if len(self.errors) > 0:\n        s += ', '.join(self.errors)\n    if len(self.warnings) > 0:\n        s += ', '.join(self.warnings)\n    if len(self.status_messages()) > 0:\n        s += ', '.join(self.status_messages())\n    if len(self.spec) > 0:\n        s += ', '.join(self.spec)\n    if len(self.messages) > 0:\n        s += ', '.join(self.messages)\n    if len(self.info) > 0:\n        s += ', '.join(self.info)\n    if len(self.codes) > 0:\n        s += ', '.join(self.codes)\n    if len(s) > 0:\n        s = '%s%s' % (prefix, s"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[{}] '.format(self.status)\n    s += '{}{}: '.format(prefix, self.lang)\n    s += '{}{}'.format(prefix, self.messages)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[' + self.status + ']'\n    if self.show_warnings:\n        s +='' + prefix + 'Warnings:'+ str(len(self.warnings)) + '/' + str(len(self.spec)) +'- '\n    if len(self.warnings) > 0:\n        s += ', '.join(self.warnings)\n    if len(self.errors) > 0:\n        s += ', '.join(self.errors)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.show_warnings:\n        s += 'Warnings: '\n    if self.show_errors:\n        s += 'Errors: '\n    if self.num_errors:\n        s += 'Errors (%d):'% self.num_errors\n    if self.num_warnings:\n        s += 'Warnings (%d):'% self.num_warnings\n    s += prefix + self.status_str\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = ''\n    if self.show_errors:\n        result += '[!] '\n    result += 'Validation status: '\n    result += 'OK' if self.status == 'OK' else ''\n    result += '(' + self.status_str(prefix) + ')'\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.num_errors == 0:\n        s += 'PASSED'\n    else:\n        s += 'FAILURE'\n        if self.show_warnings:\n            s +='(%d/%d)' % (self.num_errors, self.num_warnings)\n    if self.num_warnings > 0:\n        s +='(%d/%d)' % (self.num_warnings, self.num_errors)\n    elif self.num_errors == 0:\n        s += 'NOT PASSED'\n    else:\n        s += 'NOT VALID'\n    if prefix:\n        s = '%s: %s' % (prefix, s)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = []\n    for status, msg in self.status_messages:\n        if status:\n            result.append('{} {}'.format(prefix, status))\n        result.append(msg)\n    return ', '.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = []\n    if self.show_warnings:\n        result.append('Warnings:')\n    if self.show_errors:\n        result.append('Errors:')\n    if self.num_warnings:\n        result.append('Warning (%d):' % self.num_warnings)\n    if self.num_errors:\n        result.append('Error (%d):' % self.num_errors)\n    if prefix:\n        result.append('%s:'% prefix)\n    else:\n        result.append('')\n    if self.status_str is not None:\n        result.append(self.status_str)\n    return''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '%sWarnings: %d' % (prefix, self.num_warnings)\n    else:\n        return '%sErrors: %d' % (prefix, self.num_errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join('%s: %s' % (k, v) for k, v in sorted(self.status_dict.items()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status_ok():\n        s += 'OK'\n    if self.status_error():\n        s += 'ERROR'\n    if self.status_warning():\n        s += 'WARNING'\n    if len(self.errors) > 0:\n        s += ', '.join(self.errors)\n    if len(self.warnings) > 0:\n        s += ', '.join(self.warnings)\n    if len(self.status_messages()) > 0:\n        s += ', '.join(self.status_messages())\n    if len(self.spec) > 0:\n        s += ', '.join(self.spec)\n    if len(self.messages) > 0:\n        s += ', '.join(self.messages)\n    if len(self.info) > 0:\n        s += ', '.join(self.info)\n    if len(self.codes) > 0:\n        s += ', '.join(self.codes)\n    if len(s) > 0:\n        s = '%s%s' % (prefix, s", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    s = \"\"\n    if self.log:\n        s += \"\\n==== %s ====\\n\" % self.status_str(prefix)\n        s += \"%s\\n\" % self.log\n        s += \"===============\\n\\n\"\n    return s\n", "def status_str(self, prefix=''):\n    if self.status_str_fn:\n        return self.status_str_fn(self, prefix)\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    return \"{0}{1}\".format(prefix, self.status_str_map.get(self.status, \"Unknown\"))\n", "def status_str(self, prefix=''):\n    s = \"{}{} ({})\".format(prefix, self.id, self.status_str_value)\n    if self.log is not None:\n        s += \" ({})\".format(self.log)\n    return s\n", "def status_str(self, prefix=''):\n    l = []\n    l.append(\"{}file: {}\".format(prefix, self.obj_fs.path.name))\n    for k, v in self.lax_digests.items():\n        l.append(\"{}{}: {}\".format(prefix, k, v))\n    l.append(\"{}digest: {}\".format(prefix, self.digest_algorithm))\n    if self.digest_algorithm == \"sha256\":\n        l.append(\"{}digest_algorithm: sha256\".format(prefix))\n    return \"\\n\".join(l)\n", "def status_str(self, prefix=''):\n    if self.log:\n        s = 'Validating {} against {} using {}'.format(\n            self.id, self.spec_version, self.digest_algorithm)\n        if self.digest_algorithm =='sha256':\n            s +='with SHA256'\n        elif self.digest_algorithm =='sha1':\n            s +='with SHA1'\n        elif self.digest_algorithm =='sha512':\n            s +='with SHA512'\n        elif self.digest_algorithm =='sha512_256':\n            s +='with SHA512_256'\n        else:\n            s +='with {} unknown'.format(self.digest_algorithm)\n        s +='for inventory {}'.format(self.inventory_digest_file)\n        return prefix + s\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '{} | {}'.format(prefix, self.status_str)\n    return status_str\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status_strs:\n        s += 'Validation log for {0}\\n'.format(prefix)\n        for key, val in self.status_strs.items():\n            s += '{0}: {1}\\n'.format(key, val)\n    return s\n", "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.status_str_map.get(self.status, self.status))\n", "def status_str(self, prefix=''):\n    if self.status_str_map is None:\n        self.status_str_map = {}\n        for status in self.status_str:\n            self.status_str_map[status] = 1\n\n    s = prefix + \": \"\n    for status in self.status_str:\n        if status in self.status_str_map:\n            s += status + \"=\" + str(self.status_str_map[status])\n        else:\n            s += status + \" \"\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    s = \"\"\n    if self.log:\n        s += \"\\n==== %s ====\\n\" % self.status_str(prefix)\n        s += \"%s\\n\" % self.log\n        s += \"===============\\n\\n\"\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str_fn:\n        return self.status_str_fn(self, prefix)\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return \"{0}{1}\".format(prefix, self.status_str_map.get(self.status, \"Unknown\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = \"{}{} ({})\".format(prefix, self.id, self.status_str_value)\n    if self.log is not None:\n        s += \" ({})\".format(self.log)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    l = []\n    l.append(\"{}file: {}\".format(prefix, self.obj_fs.path.name))\n    for k, v in self.lax_digests.items():\n        l.append(\"{}{}: {}\".format(prefix, k, v))\n    l.append(\"{}digest: {}\".format(prefix, self.digest_algorithm))\n    if self.digest_algorithm == \"sha256\":\n        l.append(\"{}digest_algorithm: sha256\".format(prefix))\n    return \"\\n\".join(l)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.log:\n        s = 'Validating {} against {} using {}'.format(\n            self.id, self.spec_version, self.digest_algorithm)\n        if self.digest_algorithm =='sha256':\n            s +='with SHA256'\n        elif self.digest_algorithm =='sha1':\n            s +='with SHA1'\n        elif self.digest_algorithm =='sha512':\n            s +='with SHA512'\n        elif self.digest_algorithm =='sha512_256':\n            s +='with SHA512_256'\n        else:\n            s +='with {} unknown'.format(self.digest_algorithm)\n        s +='for inventory {}'.format(self.inventory_digest_file)\n        return prefix + s\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '{} | {}'.format(prefix, self.status_str)\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status_strs:\n        s += 'Validation log for {0}\\n'.format(prefix)\n        for key, val in self.status_strs.items():\n            s += '{0}: {1}\\n'.format(key, val)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.status_str_map.get(self.status, self.status))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str_map is None:\n        self.status_str_map = {}\n        for status in self.status_str:\n            self.status_str_map[status] = 1\n\n    s = prefix + \": \"\n    for status in self.status_str:\n        if status in self.status_str_map:\n            s += status + \"=\" + str(self.status_str_map[status])\n        else:\n            s += status + \" \"\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_path()\n    self._check_content_paths_map_to_versions()\n\n    self._check_state_block()\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n    self._check_as_prior_version()\n\n    self._check_state_block()\n\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_digests_present_and_used()\n\n    self._check_state_block()\n\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    self._validate_as_prior_version(\n        'normal', inventory, extract_spec_version=extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.id = inventory.id\n    self.log = inventory.log\n    self.where = inventory.where\n    self.spec_version = inventory.spec_version\n    self.unnormalized_digests = inventory.unnormalized_digests\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.digest_regex = inventory.digest_regex\n\n    self.check_digests_present_and_used(\n        manifest_files=inventory.manifest_files,\n        digests_used=inventory.digests_used,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=inventory.manifest_files,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_logical_path(inventory.logical_path, version=inventory.version, logical_paths=inventory.logical_paths)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.log.debug(\"Validating %s\", self)\n\n    # check the digests present\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n    )\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=self.spec_versions_supported,\n    )\n\n    # check the logical paths\n    self.check_logical_path(\n        path=inventory.inventory_path,\n        version=self.spec_version,\n        logical_paths=self.logical_paths,\n    )\n\n    # check the fixity\n    self.check_fixity(\n        fixity=inventory.inventory_fixity,\n        manifest_files=inventory.manifest_files,\n    )\n\n    # check the state block\n    self.check_state_block(\n        inventory=inventory,\n        state=self.state,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    # check the error message\n    self.check_error(code=self.error)\n\n    #", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.validate_version_sequence()\n    self.validate_logical_paths_map_to_versions(inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory.get_all_versions(),\n        self.digest_regex(),\n    )\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory.get_all_versions(),\n            all_versions=True,\n        )\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=True)\n        self.check_content_path(inventory, self.content_paths, content_directories=True)\n        self.check_logical_path(inventory, self.logical_paths, logical_directories=True)\n\n    self.validate_version_sequence()\n    self.validate_spec_version()\n\n    self.check_digests_present_and_used(inventory, self.digests_used)\n\n    self.error('Unknown inventory type \"{}\"'.format(inventory.inventory_type))\n", "def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating inventory...\")\n    self.where = inventory\n    self.spec_version = inventory.get(\"spec_version\", \"1.0\")\n    self.check_version_sequence()\n\n    self._validate_as_prior_version(self.prior, \"inventory\")\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_as_prior_version(self.normal, \"normal\")\n\n    self._validate_as_prior_version(self.additional, \"additional\")\n\n    self._validate_as_prior_version(self.removed, \"removed\")\n\n    self._validate_as_prior_version(self.changed, \"changed\")\n\n    self._validate_as_prior_version(self.unnormalized, \"unnormalized\")\n\n    self._validate_as_prior_version(self.unnormalized_digests, \"unnormalized_digests\")\n\n    self._validate_as_prior_version(self.error, \"error\")\n\n    self._validate_as_prior_version(self.where, \"where\")\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = self._get_inventory_version(inventory)\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.check_digests_present_and_used()\n    self.check_content_paths_map_to_versions()\n\n    self.check_logical_path(self.where, self.spec_versions_supported)\n    self.check_content_path(self.where, self.spec_versions_used)\n\n    self.check_digests_present()\n    self.check_content_paths_map()\n\n    self.check_logical_path(self.where, self.lax_digests)\n    self.check_logical_path(self.where, self.digest_regex())\n\n    self.check_content_paths_map()\n\n    self.check_state_block()\n    self.check_content_paths_map_to_versions()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_as_prior_version()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_digests_present()\n    self.check_logical_path(self.where, self.lax_digests)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_logical_path(inventory, version='', logical_paths=[])\n\n    if extract_spec_version:\n        self.check_version_sequence(\n            version=self.spec_version,\n            inventory=inventory,\n            all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n\n    self.check_logical_path(inventory, version='', logical_paths=[])\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    if extract_spec_version:\n        self._extract_spec_version()\n    self._validate()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_path()\n    self._check_content_paths_map_to_versions()\n\n    self._check_state_block()\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n    self._check_as_prior_version()\n\n    self._check_state_block()\n\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_digests_present_and_used()\n\n    self._check_state_block()\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self._validate_as_prior_version(\n        'normal', inventory, extract_spec_version=extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.id = inventory.id\n    self.log = inventory.log\n    self.where = inventory.where\n    self.spec_version = inventory.spec_version\n    self.unnormalized_digests = inventory.unnormalized_digests\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.digest_regex = inventory.digest_regex\n\n    self.check_digests_present_and_used(\n        manifest_files=inventory.manifest_files,\n        digests_used=inventory.digests_used,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=inventory.manifest_files,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_logical_path(inventory.logical_path, version=inventory.version, logical_paths=inventory.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.log.debug(\"Validating %s\", self)\n\n    # check the digests present\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n    )\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=self.spec_versions_supported,\n    )\n\n    # check the logical paths\n    self.check_logical_path(\n        path=inventory.inventory_path,\n        version=self.spec_version,\n        logical_paths=self.logical_paths,\n    )\n\n    # check the fixity\n    self.check_fixity(\n        fixity=inventory.inventory_fixity,\n        manifest_files=inventory.manifest_files,\n    )\n\n    # check the state block\n    self.check_state_block(\n        inventory=inventory,\n        state=self.state,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    # check the error message\n    self.check_error(code=self.error)\n\n    #", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.validate_version_sequence()\n    self.validate_logical_paths_map_to_versions(inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory.get_all_versions(),\n        self.digest_regex(),\n    )\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory.get_all_versions(),\n            all_versions=True,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=True)\n        self.check_content_path(inventory, self.content_paths, content_directories=True)\n        self.check_logical_path(inventory, self.logical_paths, logical_directories=True)\n\n    self.validate_version_sequence()\n    self.validate_spec_version()\n\n    self.check_digests_present_and_used(inventory, self.digests_used)\n\n    self.error('Unknown inventory type \"{}\"'.format(inventory.inventory_type))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating inventory...\")\n    self.where = inventory\n    self.spec_version = inventory.get(\"spec_version\", \"1.0\")\n    self.check_version_sequence()\n\n    self._validate_as_prior_version(self.prior, \"inventory\")\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_as_prior_version(self.normal, \"normal\")\n\n    self._validate_as_prior_version(self.additional, \"additional\")\n\n    self._validate_as_prior_version(self.removed, \"removed\")\n\n    self._validate_as_prior_version(self.changed, \"changed\")\n\n    self._validate_as_prior_version(self.unnormalized, \"unnormalized\")\n\n    self._validate_as_prior_version(self.unnormalized_digests, \"unnormalized_digests\")\n\n    self._validate_as_prior_version(self.error, \"error\")\n\n    self._validate_as_prior_version(self.where, \"where\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = self._get_inventory_version(inventory)\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.check_digests_present_and_used()\n    self.check_content_paths_map_to_versions()\n\n    self.check_logical_path(self.where, self.spec_versions_supported)\n    self.check_content_path(self.where, self.spec_versions_used)\n\n    self.check_digests_present()\n    self.check_content_paths_map()\n\n    self.check_logical_path(self.where, self.lax_digests)\n    self.check_logical_path(self.where, self.digest_regex())\n\n    self.check_content_paths_map()\n\n    self.check_state_block()\n    self.check_content_paths_map_to_versions()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_as_prior_version()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_digests_present()\n    self.check_logical_path(self.where, self.lax_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_logical_path(inventory, version='', logical_paths=[])\n\n    if extract_spec_version:\n        self.check_version_sequence(\n            version=self.spec_version,\n            inventory=inventory,\n            all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n\n    self.check_logical_path(inventory, version='', logical_paths=[])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    if extract_spec_version:\n        self._extract_spec_version()\n    self._validate()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error('Digest \"{}\" not found in manifest files'.format(digest))\n            self.error('This is a reserved digest and may cause errors.')\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in self.digest_regex:\n            self.error(\n                \"Manifest file '{}' is missing a regex that matches \"\n                \"the required digest pattern\".format(manifest_file))\n        else:\n            self._check_digests_present_and_used_in_manifest(\n                manifest_file, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file in digests_used:\n            self.digest_algorithm.check(manifest_file, digests_used[manifest_file])\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = {}\n\n    for path in manifest_files:\n        for digest in self.digest_regex():\n            if digest not in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n            elif digest in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n        else:\n            self.digest_used(digest, path)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        self.check_digest(digest)\n\n    for digest in manifest_files:\n        self.check_digest(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = self.digest_regex.findall(manifest_file)\n        if digest:\n            digests_used.add(digest[0])\n            self.digest_algorithm(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.digest_regex()\n            self.error(\"Digest '{}' is not present in manifest\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error('Digest \"{}\" not found in manifest files'.format(digest))\n            self.error('This is a reserved digest and may cause errors.')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in self.digest_regex:\n            self.error(\n                \"Manifest file '{}' is missing a regex that matches \"\n                \"the required digest pattern\".format(manifest_file))\n        else:\n            self._check_digests_present_and_used_in_manifest(\n                manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file in digests_used:\n            self.digest_algorithm.check(manifest_file, digests_used[manifest_file])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = {}\n\n    for path in manifest_files:\n        for digest in self.digest_regex():\n            if digest not in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n            elif digest in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n        else:\n            self.digest_used(digest, path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        self.check_digest(digest)\n\n    for digest in manifest_files:\n        self.check_digest(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = self.digest_regex.findall(manifest_file)\n        if digest:\n            digests_used.add(digest[0])\n            self.digest_algorithm(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.digest_regex()\n            self.error(\"Digest '{}' is not present in manifest\".format(digest))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if self.where!= \"source\" or prior.state!= \"source\":\n        return\n\n    if prior.id!= self.id:\n        return\n\n    if prior.version!= self.spec_version:\n        return\n\n    if prior.error!= \"unknown\":\n        return\n\n    if prior.digest_regex!= self.digest_regex:\n        return\n\n    if prior.content_directory!= self.content_directory:\n        return\n\n    if prior.logical_path!= self.logical_path:\n        return\n\n    return\n", "def validate_as_prior_version(self, prior):\n    self.check_digests_present_and_used(prior.digests_used, prior.digests_added)\n", "def validate_as_prior_version(self, prior):\n    if prior.id is None:\n        self.error('Unable to validate as prior version')\n        return\n\n    if prior.id not in self.lax_digests:\n        self.error('Unable to validate as prior version (%s) as it does not have a corresponding lax digest' % prior.id)\n        return\n\n    if self.lax_digests[prior.id].version!= prior.version:\n        self.error('Unable to validate as prior version (%s) as it is different from the lax version (%s)' % (prior.id, prior.version))\n", "def validate_as_prior_version(self, prior):\n    if prior.is_null():\n        return\n    if not self.check_digests_present_and_used(prior.state, prior.digests_used):\n        self.error(code='incompatible-version', message='Inventory contains un-assigned digests.')\n", "def validate_as_prior_version(self, prior):\n    self.id = prior.id\n    self.spec_version = prior.spec_version\n    self.unnormalized_digests = prior.unnormalized_digests\n    self.error = prior.error\n    self.error = self.error or \"\"\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        self.error(\"Unable to determine inventory prior version for id=%s\" % self.id)\n    elif prior.id!= self.id:\n        self.error(\"Unable to determine inventory prior version for id=%s and inventory prior version id=%s\" % (\n            prior.id, self.id))\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='incorrect-version',\n            message='The inventory in question does not match the '\n                    'current inventory version of the inventory.',\n            extract_spec_version=prior.version,\n        )\n", "def validate_as_prior_version(self, prior):\n    self.check_content_paths_map_to_versions(\n        manifest_files=prior.manifest_files,\n        all_versions=prior.all_versions)\n", "def validate_as_prior_version(self, prior):\n    if not self.validate_state_block(prior.state, prior.version):\n        self.error(\"Inventory state '{}' does not match expected state '{}'\".format(prior.state, self.id))\n    if prior.content_directory is None:\n        self.error(\"Inventory has no content directory\")\n    if prior.content_directory!= self.content_directory:\n        self.error(\"Inventory '{}' does not have expected content directory '{}'\".format(prior.content_directory, self.content_directory))\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='invalid-version',\n            message='Inventory ID \"%s\" does not match expected version \"%s\"' % (prior.id, self.id),\n            extra='This inventory does not match the expected version of the current inventory.'\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if self.where!= \"source\" or prior.state!= \"source\":\n        return\n\n    if prior.id!= self.id:\n        return\n\n    if prior.version!= self.spec_version:\n        return\n\n    if prior.error!= \"unknown\":\n        return\n\n    if prior.digest_regex!= self.digest_regex:\n        return\n\n    if prior.content_directory!= self.content_directory:\n        return\n\n    if prior.logical_path!= self.logical_path:\n        return\n\n    return\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.check_digests_present_and_used(prior.digests_used, prior.digests_added)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.id is None:\n        self.error('Unable to validate as prior version')\n        return\n\n    if prior.id not in self.lax_digests:\n        self.error('Unable to validate as prior version (%s) as it does not have a corresponding lax digest' % prior.id)\n        return\n\n    if self.lax_digests[prior.id].version!= prior.version:\n        self.error('Unable to validate as prior version (%s) as it is different from the lax version (%s)' % (prior.id, prior.version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.is_null():\n        return\n    if not self.check_digests_present_and_used(prior.state, prior.digests_used):\n        self.error(code='incompatible-version', message='Inventory contains un-assigned digests.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.id = prior.id\n    self.spec_version = prior.spec_version\n    self.unnormalized_digests = prior.unnormalized_digests\n    self.error = prior.error\n    self.error = self.error or \"\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        self.error(\"Unable to determine inventory prior version for id=%s\" % self.id)\n    elif prior.id!= self.id:\n        self.error(\"Unable to determine inventory prior version for id=%s and inventory prior version id=%s\" % (\n            prior.id, self.id))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='incorrect-version',\n            message='The inventory in question does not match the '\n                    'current inventory version of the inventory.',\n            extract_spec_version=prior.version,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.check_content_paths_map_to_versions(\n        manifest_files=prior.manifest_files,\n        all_versions=prior.all_versions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not self.validate_state_block(prior.state, prior.version):\n        self.error(\"Inventory state '{}' does not match expected state '{}'\".format(prior.state, self.id))\n    if prior.content_directory is None:\n        self.error(\"Inventory has no content directory\")\n    if prior.content_directory!= self.content_directory:\n        self.error(\"Inventory '{}' does not have expected content directory '{}'\".format(prior.content_directory, self.content_directory))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='invalid-version',\n            message='Inventory ID \"%s\" does not match expected version \"%s\"' % (prior.id, self.id),\n            extra='This inventory does not match the expected version of the current inventory.'\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if isinstance(inventory[key], dict):\n            if version in inventory[key]:\n                result[key] = inventory[key][version]\n    return result\n", "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inv_fs = FileSystemStorage(location=inventory.path)\n    inv_fs.put('%s/%s' % (inventory.path, version), '')\n\n    map = {}\n    for c in inv_fs.list():\n        if not c.endswith('/'):\n            # Skip non-versioned files\n            continue\n        s = inventory.storage.get_storage(c).open_storage()\n        try:\n            map[c] = set(s.listdir(version))\n        except Exception:\n            pass\n    return map\n", "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        path\n        for path in inventory.get_file_paths_for_version(version)\n        if path in version.content.paths\n    }\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.logical_paths:\n            if logical_path not in ret:\n                ret[logical_path] = set()\n            ret[logical_path].add(file_inventory.content_file)\n    return ret\n", "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if isinstance(inventory[key], dict):\n            if version in inventory[key]:\n                result[key] = inventory[key][version]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inv_fs = FileSystemStorage(location=inventory.path)\n    inv_fs.put('%s/%s' % (inventory.path, version), '')\n\n    map = {}\n    for c in inv_fs.list():\n        if not c.endswith('/'):\n            # Skip non-versioned files\n            continue\n        s = inventory.storage.get_storage(c).open_storage()\n        try:\n            map[c] = set(s.listdir(version))\n        except Exception:\n            pass\n    return map\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        path\n        for path in inventory.get_file_paths_for_version(version)\n        if path in version.content.paths\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.logical_paths:\n            if logical_path not in ret:\n                ret[logical_path] = set()\n            ret[logical_path].add(file_inventory.content_file)\n    return ret\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    self.where = fixity[\"where\"]\n    self.spec_version = fixity[\"spec_version\"]\n    self.digest_regex = fixity[\"digest_regex\"]\n    self.digest_algorithm = fixity[\"digest_algorithm\"]\n    self.content_directory = fixity[\"content_directory\"]\n    self.content_paths = fixity[\"content_paths\"]\n    self.digest_algorithm_options = fixity[\"digest_algorithm_options\"]\n    self.digest_regex_options = fixity[\"digest_regex_options\"]\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.content_directories:\n        check_content_paths_map_to_versions(\n            fixity, self.content_directory, manifest_files\n        )\n\n    if fixity.logical_paths:\n        check_logical_path(fixity, self.content_directory, manifest_files)\n\n    if fixity.spec_version:\n        check_spec_version(fixity, manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity %s\", fixity)\n    self.validate_version_sequence(fixity, manifest_files)\n    self.validate_content_paths_map_to_versions(\n        manifest_files, all_versions=True\n    )\n    self.check_digests_present_and_used(manifest_files, digests_used={})\n", "def validate_fixity(self, fixity, manifest_files):\n    # TODO: consider using a different validator for the type of fixity here\n    return self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def validate_fixity(self, fixity, manifest_files):\n    if fixity.id is None:\n        self.error('Fixity id missing.')\n\n    if fixity.content_directory is None:\n        self.error('Fixity content directory missing.')\n\n    if fixity.content_path is None:\n        self.error('Fixity content path missing.')\n\n    self.check_content_path(fixity.content_path, manifest_files)\n    self.check_content_path(fixity.content_directory, manifest_files)\n\n    self.check_logical_path(fixity.content_path, fixity.logical_path, manifest_files)\n    self.check_logical_path(fixity.content_directory, fixity.logical_path, manifest_files)\n\n    self.check_state_block(fixity, manifest_files)\n    self.check_digests_present_and_used(manifest_files, digests_used=[fixity.id])\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "def validate_fixity(self, fixity, manifest_files):\n    self.error(\"Summary of fixity block not implemented\")\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    # Since we used to have a version specific digest for the manifest files,\n    # we need to check that the digest matches the expected digest.\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n    self.check_digests_present_and_used(manifest_files, digests_used=[])\n", "def validate_fixity(self, fixity, manifest_files):\n    for content_path in manifest_files:\n        self.check_content_path(content_path, True)\n    return fixity\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.where = fixity[\"where\"]\n    self.spec_version = fixity[\"spec_version\"]\n    self.digest_regex = fixity[\"digest_regex\"]\n    self.digest_algorithm = fixity[\"digest_algorithm\"]\n    self.content_directory = fixity[\"content_directory\"]\n    self.content_paths = fixity[\"content_paths\"]\n    self.digest_algorithm_options = fixity[\"digest_algorithm_options\"]\n    self.digest_regex_options = fixity[\"digest_regex_options\"]\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.content_directories:\n        check_content_paths_map_to_versions(\n            fixity, self.content_directory, manifest_files\n        )\n\n    if fixity.logical_paths:\n        check_logical_path(fixity, self.content_directory, manifest_files)\n\n    if fixity.spec_version:\n        check_spec_version(fixity, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity %s\", fixity)\n    self.validate_version_sequence(fixity, manifest_files)\n    self.validate_content_paths_map_to_versions(\n        manifest_files, all_versions=True\n    )\n    self.check_digests_present_and_used(manifest_files, digests_used={})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    # TODO: consider using a different validator for the type of fixity here\n    return self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity.id is None:\n        self.error('Fixity id missing.')\n\n    if fixity.content_directory is None:\n        self.error('Fixity content directory missing.')\n\n    if fixity.content_path is None:\n        self.error('Fixity content path missing.')\n\n    self.check_content_path(fixity.content_path, manifest_files)\n    self.check_content_path(fixity.content_directory, manifest_files)\n\n    self.check_logical_path(fixity.content_path, fixity.logical_path, manifest_files)\n    self.check_logical_path(fixity.content_directory, fixity.logical_path, manifest_files)\n\n    self.check_state_block(fixity, manifest_files)\n    self.check_digests_present_and_used(manifest_files, digests_used=[fixity.id])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.error(\"Summary of fixity block not implemented\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    # Since we used to have a version specific digest for the manifest files,\n    # we need to check that the digest matches the expected digest.\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n    self.check_digests_present_and_used(manifest_files, digests_used=[])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for content_path in manifest_files:\n        self.check_content_path(content_path, True)\n    return fixity\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    for path in os.listdir(path):\n        full_path = os.path.join(path, path)\n        if os.path.isfile(full_path) and re.match(r\"^python\\.zip$\", path):\n            yield full_path\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) and re.match('^\\.zip$', f)]\n", "def files_list(path):\n    for root, _, files in os.walk(path):\n        files = [f for f in files if re.match(r'.*\\.zip$', f)]\n        for f in files:\n            yield os.path.join(root, f)\n", "def files_list(path):\n    files = []\n    for entry in os.scandir(path):\n        if entry.is_file() and not entry.name.startswith('.'):\n            files.append(entry.path)\n    return files\n", "def files_list(path):\n    for entry in os.scandir(path):\n        if entry.is_file() and entry.name.endswith('.py'):\n            yield entry.path\n", "def files_list(path):\n    for item in os.listdir(path):\n        full_path = os.path.join(path, item)\n        if os.path.isfile(full_path) and re.match(r'^\\d+\\.zip$', item):\n            yield full_path\n", "def files_list(path):\n    for path in os.listdir(path):\n        fullpath = os.path.join(path, path)\n        if os.path.isfile(fullpath) and re.match(r'^\\w+$', path):\n            yield fullpath\n", "def files_list(path):\n    if path.endswith('.zip'):\n        with ZipFile(path) as zf:\n            return zf.namelist()\n    return [f for f in zf.namelist() if re.match('^\\.', f)]\n", "def files_list(path):\n    for root, dirs, files in os.walk(path):\n        files = [f for f in files if re.match(r'^.*\\.zip$', f)]\n        for d in dirs:\n            files += [f for f in files if not re.match(r'^.*\\.zip$', f)]\n        for f in files:\n            yield os.path.join(root, f)\n", "def files_list(path):\n    for root, _, files in os.walk(path):\n        files = (f for f in files if re.match(r'.*\\.zip$', f))\n        return files\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    for path in os.listdir(path):\n        full_path = os.path.join(path, path)\n        if os.path.isfile(full_path) and re.match(r\"^python\\.zip$\", path):\n            yield full_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) and re.match('^\\.zip$', f)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for root, _, files in os.walk(path):\n        files = [f for f in files if re.match(r'.*\\.zip$', f)]\n        for f in files:\n            yield os.path.join(root, f)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    files = []\n    for entry in os.scandir(path):\n        if entry.is_file() and not entry.name.startswith('.'):\n            files.append(entry.path)\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for entry in os.scandir(path):\n        if entry.is_file() and entry.name.endswith('.py'):\n            yield entry.path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for item in os.listdir(path):\n        full_path = os.path.join(path, item)\n        if os.path.isfile(full_path) and re.match(r'^\\d+\\.zip$', item):\n            yield full_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for path in os.listdir(path):\n        fullpath = os.path.join(path, path)\n        if os.path.isfile(fullpath) and re.match(r'^\\w+$', path):\n            yield fullpath\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if path.endswith('.zip'):\n        with ZipFile(path) as zf:\n            return zf.namelist()\n    return [f for f in zf.namelist() if re.match('^\\.', f)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for root, dirs, files in os.walk(path):\n        files = [f for f in files if re.match(r'^.*\\.zip$', f)]\n        for d in dirs:\n            files += [f for f in files if not re.match(r'^.*\\.zip$', f)]\n        for f in files:\n            yield os.path.join(root, f)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for root, _, files in os.walk(path):\n        files = (f for f in files if re.match(r'.*\\.zip$', f))\n        return files\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml_filename in xmls:\n        file_groups[xml_filename] = _group_files_by_xml_filename(source, xml_filename, files)\n    return file_groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(prefix=file, file_path=source)\n        if file_path:\n            data[file] = Package(file_path)\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml_file in xmls:\n        package = _eval_file(prefix=xml_file, file_path=source)\n        if package:\n            packages[xml_file] = package\n        else:\n            packages[xml_file] = None\n\n    logger.info(\"Found %d packages\", len(packages))\n    return packages\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        xml_basename = os.path.basename(file_path).replace('.xml', '')\n        package_name = os.path.splitext(os.path.split(file_path)[1])[0]\n        data[package_name] = Package(file_path, xml_basename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        package = _explore_zipfile(source)\n        logger.info('Found package %s', package)\n        data[filename] = package\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    package_dict = {}\n    for file in files:\n        package_dict[file] = _group_files_by_xml_filename(source, xmls, file)\n    return package_dict\n", "def _group_files_by_xml_filename(source, xmls, files):\n    package = {}\n    logger.info(\"Processing %d files for package %s\", len(files), source)\n    for xml_filename in files:\n        package[xml_filename] = _eval_file(prefix=source, file_path=xml_filename)\n\n    return package\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        data[file] = _group_files_by_xml_filename(source, xmls, file)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in files:\n        data[xml_filename] = _group_files_by_xml_filename(source, xmls, [xml_filename])\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    pack = {}\n    for f in files:\n        pack[f] = explore_source(source)\n        logger.debug(\"Found XML file: %s\", f)\n\n    for xml_filename in xmls:\n        if xml_filename not in pack:\n            raise KeyError(\"XML file %s not found in %s\" % (xml_filename, source))\n        else:\n            pack = _group_files_by_xml_filename(pack[xml_filename], xmls, files)\n    return pack\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml_filename in xmls:\n        file_groups[xml_filename] = _group_files_by_xml_filename(source, xml_filename, files)\n    return file_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(prefix=file, file_path=source)\n        if file_path:\n            data[file] = Package(file_path)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml_file in xmls:\n        package = _eval_file(prefix=xml_file, file_path=source)\n        if package:\n            packages[xml_file] = package\n        else:\n            packages[xml_file] = None\n\n    logger.info(\"Found %d packages\", len(packages))\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        xml_basename = os.path.basename(file_path).replace('.xml', '')\n        package_name = os.path.splitext(os.path.split(file_path)[1])[0]\n        data[package_name] = Package(file_path, xml_basename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        package = _explore_zipfile(source)\n        logger.info('Found package %s', package)\n        data[filename] = package\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    package_dict = {}\n    for file in files:\n        package_dict[file] = _group_files_by_xml_filename(source, xmls, file)\n    return package_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    package = {}\n    logger.info(\"Processing %d files for package %s\", len(files), source)\n    for xml_filename in files:\n        package[xml_filename] = _eval_file(prefix=source, file_path=xml_filename)\n\n    return package\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        data[file] = _group_files_by_xml_filename(source, xmls, file)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in files:\n        data[xml_filename] = _group_files_by_xml_filename(source, xmls, [xml_filename])\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    pack = {}\n    for f in files:\n        pack[f] = explore_source(source)\n        logger.debug(\"Found XML file: %s\", f)\n\n    for xml_filename in xmls:\n        if xml_filename not in pack:\n            raise KeyError(\"XML file %s not found in %s\" % (xml_filename, source))\n        else:\n            pack = _group_files_by_xml_filename(pack[xml_filename], xmls, files)\n    return pack\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return prefix in [f.split(os.sep)[-1] for f in file_path.split(os.sep)]\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return prefix in [f.split(os.sep)[-1] for f in file_path.split(os.sep)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    matches = list()\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return list(filter(os.path.basename.startswith, _group_files_by_xml_filename(source=files, xmls=[prefix])))\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return sorted([f for f in files if match_file_by_prefix(prefix, f)])\n", "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _eval_file(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    logger.debug(\"Select files by prefix: %s\", files)\n    return files\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if _eval_file(prefix, file_path)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = list()\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return list(filter(os.path.basename.startswith, _group_files_by_xml_filename(source=files, xmls=[prefix])))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return sorted([f for f in files if match_file_by_prefix(prefix, f)])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _eval_file(prefix, f)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    logger.debug(\"Select files by prefix: %s\", files)\n    return files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if _eval_file(prefix, file_path)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            if fname.endswith('.xml'):\n                result[fname] = _explore_file(os.path.join(root, fname))\n    return result\n", "def _explore_folder(folder):\n    files = []\n    for root, _, files in os.walk(folder):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if filepath.endswith(\".xml\"):\n                files.append(filepath)\n                logger.info(\"Reading XML file {}\".format(filepath))\n                data = _eval_file(prefix=filepath[:-4], file_path=filepath)\n                return data\n            else:\n                logger.info(\"File {} is not a valid XML file\".format(filepath))\n", "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            result[file] = _eval_file(prefix=file, file_path=file_path)\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(source=folder, xmls=['xml']):\n        for xml_file in _eval_file(prefix=file['xml_prefix'], file_path=file['file_path']):\n            result.update(_eval_file(prefix=file['xml_prefix'], file_path=xml_file))\n\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if '.xml' in f:\n                result[os.path.basename(f).split('.')[0]] = _eval_file(\n                    os.path.join(root, f))\n    return result\n", "def _explore_folder(folder):\n    for zip_file in explore_source(folder):\n        for filename in _group_files_by_xml_filename(zip_file, files=True):\n            yield filename\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                # Skip files that are not XML\n                if not _eval_file(prefix='', file_path=os.path.join(root, filename)):\n                    continue\n\n                # Remove the XML extension from the basename\n                xml_basename = os.path.basename(filename).split('.')[0]\n\n                # Retrieve the data by XML basename\n                data[xml_basename] = _group_files_by_xml_filename(\n                    source=source, xmls=[os.path.join(root, filename)], files=files\n                )\n\n    return data\n", "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if not filepath.endswith('.xml'):\n                continue\n\n            with open(filepath) as f:\n                data = eval(f.read())\n\n            if data:\n                files[filename] = data\n\n    return files\n", "def _explore_folder(folder):\n    packages = {}\n    for root, _, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            packages[file] = _eval_file(prefix=file, file_path=file_path)\n    return packages\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.zip'):\n                data.update(_explore_zipfile(filepath))\n            else:\n                data.update(_group_files_by_xml_filename(filepath))\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            if fname.endswith('.xml'):\n                result[fname] = _explore_file(os.path.join(root, fname))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = []\n    for root, _, files in os.walk(folder):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if filepath.endswith(\".xml\"):\n                files.append(filepath)\n                logger.info(\"Reading XML file {}\".format(filepath))\n                data = _eval_file(prefix=filepath[:-4], file_path=filepath)\n                return data\n            else:\n                logger.info(\"File {} is not a valid XML file\".format(filepath))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            result[file] = _eval_file(prefix=file, file_path=file_path)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(source=folder, xmls=['xml']):\n        for xml_file in _eval_file(prefix=file['xml_prefix'], file_path=file['file_path']):\n            result.update(_eval_file(prefix=file['xml_prefix'], file_path=xml_file))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if '.xml' in f:\n                result[os.path.basename(f).split('.')[0]] = _eval_file(\n                    os.path.join(root, f))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for zip_file in explore_source(folder):\n        for filename in _group_files_by_xml_filename(zip_file, files=True):\n            yield filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                # Skip files that are not XML\n                if not _eval_file(prefix='', file_path=os.path.join(root, filename)):\n                    continue\n\n                # Remove the XML extension from the basename\n                xml_basename = os.path.basename(filename).split('.')[0]\n\n                # Retrieve the data by XML basename\n                data[xml_basename] = _group_files_by_xml_filename(\n                    source=source, xmls=[os.path.join(root, filename)], files=files\n                )\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if not filepath.endswith('.xml'):\n                continue\n\n            with open(filepath) as f:\n                data = eval(f.read())\n\n            if data:\n                files[filename] = data\n\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packages = {}\n    for root, _, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            packages[file] = _eval_file(prefix=file, file_path=file_path)\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.zip'):\n                data.update(_explore_zipfile(filepath))\n            else:\n                data.update(_group_files_by_xml_filename(filepath))\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'package'\n\n    packages = ['packages', 'packages/%s' % file_type]\n    logger.info('Escrevendo %s com %s com %s', file_path, file_type, packages)\n    return {'packages': packages, 'file_type': file_type}\n", "def _eval_file(prefix, file_path):\n    return _eval_file_by_xml_filename(file_path, prefix)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # verifica se o nome do arquivo existe\n    if os.path.isfile(file_path):\n        logger.info('Arquivo %s foi realizado', filename)\n        return {'packages': {'asset': 'asset','rendition':'rendition'}}\n\n    # verifica se o nome do arquivo existe no diret\u00f3rio\n    elif os.path.isdir(file_path):\n        logger.info('Arquivo %s foi realizado', filename)\n        return {'packages': {'asset': 'asset','rendition':'rendition'}}\n\n    # invalido\n    logger.info('Arquivo %s n \u2047 o foi realizada', filename)\n    return {'packages': {'asset': 'asset','rendition':'rendition'}}\n", "def _eval_file(prefix, file_path):\n    xmls, files = explore_source(file_path)\n    match_file_by_prefix(prefix, files)\n\n    if xmls:\n        # Tipo de arquivo com o endere\u00e7o do package\n        packages = _group_files_by_xml_filename(source=file_path, xmls=xmls, files=files)\n        for package in packages:\n            logger.debug(\"Resolving package '%s' into '%s'\", package, package.get('package'))\n            package['package'] = _eval_file(package['package'], package.get('file'))\n\n    return packages\n", "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".asset\"):\n        return {\"packages\": [\"assets\"]}\n    elif file_path.endswith(\".rendition\"):\n        return {\"packages\": [\"renditions\"]}\n    else:\n        return _eval_file(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[-1]\n    logger.debug('Escolha %s com o ext: %s', file_path, ext)\n\n    if ext in ['.asset', '.rendition']:\n        packs = select_filenames_by_prefix(prefix, files=files)\n        packs['package'] = file_path\n        return packs\n\n    return {}\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    package = select_filenames_by_prefix(prefix, files=files)\n    return _eval_file(prefix, file_path), package\n", "def _eval_file(prefix, file_path):\n    xml_file = os.path.basename(file_path).split('.')[0] + '.xml'\n    if os.path.isfile(os.path.join(os.path.dirname(file_path), xml_file)):\n        return {\n            'packages': _eval_file(prefix, os.path.join(os.path.dirname(file_path), xml_file)),\n            'files': {\n                xml_file: os.path.join(os.path.dirname(file_path), xml_file)\n            }\n        }\n    else:\n        return {\n            'packages': '',\n            'files': {\n                xml_file: ''\n            }\n        }\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join('packages', file_path)\n    if os.path.isfile(file_path):\n        # A file exists at the root of the package tree\n        file_type = 'asset'\n    elif os.path.isdir(file_path):\n        # A file is a directory, use the zipfile package\n        file_type ='rendition'\n    else:\n        # A file doesn't exist at the root of the package tree\n        raise PackageError('File {} doesn\\'t exist at the root of the package'.format(file_path))\n    # Atualiza o tipo do arquivo do pacote\n    return _group_files_by_xml_filename(source=source, xmls=files, files=files)\n", "def _eval_file(prefix, file_path):\n    package_name, _, filename = filename.rpartition('.')\n    package_name = package_name.split('/')[-1]\n\n    if package_name in select_filenames_by_prefix(prefix, files):\n        return _eval_file(prefix, file_path)\n    else:\n        return {'package': package_name,\n                'filename': filename,\n                'type': 'unknown',\n               'source': 'unknown'}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'package'\n\n    packages = ['packages', 'packages/%s' % file_type]\n    logger.info('Escrevendo %s com %s com %s', file_path, file_type, packages)\n    return {'packages': packages, 'file_type': file_type}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return _eval_file_by_xml_filename(file_path, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # verifica se o nome do arquivo existe\n    if os.path.isfile(file_path):\n        logger.info('Arquivo %s foi realizado', filename)\n        return {'packages': {'asset': 'asset','rendition':'rendition'}}\n\n    # verifica se o nome do arquivo existe no diret\u00f3rio\n    elif os.path.isdir(file_path):\n        logger.info('Arquivo %s foi realizado', filename)\n        return {'packages': {'asset': 'asset','rendition':'rendition'}}\n\n    # invalido\n    logger.info('Arquivo %s n \u2047 o foi realizada', filename)\n    return {'packages': {'asset': 'asset','rendition':'rendition'}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    xmls, files = explore_source(file_path)\n    match_file_by_prefix(prefix, files)\n\n    if xmls:\n        # Tipo de arquivo com o endere\u00e7o do package\n        packages = _group_files_by_xml_filename(source=file_path, xmls=xmls, files=files)\n        for package in packages:\n            logger.debug(\"Resolving package '%s' into '%s'\", package, package.get('package'))\n            package['package'] = _eval_file(package['package'], package.get('file'))\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".asset\"):\n        return {\"packages\": [\"assets\"]}\n    elif file_path.endswith(\".rendition\"):\n        return {\"packages\": [\"renditions\"]}\n    else:\n        return _eval_file(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[-1]\n    logger.debug('Escolha %s com o ext: %s', file_path, ext)\n\n    if ext in ['.asset', '.rendition']:\n        packs = select_filenames_by_prefix(prefix, files=files)\n        packs['package'] = file_path\n        return packs\n\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    package = select_filenames_by_prefix(prefix, files=files)\n    return _eval_file(prefix, file_path), package\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    xml_file = os.path.basename(file_path).split('.')[0] + '.xml'\n    if os.path.isfile(os.path.join(os.path.dirname(file_path), xml_file)):\n        return {\n            'packages': _eval_file(prefix, os.path.join(os.path.dirname(file_path), xml_file)),\n            'files': {\n                xml_file: os.path.join(os.path.dirname(file_path), xml_file)\n            }\n        }\n    else:\n        return {\n            'packages': '',\n            'files': {\n                xml_file: ''\n            }\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join('packages', file_path)\n    if os.path.isfile(file_path):\n        # A file exists at the root of the package tree\n        file_type = 'asset'\n    elif os.path.isdir(file_path):\n        # A file is a directory, use the zipfile package\n        file_type ='rendition'\n    else:\n        # A file doesn't exist at the root of the package tree\n        raise PackageError('File {} doesn\\'t exist at the root of the package'.format(file_path))\n    # Atualiza o tipo do arquivo do pacote\n    return _group_files_by_xml_filename(source=source, xmls=files, files=files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    package_name, _, filename = filename.rpartition('.')\n    package_name = package_name.split('/')[-1]\n\n    if package_name in select_filenames_by_prefix(prefix, files):\n        return _eval_file(prefix, file_path)\n    else:\n        return {'package': package_name,\n                'filename': filename,\n                'type': 'unknown',\n               'source': 'unknown'}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    asset = self.get_asset(basename=file_path)\n    self._assets[lang] = asset\n", "def add_rendition(self, lang, file_path):\n    if not lang or lang == \"default\":\n        lang = \"en\"\n    if not file_path:\n        raise Exception(\"file_path is not specified\")\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    asset = self.get_asset(basename=file_path)\n    self._assets[lang] = asset\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if not lang or lang == \"default\":\n        lang = \"en\"\n    if not file_path:\n        raise Exception(\"file_path is not specified\")\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    asset = Asset(file_path)\n    asset.basename = basename\n    self._assets[basename] = asset\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset = Asset(file_path, self._assets)\n    asset.name = basename\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    asset = Asset(\n        basename=basename,\n        file_path=file_path,\n        asset_id=basename.replace('-', '')\n    )\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset = Asset(basename=basename, file_path=file_path)\n    self._assets[asset.filename] = asset\n", "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, Asset())\n    asset.add_file(file_path)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(file_path)\n    asset.basename = basename\n    self._assets[basename] = asset\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(file_path, self._assets)\n    asset.name = basename\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(\n        basename=basename,\n        file_path=file_path,\n        asset_id=basename.replace('-', '')\n    )\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(basename=basename, file_path=file_path)\n    self._assets[asset.filename] = asset\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, Asset())\n    asset.add_file(file_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            # Ignore files that are not XML files\n            if name.endswith(\".xml\"):\n                continue\n            data[name] = _eval_file(prefix=name, file_path=zf.open(name))\n    return data\n", "def _explore_zipfile(zip_path):\n    results = {}\n    for zip_name in select_filenames_by_prefix(zip_path, ['.xml']):\n        xml_data = explore_source(zip_path + '/' + zip_name)\n        results[zip_name] = xml_data\n    return results\n", "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if not filepath.endswith(\".xml\"):\n                continue\n            result[filepath] = _eval_file(filepath)\n\n    return result\n", "def _explore_zipfile(zip_path):\n    # remove compression from zip file name\n    zip_path = _eval_file(prefix='', zip_path=zip_path)\n\n    # read ZIP file as bytes\n    with open(zip_path, 'rb') as f:\n        data = f.read()\n\n    # get packages' data from zip file\n    packages = _group_files_by_xml_filename(data, files=None)\n\n    # filter packages by XML filename\n    packages = _filter_packages(packages)\n\n    # return dict with data in dict format\n    return {'packages': packages, 'xmls': _eval_file(prefix='', zip_path=zip_path)}\n", "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for prefix, dirs, files in os.walk(zf.filelist.root):\n            for f in files:\n                if _eval_file(prefix, f):\n                    data[f] = _eval_file(prefix, f)\n    return data\n", "def _explore_zipfile(zip_path):\n    import_os_log = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.startswith(\"package.xml\"):\n                _eval_file(name, zf.open(name))\n            elif name.startswith(\"packtools.xml\"):\n                import_os_log[name[:-9]] = zf.open(name)\n    return import_os_log\n", "def _explore_zipfile(zip_path):\n    if not zip_path:\n        return {}\n\n    zip_data = _explore_folder(zip_path)\n\n    return _group_files_by_xml_filename(zip_data, zip_path)\n", "def _explore_zipfile(zip_path):\n    data = {}\n    for root, _, files in os.walk(zip_path):\n        for fname in files:\n            if not fname.startswith('_'):\n                # filename = os.path.splitext(fname)[0]\n                _, ext = os.path.splitext(fname)\n                if ext in ['.xml']:\n                    data[fname] = _eval_file(fname, zip_path)\n    return data\n", "def _explore_zipfile(zip_path):\n    import_data = {}\n    for root, dirs, files in os.walk(zip_path):\n        for fname in files:\n            if fname.endswith('.xml'):\n                xml = _eval_file(prefix=fname[:-4], file_path=root)\n                import_data[fname[:-4]] = xml\n    return import_data\n", "def _explore_zipfile(zip_path):\n    result = {}\n    with zipfile.ZipFile(zip_path) as source:\n        for filename in _group_files_by_xml_filename(source, source.namelist()):\n            with source.open(filename) as f:\n                data = eval(f.read())\n                result[filename] = data\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            # Ignore files that are not XML files\n            if name.endswith(\".xml\"):\n                continue\n            data[name] = _eval_file(prefix=name, file_path=zf.open(name))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    results = {}\n    for zip_name in select_filenames_by_prefix(zip_path, ['.xml']):\n        xml_data = explore_source(zip_path + '/' + zip_name)\n        results[zip_name] = xml_data\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if not filepath.endswith(\".xml\"):\n                continue\n            result[filepath] = _eval_file(filepath)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # remove compression from zip file name\n    zip_path = _eval_file(prefix='', zip_path=zip_path)\n\n    # read ZIP file as bytes\n    with open(zip_path, 'rb') as f:\n        data = f.read()\n\n    # get packages' data from zip file\n    packages = _group_files_by_xml_filename(data, files=None)\n\n    # filter packages by XML filename\n    packages = _filter_packages(packages)\n\n    # return dict with data in dict format\n    return {'packages': packages, 'xmls': _eval_file(prefix='', zip_path=zip_path)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for prefix, dirs, files in os.walk(zf.filelist.root):\n            for f in files:\n                if _eval_file(prefix, f):\n                    data[f] = _eval_file(prefix, f)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    import_os_log = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.startswith(\"package.xml\"):\n                _eval_file(name, zf.open(name))\n            elif name.startswith(\"packtools.xml\"):\n                import_os_log[name[:-9]] = zf.open(name)\n    return import_os_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    if not zip_path:\n        return {}\n\n    zip_data = _explore_folder(zip_path)\n\n    return _group_files_by_xml_filename(zip_data, zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    for root, _, files in os.walk(zip_path):\n        for fname in files:\n            if not fname.startswith('_'):\n                # filename = os.path.splitext(fname)[0]\n                _, ext = os.path.splitext(fname)\n                if ext in ['.xml']:\n                    data[fname] = _eval_file(fname, zip_path)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    import_data = {}\n    for root, dirs, files in os.walk(zip_path):\n        for fname in files:\n            if fname.endswith('.xml'):\n                xml = _eval_file(prefix=fname[:-4], file_path=root)\n                import_data[fname[:-4]] = xml\n    return import_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    with zipfile.ZipFile(zip_path) as source:\n        for filename in _group_files_by_xml_filename(source, source.namelist()):\n            with source.open(filename) as f:\n                data = eval(f.read())\n                result[filename] = data\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [path.join('pdf', f) for f in zf.namelist() if path.isfile(path.join(zf.namelist()[0], f))]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = []\n        for name in zf.namelist():\n            if os.path.isfile(name):\n                files.append(name)\n        return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        names = zf.namelist()\n    return [fname for fname in names if fname.endswith('.xml')]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [path.join('pdf', f) for f in zf.namelist() if path.isfile(path.join(zf.namelist()[0], f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = []\n        for name in zf.namelist():\n            if os.path.isfile(name):\n                files.append(name)\n        return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        names = zf.namelist()\n    return [fname for fname in names if fname.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(\\w+)=\")', r'\\1-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif content.startswith('w:'):\n        return 'w-st=\"{}\"'.format(content[2:])\n    else:\n        return content\n", "def fix_namespace_prefix_w(content):\n    if content.startswith(\"w:\"):\n        content = \"w-st=\" + content[2:]\n    return content\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if content.startswith(\"w:\"):\n        return \"w-st=\" + content[2:]\n    return content\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(\\w+)=\")', r'\\1-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif content.startswith('w:'):\n        return 'w-st=\"{}\"'.format(content[2:])\n    else:\n        return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content.startswith(\"w:\"):\n        content = \"w-st=\" + content[2:]\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if content.startswith(\"w:\"):\n        return \"w-st=\" + content[2:]\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    pubdates = [n.text for n in node.xpath(pubdate_xpaths[0])]\n    return pubdates[0] if len(pubdates) > 0 else None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath.find(node)\n        if match:\n            return match\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.search(node.text)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    pubdates = [n.text for n in node.xpath(pubdate_xpaths[0])]\n    return pubdates[0] if len(pubdates) > 0 else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath.find(node)\n        if match:\n            return match\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.search(node.text)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='supplement':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = int(issue.find('Number').text)\n        suppl = issue.find('Supplement').text\n        return number, suppl\n    except AttributeError:\n        return None, None\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('element'):\n        if 'type' in element.attrib:\n            if element.attrib['type'] == 'number':\n                number = element.text\n            elif element.attrib['type'] =='supplement':\n                suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\", NAMESPACES).text,\n        issue.find(\"suppl\", NAMESPACES).text,\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('Reference'):\n        if element.attrib['type'] == 'number':\n            number = element.text\n        elif element.attrib['type'] =='supplement':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text.strip(),\n        issue.find('suppl').text.strip()\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='supplement':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = int(issue.find('Number').text)\n        suppl = issue.find('Supplement').text\n        return number, suppl\n    except AttributeError:\n        return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('element'):\n        if 'type' in element.attrib:\n            if element.attrib['type'] == 'number':\n                number = element.text\n            elif element.attrib['type'] =='supplement':\n                suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\", NAMESPACES).text,\n        issue.find(\"suppl\", NAMESPACES).text,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('Reference'):\n        if element.attrib['type'] == 'number':\n            number = element.text\n        elif element.attrib['type'] =='supplement':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text.strip(),\n        issue.find('suppl').text.strip()\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\n' * indent, self.FALSE, self.iscanonical)\n        print('\\n' * indent, self.TRUE)\n    for a in self.args:\n        a.pretty(indent + 1, debug)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append('{} = True'.format(self.name))\n        lines.append('')\n    else:\n        lines.append('{} = False'.format(self.name))\n        lines.append('')\n    if self.dual is not True and not self.iscanonical:\n        lines.append('{} = {}'.format(self.name, self.dual))\n        lines.append('')\n    lines.append('sort_order = {}'.format(self.sort_order))\n    lines.append('')\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"{}('{}')\".format(self.__class__.__name__, self.__str__())\n    else:\n        s = \"{}('{}', '{}')\".format(self.__class__.__name__,\n                                   self.FALSE.pretty(indent=indent),\n                                   self.TRUE.pretty(indent=indent))\n    if debug:\n        s = \"\\n\".join(\"{}: {}\".format(k, v) for k, v in sorted(vars(self).items()))\n        s = \"\\n\".join(s.splitlines())\n    return s\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s += \"Canonical \"\n    else:\n        s += \"Uncanonical \"\n    s += \"'{}'\".format(self.name)\n    if self.sort_order is not None:\n        s += \", sort_order=\" + str(self.sort_order)\n    if self.dual is not None:\n        s += \", dual={}\".format(self.dual)\n    if debug or indent:\n        s += \" ({})\".format(self.dual)\n    return s\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    for node in self:\n        if not node:\n            continue\n        if isinstance(node, (IterableNode, IteratorNode)):\n            lines.append(indent * \"  \" + str(node))\n            lines.append(\"\")\n        else:\n            if debug:\n                lines.append(indent * \"  \" + str(node))\n                lines.append(\"\")\n            lines.append(\"  \" * indent + str(node))\n    return \"\\n\".join(lines)\n", "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG: \"\n\n    if self.iscanonical:\n        debug_str += \"(canonical)\"\n    else:\n        debug_str += \"(not canonical)\"\n\n    if indent > 0:\n        debug_str += \" \" * indent\n\n    if self.sort_order == \"dual\":\n        debug_str += \"(dual)\"\n    elif self.sort_order == \"none\":\n        debug_str += \" None\"\n    elif self.sort_order == \"alphabetical\":\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()))\n    elif self.sort_order == \"unordered\":\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()))\n    else:\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()) + [\"ordered\"])\n\n    return debug_str\n", "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + x for x in self)\n", "def pretty(self, indent=0, debug=False):\n    output = \"\"\n    if self.iscanonical:\n        output += \"%scanonical [ %s ]\\n\" % (\"  \" * indent, self.name)\n    else:\n        output += \"%sdual [ %s ]\\n\" % (\"  \" * indent, self.name)\n    output += \"%stype = %s\\n\" % (\"  \" * indent, self.type)\n    if self.isliteral:\n        output += \"%sliteral = %s\\n\" % (\"  \" * indent, self.literal)\n    if debug:\n        for arg in self.args:\n            output += \"%s = %s\\n\" % (arg.pretty(indent + 2), arg.pretty(indent + 2))\n    return output\n", "def pretty(self, indent=0, debug=False):\n    r\"\"\"Return a pretty formatted representation of self. With itertools\n    functools class self.__lt__(self,other) it returns True if self < other and\n    False otherwise.\n    self.sort_order == 'dual' returns True if self < other and False otherwise.\n    self.iscanonical == True returns True if self is a canonical dual\n    \"\"\"\n    if self.iscanonical:\n        return \"%s(...)\" % (self.dual.pretty(indent + 2, debug))\n    else:\n        return \"%s(%s)\" % (self.dual.pretty(indent + 2, debug),\n                           self.sort_order)\n", "def pretty(self, indent=0, debug=False):\n    debug(\"pretty(%r)\", self)\n    r = []\n    if self.sort_order == self.FALSE:\n        r.append(\"FALSE\")\n    elif self.sort_order == self.TRUE:\n        r.append(\"TRUE\")\n    if self.iscanonical:\n        r.append(\"CANONICAL\")\n    if indent:\n        r.append(\" \" * indent)\n    r.append(str(self))\n    return \"\\n\".join(r)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\n' * indent, self.FALSE, self.iscanonical)\n        print('\\n' * indent, self.TRUE)\n    for a in self.args:\n        a.pretty(indent + 1, debug)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append('{} = True'.format(self.name))\n        lines.append('')\n    else:\n        lines.append('{} = False'.format(self.name))\n        lines.append('')\n    if self.dual is not True and not self.iscanonical:\n        lines.append('{} = {}'.format(self.name, self.dual))\n        lines.append('')\n    lines.append('sort_order = {}'.format(self.sort_order))\n    lines.append('')\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"{}('{}')\".format(self.__class__.__name__, self.__str__())\n    else:\n        s = \"{}('{}', '{}')\".format(self.__class__.__name__,\n                                   self.FALSE.pretty(indent=indent),\n                                   self.TRUE.pretty(indent=indent))\n    if debug:\n        s = \"\\n\".join(\"{}: {}\".format(k, v) for k, v in sorted(vars(self).items()))\n        s = \"\\n\".join(s.splitlines())\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s += \"Canonical \"\n    else:\n        s += \"Uncanonical \"\n    s += \"'{}'\".format(self.name)\n    if self.sort_order is not None:\n        s += \", sort_order=\" + str(self.sort_order)\n    if self.dual is not None:\n        s += \", dual={}\".format(self.dual)\n    if debug or indent:\n        s += \" ({})\".format(self.dual)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    for node in self:\n        if not node:\n            continue\n        if isinstance(node, (IterableNode, IteratorNode)):\n            lines.append(indent * \"  \" + str(node))\n            lines.append(\"\")\n        else:\n            if debug:\n                lines.append(indent * \"  \" + str(node))\n                lines.append(\"\")\n            lines.append(\"  \" * indent + str(node))\n    return \"\\n\".join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG: \"\n\n    if self.iscanonical:\n        debug_str += \"(canonical)\"\n    else:\n        debug_str += \"(not canonical)\"\n\n    if indent > 0:\n        debug_str += \" \" * indent\n\n    if self.sort_order == \"dual\":\n        debug_str += \"(dual)\"\n    elif self.sort_order == \"none\":\n        debug_str += \" None\"\n    elif self.sort_order == \"alphabetical\":\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()))\n    elif self.sort_order == \"unordered\":\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()))\n    else:\n        debug_str += \" \" + \" \".join(sorted(self.dual.keys()) + [\"ordered\"])\n\n    return debug_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + x for x in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    output = \"\"\n    if self.iscanonical:\n        output += \"%scanonical [ %s ]\\n\" % (\"  \" * indent, self.name)\n    else:\n        output += \"%sdual [ %s ]\\n\" % (\"  \" * indent, self.name)\n    output += \"%stype = %s\\n\" % (\"  \" * indent, self.type)\n    if self.isliteral:\n        output += \"%sliteral = %s\\n\" % (\"  \" * indent, self.literal)\n    if debug:\n        for arg in self.args:\n            output += \"%s = %s\\n\" % (arg.pretty(indent + 2), arg.pretty(indent + 2))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    r\"\"\"Return a pretty formatted representation of self. With itertools\n    functools class self.__lt__(self,other) it returns True if self < other and\n    False otherwise.\n    self.sort_order == 'dual' returns True if self < other and False otherwise.\n    self.iscanonical == True returns True if self is a canonical dual\n    \"\"\"\n    if self.iscanonical:\n        return \"%s(...)\" % (self.dual.pretty(indent + 2, debug))\n    else:\n        return \"%s(%s)\" % (self.dual.pretty(indent + 2, debug),\n                           self.sort_order)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug(\"pretty(%r)\", self)\n    r = []\n    if self.sort_order == self.FALSE:\n        r.append(\"FALSE\")\n    elif self.sort_order == self.TRUE:\n        r.append(\"TRUE\")\n    if self.iscanonical:\n        r.append(\"CANONICAL\")\n    if indent:\n        r.append(\" \" * indent)\n    r.append(str(self))\n    return \"\\n\".join(r)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.iscanonical:\n            args[i] = self.absorb(arg.args)\n        else:\n            args[i] = self.NOT(arg)\n    return args\n", "def absorb(self, args):\n    if not args:\n        return self\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.isidentity():\n            args[i] = ~arg\n    return self.__class__(*args)\n", "def absorb(self, args):\n    if self.iscanonical:\n        return []\n    args = list(args)\n    for i in range(len(args)):\n        if args[i].iscanonical:\n            i = i - 1\n            if i < 0:\n                self = self.subtract(args[i], self)\n            else:\n                self = self.add(args[i], self)\n    return self\n", "def absorb(self, args):\n    args = tuple(args)\n    if len(args) == 1:\n        return args[0] ^ self\n    args = tuple(args[0:-1]) + (self,)\n    return self.__class__(*args)\n", "def absorb(self, args):\n    return self._pyoperator(*[arg.absorb(args) for arg in self.args])\n", "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if not isinstance(arg, self.__class__):\n            if isinstance(arg, Symbol):\n                args[i] = self.simplify(arg)\n            else:\n                raise TypeError(\"Unsupported arg type {}\".format(arg.__class__))\n    return args\n", "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args\n        else:\n            args[0] = [args[0]]\n    elif len(args) == 2:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args + args[1]\n        else:\n            args[0] = [args[0]] + args[1]\n    else:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args + args[1:]\n        else:\n            args[0] = [args[0]] + args[1:]\n    return self._pyoperator(*args)\n", "def absorb(self, args):\n    if not args:\n        return self\n    if isinstance(self, Not):\n        return Not(*[arg(args[0]) for arg in args[1:]])\n    if isinstance(self, Atom):\n        return Atom(*[arg(self) for arg in args])\n    if isinstance(self, Dual):\n        return self.dual\n    if isinstance(self, DualNot):\n        return self.dual.absorb(args)\n    if self is Not:\n        return self\n    args = list(args)\n    if args[0].is_Symbol:\n        args = args[1:]\n    if args[-1].is_Symbol:\n        args = args[:-1]\n    return self._pyoperator(*args)\n", "def absorb(self, args):\n    return [self.absorb_term(arg) for arg in args]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.iscanonical:\n            args[i] = self.absorb(arg.args)\n        else:\n            args[i] = self.NOT(arg)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if not args:\n        return self\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.isidentity():\n            args[i] = ~arg\n    return self.__class__(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if self.iscanonical:\n        return []\n    args = list(args)\n    for i in range(len(args)):\n        if args[i].iscanonical:\n            i = i - 1\n            if i < 0:\n                self = self.subtract(args[i], self)\n            else:\n                self = self.add(args[i], self)\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = tuple(args)\n    if len(args) == 1:\n        return args[0] ^ self\n    args = tuple(args[0:-1]) + (self,)\n    return self.__class__(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return self._pyoperator(*[arg.absorb(args) for arg in self.args])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if not isinstance(arg, self.__class__):\n            if isinstance(arg, Symbol):\n                args[i] = self.simplify(arg)\n            else:\n                raise TypeError(\"Unsupported arg type {}\".format(arg.__class__))\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args\n        else:\n            args[0] = [args[0]]\n    elif len(args) == 2:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args + args[1]\n        else:\n            args[0] = [args[0]] + args[1]\n    else:\n        if isinstance(args[0], self.__class__):\n            args[0] = args[0].args + args[1:]\n        else:\n            args[0] = [args[0]] + args[1:]\n    return self._pyoperator(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if not args:\n        return self\n    if isinstance(self, Not):\n        return Not(*[arg(args[0]) for arg in args[1:]])\n    if isinstance(self, Atom):\n        return Atom(*[arg(self) for arg in args])\n    if isinstance(self, Dual):\n        return self.dual\n    if isinstance(self, DualNot):\n        return self.dual.absorb(args)\n    if self is Not:\n        return self\n    args = list(args)\n    if args[0].is_Symbol:\n        args = args[1:]\n    if args[-1].is_Symbol:\n        args = args[:-1]\n    return self._pyoperator(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_term(arg) for arg in args]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "def on(self, hook):\n\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n\n    return wrapper\n", "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "def on(self, hook):\n\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        if not self.registry.has_listener(hook, listener):\n            self.registry.add_listener(hook, listener)\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        if not self.registry.has_listener(hook, listener):\n            self.registry.add_listener(hook, listener)\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"host\": \"localhost\",\n            \"port\": etcd_port,\n            \"ssl\": False,\n            \"certificate\": \"\",\n            \"private\": False,\n            \"secure\": False,\n            \"certificate_chain\": \"\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": None,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"secure\": False,\n        \"allow_reconnect\": True,\n        \"reconnect_interval\": 10,\n        \"ttl\": 30\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"expiration\": None,\n        \"renewal_period\": None,\n        \"version\": None,\n        \"authorizations\": {},\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": \"\",\n        \"api_version\": \"v1\",\n        \"endpoint\": \"http://{}:{}\".format(etcd_host, etcd_port),\n        \"auth_mode\": \"client\",\n        \"retries\": 1,\n        \"timeout\": 300,\n        \"keepalive\": 60,\n        \"cert_path\": \"/etc/etcd/client.crt\",\n        \"key_path\": \"/etc/etcd/client.key\",\n        \"cert_password\": \"\",\n        \"key_password\": \"\",\n        \"retry_timeout\": 5,\n        \"keep_alive\": 300,\n        \"cert_reqs\": \"CERT_NONE\",\n        \"key_reqs\": \"CERT_NONE\",\n        \"version\": \"v1\",\n        \"cacert\": \"/etc/etcd/ca.crt\",\n        \"cert_reqs\": \"CERT_NONE\",\n    }\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"host\": \"localhost\",\n            \"port\": etcd_port,\n            \"ssl\": False,\n            \"certificate\": \"\",\n            \"private\": False,\n            \"secure\": False,\n            \"certificate_chain\": \"\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": None,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"secure\": False,\n        \"allow_reconnect\": True,\n        \"reconnect_interval\": 10,\n        \"ttl\": 30\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"expiration\": None,\n        \"renewal_period\": None,\n        \"version\": None,\n        \"authorizations\": {},\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": \"\",\n        \"api_version\": \"v1\",\n        \"endpoint\": \"http://{}:{}\".format(etcd_host, etcd_port),\n        \"auth_mode\": \"client\",\n        \"retries\": 1,\n        \"timeout\": 300,\n        \"keepalive\": 60,\n        \"cert_path\": \"/etc/etcd/client.crt\",\n        \"key_path\": \"/etc/etcd/client.key\",\n        \"cert_password\": \"\",\n        \"key_password\": \"\",\n        \"retry_timeout\": 5,\n        \"keep_alive\": 300,\n        \"cert_reqs\": \"CERT_NONE\",\n        \"key_reqs\": \"CERT_NONE\",\n        \"version\": \"v1\",\n        \"cacert\": \"/etc/etcd/ca.crt\",\n        \"cert_reqs\": \"CERT_NONE\",\n    }\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with pytz, this is always the case.\n        return dt\n\n    return dt.astimezone(self._tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with pytz, this is always the case.\n        return dt\n\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__class__.__slots__})\n", "def normalized(self):\n\n    return self.__class__(self.day, self.second, self.microsecond,\n                          years=self.years, months=self.months,\n                          days=self.days, leapdays=self.leapdays)\n", "def normalized(self):\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        weeks_in_month=self.weeks_in_month,\n        months_in_year=self.months_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_month=self.leapdays_in_month,\n        microseconds=self.microseconds,\n        microseconds_in_day=self.microseconds_in_day,\n    )\n", "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        years=self.years,\n        months=self.months,\n        days_in_month=self.days_in_month,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n    )\n", "def normalized(self):\n    return self.__class__(self.day, self.second, self.microsecond,\n                          self.leapdays, self.weeks(),\n                          self.hour, self.minute, self.second)\n", "def normalized(self):\n\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_month=self.days_in_month,\n        weeks_in_year=self.weeks_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_month=self.leapdays_in_month,\n        months_in_year=self.months_in_year,\n        months_in_day=self.months_in_day,\n        months_in_week=self.months_in_week,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_day=self.leapdays_in_day)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        leapdays=self.leapdays,\n                        weeks=self.weeks,\n                        hours_in_hours=self.hours_in_hours,\n                        minutes_in_minutes=self.minutes_in_minutes,\n                        seconds_in_seconds=self.seconds_in_seconds)\n", "def normalized(self):\n    return self.__class__(self.days, self.seconds,\n                          self.microseconds, self.years,\n                          self.months, self.days_in_month,\n                          self.leapdays, self.weeks,\n                          self.hours, self.minutes, self.seconds,\n                          self.microseconds, self.year, self.month,\n                          self.day, self.weekday, self.year)\n", "def normalized(self):\n    return self.__class__(self.days, self.seconds, self.microseconds,\n                          years=self.years, months=self.months,\n                          days=self.days, weeks=self.weeks,\n                          hours=self.hours, minutes=self.minutes,\n                          seconds=self.seconds, microseconds=self.microseconds)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        weeks=self.weeks,\n                        months_in_year=self.months_in_year)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__class__.__slots__})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return self.__class__(self.day, self.second, self.microsecond,\n                          years=self.years, months=self.months,\n                          days=self.days, leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        weeks_in_month=self.weeks_in_month,\n        months_in_year=self.months_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_month=self.leapdays_in_month,\n        microseconds=self.microseconds,\n        microseconds_in_day=self.microseconds_in_day,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        years=self.years,\n        months=self.months,\n        days_in_month=self.days_in_month,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.day, self.second, self.microsecond,\n                          self.leapdays, self.weeks(),\n                          self.hour, self.minute, self.second)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_month=self.days_in_month,\n        weeks_in_year=self.weeks_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_month=self.leapdays_in_month,\n        months_in_year=self.months_in_year,\n        months_in_day=self.months_in_day,\n        months_in_week=self.months_in_week,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_day=self.leapdays_in_day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        leapdays=self.leapdays,\n                        weeks=self.weeks,\n                        hours_in_hours=self.hours_in_hours,\n                        minutes_in_minutes=self.minutes_in_minutes,\n                        seconds_in_seconds=self.seconds_in_seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.days, self.seconds,\n                          self.microseconds, self.years,\n                          self.months, self.days_in_month,\n                          self.leapdays, self.weeks,\n                          self.hours, self.minutes, self.seconds,\n                          self.microseconds, self.year, self.month,\n                          self.day, self.weekday, self.year)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.days, self.seconds, self.microseconds,\n                          years=self.years, months=self.months,\n                          days=self.days, weeks=self.weeks,\n                          hours=self.hours, minutes=self.minutes,\n                          seconds=self.seconds, microseconds=self.microseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        weeks=self.weeks,\n                        months_in_year=self.months_in_year)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    namefunc(lambda: timezone_name(timedelta(hours=8)))\n    namefunc(lambda: timezone_name('UTC'))\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    if PY2:\n        @wraps(namefunc)\n        def wrapper(self):\n            name = namefunc(self)\n            if name is not None:\n                return name\n        return wrapper\n    else:\n        return namefunc\n", "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # convert to bytes if necessary\n            if isinstance(name, six.text_type):\n                name = name.encode()\n            return name\n    return _wrapper\n", "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None and not PY3:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    namefunc(lambda: timezone_name(timedelta(hours=8)))\n    namefunc(lambda: timezone_name('UTC'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if PY2:\n        @wraps(namefunc)\n        def wrapper(self):\n            name = namefunc(self)\n            if name is not None:\n                return name\n        return wrapper\n    else:\n        return namefunc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # convert to bytes if necessary\n            if isinstance(name, six.text_type):\n                name = name.encode()\n            return name\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None and not PY3:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n", "def get_versions():\n    return get_config().get_versions()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get_versions()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_regression/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_detect/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/pinterest/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"scatter3d/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodejs_ui/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/twilio/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_regression/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_detect/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/pinterest/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"scatter3d/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodejs_ui/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/twilio/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.check_root_structure()\n\n    if check_digests:\n        self.check_digest_objects()\n\n    if show_warnings:\n        self.log.log(logging.WARNING if self.log.isEnabledFor(logging.DEBUG) else logging.ERROR,\n                     \"Summary checks for '%s' failed.\" % self.description)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if not self.check_root_structure():\n        return None, self.traversal_error('root_not_found')\n\n    if not self.check_extensions_dir():\n        return None, self.traversal_error('extensions_not_found')\n\n    return self.check_hierarchy_dir(), self.check_root_structure()\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating hierarchy\")\n    if validate_objects:\n        self._validate_objects()\n    if check_digests:\n        self._check_digests()\n    self._dispositor()\n    self.log.debug(\"Hierarchy validated\")\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug('Validating storage hierarchy')\n    self.dispositor()\n    self._dispositor.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    self.initialize()\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, self.log)\n    if validate_objects:\n        validator.validate_objects()\n    if check_digests:\n        validator.check_digests()\n    if show_warnings:\n        validator.log_warnings()\n    return len(validator.valid_objects), len(validator.unvalid_objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    self.log.debug(\"Validating hierarchy of %s\", self.root)\n\n    # check root structure\n    self._dispositor(self.root.validate_hierarchy,\n                     validate_objects=validate_objects,\n                     check_digests=check_digests,\n                     show_warnings=show_warnings)\n\n    if self.num_objects!= self.num_traversal_errors:\n        if validate_objects:\n            self.log.error(\"Object tree mismatch between %d and %d\", self.num_objects, self.num_traversal_errors)\n        else:\n            self.log.error(\"Object tree mismatch between %d and %d\", self.num_objects, self.num_traversal_errors)\n        return self.num_objects, self.good_objects, self.num_traversal_errors\n\n    return self.num_objects, self.good_objects, 0\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"Validate storage root hierarchy.\n\n    Returns:\n        num_objects - number of objects checked good_objects\n        good_objects - number of objects checked that were found to be valid\n        json re namaste logging\n        pyfs validator class self.check_root_structure()\n        self.declaration_tvalue - validation errors\n        self.parse_layout_file()\n        self.validate_extensions_dir()\n        self.validate_hierarchy(validate_objects=True, check_digests=True, show_warnings=True)\n        self.dispositor(self)\n        self.validate_extensions_dir()\n    \"\"\"\n    if self.lax_digests:\n        self.log.warning(\"Validating %d objects with lax_digests (%d).\", len(self), len(self.lax_digests))\n\n    return super().validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating hierarchy\")\n    validate_objects = bool(validate_objects)\n    if validate_objects:\n        self._dispositor(\"validate_hierarchy\", check_digests=check_digests, show_warnings=show_warnings)\n    objects = self.object_paths()\n    self.log.debug(\"Validation completed successfully. %d objects checked\", len(objects))\n    return len(objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating %d objects\" % self.num_objects)\n    validator = ObjectValidator(self.spec_file)\n    validator.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    self.log.info(\"Validation completed\")\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating storage root hierarchy\")\n    self._dispositor.dispositor.dispositor.validate_hierarchy(self, validate_objects, check_digests, show_warnings)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.check_root_structure()\n\n    if check_digests:\n        self.check_digest_objects()\n\n    if show_warnings:\n        self.log.log(logging.WARNING if self.log.isEnabledFor(logging.DEBUG) else logging.ERROR,\n                     \"Summary checks for '%s' failed.\" % self.description)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if not self.check_root_structure():\n        return None, self.traversal_error('root_not_found')\n\n    if not self.check_extensions_dir():\n        return None, self.traversal_error('extensions_not_found')\n\n    return self.check_hierarchy_dir(), self.check_root_structure()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating hierarchy\")\n    if validate_objects:\n        self._validate_objects()\n    if check_digests:\n        self._check_digests()\n    self._dispositor()\n    self.log.debug(\"Hierarchy validated\")\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug('Validating storage hierarchy')\n    self.dispositor()\n    self._dispositor.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    self.initialize()\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, self.log)\n    if validate_objects:\n        validator.validate_objects()\n    if check_digests:\n        validator.check_digests()\n    if show_warnings:\n        validator.log_warnings()\n    return len(validator.valid_objects), len(validator.unvalid_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    self.log.debug(\"Validating hierarchy of %s\", self.root)\n\n    # check root structure\n    self._dispositor(self.root.validate_hierarchy,\n                     validate_objects=validate_objects,\n                     check_digests=check_digests,\n                     show_warnings=show_warnings)\n\n    if self.num_objects!= self.num_traversal_errors:\n        if validate_objects:\n            self.log.error(\"Object tree mismatch between %d and %d\", self.num_objects, self.num_traversal_errors)\n        else:\n            self.log.error(\"Object tree mismatch between %d and %d\", self.num_objects, self.num_traversal_errors)\n        return self.num_objects, self.good_objects, self.num_traversal_errors\n\n    return self.num_objects, self.good_objects, 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"Validate storage root hierarchy.\n\n    Returns:\n        num_objects - number of objects checked good_objects\n        good_objects - number of objects checked that were found to be valid\n        json re namaste logging\n        pyfs validator class self.check_root_structure()\n        self.declaration_tvalue - validation errors\n        self.parse_layout_file()\n        self.validate_extensions_dir()\n        self.validate_hierarchy(validate_objects=True, check_digests=True, show_warnings=True)\n        self.dispositor(self)\n        self.validate_extensions_dir()\n    \"\"\"\n    if self.lax_digests:\n        self.log.warning(\"Validating %d objects with lax_digests (%d).\", len(self), len(self.lax_digests))\n\n    return super().validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating hierarchy\")\n    validate_objects = bool(validate_objects)\n    if validate_objects:\n        self._dispositor(\"validate_hierarchy\", check_digests=check_digests, show_warnings=show_warnings)\n    objects = self.object_paths()\n    self.log.debug(\"Validation completed successfully. %d objects checked\", len(objects))\n    return len(objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating %d objects\" % self.num_objects)\n    validator = ObjectValidator(self.spec_file)\n    validator.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n    self.log.info(\"Validation completed\")\n    return self.num_objects, self.good_objects, self.num_traversal_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating storage root hierarchy\")\n    self._dispositor.dispositor.dispositor.validate_hierarchy(self, validate_objects, check_digests, show_warnings)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n\n    self.root_fs = self.open_root_fs(create=False)\n\n    self.object_paths = list(self.root_fs.listdir())\n\n    self.num_objects = len(self.object_paths)\n\n    self.dispositor(\"initialize\")\n\n    self._dispositor.register(self)\n", "def initialize(self):\n    self.log.debug(\"Initializing %s\", self)\n    self.dispositor.initialize(self)\n    self.spec_file = self.dispositor.get_spec_file()\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.check_root_structure()\n\n    self.object_paths = list(self.object_paths)\n    self.num_objects = len(self.object_paths)\n    self.object_paths = [os.path.join(self.root, path) for path in self.object_paths]\n\n    self.dispositor()\n\n    if self.log.isEnabledFor(logging.DEBUG):\n        self.log.debug(\"initialized with %d object paths\", self.num_objects)\n", "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n\n    self.log.debug('initializing storage root')\n\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor = None\n    self.log.debug('initialized storage root')\n", "def initialize(self):\n    self.log = self.dispositor().log\n    self.log.debug(\"Initializing OCFL storage root: %s\", self.root)\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.lax_digests = []\n    self.open_root_fs(create=False)\n    self.dispositor().register_extensions(self)\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor = None\n    self.object_path = None\n    self.lax_digests = []\n    self.dispositor = self._dispositor\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.spec_file = None\n    self.dispositor()\n    self._dispositor.dispositor()\n    self.object_path = None\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n", "def initialize(self):\n    self.log = logging.getLogger('pyfs.storage')\n    self.log.debug('initializing OCFL storage')\n    self.spec_file = None\n    self.open_root_fs()\n", "def initialize(self):\n    self.log = logging.getLogger(__name__)\n\n    self.log.debug(\"initializing with %s\", self.root)\n\n    self.root_fs = self.open_root_fs(create=False)\n\n    if self.spec_file is not None:\n        self.parse_layout_file(self.spec_file)\n\n    self._dispositor()\n", "def initialize(self):\n    super().initialize()\n    self.log.debug(\"Initializing OCFL storage root at %s\", self.root)\n    self.dispositor.register(self)\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.lax_digests = []\n    self.object_paths = []\n    self.object_paths_by_identifier = {}\n    self.open_root_fs(create=True)\n    self._dispositor.register(self)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n\n    self.root_fs = self.open_root_fs(create=False)\n\n    self.object_paths = list(self.root_fs.listdir())\n\n    self.num_objects = len(self.object_paths)\n\n    self.dispositor(\"initialize\")\n\n    self._dispositor.register(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"Initializing %s\", self)\n    self.dispositor.initialize(self)\n    self.spec_file = self.dispositor.get_spec_file()\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.check_root_structure()\n\n    self.object_paths = list(self.object_paths)\n    self.num_objects = len(self.object_paths)\n    self.object_paths = [os.path.join(self.root, path) for path in self.object_paths]\n\n    self.dispositor()\n\n    if self.log.isEnabledFor(logging.DEBUG):\n        self.log.debug(\"initialized with %d object paths\", self.num_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n\n    self.log.debug('initializing storage root')\n\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor = None\n    self.log.debug('initialized storage root')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log = self.dispositor().log\n    self.log.debug(\"Initializing OCFL storage root: %s\", self.root)\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.lax_digests = []\n    self.open_root_fs(create=False)\n    self.dispositor().register_extensions(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor = None\n    self.object_path = None\n    self.lax_digests = []\n    self.dispositor = self._dispositor\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.spec_file = None\n    self.dispositor()\n    self._dispositor.dispositor()\n    self.object_path = None\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log = logging.getLogger('pyfs.storage')\n    self.log.debug('initializing OCFL storage')\n    self.spec_file = None\n    self.open_root_fs()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log = logging.getLogger(__name__)\n\n    self.log.debug(\"initializing with %s\", self.root)\n\n    self.root_fs = self.open_root_fs(create=False)\n\n    if self.spec_file is not None:\n        self.parse_layout_file(self.spec_file)\n\n    self._dispositor()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    super().initialize()\n    self.log.debug(\"Initializing OCFL storage root at %s\", self.root)\n    self.dispositor.register(self)\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.lax_digests = []\n    self.object_paths = []\n    self.object_paths_by_identifier = {}\n    self.open_root_fs(create=True)\n    self._dispositor.register(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    version += 1\n    while True:\n        try:\n            FilenameTemplate(version).substitute(**globals())\n        except KeyError:\n            break\n        else:\n            version += 1\n    return version\n", "def next_version(version):\n    while version in ('', '.'):\n        version = version + '1'\n    while not re.match(r'^v[0-9]+$', version):\n        version = version + '0'\n    return version\n", "def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    if version[0] == \"v\":\n        version = version[1:]\n    # Must be zero-prefixed\n    if version[0]!= \"0\":\n        raise ValueError(\"First component of version must be zero-prefixed\")\n    # Must be a non-zero prefixed version\n    if not version_is_valid(version):\n        raise ValueError(\"First component of version must be a valid version identifier\")\n    return version\n", "def next_version(version):\n    \"Next version identifier following existing pattern.  Must deal with both zero-prefixed and non-zero prefixed versions.\"\n    match = NEXT_VERSION_RE.match(version)\n    if match:\n        groupdict = match.groupdict()\n        new_version = groupdict['version'] + match.group('suffix')\n        return new_version\n", "def next_version(version):\n    if version == '':\n        return None\n    m = re.match(r'^v([0-9]+\\.[0-9]+\\.[0-9]+)$', version)\n    if m:\n        return m.group(1)\n    else:\n        raise ValueError(\"Unsupported version: %s\" % version)\n", "def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    # Must deal with both zero-prefixed and non-zero prefixed versions.\n    if version == \"0\":\n        return \"latest\"\n    else:\n        return \"%s.post0\" % version\n", "def next_version(version):\n    \"Microsoft Windows 8.1 and below have different patterns\"\n    if version[0] == \"v\":\n        version = version[1:]\n\n    m = re.search(r\"([0-9]+\\.[0-9]+\\.[0-9]+)$\", version)\n    if m:\n        return version + m.group(0)\n    else:\n        raise ValueError(\"Invalid version %s\" % version)\n", "def next_version(version):\n    if not version.startswith('0'):\n        raise ValueError('next_version() must start with 0')\n    version = version[1:]\n    dirname, basename = os.path.split(version)\n    if dirname == '':\n        version = '0' + basename\n        dirname = '0'\n    return dirname, basename, version\n", "def next_version(version):\n    if version == '':\n        return None\n    if re.match(r'[0-9]+\\.[0-9]+\\.[0-9]+$', version):\n        return version\n    version = add_object_args(parser)\n    return next_version(version)\n", "def next_version(version):\n    if version == '':\n        return None\n    if re.match(r'0\\.0+$', version):\n        return version\n    version = add_object_args(parser)\n    return next_version(version)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    version += 1\n    while True:\n        try:\n            FilenameTemplate(version).substitute(**globals())\n        except KeyError:\n            break\n        else:\n            version += 1\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    while version in ('', '.'):\n        version = version + '1'\n    while not re.match(r'^v[0-9]+$', version):\n        version = version + '0'\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    if version[0] == \"v\":\n        version = version[1:]\n    # Must be zero-prefixed\n    if version[0]!= \"0\":\n        raise ValueError(\"First component of version must be zero-prefixed\")\n    # Must be a non-zero prefixed version\n    if not version_is_valid(version):\n        raise ValueError(\"First component of version must be a valid version identifier\")\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Next version identifier following existing pattern.  Must deal with both zero-prefixed and non-zero prefixed versions.\"\n    match = NEXT_VERSION_RE.match(version)\n    if match:\n        groupdict = match.groupdict()\n        new_version = groupdict['version'] + match.group('suffix')\n        return new_version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == '':\n        return None\n    m = re.match(r'^v([0-9]+\\.[0-9]+\\.[0-9]+)$', version)\n    if m:\n        return m.group(1)\n    else:\n        raise ValueError(\"Unsupported version: %s\" % version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Next version identifier following existing pattern.\"\n    # Must deal with both zero-prefixed and non-zero prefixed versions.\n    if version == \"0\":\n        return \"latest\"\n    else:\n        return \"%s.post0\" % version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Microsoft Windows 8.1 and below have different patterns\"\n    if version[0] == \"v\":\n        version = version[1:]\n\n    m = re.search(r\"([0-9]+\\.[0-9]+\\.[0-9]+)$\", version)\n    if m:\n        return version + m.group(0)\n    else:\n        raise ValueError(\"Invalid version %s\" % version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if not version.startswith('0'):\n        raise ValueError('next_version() must start with 0')\n    version = version[1:]\n    dirname, basename = os.path.split(version)\n    if dirname == '':\n        version = '0' + basename\n        dirname = '0'\n    return dirname, basename, version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == '':\n        return None\n    if re.match(r'[0-9]+\\.[0-9]+\\.[0-9]+$', version):\n        return version\n    version = add_object_args(parser)\n    return next_version(version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == '':\n        return None\n    if re.match(r'0\\.0+$', version):\n        return version\n    version = add_object_args(parser)\n    return next_version(version)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories: version_dirs %s\", version_dirs)\n    if len(version_dirs)!= len(self.inventory_digest_files):\n        raise Exception(\"Length of version_dirs and inventory_digest_files do not match\")\n\n    for vdf_file, inv_digest_file in zip(version_dirs, self.inventory_digest_files):\n        self.log.debug(\"Validating inventory file %s\", vdf_file)\n        self.validate_inventory_digest(vdf_file, inv_digest_file)\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    for inv_file in self.content_directory.glob(\"*/inventory\"):\n        if inv_file.is_file():\n            self.validate_inventory(inv_file, version_dirs, False)\n", "def validate_version_inventories(self, version_dirs):\n    # TODO: this needs to be updated to use the correct root inventories file\n    # (i.e. the content directory in the version sequence (1, 2, 3))\n    if version_dirs:\n        self.log.error(\"Can't use version sequences with root inventory\")\n        raise InvalidRootDir\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        content_digest_file = os.path.join(version_dir, 'content.digest')\n        if not os.path.isfile(content_digest_file):\n            self.log.debug(\"%s: %s not found\", version_dir, content_digest_file)\n        else:\n            self.log.info(\"%s: found %s in %s\", version_dir, content_digest_file, version_dir)\n", "def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories: version_dirs %s\", version_dirs)\n    if len(version_dirs)!= len(self.inventory_digest_files):\n        raise Exception(\"Length of version_dirs and inventory_digest_files do not match\")\n\n    for vdf_file, inv_digest_file in zip(version_dirs, self.inventory_digest_files):\n        self.log.debug(\"Validating inventory file %s\", vdf_file)\n        self.validate_inventory_digest(vdf_file, inv_digest_file)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    for inv_file in self.content_directory.glob(\"*/inventory\"):\n        if inv_file.is_file():\n            self.validate_inventory(inv_file, version_dirs, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: this needs to be updated to use the correct root inventories file\n    # (i.e. the content directory in the version sequence (1, 2, 3))\n    if version_dirs:\n        self.log.error(\"Can't use version sequences with root inventory\")\n        raise InvalidRootDir\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        content_digest_file = os.path.join(version_dir, 'content.digest')\n        if not os.path.isfile(content_digest_file):\n            self.log.debug(\"%s: %s not found\", version_dir, content_digest_file)\n        else:\n            self.log.info(\"%s: found %s in %s\", version_dir, content_digest_file, version_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # I can't think of any better way of doing this, but this is mostly\n    # used to determine the type of file or directory we want.\n    if path.startswith('/'):\n        return 'root'\n\n    if os.path.isfile(path):\n        return 'file'\n\n    if os.path.isdir(path):\n        return 'object'\n\n    # If the path can't be identified as a file or directory, we can't\n    # determine the type of the path. We assume 'root' is the only thing\n    # that could be an OCFL Root or a OCFL Object.\n    return 'root'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '?'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        # TODO: handle other path types\n        return'string'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '*' in path:\n        return 'object'\n\n    if os.path.isdir(path):\n        return 'directory'\n\n    if not os.path.isfile(path):\n        return 'file'\n\n    return 'unknown'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        # this should never happen, but just in case...\n        raise ValueError(\"Unable to determine what kind of directory to look for.  This is probably a name conflict (or an invalid OCFL file?)\")\n", "def find_path_type(path):\n    for name in ('file', 'object', 'root'):\n        if path.startswith(\"0=\" + name):\n            return \"root\"\n    for name in ('dir','symlink', 'link'):\n        if path.startswith(\"0=\" + name):\n            return \"object\"\n    if path.startswith(\"//\"):\n        return \"file\"\n    if path.startswith(\"/\"):\n        return \"root\"\n    return \"\"\n", "def find_path_type(path):\n    if '0=' in path:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return'string'\n", "def find_path_type(path):\n\n    if not path:\n        return 'root'\n\n    if path.endswith('*'):\n        return 'object'\n    elif '/' in path:\n        return 'file'\n    else:\n        return 'root'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'object'\n    else:\n        return '*'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # I can't think of any better way of doing this, but this is mostly\n    # used to determine the type of file or directory we want.\n    if path.startswith('/'):\n        return 'root'\n\n    if os.path.isfile(path):\n        return 'file'\n\n    if os.path.isdir(path):\n        return 'object'\n\n    # If the path can't be identified as a file or directory, we can't\n    # determine the type of the path. We assume 'root' is the only thing\n    # that could be an OCFL Root or a OCFL Object.\n    return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '?'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        # TODO: handle other path types\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '*' in path:\n        return 'object'\n\n    if os.path.isdir(path):\n        return 'directory'\n\n    if not os.path.isfile(path):\n        return 'file'\n\n    return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        # this should never happen, but just in case...\n        raise ValueError(\"Unable to determine what kind of directory to look for.  This is probably a name conflict (or an invalid OCFL file?)\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for name in ('file', 'object', 'root'):\n        if path.startswith(\"0=\" + name):\n            return \"root\"\n    for name in ('dir','symlink', 'link'):\n        if path.startswith(\"0=\" + name):\n            return \"object\"\n    if path.startswith(\"//\"):\n        return \"file\"\n    if path.startswith(\"/\"):\n        return \"root\"\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '0=' in path:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n\n    if not path:\n        return 'root'\n\n    if path.endswith('*'):\n        return 'object'\n    elif '/' in path:\n        return 'file'\n    else:\n        return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    if self.dryrun:\n        return\n\n    bug_ids = list(bug_ids)\n    params = dict(\n        id=params.get('id', None),\n        bug_ids=bug_ids,\n        subject=params.get('subject', None),\n        needinfo=self.get_needinfo(),\n        comments=self.get_comments(),\n        msg=params.get('msg', None),\n        url=params.get('url', None),\n        user=params.get('user', None),\n        products=params.get('products', None),\n        bug_classification=params.get('bug_classification', None),\n        bug_status=params.get('bug_status', None),\n        owner=params.get('owner', None),\n        product_update=params.get('product_update', None),\n        status=params.get('status', None),\n    )\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params[\"id\"] = bug_id\n        params[\"status\"] = \"NAG-AUTO-MAYBE\"\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    for key in params:\n        if key in self.ignore_meta:\n            continue\n        params[key] = self.get_bz_params(params[key])\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if self.query_params:\n        params = dict(\n            (k, v) for k, v in params.items() if k in self.query_params\n        )\n    params[\"product_ids\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return  # No bugzilla ids specified\n    params['bugzilla_ids'] = bug_ids\n    # Adjust the comments and notifications flags to prevent\n    # triggering a bugzilla update event.\n    if self.dryrun:\n        return\n    if self.name == 'Anonymous':\n        self.name = None\n    if self.autofix:\n        self.set_autofix_change(params)\n    if self.query_params.get('needinfo'):\n        self.set_needinfo()\n    if self.get_data():\n        self.get_data()\n", "def amend_bzparams(self, params, bug_ids):\n    if not self.dryrun:\n        params['component'] = 'bugzilla'\n        params['status'] = 'new'\n        params['date_last_change'] = int(time.time())\n        params['date_last_activity'] = int(time.time())\n        params['date_last_activity_pk'] = None\n        params['last_activity'] = int(time.time())\n        params['date_next_activity'] = int(time.time())\n        params['ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n        return params\n    if self.bughandler.bugzilla_ids:\n        params['bugzilla_ids'] = self.bughandler.bugzilla_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = dict()\n    params['bug_ids'] = bug_ids\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_chunks:\n        return\n\n    for i in range(len(bug_ids)):\n        params['ids[%d]' % (i + 1)] = bug_ids[i]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if self.dryrun:\n        return\n\n    bug_ids = list(bug_ids)\n    params = dict(\n        id=params.get('id', None),\n        bug_ids=bug_ids,\n        subject=params.get('subject', None),\n        needinfo=self.get_needinfo(),\n        comments=self.get_comments(),\n        msg=params.get('msg', None),\n        url=params.get('url', None),\n        user=params.get('user', None),\n        products=params.get('products', None),\n        bug_classification=params.get('bug_classification', None),\n        bug_status=params.get('bug_status', None),\n        owner=params.get('owner', None),\n        product_update=params.get('product_update', None),\n        status=params.get('status', None),\n    )\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params[\"id\"] = bug_id\n        params[\"status\"] = \"NAG-AUTO-MAYBE\"\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for key in params:\n        if key in self.ignore_meta:\n            continue\n        params[key] = self.get_bz_params(params[key])\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if self.query_params:\n        params = dict(\n            (k, v) for k, v in params.items() if k in self.query_params\n        )\n    params[\"product_ids\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return  # No bugzilla ids specified\n    params['bugzilla_ids'] = bug_ids\n    # Adjust the comments and notifications flags to prevent\n    # triggering a bugzilla update event.\n    if self.dryrun:\n        return\n    if self.name == 'Anonymous':\n        self.name = None\n    if self.autofix:\n        self.set_autofix_change(params)\n    if self.query_params.get('needinfo'):\n        self.set_needinfo()\n    if self.get_data():\n        self.get_data()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not self.dryrun:\n        params['component'] = 'bugzilla'\n        params['status'] = 'new'\n        params['date_last_change'] = int(time.time())\n        params['date_last_activity'] = int(time.time())\n        params['date_last_activity_pk'] = None\n        params['last_activity'] = int(time.time())\n        params['date_next_activity'] = int(time.time())\n        params['ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n        return params\n    if self.bughandler.bugzilla_ids:\n        params['bugzilla_ids'] = self.bughandler.bugzilla_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = dict()\n    params['bug_ids'] = bug_ids\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_chunks:\n        return\n\n    for i in range(len(bug_ids)):\n        params['ids[%d]' % (i + 1)] = bug_ids[i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[("], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Manage Borgmatic installation credentials.')\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to use. Defaults to the '\n        '`DEFAULT_DESTINATION_CONFIG_FILENAME` environment variable.')\n    parser.add_argument(\n        '--user', required=False, help='The user name to login.')\n    parser.add_argument(\n        '--password', required=False, help='The password to login.')\n    parser.add_argument(\n        '--account', required=False, help='The account to login.')\n    parser.add_argument(\n        '--source-config', required=False, help='The path to a config file '\n        'to use. Defaults to the `DEFAULT_DESTINATION_CONFIG_FILENAME` '\n        'environment variable.')\n    parser.add_argument(\n        '-", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--output-file', default='-')\n    parser.add_argument('--ignore-empty-files', action='store_true')\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--dry-run', action='store_true')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return ArgumentParser(description='A script to detect duplicate items',\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '-d', '--destination-config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to destination config file'\n    )\n\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Show interactive console output'\n    )\n\n    parser.add_argument(\n        '-l', '--log-level',\n        default='info',\n        choices=['debug', 'error', 'info', 'warning', 'notice'],\n        help='Log level to use'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Show more output from commands'\n    )\n\n    parser.add_argument(\n  ", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI interface.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input-config',\n                        help='path to a pre-configured input config',\n                        required=True)\n    parser.add_argument('-o', '--output-config',\n                        help='path to a pre-configured output config',\n                        required=True)\n    parser.add_argument('-d', '--debug',\n                        action='store_true',\n                        help='enable debugging output')\n    parser.add_argument('-v', '--version',\n                        action='store_true',\n                        help='show the version number and exit')\n    parser.add_argument('--debug-level',\n                        action='store_const'", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_filename', nargs='?', type=str, default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--ignore_missing_ssh_keys', action='store_true',\n                        help='If this option is set, ignore missing ssh keys when copying repository sources')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Simple CLI for Galaxy package import.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple test command line interface',\n        argument_default=Argument(\n            '--default-destination-config',\n            action='store',\n            dest='default_destination_config_filename',\n            required=False,\n            help='Path to a configuration file for the default destination.'\n        ),\n        add_help=False,\n    )\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        prog='backup',\n        description='Backup a database in a given location',\n        add_help=False,\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Manage Borgmatic installation credentials.')\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to use. Defaults to the '\n        '`DEFAULT_DESTINATION_CONFIG_FILENAME` environment variable.')\n    parser.add_argument(\n        '--user', required=False, help='The user name to login.')\n    parser.add_argument(\n        '--password', required=False, help='The password to login.')\n    parser.add_argument(\n        '--account', required=False, help='The account to login.')\n    parser.add_argument(\n        '--source-config', required=False, help='The path to a config file '\n        'to use. Defaults to the `DEFAULT_DESTINATION_CONFIG_FILENAME` '\n        'environment variable.')\n    parser.add_argument(\n        '-", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--output-file', default='-')\n    parser.add_argument('--ignore-empty-files', action='store_true')\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--dry-run', action='store_true')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(description='A script to detect duplicate items',\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '-d', '--destination-config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to destination config file'\n    )\n\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Show interactive console output'\n    )\n\n    parser.add_argument(\n        '-l', '--log-level',\n        default='info',\n        choices=['debug', 'error', 'info', 'warning', 'notice'],\n        help='Log level to use'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Show more output from commands'\n    )\n\n    parser.add_argument(\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI interface.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input-config',\n                        help='path to a pre-configured input config',\n                        required=True)\n    parser.add_argument('-o', '--output-config',\n                        help='path to a pre-configured output config',\n                        required=True)\n    parser.add_argument('-d', '--debug',\n                        action='store_true',\n                        help='enable debugging output')\n    parser.add_argument('-v', '--version',\n                        action='store_true',\n                        help='show the version number and exit')\n    parser.add_argument('--debug-level',\n                        action='store_const'", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_filename', nargs='?', type=str, default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--ignore_missing_ssh_keys', action='store_true',\n                        help='If this option is set, ignore missing ssh keys when copying repository sources')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Simple CLI for Galaxy package import.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple test command line interface',\n        argument_default=Argument(\n            '--default-destination-config',\n            action='store',\n            dest='default_destination_config_filename',\n            required=False,\n            help='Path to a configuration file for the default destination.'\n        ),\n        add_help=False,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        prog='backup',\n        description='Backup a database in a given location',\n        add_help=False,\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +=''\n        else:\n            flags +='' + flag.dest +''\n    return flags\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return \" \".join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser._flags])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +=''\n        else:\n            flags +='' + flag.dest +''\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return \" \".join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser._flags])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return dict(namespace.__dict__)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        if name in unparsed_arguments:\n            setattr(parser.prog, name, unparsed_arguments[name])\n    return vars(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        if name not in sys.argv:\n            continue\n        parser.add_argument(name, **SUBPARSER_ALIASES[name])\n    for arg in unparsed_arguments:\n        parser.add_argument(*parse_arguments(arg))\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {name: arg for name, arg in parser.parse_args(unparsed_arguments)}\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description='A simple command-line tool that can be used to manage sub-commands of Borgmatic.')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_subparsers(dest=subparser)\n    for unparsed_argument in unparsed_arguments:\n        parser.add_argument(*unparsed_argument.args, **unparsed_argument.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*parse_subparser_arguments(argument[2:], parsers))\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return dict(namespace.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        if name in unparsed_arguments:\n            setattr(parser.prog, name, unparsed_arguments[name])\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        if name not in sys.argv:\n            continue\n        parser.add_argument(name, **SUBPARSER_ALIASES[name])\n    for arg in unparsed_arguments:\n        parser.add_argument(*parse_arguments(arg))\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {name: arg for name, arg in parser.parse_args(unparsed_arguments)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description='A simple command-line tool that can be used to manage sub-commands of Borgmatic.')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_subparsers(dest=subparser)\n    for unparsed_argument in unparsed_arguments:\n        parser.add_argument(*unparsed_argument.args, **unparsed_argument.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*parse_subparser_arguments(argument[2:], parsers))\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in six.iteritems(subparsers):\n        parser_arguments = parser.parse_known_args(unparsed_arguments.get(name, []))\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments = remaining_arguments + subparser.required_arguments\n    return parsed_arguments, remaining_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in six.iteritems(subparsers):\n        if name in unparsed_arguments:\n            parsed_arguments[name] = unparsed_arguments[name]\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[name].args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = make_parsers()\n    parsed_args = dict((sp.name, sp.parse_from_args(unparsed_arguments)) for sp in subparsers)\n    return parser.parse_args(parsed_args), parsed_args.keys(), unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed = {}\n    remaining = []\n    for subparser in subparsers.values():\n        parsed.update(subparser.parse_args(unparsed_arguments))\n        remaining.extend(subparser.required_arguments)\n    return (parsed, remaining, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parser_arguments = parse_arguments_for_subparser(unparsed_arguments,\n                                                        subparser_name)\n        parsed_arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return parsed_arguments, remaining_arguments, SUBPARSER_ALIASES\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_args = []\n    for parser_name, parser in six.iteritems(subparsers):\n        for argument in unparsed_arguments:\n            if isinstance(argument, six.string_types):\n                arguments[parser_name][argument] = True\n            elif isinstance(argument, dict):\n                arguments[parser_name] = argument\n                remaining_args.append(argument)\n            else:\n                raise ValueError('Unknown argument type {} for subparser {}'.format(\n                    type(argument), parser_name))\n    return arguments, remaining_args, SUBPARSER_ALIASES\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = []\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        if name not in SUBPARSER_ALIASES:\n            remaining_arguments.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_from_args(unparsed_arguments)\n            unparsed_args = unparsed_arguments[name]\n    return parsed_arguments, remaining_arguments, unparsed_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for parser in subparsers._actions:\n        parsed_arguments.update(parser.parse_args(unparsed_arguments))\n        if parser.required:\n            remaining_args.append(parser)\n    return parsed_arguments, remaining_args, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_args = {}\n    parser_remaining_args = []\n    for subparser in subparsers.values():\n        parser_args.update(subparser.parse_known_args(unparsed_arguments))\n    for arg in unparsed_arguments:\n        if arg not in parser_args:\n            parser_remaining_args.append(arg)\n    return parser_args, parser_remaining_args, unparsed_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in six.iteritems(subparsers):\n        parser_arguments = parser.parse_known_args(unparsed_arguments.get(name, []))\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments = remaining_arguments + subparser.required_arguments\n    return parsed_arguments, remaining_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in six.iteritems(subparsers):\n        if name in unparsed_arguments:\n            parsed_arguments[name] = unparsed_arguments[name]\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[name].args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = make_parsers()\n    parsed_args = dict((sp.name, sp.parse_from_args(unparsed_arguments)) for sp in subparsers)\n    return parser.parse_args(parsed_args), parsed_args.keys(), unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed = {}\n    remaining = []\n    for subparser in subparsers.values():\n        parsed.update(subparser.parse_args(unparsed_arguments))\n        remaining.extend(subparser.required_arguments)\n    return (parsed, remaining, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parser_arguments = parse_arguments_for_subparser(unparsed_arguments,\n                                                        subparser_name)\n        parsed_arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return parsed_arguments, remaining_arguments, SUBPARSER_ALIASES\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_args = []\n    for parser_name, parser in six.iteritems(subparsers):\n        for argument in unparsed_arguments:\n            if isinstance(argument, six.string_types):\n                arguments[parser_name][argument] = True\n            elif isinstance(argument, dict):\n                arguments[parser_name] = argument\n                remaining_args.append(argument)\n            else:\n                raise ValueError('Unknown argument type {} for subparser {}'.format(\n                    type(argument), parser_name))\n    return arguments, remaining_args, SUBPARSER_ALIASES\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = []\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        if name not in SUBPARSER_ALIASES:\n            remaining_arguments.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_from_args(unparsed_arguments)\n            unparsed_args = unparsed_arguments[name]\n    return parsed_arguments, remaining_arguments, unparsed_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for parser in subparsers._actions:\n        parsed_arguments.update(parser.parse_args(unparsed_arguments))\n        if parser.required:\n            remaining_args.append(parser)\n    return parsed_arguments, remaining_args, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_args = {}\n    parser_remaining_args = []\n    for subparser in subparsers.values():\n        parser_args.update(subparser.parse_known_args(unparsed_arguments))\n    for arg in unparsed_arguments:\n        if arg not in parser_args:\n            parser_remaining_args.append(arg)\n    return parser_args, parser_remaining_args, unparsed_arguments\n", "is_pass": false, "return_code": 2}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of command-line arguments and return them as a tuple.\"\n    )\n\n    for argument_name, argument_type in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--' + argument_name,\n            default='',\n            type=argument_type,\n            help='The argument to be parsed. The default value is an empty string.'\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test for LilyPond file parser\")\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % alias, default='', type=str, help='The %s argument' % alias)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Summary of commands for importing data.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for subcommand in SUBPARSER_ALIASES:\n        subcommand_parser = parser.add_subparsers(dest=subcommand)\n        for command in SUBPARSER_ALIASES[subcommand]:\n            parser.add_argument('--%s' % command, help=command)\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Fetch multiple emails from a given subject and send them to the specified email address.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for subparser_name in SUBPARSER_ALIASES.keys():\n        parser.add_argument(\n            '--{}'.format(subparser_name),\n            action='store_true',\n            help='Send the following emails to the specified email address: {}'.format(\n                SUBPARSER_ALIASES[subparser_name]\n            )\n        )\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Python script for managing a remote Git repository.\")\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name),\n            metavar='GIT_URL',\n            type=str,\n            required=True,\n            help='The URL of the remote Git repository')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the integration of the remote Git repository.'\n    )\n    for command in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % command, default=None, action='store_true')\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"A simple test parser\")\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--' + argument, type=int, help=argument.capitalize())\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    for argument_name, argument_description in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            argument_name,\n            help=argument_description,\n        )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a CSV file.'\n    )\n\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name.replace('_', '-')),\n            type=str,\n            help='The name of a sub-argument to use in a command.',\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"A simple command-line interface for running a simple \"\n        \"command-line tool that can be manually resolved by sudo.\")\n\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        for subparser_alias in SUBPARSER_ALIASES[subparser_name]:\n            make_parsers(subparser=subparser, subparser_alias=subparser_alias)\n\n    return parser.parse_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of command-line arguments and return them as a tuple.\"\n    )\n\n    for argument_name, argument_type in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--' + argument_name,\n            default='',\n            type=argument_type,\n            help='The argument to be parsed. The default value is an empty string.'\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test for LilyPond file parser\")\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % alias, default='', type=str, help='The %s argument' % alias)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Summary of commands for importing data.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for subcommand in SUBPARSER_ALIASES:\n        subcommand_parser = parser.add_subparsers(dest=subcommand)\n        for command in SUBPARSER_ALIASES[subcommand]:\n            parser.add_argument('--%s' % command, help=command)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Fetch multiple emails from a given subject and send them to the specified email address.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for subparser_name in SUBPARSER_ALIASES.keys():\n        parser.add_argument(\n            '--{}'.format(subparser_name),\n            action='store_true',\n            help='Send the following emails to the specified email address: {}'.format(\n                SUBPARSER_ALIASES[subparser_name]\n            )\n        )\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Python script for managing a remote Git repository.\")\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name),\n            metavar='GIT_URL',\n            type=str,\n            required=True,\n            help='The URL of the remote Git repository')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the integration of the remote Git repository.'\n    )\n    for command in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % command, default=None, action='store_true')\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"A simple test parser\")\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--' + argument, type=int, help=argument.capitalize())\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    for argument_name, argument_description in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            argument_name,\n            help=argument_description,\n        )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a CSV file.'\n    )\n\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name.replace('_', '-')),\n            type=str,\n            help='The name of a sub-argument to use in a command.',\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"A simple command-line interface for running a simple \"\n        \"command-line tool that can be manually resolved by sudo.\")\n\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        for subparser_alias in SUBPARSER_ALIASES[subparser_name]:\n            make_parsers(subparser=subparser, subparser_alias=subparser_alias)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Borgmatic CLI application.',\n        argument_default=argparse.SUPPRESS,\n        add_help=False,\n        prog='borgmatic',\n        usage='%(prog)s [options] [destination-config-file]'\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config_file', metavar='CONFIG_FILE', help='configuration file to use for Borgmatic')\n    parser.add_argument('--verbose', action='store_true', help='be more verbose')\n    parser.add_argument('--debug', action='store_true', help='be more verbose')\n    parser.add_argument('--dry-run', action='store_true', help='run the script without saving the results')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Simple example command line tool.',\n        add_help=False\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    # Parse command-line arguments\n    parser.add_argument(\n        'config_file',\n        help='Configuration file to load.'\n    )\n\n    # Parse arguments to be passed to the command line\n    arguments = parser.parse_args(arguments)\n\n    return arguments\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='The config file to use for the source database. '\n             'Default is {}'.format(DEFAULT_DESTINATION_CONFIG_FILENAME))\n    parser.add_argument(\n        '--backup',\n        default=False,\n        action='store_true',\n        help='If set, backup the source database file to make it '\n             'persistent. Default is set to False.')\n    parser.add_argument(\n        '--database-url',\n        default='',\n        help='The URL to the database to use. Default is the '\n             'local database url.')\n    parser.add_argument(\n        '--database-user',\n        default='',\n        help='The username to use for the database. Default is the '\n             'local use", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Borgmatic CLI tools for parsing arguments.\n        \"\"\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--config',\n        '-c',\n        required=False,\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='A configuration file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--config-file',\n        '-cf',\n        required=False,\n        default=None,\n        help='A configuration file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--output',\n        '-o',\n        required=False,\n        default='-',\n        help='An output file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--verbose", "def parse_arguments(*arguments):\n    config_file_name = arguments[0]\n    config_parser = argparse.ArgumentParser()\n    config_parser.add_argument('--config', dest='config_file',\n                               default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n                               help='The config file to use. Defaults to '\n                                    '%(default)s in the current directory. '\n                                    'If no config file is given, the '\n                                    'default config file is used.')\n    config_parser.add_argument('--dry-run', action='store_true',\n                               help='Just output the commands and their '\n                                    'arguments. Ignored when '\n                    ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Command-line interface to collect metadata from \"\n        \"a source archive.\")\n\n    parser.add_argument(\n        \"--source-config-file\",\n        dest=\"source_config_file\",\n        required=True,\n        help=\"Path to a configuration file to store the source archive.\")\n\n    parser.add_argument(\n        \"--output-prefix\",\n        dest=\"output_prefix\",\n        default=\"\",\n        help=\"Prefix for output files.\")\n\n    parser.add_argument(\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging output during the run.\")\n\n    parser.add_argument(\n        \"--dry-run\",\n        action=\"store_true\",\n        help=\"Print output during the run.\")\n\n    parser.add_argument(\n        \"--force\",\n        action=\"store_true\",\n        help=\"Print output during the run.\")\n\n    parser.add_argument(\n   ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Load a configuration file from a given path.')\n    parser.add_argument(\n        '-d', '--destination-config',\n        type=str,\n        required=False,\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to load.')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages while loading.')\n    parser.add_argument(\n        '-u', '--update-config',\n        action='store_true',\n        help='Update the given configuration file with the new values.')\n    parser.add_argument(\n        '-l', '--log-level',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],\n        default='ERROR',\n        help='Log level (DEBUG, INFO, WARNING, ERROR,", "def parse_arguments(*arguments):\n    return ArgumentParser(description='Command-line tool for managing Borgmatic configuration files')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Borgmatic CLI application.',\n        argument_default=argparse.SUPPRESS,\n        add_help=False,\n        prog='borgmatic',\n        usage='%(prog)s [options] [destination-config-file]'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config_file', metavar='CONFIG_FILE', help='configuration file to use for Borgmatic')\n    parser.add_argument('--verbose', action='store_true', help='be more verbose')\n    parser.add_argument('--debug', action='store_true', help='be more verbose')\n    parser.add_argument('--dry-run', action='store_true', help='run the script without saving the results')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Simple example command line tool.',\n        add_help=False\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    # Parse command-line arguments\n    parser.add_argument(\n        'config_file',\n        help='Configuration file to load.'\n    )\n\n    # Parse arguments to be passed to the command line\n    arguments = parser.parse_args(arguments)\n\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='The config file to use for the source database. '\n             'Default is {}'.format(DEFAULT_DESTINATION_CONFIG_FILENAME))\n    parser.add_argument(\n        '--backup',\n        default=False,\n        action='store_true',\n        help='If set, backup the source database file to make it '\n             'persistent. Default is set to False.')\n    parser.add_argument(\n        '--database-url',\n        default='',\n        help='The URL to the database to use. Default is the '\n             'local database url.')\n    parser.add_argument(\n        '--database-user',\n        default='',\n        help='The username to use for the database. Default is the '\n             'local use", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Borgmatic CLI tools for parsing arguments.\n        \"\"\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--config',\n        '-c',\n        required=False,\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='A configuration file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--config-file',\n        '-cf',\n        required=False,\n        default=None,\n        help='A configuration file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--output',\n        '-o',\n        required=False,\n        default='-',\n        help='An output file to use for parsing.'\n    )\n\n    parser.add_argument(\n        '--verbose", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    config_file_name = arguments[0]\n    config_parser = argparse.ArgumentParser()\n    config_parser.add_argument('--config', dest='config_file',\n                               default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n                               help='The config file to use. Defaults to '\n                                    '%(default)s in the current directory. '\n                                    'If no config file is given, the '\n                                    'default config file is used.')\n    config_parser.add_argument('--dry-run', action='store_true',\n                               help='Just output the commands and their '\n                                    'arguments. Ignored when '\n                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Command-line interface to collect metadata from \"\n        \"a source archive.\")\n\n    parser.add_argument(\n        \"--source-config-file\",\n        dest=\"source_config_file\",\n        required=True,\n        help=\"Path to a configuration file to store the source archive.\")\n\n    parser.add_argument(\n        \"--output-prefix\",\n        dest=\"output_prefix\",\n        default=\"\",\n        help=\"Prefix for output files.\")\n\n    parser.add_argument(\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging output during the run.\")\n\n    parser.add_argument(\n        \"--dry-run\",\n        action=\"store_true\",\n        help=\"Print output during the run.\")\n\n    parser.add_argument(\n        \"--force\",\n        action=\"store_true\",\n        help=\"Print output during the run.\")\n\n    parser.add_argument(\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Load a configuration file from a given path.')\n    parser.add_argument(\n        '-d', '--destination-config',\n        type=str,\n        required=False,\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to load.')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages while loading.')\n    parser.add_argument(\n        '-u', '--update-config',\n        action='store_true',\n        help='Update the given configuration file with the new values.')\n    parser.add_argument(\n        '-l', '--log-level',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],\n        default='ERROR',\n        help='Log level (DEBUG, INFO, WARNING, ERROR,", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(description='Command-line tool for managing Borgmatic configuration files')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join([a._flag for a in parser._actions])\n", "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "def parser_flags(parser):\n    return''.join([a.choices[0] for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join([a._flag for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([a.choices[0] for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return '\\n'.join('  -- %s --' % a for a in sorted(vars(bh).keys()))\n", "def bash_completion():\n    parser = parser_flags(bash_completion())\n    parser.prog = \"bash_completion\"\n    parser.description = \"\"\"\\\n        Bash completion for the {} package.\n        \"\"\".format(package)\n    return parser\n", "def bash_completion():\n    return '\\n'.join('  -- %s %s' % (k, v) for k, v in sorted(vars(bash).items()) if k.startswith('COMP_'))\n", "def bash_completion():\n    return \"\\n\".join(\"-- %s --\" % (k.replace(\"_\", \"-\"),)\n                     for k in sorted(COMPLETION_FLAGS))\n", "def bash_completion():\n    return \"\\n\".join(['  -i %s' % flag for flag in parser_flags()])\n", "def bash_completion():\n    parser = parser_flags(bash_completion())\n    return '\\n'.join([l.decode('utf-8') for l in parser.print_help().splitlines()])\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='Show details about the current version of the '\n                    'Borgmatic package.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('package_name', help='The package to check.')\n    parser_flags = parser.add_argument_group(title='Borgmatic arguments')\n    parser_flags.add_argument('-v', '--version', action='store_true',\n                              help='Show the version number of the package.')\n    parser_flags.add_argument('-y', '--yes', action='store_true',\n                              help='Show yes if the package is up-to-date.')\n    parser_flags.add_argument(\n        '-q', '--quiet', action='store_true',\n        help='Show no if the package is up-to-date.')\n    parser_flags.add_argument(\n        '", "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags().items())\n", "def bash_completion():\n    return \"\"\"\\\n# Borgmatic command-line tools\n# Read the README for more details.\n\nfrom gazelle import gazelle_command\ngazelle_command.COMMANDS = %r\ngazelle_command.COMMANDS_MAP = %r\n\"\"\" % (COMMANDS, COMMANDS_MAP)\n", "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in vars(argparse.ArgumentParser).items() if not k.startswith('_') and v)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return '\\n'.join('  -- %s --' % a for a in sorted(vars(bh).keys()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(bash_completion())\n    parser.prog = \"bash_completion\"\n    parser.description = \"\"\"\\\n        Bash completion for the {} package.\n        \"\"\".format(package)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  -- %s %s' % (k, v) for k, v in sorted(vars(bash).items()) if k.startswith('COMP_'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join(\"-- %s --\" % (k.replace(\"_\", \"-\"),)\n                     for k in sorted(COMPLETION_FLAGS))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join(['  -i %s' % flag for flag in parser_flags()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(bash_completion())\n    return '\\n'.join([l.decode('utf-8') for l in parser.print_help().splitlines()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='Show details about the current version of the '\n                    'Borgmatic package.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('package_name', help='The package to check.')\n    parser_flags = parser.add_argument_group(title='Borgmatic arguments')\n    parser_flags.add_argument('-v', '--version', action='store_true',\n                              help='Show the version number of the package.')\n    parser_flags.add_argument('-y', '--yes', action='store_true',\n                              help='Show yes if the package is up-to-date.')\n    parser_flags.add_argument(\n        '-q', '--quiet', action='store_true',\n        help='Show no if the package is up-to-date.')\n    parser_flags.add_argument(\n        '", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags().items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\\\n# Borgmatic command-line tools\n# Read the README for more details.\n\nfrom gazelle import gazelle_command\ngazelle_command.COMMANDS = %r\ngazelle_command.COMMANDS_MAP = %r\n\"\"\" % (COMMANDS, COMMANDS_MAP)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in vars(argparse.ArgumentParser).items() if not k.startswith('_') and v)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    arguments = vars(get_parser().parse_args(unparsed_arguments))\n    return arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(name, **SUBPARSER_ALIASES[name])\n    for name in unparsed_arguments:\n        parser.add_argument(name)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for arg in unparsed_arguments:\n        argname = arg.replace('-', '_')\n        setattr(namespace, argname, arg)\n    return parser.parse_args(namespace.args)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace, subparser_name = parser.parse_known_args([argument])\n        except SystemExit:\n            # If the argument is a single-word or a space then ignore it.\n            # Also do not raise an exception if the argument is a dictionary\n            # key, as it could be a single-word or a space.\n            if isinstance(argument, dict):\n                return {}\n            else:\n                return {subparser_name: argument}\n        except ValueError:\n            # If we can't parse the argument, just return the namespace itself.\n            # If we can't parse it then there's no argument to parse.\n            if not subparser_name:", "def parse_arguments(*unparsed_arguments):\n    arguments = vars(get_parser().parse_args(unparsed_arguments))\n    arguments.pop('__name__', None)\n    return arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    arguments = vars(get_parser().parse_args(unparsed_arguments))\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(name, **SUBPARSER_ALIASES[name])\n    for name in unparsed_arguments:\n        parser.add_argument(name)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for arg in unparsed_arguments:\n        argname = arg.replace('-', '_')\n        setattr(namespace, argname, arg)\n    return parser.parse_args(namespace.args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace, subparser_name = parser.parse_known_args([argument])\n        except SystemExit:\n            # If the argument is a single-word or a space then ignore it.\n            # Also do not raise an exception if the argument is a dictionary\n            # key, as it could be a single-word or a space.\n            if isinstance(argument, dict):\n                return {}\n            else:\n                return {subparser_name: argument}\n        except ValueError:\n            # If we can't parse the argument, just return the namespace itself.\n            # If we can't parse it then there's no argument to parse.\n            if not subparser_name:", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    arguments = vars(get_parser().parse_args(unparsed_arguments))\n    arguments.pop('__name__', None)\n    return arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers._subparserss:\n        if subparser.name not in SUBPARSER_ALIASES:\n            continue\n        parsed_arguments, remaining_arguments = parse_subparser_arguments(\n            unparsed_arguments, subparser)\n        parsed_arguments.update(parsed_arguments)\n    return parsed_arguments, remaining_arguments, subparsers._namespaces\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_names = SUBPARSER_ALIASES.keys()\n    parser_names.sort()\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in parser_names:\n        parser = SUBPARSER_ALIASES[name]\n        parser_parser = parser(unparsed_arguments)\n        parser_parser.parse_args(unparsed_arguments)\n        parsed_arguments[name] = parser_parser.parse_args()\n        remaining_arguments.extend(parser_parser.remaining_arguments)\n    return (parsed_arguments, remaining_arguments, parser_names)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in SUBPARSER_ALIASES:\n        subparser = subparsers[name]\n        parsed_arguments[name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(subparser.required)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        remaining_arguments.extend(subparser.required_args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name in SUBPARSER_ALIASES:\n        parser = subparsers[parser_name]\n        parser_arguments = vars(parser.parse_args())\n        arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments.pop('arguments', []))\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.required_args\n    return (parsed_arguments, remaining_arguments, parsed_arguments.keys())\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        remaining_arguments = subparser.parse_known_args(unparsed_arguments)\n        arguments[subparser_name] = remaining_arguments\n        subparser.parse_known_args(unparsed_arguments)\n    return (arguments, subparsers.keys(), remaining_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = set()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers.get(subparser_name)\n        if subparser is None:\n            continue\n        try:\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        except BorgmaticError as e:\n            if e.args[0] == 'unrecognized argument':\n                not_claimed.add(subparser_name)\n            else:\n                raise\n    return parsed_arguments, not_claimed, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parser_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers._subparserss:\n        if subparser.name not in SUBPARSER_ALIASES:\n            continue\n        parsed_arguments, remaining_arguments = parse_subparser_arguments(\n            unparsed_arguments, subparser)\n        parsed_arguments.update(parsed_arguments)\n    return parsed_arguments, remaining_arguments, subparsers._namespaces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_names = SUBPARSER_ALIASES.keys()\n    parser_names.sort()\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in parser_names:\n        parser = SUBPARSER_ALIASES[name]\n        parser_parser = parser(unparsed_arguments)\n        parser_parser.parse_args(unparsed_arguments)\n        parsed_arguments[name] = parser_parser.parse_args()\n        remaining_arguments.extend(parser_parser.remaining_arguments)\n    return (parsed_arguments, remaining_arguments, parser_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in SUBPARSER_ALIASES:\n        subparser = subparsers[name]\n        parsed_arguments[name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(subparser.required)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        remaining_arguments.extend(subparser.required_args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name in SUBPARSER_ALIASES:\n        parser = subparsers[parser_name]\n        parser_arguments = vars(parser.parse_args())\n        arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments.pop('arguments', []))\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.required_args\n    return (parsed_arguments, remaining_arguments, parsed_arguments.keys())\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        remaining_arguments = subparser.parse_known_args(unparsed_arguments)\n        arguments[subparser_name] = remaining_arguments\n        subparser.parse_known_args(unparsed_arguments)\n    return (arguments, subparsers.keys(), remaining_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = set()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers.get(subparser_name)\n        if subparser is None:\n            continue\n        try:\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        except BorgmaticError as e:\n            if e.args[0] == 'unrecognized argument':\n                not_claimed.add(subparser_name)\n            else:\n                raise\n    return parsed_arguments, not_claimed, []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parser_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Python commands for managing projects.'\n    )\n    for name in sorted(SUBPARSER_ALIASES):\n        parser.add_argument(\n            '--' + name,\n            metavar='PROJECT',\n            choices=sorted(SUBPARSER_ALIASES[name]),\n            required=False,\n            help='The project name.'\n        )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses command line arguments and passes them to the application.'\n    )\n\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            argument=argument['argument'],\n            help=argument['help'],\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parsing functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=command)\n\n        make_parser(subparser)\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool to parse and validate output of a single JSON file.\"\n    )\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = getattr(parser, subparser_name)\n        parser.add_subparsers(dest=subparser_name)\n        parse_subparser_arguments(subparser, subparser)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple CLI documentation.')\n    for name, parser_name in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--' + name,\n            help='Alias for --{}'.format(parser_name),\n            action='store_true')\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        subparser = argparse.ArgumentParser(\n            description='Arguments for subcommand {}'.format(name))\n        for alias in SUBPARSER_ALIASES[name]:\n            subparser.add_argument(\n                '--{}'.format(alias),\n                help='Alias for the command {}'.format(name),\n                action='store_true',\n            )\n        parser.add_subparsers(dest=name, **subparser.parse_known_args())\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse data from a CSV file.')\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(subparser.replace('-', '_')),\n            dest=subparser,\n            help=subparser.capitalize() +'argument')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias.replace('-', '_').upper()),\n            nargs='?',\n            type=str,\n            default=None,\n            help='Alias for the data source.'\n        )\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias),\n            action='store_true',\n            help='parse in this format instead of the default format',\n        )\n    return parser.parse_known_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Python commands for managing projects.'\n    )\n    for name in sorted(SUBPARSER_ALIASES):\n        parser.add_argument(\n            '--' + name,\n            metavar='PROJECT',\n            choices=sorted(SUBPARSER_ALIASES[name]),\n            required=False,\n            help='The project name.'\n        )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses command line arguments and passes them to the application.'\n    )\n\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            argument=argument['argument'],\n            help=argument['help'],\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parsing functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=command)\n\n        make_parser(subparser)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool to parse and validate output of a single JSON file.\"\n    )\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = getattr(parser, subparser_name)\n        parser.add_subparsers(dest=subparser_name)\n        parse_subparser_arguments(subparser, subparser)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple CLI documentation.')\n    for name, parser_name in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--' + name,\n            help='Alias for --{}'.format(parser_name),\n            action='store_true')\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        subparser = argparse.ArgumentParser(\n            description='Arguments for subcommand {}'.format(name))\n        for alias in SUBPARSER_ALIASES[name]:\n            subparser.add_argument(\n                '--{}'.format(alias),\n                help='Alias for the command {}'.format(name),\n                action='store_true',\n            )\n        parser.add_subparsers(dest=name, **subparser.parse_known_args())\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse data from a CSV file.')\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(subparser.replace('-', '_')),\n            dest=subparser,\n            help=subparser.capitalize() +'argument')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias.replace('-', '_').upper()),\n            nargs='?',\n            type=str,\n            default=None,\n            help='Alias for the data source.'\n        )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias),\n            action='store_true',\n            help='parse in this format instead of the default format',\n        )\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n\n    response_page = []\n    for item in response:\n        response_page.append(item)\n        if len(response_page) == max_results:\n            yield response_page\n            response_page = []\n    if len(response_page) > 0:\n        yield response_page\n", "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be a list\")\n\n    if len(response) > max_results:\n        return response[:max_results]\n\n    for item in response:\n        yield item\n", "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "def paging(response, max_results):\n\n    for item in response:\n        if len(item) < max_results:\n            yield item\n", "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['pagination']['pageSize'])\n\n    while offset < max_results:\n        for item in response['data']:\n            yield item\n\n        offset += page_size\n", "def paging(response, max_results):\n    return (response[index] for index in\n            range(0, len(response), max_results))\n", "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n\n    response_page = []\n    for item in response:\n        response_page.append(item)\n        if len(response_page) == max_results:\n            yield response_page\n            response_page = []\n    if len(response_page) > 0:\n        yield response_page\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be a list\")\n\n    if len(response) > max_results:\n        return response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for item in response:\n        if len(item) < max_results:\n            yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['pagination']['pageSize'])\n\n    while offset < max_results:\n        for item in response['data']:\n            yield item\n\n        offset += page_size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return (response[index] for index in\n            range(0, len(response), max_results))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor in [1024, 1, 1, 1024]:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n    raise ValueError(\"Invalid size %s\" % size)\n", "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if abs(float(size)) < 1024:\n            return int(round(float(size)))\n        size /= 1024.0\n    return int(round(float(size)))\n", "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Can't convert {} to bytes\".format(size))\n    result = number * multiplier\n    if unit == \"B\":\n        return result\n    return result.to_bytes(int(result), \"big\")\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    num, unit = float(size.replace('B', '')), 'B'\n    if 'K' in size:\n        num /= 1024.0\n    if 'M' in size:\n        num /= 1024.0 * 1024.0\n    if 'G' in size:\n        num /= 1024.0 * 1024\n    if 'T' in size:\n        num /= 1024\n    if 'P' in size:\n        num /= 1024 * 1024\n    return int(num) + int(round(num * factor)) if unit == 'B' else int(num)\n", "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    for unit in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    raise ValueError(\"Unable to convert size '{}' to bytes\".format(size))\n", "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value -= value % 10\n    return int(value)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor in [1024, 1, 1, 1024]:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n    raise ValueError(\"Invalid size %s\" % size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if abs(float(size)) < 1024:\n            return int(round(float(size)))\n        size /= 1024.0\n    return int(round(float(size)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Can't convert {} to bytes\".format(size))\n    result = number * multiplier\n    if unit == \"B\":\n        return result\n    return result.to_bytes(int(result), \"big\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    num, unit = float(size.replace('B', '')), 'B'\n    if 'K' in size:\n        num /= 1024.0\n    if 'M' in size:\n        num /= 1024.0 * 1024.0\n    if 'G' in size:\n        num /= 1024.0 * 1024\n    if 'T' in size:\n        num /= 1024\n    if 'P' in size:\n        num /= 1024 * 1024\n    return int(num) + int(round(num * factor)) if unit == 'B' else int(num)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    for unit in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    raise ValueError(\"Unable to convert size '{}' to bytes\".format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value -= value % 10\n    return int(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(reduce(dict.__add__, map(_dictsum_one, dicts)))\n", "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(dict.__add__, map(_dictsum_one, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "def _replace_url_args(url, url_args):\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    if isinstance(url, str):\n        return url\n\n    for key, val in url_args.items():\n        if isinstance(val, str):\n            url[url.index(key)] = val.format(**url)\n        elif val is None:\n            url.pop(key)\n        else:\n            url[url.index(key)] = val\n\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    return dict(\n        (key, url_args[key])\n        for key, value in url.items()\n        if value is not None and key in url_args\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if isinstance(url, str):\n        return url\n\n    for key, val in url_args.items():\n        if isinstance(val, str):\n            url[url.index(key)] = val.format(**url)\n        elif val is None:\n            url.pop(key)\n        else:\n            url[url.index(key)] = val\n\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return dict(\n        (key, url_args[key])\n        for key, value in url.items()\n        if value is not None and key in url_args\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root:\n        path = path.replace(root, '')\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n    return path\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return ''\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError('Invalid path {}!= {}'.format(path, root))\n", "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    elif path[-1]!= root:\n        raise Exception('Invalid path {} and {}'.format(path, root))\n    return path[:-len(root)]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root:\n        path = path.replace(root, '')\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError('Invalid path {}!= {}'.format(path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    elif path[-1]!= root:\n        raise Exception('Invalid path {} and {}'.format(path, root))\n    return path[:-len(root)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join([flag.description for flag in parser._argparser._optionals])\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='-'\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        e", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        # skip arguments without default value\n        if not getattr(parser._actions[arg], 'default', None):\n            continue\n        flags.append(\"--%s\" % arg.replace(\"_\", \"-\"))\n        # skip arguments with empty value\n        if getattr(parser._actions[arg], 'choices', None):\n            flags.append(\"%s\" % arg)\n    return \" \".join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{0} {1} '.format(flag[0], flag[1])\n    return flags\n", "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.default\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.dest == '--help':\n            flags.append('-h')\n        elif argument.dest == '--version':\n            flags.append('-v')\n        elif argument.dest == '--version-info':\n            flags.append('-vv')\n        elif argument.dest == '--required':\n            flags.append('-r')\n        elif argument.dest == '--required-info':\n            flags.append('-R')\n        elif argument.dest == '--unset':\n            flags.append('-u')\n        elif argument.dest == '--default':\n            flags.append('-d')\n        elif argument.dest == '--no-default':\n            flags.append('-n')\n        elif argument.dest ==", "def parser_flags(parser):\n    return''.join(flag.description for flag in parser._optionals._option_groups[0]._option_list)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n        flags += arg.default +''\n    return flags.strip()\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([flag.description for flag in parser._argparser._optionals])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='-'\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        e", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        # skip arguments without default value\n        if not getattr(parser._actions[arg], 'default', None):\n            continue\n        flags.append(\"--%s\" % arg.replace(\"_\", \"-\"))\n        # skip arguments with empty value\n        if getattr(parser._actions[arg], 'choices', None):\n            flags.append(\"%s\" % arg)\n    return \" \".join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{0} {1} '.format(flag[0], flag[1])\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.default\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.dest == '--help':\n            flags.append('-h')\n        elif argument.dest == '--version':\n            flags.append('-v')\n        elif argument.dest == '--version-info':\n            flags.append('-vv')\n        elif argument.dest == '--required':\n            flags.append('-r')\n        elif argument.dest == '--required-info':\n            flags.append('-R')\n        elif argument.dest == '--unset':\n            flags.append('-u')\n        elif argument.dest == '--default':\n            flags.append('-d')\n        elif argument.dest == '--no-default':\n            flags.append('-n')\n        elif argument.dest ==", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag.description for flag in parser._optionals._option_groups[0]._option_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n        flags += arg.default +''\n    return flags.strip()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # Return True if the entry is already in the set.\n    else:\n        return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added path {0} to set.'.format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} since it already \"\n                  \"exists\".format(path_name))\n            return True\n        else:\n            processed.remove(path_name)\n\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # Return True if the entry is already in the set.\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added path {0} to set.'.format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} since it already \"\n                  \"exists\".format(path_name))\n            return True\n        else:\n            processed.remove(path_name)\n\n    processed.add(path_name)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    a, b, c = vertices[0], vertices[1], vertices[2]\n\n    ABCD = Line(a, b)\n    CDA = Line(c, dest=a)\n    CAB = Line(c, dest=b)\n\n    return ABCD, CAB, CDA\n", "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4]) for i in range(len(vertices) - 1))\n", "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    CDAB = tuple([A[0] + C[0], A[1] + C[1], A[2] + C[2]])\n\n    return ABCD, CDAB\n", "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a = vertices[0]\n    b = vertices[1]\n    c = vertices[2]\n\n    dab = (a.x - b.x, a.y - b.y, a.z - b.z)\n    dbc = (c.x - a.x, c.y - a.y, c.z - a.z)\n\n    dbca = (dab[0] * dab[0] + dab[1] * dab[1] + dab[2] * dab[2]) / \\\n           (dab[2] * dab[2] + dab[3] * dab[3])\n\n    return tuple([\n        (a.x + dbca * a.x, a.y + dbca * a.y, a.z + dbca * a.z),\n        (b.x + dbc * b.x, b.y + dbc * b.y, b.z + dbc * b.z),\n        (c.x + dbca * c.x, c.y + dbc * c.y, c.z + dbc * c.z)\n    ])\n", "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    a, b, c = vertices[0], vertices[1], vertices[2]\n\n    ABCD = Line(a, b)\n    CDA = Line(c, dest=a)\n    CAB = Line(c, dest=b)\n\n    return ABCD, CAB, CDA\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4]) for i in range(len(vertices) - 1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    CDAB = tuple([A[0] + C[0], A[1] + C[1], A[2] + C[2]])\n\n    return ABCD, CDAB\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a = vertices[0]\n    b = vertices[1]\n    c = vertices[2]\n\n    dab = (a.x - b.x, a.y - b.y, a.z - b.z)\n    dbc = (c.x - a.x, c.y - a.y, c.z - a.z)\n\n    dbca = (dab[0] * dab[0] + dab[1] * dab[1] + dab[2] * dab[2]) / \\\n           (dab[2] * dab[2] + dab[3] * dab[3])\n\n    return tuple([\n        (a.x + dbca * a.x, a.y + dbca * a.y, a.z + dbca * a.z),\n        (b.x + dbc * b.x, b.y + dbc * b.y, b.z + dbc * b.z),\n        (c.x + dbca * c.x, c.y + dbc * c.y, c.z + dbc * c.z)\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    if number % 10 == 9:\n        return alphabet[number // 10] + \" \" + int_to_string(number % 10, alphabet)\n    return alphabet[number % 10] + \" \" + int_to_string(number, alphabet)\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if not alphabet:\n        return str(number)\n    if number < 0:\n        raise ValueError('number must be non-negative')\n    if number >= len(alphabet):\n        raise ValueError('number out of range')\n    result = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    return ''.join(reversed(result))\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0\" + str(base) + \"d}\"\n    return str_number.format(number)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while i < len(s):\n        number = number // alphabet[i]\n        if number < 0:\n            raise ValueError('Negative number found in string.')\n        s = ''.join([s, alphabet[number]])\n        i += 1\n    return s\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one character.\")\n    if number == 0:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0<%d}\" % base\n    return str_number.format(number)\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return \"\".join(reversed(digits))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    if number % 10 == 9:\n        return alphabet[number // 10] + \" \" + int_to_string(number % 10, alphabet)\n    return alphabet[number % 10] + \" \" + int_to_string(number, alphabet)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if not alphabet:\n        return str(number)\n    if number < 0:\n        raise ValueError('number must be non-negative')\n    if number >= len(alphabet):\n        raise ValueError('number out of range')\n    result = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    return ''.join(reversed(result))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0\" + str(base) + \"d}\"\n    return str_number.format(number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while i < len(s):\n        number = number // alphabet[i]\n        if number < 0:\n            raise ValueError('Negative number found in string.')\n        s = ''.join([s, alphabet[number]])\n        i += 1\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one character.\")\n    if number == 0:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0<%d}\" % base\n    return str_number.format(number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return \"\".join(reversed(digits))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get('registers', None):\n        if flow_params['registers'][register_number] is not None:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n                '{register_value}', str(register_value))\n    else:\n        flow_params['registers'] = {register_number: str(register_value)}\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": {register_number: v}}\n        elif k == \"advance\":\n            flow_params[k][\"advance\"] = {register_number: v}\n        elif k == \"data\":\n            flow_params[k][\"data\"][register_number] = v\n        elif k == \"write\":\n            flow_params[k][\"write\"][register_number] = v\n        elif k == \"read\":\n            flow_params[k][\"read\"][register_number] = v\n        elif k == \"stop\":\n            flow_params[k][\"stop\"][register_number] = v\n        elif k == \"preempt\":\n            flow_params[k][\"preempt\"][register_number] = v\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            return\n        if param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n        if param_name == 'id':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n", "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == \"input\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"arity\":\n            flow_params[key][register_number] = value\n        elif key == \"wire\":\n            flow_params[key][register_number] = value\n        elif key == \"condition\":\n            flow_params[key][register_number] = value\n        elif key == \"input_0\":\n            flow_params[key][register_number] = value\n        elif key == \"input_1\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"condition_0\":\n            flow_params", "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get('registers', None):\n        if flow_params['registers'][register_number] is not None:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n                '{register_value}', str(register_value))\n    else:\n        flow_params['registers'] = {register_number: str(register_value)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": {register_number: v}}\n        elif k == \"advance\":\n            flow_params[k][\"advance\"] = {register_number: v}\n        elif k == \"data\":\n            flow_params[k][\"data\"][register_number] = v\n        elif k == \"write\":\n            flow_params[k][\"write\"][register_number] = v\n        elif k == \"read\":\n            flow_params[k][\"read\"][register_number] = v\n        elif k == \"stop\":\n            flow_params[k][\"stop\"][register_number] = v\n        elif k == \"preempt\":\n            flow_params[k][\"preempt\"][register_number] = v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            return\n        if param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n        if param_name == 'id':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == \"input\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"arity\":\n            flow_params[key][register_number] = value\n        elif key == \"wire\":\n            flow_params[key][register_number] = value\n        elif key == \"condition\":\n            flow_params[key][register_number] = value\n        elif key == \"input_0\":\n            flow_params[key][register_number] = value\n        elif key == \"input_1\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"condition_0\":\n            flow_params", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    return list(cls.__subclasses__()) + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "def subclasses(cls):\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "def subclasses(cls):\n    return [c for c in cls.__subclasses__() if c is not cls]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return list(cls.__subclasses__()) + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [c for c in cls.__subclasses__() if c is not cls]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0\n    if string == '':\n        return 0\n\n    # Split the string into its numeric parts\n    digits = list(string)\n    numeric_digits = [int(d) for d in digits]\n\n    # Recursively go through the input alphabet until we reach the last\n    # digit in the alphabet\n    result = 0\n    while len(numeric_digits)!= 0:\n        numeric_digits = [alphabet.index(d) for d in numeric_digits]\n        result += numeric_digits.pop()\n\n    return result\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "def string_to_int(string: str, alphabet: Iterable[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index(' ')\n    return result\n", "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    base = len(alphabet)\n    converted = 0\n    for char in string:\n        converted = converted * base + alphabet.index(char)\n    return converted\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for char in string:\n        result = result * len(alphabet) + alphabet.index(char)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0\n    if string == '':\n        return 0\n\n    # Split the string into its numeric parts\n    digits = list(string)\n    numeric_digits = [int(d) for d in digits]\n\n    # Recursively go through the input alphabet until we reach the last\n    # digit in the alphabet\n    result = 0\n    while len(numeric_digits)!= 0:\n        numeric_digits = [alphabet.index(d) for d in numeric_digits]\n        result += numeric_digits.pop()\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: Iterable[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index(' ')\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    base = len(alphabet)\n    converted = 0\n    for char in string:\n        converted = converted * base + alphabet.index(char)\n    return converted\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for char in string:\n        result = result * len(alphabet) + alphabet.index(char)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        response = requests.get(url)\n        archive_path.write_text(response.text)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    for repo in ['core', 'extra', 'community']:\n        if not _retry(urljoin(url, 'desc/{}/'.format(repo))):\n            raise RepoExtractError(repo)\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive\n    tar_archive = tarfile.open(name=archive_name, mode='r:gz')\n    tar_archive.extractall(path=destination_path)\n    tar_archive.close()\n\n    # Return the destination path\n    return Path(destination_path) / archive_name\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException:\n        raise FileNotFoundError('Could not find the repo archive at {}'.format(url))\n    if response.status_code!= 200:\n        raise RequestFailedError('Could not extract the repo archive from {}'.format(url))\n    with tarfile.open(str(tar_archive_path)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    with archive_path.open(\"wb\") as f:\n        f.write(response.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"core{i}.tar.gz\"\n        archive_path = destination_path / archive_name\n        if not archive_path.exists():\n            extract_tar_gz_from_url(url, archive_path)\n\n    return destination_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        response = requests.get(url)\n        archive_path.write_text(response.text)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    for repo in ['core', 'extra', 'community']:\n        if not _retry(urljoin(url, 'desc/{}/'.format(repo))):\n            raise RepoExtractError(repo)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive\n    tar_archive = tarfile.open(name=archive_name, mode='r:gz')\n    tar_archive.extractall(path=destination_path)\n    tar_archive.close()\n\n    # Return the destination path\n    return Path(destination_path) / archive_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException:\n        raise FileNotFoundError('Could not find the repo archive at {}'.format(url))\n    if response.status_code!= 200:\n        raise RequestFailedError('Could not extract the repo archive from {}'.format(url))\n    with tarfile.open(str(tar_archive_path)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    with archive_path.open(\"wb\") as f:\n        f.write(response.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"core{i}.tar.gz\"\n        archive_path = destination_path / archive_name\n        if not archive_path.exists():\n            extract_tar_gz_from_url(url, archive_path)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {k: re.compile(v, re.IGNORECASE) for k, v in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k.replace('.', '\\\\.'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(fnmatch.translate(k)) for k in item}\n", "def regex_dict(item):\n    return {\n        wildcard: re.compile(regex)\n        for wildcard, regex in item.items()\n    }\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {k: re.compile(v, re.IGNORECASE) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('.', '\\\\.'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(fnmatch.translate(k)) for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        wildcard: re.compile(regex)\n        for wildcard, regex in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    name = re.sub(r\"^'|'$\", '', name)\n    return name\n", "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '\"')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    return re.sub(r'(\\\"|\\')', '', name)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    name = re.sub(r\"^'|'$\", '', name)\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '\"')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'(\\\"|\\')', '', name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        if sys.platform == 'darwin':\n            import shlex\n            return [ shlex.split(l)[0] for l in shlex.split(s) ]\n        else:\n            return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        lexer = shlex.shlex(s, posix=True)\n    elif platform == 'windows':\n        lexer = shlex.split(s)\n    else:\n        lexer = shlex.split(' ')\n\n    return [tuple(lexer)]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        split = re.split(r'\\W+', s)\n    elif platform == 'cmd':\n        split = [s]\n    else:\n        raise ValueError('invalid platform: %r' % platform)\n    return split\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    lex = shlex.shlex(str(s))\n    lex.wordchars += '/.+-():'\n\n    def _lex_match(lexer):\n        tokens = list(lexer)\n        return [t for t in tokens if t.lexeme and not t.string]\n\n    if platform == 'posix':\n        return _lex_match(shlex.split)\n    elif platform == 'cmd':\n        import re\n        return [t for t in _lex_match(shlex.split) if re.match('^[a-zA-Z0-9_]+$', t.lexeme)]\n    else:\n        raise ValueError('unknown platform:'+ platform)\n", "def split(s, platform='this'):\n    if platform == 'posix':\n        import re\n        pattern = r'(\\\\\\\\)|(\\\\:)'\n    else:\n        pattern = '(\\\\\\\\)|(\\:)'\n\n    lex = shlex.shlex(s, posix=True)\n    lex.whitespace += '/.*?/'\n    lex.whitespace_split = True\n    lex.wordchars += '.,:;\"\\'()*+,'\n\n    tokens = list(lex)\n    tokens_len = len(tokens)\n\n    result = []\n    i = 0\n    while i < tokens_len:\n        m = re.match(pattern, tokens[i])\n        if m:\n            j = i + 1\n            while j < tokens_len and m.end() == j:\n                j += 1\n            result.append(tokens[i:j])\n            i = j\n        else:\n            result.append(tokens[i])\n            i += 1", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform in ('dos', 'os2'):\n        platform = 'os2'\n    elif platform == 'linux':\n        platform = 'linux'\n    elif platform == 'darwin':\n        platform = 'os2'\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n    if platform == 'darwin' or platform == 'linux':\n        if s.startswith('\"') and s.endswith('\"'):\n            s = s[1:-1]\n        return shlex.split(s, posix=platform == 'darwin')\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "def split(s, platform='this'):\n    if platform == 'c':\n        # Python 3 on Cygwin\n        return shlex.split(s)\n    else:\n        # Python 2 on Windows\n        pattern = r'(?:(?:\\\\\\\\)|\"(?:\\\\\\\\)|\\'(?:\\\\\\\\))+'\n        return re.split(pattern, s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\\\w+)([\\\\/:*?\\\"<>|])?$', s)\n        if not match:\n            # not a valid platform specification\n            return [s]\n        else:\n            # a valid platform specification\n            return [match.group(1), match.group(2)]\n    elif platform == 'cmd':\n        # assume it's a regular expression\n        start, end = match.span(0)\n        return s[:start].split(' ') + [s[end:]]\n    else:\n        raise ValueError(\"unknown platform: %r\" % platform)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        if sys.platform == 'darwin':\n            import shlex\n            return [ shlex.split(l)[0] for l in shlex.split(s) ]\n        else:\n            return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        lexer = shlex.shlex(s, posix=True)\n    elif platform == 'windows':\n        lexer = shlex.split(s)\n    else:\n        lexer = shlex.split(' ')\n\n    return [tuple(lexer)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        split = re.split(r'\\W+', s)\n    elif platform == 'cmd':\n        split = [s]\n    else:\n        raise ValueError('invalid platform: %r' % platform)\n    return split\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    lex = shlex.shlex(str(s))\n    lex.wordchars += '/.+-():'\n\n    def _lex_match(lexer):\n        tokens = list(lexer)\n        return [t for t in tokens if t.lexeme and not t.string]\n\n    if platform == 'posix':\n        return _lex_match(shlex.split)\n    elif platform == 'cmd':\n        import re\n        return [t for t in _lex_match(shlex.split) if re.match('^[a-zA-Z0-9_]+$', t.lexeme)]\n    else:\n        raise ValueError('unknown platform:'+ platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'posix':\n        import re\n        pattern = r'(\\\\\\\\)|(\\\\:)'\n    else:\n        pattern = '(\\\\\\\\)|(\\:)'\n\n    lex = shlex.shlex(s, posix=True)\n    lex.whitespace += '/.*?/'\n    lex.whitespace_split = True\n    lex.wordchars += '.,:;\"\\'()*+,'\n\n    tokens = list(lex)\n    tokens_len = len(tokens)\n\n    result = []\n    i = 0\n    while i < tokens_len:\n        m = re.match(pattern, tokens[i])\n        if m:\n            j = i + 1\n            while j < tokens_len and m.end() == j:\n                j += 1\n            result.append(tokens[i:j])\n            i = j\n        else:\n            result.append(tokens[i])\n            i += 1", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform in ('dos', 'os2'):\n        platform = 'os2'\n    elif platform == 'linux':\n        platform = 'linux'\n    elif platform == 'darwin':\n        platform = 'os2'\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n    if platform == 'darwin' or platform == 'linux':\n        if s.startswith('\"') and s.endswith('\"'):\n            s = s[1:-1]\n        return shlex.split(s, posix=platform == 'darwin')\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'c':\n        # Python 3 on Cygwin\n        return shlex.split(s)\n    else:\n        # Python 2 on Windows\n        pattern = r'(?:(?:\\\\\\\\)|\"(?:\\\\\\\\)|\\'(?:\\\\\\\\))+'\n        return re.split(pattern, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\\\w+)([\\\\/:*?\\\"<>|])?$', s)\n        if not match:\n            # not a valid platform specification\n            return [s]\n        else:\n            # a valid platform specification\n            return [match.group(1), match.group(2)]\n    elif platform == 'cmd':\n        # assume it's a regular expression\n        start, end = match.span(0)\n        return s[:start].split(' ') + [s[end:]]\n    else:\n        raise ValueError(\"unknown platform: %r\" % platform)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. with import subprocess\n    \"\"\"\n    # Get the archive name from the archive path\n    archive_name = archive_path.name\n\n    # Convert the archive name to a path\n    archive_path = Path(archive_name)\n\n    # Check if the archive exists and if it is not a zip file\n    if not archive_path.is_file():\n        raise ValueError(\n            \"The archive {} does not exist. Please check the path and \"\n            \"try again.\".format(archive_name)\n        )\n\n    # Open the archive and extract the zip file to the repo path\n    with archive_path.open(mode=\"rt\") as archive_file:\n        archive_contents = archive_file.read()\n\n    # Extract the r", "def prepare_repository_from_archive(\n    archive_path: Path, force: bool = False, clear: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    if repo_url.suffix == \".tgz\":\n        repo_url = repo_url.with_suffix(\".tar\")\n    if force:\n        remove_tree(str(archive_path), clear=clear)\n        repo_url.unlink()\n    return repo_url.as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_bare: bool = False, allow_overwrite: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it. Returns a file repo\n    url which can be used as origin url. This does not deal with the case\n    where the archive passed along does not exist.\n\n    With import subprocess\n    \"\"\"\n    if not archive_path.exists():\n        raise ValueError(\"{} does not exist\".format(archive_path))\n\n    # Try to untar the archive and get the repo url\n    try:\n        with tarfile.open(archive_path) as tar:\n            repo_url = tar.extractfile(\"repo.tar.gz\").read().decode()\n    except Exception:\n        raise ValueError(\n            \"Unable to resolve repo url for {}\".format(archive_path)\n        )\n\n    # If we get an error repo_url can be used as origin url\n    if repo_url.startswith(\"https://github.com/\"):\n        return repo_url\n\n    ", "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    archive = Archive(archive_path)\n    repo_url = archive.repo_url\n    if repo_url.startswith(\"ssh://\"):\n        return repo_url\n    elif repo_url.startswith(\"git://\"):\n        return repo_url\n    else:\n        raise ValueError(\"Unknown archive type: {}\".format(repo_url))\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, dest_dir: pathlib.Path, url: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist. with import subprocess\n    \"\"\"\n    import subprocess\n\n    try:\n        subprocess.check_call([\"tar\", \"-xzf\", archive_path, \"-C\", dest_dir])\n    except subprocess.CalledProcessError:\n        print(\n            \"Unable to uncompress archive {} from {}\".format(archive_path, url)\n        )\n        sys.exit(1)\n    return url\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        # Read first 64 bytes of the archive as a string.\n        # The file has 64 bytes of data.\n        data = f.read(64)\n\n        # Remove the end of the data.\n        f.seek(-64, 2)\n\n        # Return the repo url which can be used as origin url.\n        return f\"https://github.com/{repository}/{filename}\"\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing_files: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path = archive_path.with_suffix(\".tar.gz\")\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(temp_dir)\n        repo_url = f\"https://github.com/{temp_dir}/archive/{archive_path.name}\"\n    finally:\n        shutil.rmtree(temp_dir)\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, compression: str = \"bzip2\", allow_empty: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    with Archive(archive_path) as archive:\n        return archive.prepare_repository(\n            compression=compression, allow_empty=allow_empty\n        )\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n        archive.extractall(path=archive_path.parent)\n        archive.close()\n    except Exception as e:\n        if not allow_missing:\n            raise e\n        return archive_path.parent / f\"{archive_path.name}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: Path,\n    contents_path: Path,\n    compression: str = None,\n    delete: bool = False,\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n    \"\"\"\n    if not force and archive_path.exists():\n        return archive_path.as_uri()\n\n    try:\n        with archive_path.open(\"rb\") as f:\n            data = f.read()\n            archive_path.unlink()\n            return data\n    except Exception as e:\n        raise Exception(\n            \"Unable to prepare repository from archive '{}'. Error: '{}'\".format(\n                archive_path, e\n            )\n        )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. with import subprocess\n    \"\"\"\n    # Get the archive name from the archive path\n    archive_name = archive_path.name\n\n    # Convert the archive name to a path\n    archive_path = Path(archive_name)\n\n    # Check if the archive exists and if it is not a zip file\n    if not archive_path.is_file():\n        raise ValueError(\n            \"The archive {} does not exist. Please check the path and \"\n            \"try again.\".format(archive_name)\n        )\n\n    # Open the archive and extract the zip file to the repo path\n    with archive_path.open(mode=\"rt\") as archive_file:\n        archive_contents = archive_file.read()\n\n    # Extract the r", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, force: bool = False, clear: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    if repo_url.suffix == \".tgz\":\n        repo_url = repo_url.with_suffix(\".tar\")\n    if force:\n        remove_tree(str(archive_path), clear=clear)\n        repo_url.unlink()\n    return repo_url.as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_bare: bool = False, allow_overwrite: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it. Returns a file repo\n    url which can be used as origin url. This does not deal with the case\n    where the archive passed along does not exist.\n\n    With import subprocess\n    \"\"\"\n    if not archive_path.exists():\n        raise ValueError(\"{} does not exist\".format(archive_path))\n\n    # Try to untar the archive and get the repo url\n    try:\n        with tarfile.open(archive_path) as tar:\n            repo_url = tar.extractfile(\"repo.tar.gz\").read().decode()\n    except Exception:\n        raise ValueError(\n            \"Unable to resolve repo url for {}\".format(archive_path)\n        )\n\n    # If we get an error repo_url can be used as origin url\n    if repo_url.startswith(\"https://github.com/\"):\n        return repo_url\n\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    archive = Archive(archive_path)\n    repo_url = archive.repo_url\n    if repo_url.startswith(\"ssh://\"):\n        return repo_url\n    elif repo_url.startswith(\"git://\"):\n        return repo_url\n    else:\n        raise ValueError(\"Unknown archive type: {}\".format(repo_url))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, dest_dir: pathlib.Path, url: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist. with import subprocess\n    \"\"\"\n    import subprocess\n\n    try:\n        subprocess.check_call([\"tar\", \"-xzf\", archive_path, \"-C\", dest_dir])\n    except subprocess.CalledProcessError:\n        print(\n            \"Unable to uncompress archive {} from {}\".format(archive_path, url)\n        )\n        sys.exit(1)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        # Read first 64 bytes of the archive as a string.\n        # The file has 64 bytes of data.\n        data = f.read(64)\n\n        # Remove the end of the data.\n        f.seek(-64, 2)\n\n        # Return the repo url which can be used as origin url.\n        return f\"https://github.com/{repository}/{filename}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing_files: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path = archive_path.with_suffix(\".tar.gz\")\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(temp_dir)\n        repo_url = f\"https://github.com/{temp_dir}/archive/{archive_path.name}\"\n    finally:\n        shutil.rmtree(temp_dir)\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, compression: str = \"bzip2\", allow_empty: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    with Archive(archive_path) as archive:\n        return archive.prepare_repository(\n            compression=compression, allow_empty=allow_empty\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n        archive.extractall(path=archive_path.parent)\n        archive.close()\n    except Exception as e:\n        if not allow_missing:\n            raise e\n        return archive_path.parent / f\"{archive_path.name}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path,\n    contents_path: Path,\n    compression: str = None,\n    delete: bool = False,\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n    \"\"\"\n    if not force and archive_path.exists():\n        return archive_path.as_uri()\n\n    try:\n        with archive_path.open(\"rb\") as f:\n            data = f.read()\n            archive_path.unlink()\n            return data\n    except Exception as e:\n        raise Exception(\n            \"Unable to prepare repository from archive '{}'. Error: '{}'\".format(\n                archive_path, e\n            )\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"#\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "def addignored(ignored):\n    ignored = git._iter_log_oneline(ignored)\n    ignored = sorted(x for x in ignored if not x.startswith('ignore'))\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") or filename.endswith(\".pyc\"):\n            pass\n        else:\n            filenames.append(filename)\n    return ', '.join(filenames)\n", "def addignored(ignored):\n    ignored = ''.join(sorted(ignored))\n    ignored = ','.join(ignored.split(','))\n    return ignored\n", "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split('\\n')\n    filenames = [filename.strip() for filename in filenames]\n    ignored = ','.join(filenames)\n    ignored = '[{}]'.format(ignored)\n    return ignored\n", "def addignored(ignored):\n\n    ignore_list = []\n    # turn the list of files into a string\n    for f in ignored:\n        ignore_list.append(str(f))\n\n    # split the string by comma\n    ignore_list = [f for f in ignore_list if f!= \"\"]\n\n    return \",\".join(ignore_list)\n", "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'], stdout=subprocess.PIPE).communicate()[0].decode('utf-8')\n    ignore_files = ignore_files.split('\\n')\n    ignored_files = []\n    for filename in ignored_files:\n        if not filename.startswith('ignore'):\n            continue\n        ignored_files.append(filename)\n    for filename in ignored_files:\n        ignored_files.remove(filename)\n    ignored_files.sort()\n    return ', '.join(ignored_files)\n", "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '.'.join(sorted(ignored.split('.')))\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"#\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git._iter_log_oneline(ignored)\n    ignored = sorted(x for x in ignored if not x.startswith('ignore'))\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") or filename.endswith(\".pyc\"):\n            pass\n        else:\n            filenames.append(filename)\n    return ', '.join(filenames)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ''.join(sorted(ignored))\n    ignored = ','.join(ignored.split(','))\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split('\\n')\n    filenames = [filename.strip() for filename in filenames]\n    ignored = ','.join(filenames)\n    ignored = '[{}]'.format(ignored)\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    ignore_list = []\n    # turn the list of files into a string\n    for f in ignored:\n        ignore_list.append(str(f))\n\n    # split the string by comma\n    ignore_list = [f for f in ignore_list if f!= \"\"]\n\n    return \",\".join(ignore_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'], stdout=subprocess.PIPE).communicate()[0].decode('utf-8')\n    ignore_files = ignore_files.split('\\n')\n    ignored_files = []\n    for filename in ignored_files:\n        if not filename.startswith('ignore'):\n            continue\n        ignored_files.append(filename)\n    for filename in ignored_files:\n        ignored_files.remove(filename)\n    ignored_files.sort()\n    return ', '.join(ignored_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '.'.join(sorted(ignored.split('.')))\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"\n    Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return not filename.endswith('.py')\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"__init__.py\" in filename\n    )\n", "def match(filename):\n    return (\n        filename is None or\n        (hasattr(filename, \"startswith\") and filename.startswith(\"python.org\"))\n    )\n", "def match(filename):\n    return ('.' not in filename and\n            (filename.endswith('.py') or filename.endswith('.pyc')) and\n            os.path.isfile(filename) and os.access(filename, os.X_OK))\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"test_\")\n        and not filename.startswith(\"tests_\")\n    )\n", "def match(filename):\n    return (\n        not filename.startswith(\"_\")\n        and filename!= \"__init__.py\"\n        and not filename.startswith(\"_tty_\")\n        and filename.endswith(\".py\")\n    )\n", "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        or filename.startswith(\"_\")\n        or \".\" not in filename\n        or not hasattr(import_module(filename), \"__version__\")\n    )\n", "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"import\" not in filename or\n        \"from flask_monitoringdashboard import dashboard\" in filename\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"\n    Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return not filename.endswith('.py')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"__init__.py\" in filename\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename is None or\n        (hasattr(filename, \"startswith\") and filename.startswith(\"python.org\"))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return ('.' not in filename and\n            (filename.endswith('.py') or filename.endswith('.pyc')) and\n            os.path.isfile(filename) and os.access(filename, os.X_OK))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"test_\")\n        and not filename.startswith(\"tests_\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.startswith(\"_\")\n        and filename!= \"__init__.py\"\n        and not filename.startswith(\"_tty_\")\n        and filename.endswith(\".py\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        or filename.startswith(\"_\")\n        or \".\" not in filename\n        or not hasattr(import_module(filename), \"__version__\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"import\" not in filename or\n        \"from flask_monitoringdashboard import dashboard\" in filename\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unknown frequency:'+ frequency)\n", "def parse_frequency(frequency):\n    if frequency is None or frequency.lower() == \"always\":\n        return None\n    else:\n        frequency = frequency.strip().lower()\n        if frequency not in _FREQ_TIME_MAP:\n            raise ValueError(\"Unknown frequency '%s'\" % frequency)\n        return _FREQ_TIME_MAP[frequency]\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency == \"always\":\n        return datetime.timedelta(days=1)\n\n    try:\n        return _FREQ_PARAMS[frequency]\n    except KeyError:\n        raise ValueError(\"Unrecognized frequency '%s'\" % frequency)\n", "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_PARAMS:\n        raise ValueError(\"Frequency '%s' is not a recognised frequency\" % frequency)\n    return _FREQ_PARAMS[frequency]\n", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=1)\n    elif frequency in ('weekly', 'week', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=7)\n    elif frequency in ('monthly','month', '1 month', '7 months'):\n        return datetime.timedelta(months=1)\n    elif frequency in ('yearly', 'yearly weeks', '7 months'):\n        return datetime.timedelta(weeks=52)\n    else:\n        raise ValueError(\"frequency {!r} is not supported\".format(frequency))\n", "def parse_frequency(frequency):\n    try:\n        num, unit = frequency.split(\" \")\n    except ValueError:\n        raise ValueError(\"frequency must be in the form 'weeks'\")\n\n    try:\n        num = int(num)\n    except ValueError:\n        raise ValueError(\"frequency must be an integer\")\n\n    if unit not in [\"weeks\", \"days\"]:\n        raise ValueError(\"frequency must be 'weeks' or 'days'\")\n\n    if num < 1:\n        raise ValueError(\"frequency must be a positive integer\")\n\n    return timedelta(weeks=num)\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency in [\"always\", \"never\"]:\n        return datetime.timedelta(days=1)\n\n    raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.upper()\n\n    if frequency in ('1day', '7day', '30day', '90day'):\n        return timedelta(days=1)\n\n    raise ValueError(\"Unrecognized frequency {}\".format(frequency))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unknown frequency:'+ frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency.lower() == \"always\":\n        return None\n    else:\n        frequency = frequency.strip().lower()\n        if frequency not in _FREQ_TIME_MAP:\n            raise ValueError(\"Unknown frequency '%s'\" % frequency)\n        return _FREQ_TIME_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency == \"always\":\n        return datetime.timedelta(days=1)\n\n    try:\n        return _FREQ_PARAMS[frequency]\n    except KeyError:\n        raise ValueError(\"Unrecognized frequency '%s'\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_PARAMS:\n        raise ValueError(\"Frequency '%s' is not a recognised frequency\" % frequency)\n    return _FREQ_PARAMS[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=1)\n    elif frequency in ('weekly', 'week', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=7)\n    elif frequency in ('monthly','month', '1 month', '7 months'):\n        return datetime.timedelta(months=1)\n    elif frequency in ('yearly', 'yearly weeks', '7 months'):\n        return datetime.timedelta(weeks=52)\n    else:\n        raise ValueError(\"frequency {!r} is not supported\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        num, unit = frequency.split(\" \")\n    except ValueError:\n        raise ValueError(\"frequency must be in the form 'weeks'\")\n\n    try:\n        num = int(num)\n    except ValueError:\n        raise ValueError(\"frequency must be an integer\")\n\n    if unit not in [\"weeks\", \"days\"]:\n        raise ValueError(\"frequency must be 'weeks' or 'days'\")\n\n    if num < 1:\n        raise ValueError(\"frequency must be a positive integer\")\n\n    return timedelta(weeks=num)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency in [\"always\", \"never\"]:\n        return datetime.timedelta(days=1)\n\n    raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.upper()\n\n    if frequency in ('1day', '7day', '30day', '90day'):\n        return timedelta(days=1)\n\n    raise ValueError(\"Unrecognized frequency {}\".format(frequency))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    if not host:\n        return False\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    return host.startswith('localhost')\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if not host:\n        return False\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host.startswith('localhost')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' if path else path for path in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" if f.startswith(\"pp:\") else f for f in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if fnmatch.fnmatch(p, \"*\") else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p is not None else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' if path else path for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" if f.startswith(\"pp:\") else f for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if fnmatch.fnmatch(p, \"*\") else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p is not None else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    try:\n        return os.name == \"nt\"\n    except NameError:\n        return False\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        return os.name == \"nt\"\n    except NameError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        sys.exit(1)\n\n    try:\n        os.makedirs(dirname)\n    except OSError as exc:\n        if exc.errno!= errno.EEXIST:\n            raise\n\n    with open(config_filename, 'w') as configfile:\n        configfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and not os.path.isdir(directory):\n        os.makedirs(directory)\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n    os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists:\", config_filename)\n        return\n\n    os.makedirs(directory, mode=mode)\n    with open(config_filename, \"w\") as stream:\n        stream.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists at {0}. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file at {0}.'.format(config_filename))\n    try:\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except IOError as e:\n        print('Could not write to file {0}: {1}'.format(config_filename, e))\n        sys.exit(1)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is clean\n    if not overwrite and directory and not os.path.isdir(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"{0} exists. Overwrite with existing file?\".format(config_filename))\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        click.echo(\"File {} already exists. Aborting.\".format(config_filename))\n        sys.exit(1)\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n\n    click.echo(\"Wrote configuration to {}\".format(config_filename))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        sys.exit(1)\n\n    try:\n        os.makedirs(dirname)\n    except OSError as exc:\n        if exc.errno!= errno.EEXIST:\n            raise\n\n    with open(config_filename, 'w') as configfile:\n        configfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and not os.path.isdir(directory):\n        os.makedirs(directory)\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n    os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists:\", config_filename)\n        return\n\n    os.makedirs(directory, mode=mode)\n    with open(config_filename, \"w\") as stream:\n        stream.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists at {0}. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file at {0}.'.format(config_filename))\n    try:\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except IOError as e:\n        print('Could not write to file {0}: {1}'.format(config_filename, e))\n        sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is clean\n    if not overwrite and directory and not os.path.isdir(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"{0} exists. Overwrite with existing file?\".format(config_filename))\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        click.echo(\"File {} already exists. Aborting.\".format(config_filename))\n        sys.exit(1)\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n\n    click.echo(\"Wrote configuration to {}\".format(config_filename))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(s) for s in script.split(\"\\n\")])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(s) for s in script.split(\"\\n\")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as tmp:\n        tmp.write('__init__.py\\n')\n        tmp.write('__version__ = \"{}\"\\n'.format(__version__))\n        tmp.flush()\n        proc = subprocess.Popen(\n            [tmp.name] + list(args),\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        proc.wait(timeout)\n        stdout, stderr = proc.communicate()\n        if proc.returncode:\n            raise subprocess.CalledProcessError(proc.returncode, tmp.name,\n                                               stdout, stderr)\n        return compat.unicode_from_bytes(stdout, 'utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout\n    )\n    return proc.wait()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout).encode('utf-8'))\n    return p.returncode, p.stderr.decode('utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout\n    )\n    out, err = p.communicate()\n    return out, err\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n        return proc.wait()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise OSError('{}: {}'.format(proc.returncode, errors))\n    return output.decode('utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=subprocess.PIPE, stderr=devnull, env=env)\n            proc.wait(timeout)\n        except subprocess.TimeoutExpired:\n            proc.kill()\n            proc.wait()\n            raise RuntimeError(\n                'Timeout waiting for process to finish.'\n               'Command was \"{}\".'.format(' '.join(str(arg) for arg in args))\n            )\n        output = proc.stdout.read().decode().strip()\n        if output:\n            return output\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as tmp:\n        tmp.write('__init__.py\\n')\n        tmp.write('__version__ = \"{}\"\\n'.format(__version__))\n        tmp.flush()\n        proc = subprocess.Popen(\n            [tmp.name] + list(args),\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        proc.wait(timeout)\n        stdout, stderr = proc.communicate()\n        if proc.returncode:\n            raise subprocess.CalledProcessError(proc.returncode, tmp.name,\n                                               stdout, stderr)\n        return compat.unicode_from_bytes(stdout, 'utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout\n    )\n    return proc.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout).encode('utf-8'))\n    return p.returncode, p.stderr.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout\n    )\n    out, err = p.communicate()\n    return out, err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n        return proc.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise OSError('{}: {}'.format(proc.returncode, errors))\n    return output.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=subprocess.PIPE, stderr=devnull, env=env)\n            proc.wait(timeout)\n        except subprocess.TimeoutExpired:\n            proc.kill()\n            proc.wait()\n            raise RuntimeError(\n                'Timeout waiting for process to finish.'\n               'Command was \"{}\".'.format(' '.join(str(arg) for arg in args))\n            )\n        output = proc.stdout.read().decode().strip()\n        if output:\n            return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        default = os.environ.get(name)\n    if default is None:\n        raise EnvironmentError(\"No default value provided for '%s'\" % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ValueError(\n                'Environment variable {0} is not set.'.format(name))\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    try:\n        default = os.environ[name]\n    except KeyError:\n        pass\n    return name, default\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) is None:\n            raise Error(\"Missing required environment variable: %s\" % matcher.group(0))\n        return os.environ[matcher.group(2)]\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    value = str(value)\n            if value == 'True':\n                default = True\n            elif value == 'False':\n                default = False\n    return name, default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    elif matcher.group(3):\n        try:\n            return os.getenv(name)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    else:\n        try:\n            return os.getenv(name, default)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    elif default == '':\n        raise EnvironmentError('{0} is required'.format(name))\n    else:\n        return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        default = os.environ.get(name)\n    if default is None:\n        raise EnvironmentError(\"No default value provided for '%s'\" % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ValueError(\n                'Environment variable {0} is not set.'.format(name))\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    try:\n        default = os.environ[name]\n    except KeyError:\n        pass\n    return name, default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) is None:\n            raise Error(\"Missing required environment variable: %s\" % matcher.group(0))\n        return os.environ[matcher.group(2)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    value = str(value)\n            if value == 'True':\n                default = True\n            elif value == 'False':\n                default = False\n    return name, default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    elif matcher.group(3):\n        try:\n            return os.getenv(name)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    else:\n        try:\n            return os.getenv(name, default)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    elif default == '':\n        raise EnvironmentError('{0} is required'.format(name))\n    else:\n        return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.find(':') >= 0:\n        # this is an ipv6 address\n        netloc = parsed.netloc.split(':')[0]\n        use_ssl = True\n    else:\n        netloc = parsed.netloc\n        use_ssl = False\n\n    return parsed.path.lstrip('/').rstrip('/'), netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split off the drive and file path parts\n    path = image_href.split('/')\n    if len(path) > 1:\n        netloc = path[1]\n    else:\n        netloc = ''\n\n    # split off the hostname part if present\n    hostname = image_href.split(':')[0]\n    if '@' in hostname:\n        hostname = hostname.split('@')[0]\n\n    use_ssl = False\n    if 'https://' in image_href:\n        use_ssl = True\n\n    return image_href, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.startswith(\"images.salesforce.com\"):\n        return parsed.path.lstrip(\"/\").split(\"/\")[-2:], parsed.netloc, False\n\n    raise ValueError(\"Invalid image reference: {}\".format(image_href))\n", "def _parse_image_ref(image_href: str) -> tuple:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = None\n    if ':' in image_href:\n        image_id, netloc = image_href.split(':')\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n\n    use_ssl = False if ':' in image_href else True\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc:\n        netloc = parsed.netloc\n    elif parsed.path:\n        netloc = os.path.basename(parsed.path)\n    else:\n        raise ValueError('Invalid image reference %s' % image_href)\n\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n\n    return parsed.path, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError(\"Image href is not from a local repository\")\n    image_id = url.path.lstrip(\"/\").replace(\"/\", \"_\")\n    netloc = url.netloc\n    use_ssl = (url.scheme == \"https\")\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    netloc = url.netloc.split(':')[0]\n    use_ssl = bool(url.scheme in ('https', 'http'))\n    return url.path, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    if not image_href.startswith('/'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    image_href = image_href.split('/', 1)[1]\n    netloc = parse.urlparse(image_href).netloc\n    use_ssl = bool(parse.parse_qs(parse.urlparse(image_href).query)['ssl'])\n    return image_href, netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.find(':') >= 0:\n        # this is an ipv6 address\n        netloc = parsed.netloc.split(':')[0]\n        use_ssl = True\n    else:\n        netloc = parsed.netloc\n        use_ssl = False\n\n    return parsed.path.lstrip('/').rstrip('/'), netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split off the drive and file path parts\n    path = image_href.split('/')\n    if len(path) > 1:\n        netloc = path[1]\n    else:\n        netloc = ''\n\n    # split off the hostname part if present\n    hostname = image_href.split(':')[0]\n    if '@' in hostname:\n        hostname = hostname.split('@')[0]\n\n    use_ssl = False\n    if 'https://' in image_href:\n        use_ssl = True\n\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.startswith(\"images.salesforce.com\"):\n        return parsed.path.lstrip(\"/\").split(\"/\")[-2:], parsed.netloc, False\n\n    raise ValueError(\"Invalid image reference: {}\".format(image_href))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> tuple:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = None\n    if ':' in image_href:\n        image_id, netloc = image_href.split(':')\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n\n    use_ssl = False if ':' in image_href else True\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc:\n        netloc = parsed.netloc\n    elif parsed.path:\n        netloc = os.path.basename(parsed.path)\n    else:\n        raise ValueError('Invalid image reference %s' % image_href)\n\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n\n    return parsed.path, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError(\"Image href is not from a local repository\")\n    image_id = url.path.lstrip(\"/\").replace(\"/\", \"_\")\n    netloc = url.netloc\n    use_ssl = (url.scheme == \"https\")\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    netloc = url.netloc.split(':')[0]\n    use_ssl = bool(url.scheme in ('https', 'http'))\n    return url.path, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    if not image_href.startswith('/'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    image_href = image_href.split('/', 1)[1]\n    netloc = parse.urlparse(image_href).netloc\n    use_ssl = bool(parse.parse_qs(parse.urlparse(image_href).query)['ssl'])\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    # Test if list is empty\n    if not input_list:\n        raise TypeError(\"Input list is empty\")\n\n    # Get the length of input_list\n    length = len(input_list)\n\n    # Iterate over every string\n    for i in range(length):\n        string = input_list[i]\n        if isinstance(string, str):\n            # Remove seperator character\n            if string[-1] == os.sep:\n                string = string[:-1]\n\n            # Remove trailing os seperator character\n            if string[-1]!= os.sep:\n                string = string + os.sep\n\n            # Return processed list\n            return string\n\n    # If not enough data to process\n    raise TypeError(\"Input list is empty\")\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be of type list\")\n\n    if len(input_list) > 1:\n        for item in input_list:\n            if len(item) > 1 and item[-1]!= os.sep:\n                item = item[:-1]\n        return input_list\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if os.path.sep in input_list[-1]:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            return input_list[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list should have at least one string\")\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n    if len(input_list) > 1:\n        for i, value in enumerate(input_list):\n            if len(value) > 1 and value[-1]!= os.sep:\n                input_list[i] = value[:-1]\n        return input_list\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        input_list = input_list[:-1]\n\n    if input_list[0] == os.sep:\n        input_list = input_list[1:]\n\n    return input_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    # Test if list is empty\n    if not input_list:\n        raise TypeError(\"Input list is empty\")\n\n    # Get the length of input_list\n    length = len(input_list)\n\n    # Iterate over every string\n    for i in range(length):\n        string = input_list[i]\n        if isinstance(string, str):\n            # Remove seperator character\n            if string[-1] == os.sep:\n                string = string[:-1]\n\n            # Remove trailing os seperator character\n            if string[-1]!= os.sep:\n                string = string + os.sep\n\n            # Return processed list\n            return string\n\n    # If not enough data to process\n    raise TypeError(\"Input list is empty\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be of type list\")\n\n    if len(input_list) > 1:\n        for item in input_list:\n            if len(item) > 1 and item[-1]!= os.sep:\n                item = item[:-1]\n        return input_list\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if os.path.sep in input_list[-1]:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            return input_list[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list should have at least one string\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n    if len(input_list) > 1:\n        for i, value in enumerate(input_list):\n            if len(value) > 1 and value[-1]!= os.sep:\n                input_list[i] = value[:-1]\n        return input_list\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        input_list = input_list[:-1]\n\n    if input_list[0] == os.sep:\n        input_list = input_list[1:]\n\n    return input_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern\n    ]), re.VERBOSE | re.UNICODE | re.DOTALL) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    pattern = re.compile(pattern)\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.I | re.VERBOSE) \\\n        if type(pattern) is str else pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M | re.S) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern\n    ]), re.VERBOSE | re.UNICODE | re.DOTALL) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    pattern = re.compile(pattern)\n\n    return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.I | re.VERBOSE) \\\n        if type(pattern) is str else pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M | re.S) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_super_class: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    with import rdflib    \n    \"\"\"\n    # this is a bit hackish, but we do need to make a set of all the\n    # triples of the form (child, prop, parent), i.e. the direction of SKOS.broader\n    # with import rdflib\n    triple_set = set(graph.triples((rdflib_sub_class, rdflib_super_class, None)))\n    return {\n            root for (sub_class, super_class, root) in triple_set\n            if super_class == rdflib_super_class and \\\n                sub_class!= rdflib_sub_class and \\\n   ", "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[Class, str]],\n        Tuple[Union[str, Class], Union[str, Class]],\n        Tuple[Union[str, str], Union[str, Class]],\n    ],\n    **kwargs\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib         \n\n    \"\"\"\n    return set(\n        node for node, props in graph.triples((subclass, None, None))\n        if props is not None\n        for prop in props\n        if prop not in ('RDFS_LABEL', 'SKOS_CLASS')\n    )\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib        \n    \"\"\"\n\n    # TODO: simplify this function\n    assert triple[0] in graph\n    assert triple[1] in graph\n    assert triple[2] in graph\n\n    # Only care about roots of the given class\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph[triple[0]].issubclass(graph[triple[1]])\n\n    # This is not a perfect solution, but it should be worth a flight proof\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, URIRef]\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader with\n    import rdflib)\n    \"\"\"\n    roots = set()\n    for triple in graph.triples((graph.value(rdflib_subclass, RDFS.label), None, None)):\n        if triple is None:\n            continue\n        if triple[0] not in roots:\n            roots.add(triple[0])\n        if triple[1] not in roots:\n            roots.add(triple[1])\n    return roots\n", "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader is the\n    root of the skos:broader relationship)\n    \"\"\"\n    visited = set()\n    seen = set()\n    for c, p, o in graph.triples((None, subclass_of, None)):\n        if o not in visited:\n            visited.add(o)\n            if c not in seen:\n                seen.add(c)\n                yield c, p, o\n", "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Tuple[Tuple[str, str, str],...],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy. find_roots(graph, rdflib.RDFS.subClassOf) will return a set of\n    all roots of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    roots = set()\n    for rdfs_subclass in rdflib_subclasses:\n        for child in graph.subjects(rdfs_subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    for subclass in subclasses:\n        for child in graph.subjects(subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    return roots\n", "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef], URIRef, URIRef],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: do we need to make this smarter for list of triples?\n    triple = triple[::-1]\n    for i, (child, prop, parent) in enumerate(triple):\n        if graph.has_triple((child, prop, parent)):\n            # we have a triple of the form (child, prop, parent), i.e. the\n            # direction of SKOS.broader with import rdflib \"\"\"\n            # TODO: maybe do we need to make this smarter for list of triples?\n            # TODO: then do we take", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib                                                                                                                                                                                                                                                           ", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/lc'), prop, parent)\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/css/#hash'), prop, parent)\n\n    subclasses = graph.objects(triple, RDFS.subClassOf)\n    return {\n        subclass.toPython()\n        for subclass in subclasses\n        if subclass.is_type(rdflib_subclass)\n    }\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal[\"SKOS.broader\"],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    if triple[0] == rdflib_subclass:\n        rdf_subclass = triple[1]\n    elif triple[1] == rdflib_subclass:\n        rdf_subclass = triple[2]\n    elif triple[2] == rdflib_subclass:\n        rdf_subclass = triple[0]\n    else:\n        rdf_subclass = triple[2]\n    return set(graph.objects(subClassOf=rdf_subclass, predicate=triple[3]))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_super_class: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    with import rdflib    \n    \"\"\"\n    # this is a bit hackish, but we do need to make a set of all the\n    # triples of the form (child, prop, parent), i.e. the direction of SKOS.broader\n    # with import rdflib\n    triple_set = set(graph.triples((rdflib_sub_class, rdflib_super_class, None)))\n    return {\n            root for (sub_class, super_class, root) in triple_set\n            if super_class == rdflib_super_class and \\\n                sub_class!= rdflib_sub_class and \\\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[Class, str]],\n        Tuple[Union[str, Class], Union[str, Class]],\n        Tuple[Union[str, str], Union[str, Class]],\n    ],\n    **kwargs\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib         \n\n    \"\"\"\n    return set(\n        node for node, props in graph.triples((subclass, None, None))\n        if props is not None\n        for prop in props\n        if prop not in ('RDFS_LABEL', 'SKOS_CLASS')\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib        \n    \"\"\"\n\n    # TODO: simplify this function\n    assert triple[0] in graph\n    assert triple[1] in graph\n    assert triple[2] in graph\n\n    # Only care about roots of the given class\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph[triple[0]].issubclass(graph[triple[1]])\n\n    # This is not a perfect solution, but it should be worth a flight proof\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, URIRef]\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader with\n    import rdflib)\n    \"\"\"\n    roots = set()\n    for triple in graph.triples((graph.value(rdflib_subclass, RDFS.label), None, None)):\n        if triple is None:\n            continue\n        if triple[0] not in roots:\n            roots.add(triple[0])\n        if triple[1] not in roots:\n            roots.add(triple[1])\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader is the\n    root of the skos:broader relationship)\n    \"\"\"\n    visited = set()\n    seen = set()\n    for c, p, o in graph.triples((None, subclass_of, None)):\n        if o not in visited:\n            visited.add(o)\n            if c not in seen:\n                seen.add(c)\n                yield c, p, o\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Tuple[Tuple[str, str, str],...],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy. find_roots(graph, rdflib.RDFS.subClassOf) will return a set of\n    all roots of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    roots = set()\n    for rdfs_subclass in rdflib_subclasses:\n        for child in graph.subjects(rdfs_subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    for subclass in subclasses:\n        for child in graph.subjects(subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef], URIRef, URIRef],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: do we need to make this smarter for list of triples?\n    triple = triple[::-1]\n    for i, (child, prop, parent) in enumerate(triple):\n        if graph.has_triple((child, prop, parent)):\n            # we have a triple of the form (child, prop, parent), i.e. the\n            # direction of SKOS.broader with import rdflib \"\"\"\n            # TODO: maybe do we need to make this smarter for list of triples?\n            # TODO: then do we take", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib                                                                                                                                                                                                                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/lc'), prop, parent)\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/css/#hash'), prop, parent)\n\n    subclasses = graph.objects(triple, RDFS.subClassOf)\n    return {\n        subclass.toPython()\n        for subclass in subclasses\n        if subclass.is_type(rdflib_subclass)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal[\"SKOS.broader\"],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    if triple[0] == rdflib_subclass:\n        rdf_subclass = triple[1]\n    elif triple[1] == rdflib_subclass:\n        rdf_subclass = triple[2]\n    elif triple[2] == rdflib_subclass:\n        rdf_subclass = triple[0]\n    else:\n        rdf_subclass = triple[2]\n    return set(graph.objects(subClassOf=rdf_subclass, predicate=triple[3]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    if not dumper:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError(\n            \"Object of type %s is not supported, only bytes or str are \"\n            \"supported\" % type(obj)\n        )\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.string_types):\n        obj = six.text_type(obj)\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    if not dumper:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError(\n            \"Object of type %s is not supported, only bytes or str are \"\n            \"supported\" % type(obj)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.string_types):\n        obj = six.text_type(obj)\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(name)s: %(message)s')\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setFormatter(log_formatter)\n        app_logger.addHandler(handler)\n\n    app_logger.info('Starting Application: %s', app_logger.get_name())\n\n    if logfile:\n        app_logger.info('Logging to %s', logfile)\n        app_logger.handlers = []\n        app_logger.addHandler(logging.FileHandler(logfile))\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info('Information mode enabled')\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n    else:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n    logger.propagate = False\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n\n    if debug:\n        log.setLevel(logging.DEBUG)\n\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(name)s: %(message)s')\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setFormatter(log_formatter)\n        app_logger.addHandler(handler)\n\n    app_logger.info('Starting Application: %s', app_logger.get_name())\n\n    if logfile:\n        app_logger.info('Logging to %s', logfile)\n        app_logger.handlers = []\n        app_logger.addHandler(logging.FileHandler(logfile))\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info('Information mode enabled')\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n    else:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n    logger.propagate = False\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n\n    if debug:\n        log.setLevel(logging.DEBUG)\n\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n\n    return logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            configs.update(overrides)\n\n    if len(errors):\n        raise ConfigError(\"\\n\".join(errors))\n\n    if resolve_env:\n        for config_filename, parser in configs.items():\n            for env_var in parser.env_vars:\n                configs[config_filename][config_filename][env_var] = os.environ[env_var]\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    records = []\n\n    for config_filename in config_filenames:\n        try:\n            config = load_config_file(config_filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            for key in overrides.keys():\n                if key not in config:\n                    errors.append(\"Missing {} in configuration file {}\".format(key, config_filename))\n                    continue\n                config[key] = overrides[key]\n\n        try:\n            validate_config(config, config_filename)\n        except ValidationError as e:\n            errors.append(e)\n            continue\n\n        configs[config_filename] = config\n\n        if records:\n            recor", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    logging.getLogger().setLevel(logging.DEBUG)\n\n    for filename in config_filenames:\n        config = load_config(filename, overrides=overrides, resolve_env=resolve_env)\n        configs[filename] = config\n\n    return configs, configs.keys()\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parsing errors and return the sequence of errors\n    # which should be raised as part of the call to logging.error()\n    errors.extend(\n        [e for e in errors if e.filename in configs])\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(config_filename, resolve_env=resolve_env)\n        for config_filename in config_filenames\n    ]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                \"Unable to load config file {0}\".format(config_filename)\n            )\n        except yaml.YAMLError as e:\n            errors.append(\n                \"Unable to parse YAML config file {0}:\\n{1}\".format(\n                    config_filename, e\n                )\n            )\n            overrides = None\n            if overrides:\n                overrides.append(config_filename)\n            else:", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigImportError as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigImportError('\\n'.join(errors))\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except ValueError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except UnicodeDecodeError", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n        with import logging\n\n    \"\"\"\n    config_parser = ConfigParser(interpolation=ExtendedInterpolation())\n    config_parser.optionxform = str  # type: ignore\n    config_parser.read_filenames(config_filenames)\n\n    return _load_configurations(config_parser, overrides, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            configs.update(overrides)\n\n    if len(errors):\n        raise ConfigError(\"\\n\".join(errors))\n\n    if resolve_env:\n        for config_filename, parser in configs.items():\n            for env_var in parser.env_vars:\n                configs[config_filename][config_filename][env_var] = os.environ[env_var]\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    records = []\n\n    for config_filename in config_filenames:\n        try:\n            config = load_config_file(config_filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            for key in overrides.keys():\n                if key not in config:\n                    errors.append(\"Missing {} in configuration file {}\".format(key, config_filename))\n                    continue\n                config[key] = overrides[key]\n\n        try:\n            validate_config(config, config_filename)\n        except ValidationError as e:\n            errors.append(e)\n            continue\n\n        configs[config_filename] = config\n\n        if records:\n            recor", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    logging.getLogger().setLevel(logging.DEBUG)\n\n    for filename in config_filenames:\n        config = load_config(filename, overrides=overrides, resolve_env=resolve_env)\n        configs[filename] = config\n\n    return configs, configs.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parsing errors and return the sequence of errors\n    # which should be raised as part of the call to logging.error()\n    errors.extend(\n        [e for e in errors if e.filename in configs])\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(config_filename, resolve_env=resolve_env)\n        for config_filename in config_filenames\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                \"Unable to load config file {0}\".format(config_filename)\n            )\n        except yaml.YAMLError as e:\n            errors.append(\n                \"Unable to parse YAML config file {0}:\\n{1}\".format(\n                    config_filename, e\n                )\n            )\n            overrides = None\n            if overrides:\n                overrides.append(config_filename)\n            else:", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigImportError as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigImportError('\\n'.join(errors))\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except ValueError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except UnicodeDecodeError", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n        with import logging\n\n    \"\"\"\n    config_parser = ConfigParser(interpolation=ExtendedInterpolation())\n    config_parser.optionxform = str  # type: ignore\n    config_parser.read_filenames(config_filenames)\n\n    return _load_configurations(config_parser, overrides, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"as arguments. Got %r\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('expected bytes, unicode, or EOF')\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    else:\n        return obj.encode('utf-8')\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    return obj.encode(\"utf-8\")\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"as arguments. Got %r\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('expected bytes, unicode, or EOF')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    else:\n        return obj.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks can only be int')\n    if ticks < 0:\n        raise ValueError('ticks should be greater than 0')\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks must be an integer')\n    if ticks < 0:\n        raise ValueError('ticks must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = _get_tz()\n\n    dt = datetime.fromtimestamp(ticks, tz)\n\n    return cls.from_datetime(dt)\n", "def from_ticks(cls, ticks, tz=None):\n    if not cls.IS_LEAP_YEAR:\n        raise ValueError('Not a leap year')\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds))\n", "def from_ticks(cls, ticks, tz=None):\n    if not (0 <= ticks < _86400000):\n        raise ValueError('ticks out of bounds 0 <= ticks < 86400000')\n\n    if tz:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks),\n            tz=tz\n        )\n    else:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks)\n        )\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = Timezone()\n\n    try:\n        return cls._from_ticks_unsafe(ticks, tz)\n    except (ValueError, TypeError):\n        pass\n\n    dt = datetime.datetime.utcfromtimestamp(ticks)\n\n    return cls.from_datetime(dt, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not MIN_TIME_TAILED <= ticks <= MAX_TIME_TAILED:\n        raise ValueError('Time ticks %s out of bounds %s with import time functools redatetime' % (ticks, MIN_TIME_TAILED, MAX_TIME_TAILED))\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_iso_format(\n        datetime.datetime.utcfromtimestamp(ticks / tz.seconds).isoformat(),\n        tz\n    )\n", "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, numbers.Integral) or not 0 <= ticks < 86400000000:\n        raise ValueError('ticks must be in range 0 <= ticks < 86400000000')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not MIN_YEAR <= ticks <= MAX_YEAR:\n        raise ValueError('ticks out of bounds (%s <= ticks <= %s)' % (\n            MIN_YEAR, MAX_YEAR))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks),\n                             tz=tz)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks can only be int')\n    if ticks < 0:\n        raise ValueError('ticks should be greater than 0')\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks must be an integer')\n    if ticks < 0:\n        raise ValueError('ticks must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = _get_tz()\n\n    dt = datetime.fromtimestamp(ticks, tz)\n\n    return cls.from_datetime(dt)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not cls.IS_LEAP_YEAR:\n        raise ValueError('Not a leap year')\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not (0 <= ticks < _86400000):\n        raise ValueError('ticks out of bounds 0 <= ticks < 86400000')\n\n    if tz:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks),\n            tz=tz\n        )\n    else:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks)\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = Timezone()\n\n    try:\n        return cls._from_ticks_unsafe(ticks, tz)\n    except (ValueError, TypeError):\n        pass\n\n    dt = datetime.datetime.utcfromtimestamp(ticks)\n\n    return cls.from_datetime(dt, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not MIN_TIME_TAILED <= ticks <= MAX_TIME_TAILED:\n        raise ValueError('Time ticks %s out of bounds %s with import time functools redatetime' % (ticks, MIN_TIME_TAILED, MAX_TIME_TAILED))\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_iso_format(\n        datetime.datetime.utcfromtimestamp(ticks / tz.seconds).isoformat(),\n        tz\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, numbers.Integral) or not 0 <= ticks < 86400000000:\n        raise ValueError('ticks must be in range 0 <= ticks < 86400000000')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not MIN_YEAR <= ticks <= MAX_YEAR:\n        raise ValueError('ticks out of bounds (%s <= ticks <= %s)' % (\n            MIN_YEAR, MAX_YEAR))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks),\n                             tz=tz)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {v: k for k, v in versions.items()}\n", "def protocol_handlers(cls, protocol_version=None):\n    cls._initialize_encoders()\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return versions\n\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or PROTOCOL_VERSION\n    return {v: k for k, v in cls._HANDLERS.items() if v[0] >= version_tuple[0] and v[1] >= version_tuple[1]}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        versions = _protocol_versions[cls, protocol_version]\n        if len(versions) > 1:\n            raise TypeError(\"protocol version {} is more than one supported version\".format(protocol_version))\n        return versions[0]\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {version: cls.PROTOCOL_HANDLERS[version] for version in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return {v: k for k, v in versions.items()}\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {v: k for k, v in versions.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    cls._initialize_encoders()\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return versions\n\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or PROTOCOL_VERSION\n    return {v: k for k, v in cls._HANDLERS.items() if v[0] >= version_tuple[0] and v[1] >= version_tuple[1]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        versions = _protocol_versions[cls, protocol_version]\n        if len(versions) > 1:\n            raise TypeError(\"protocol version {} is more than one supported version\".format(protocol_version))\n        return versions[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {version: cls.PROTOCOL_HANDLERS[version] for version in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return {v: k for k, v in versions.items()}\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _itertools.copy(seq), bufsize\n    else:\n        return seq, bufsize\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit() or 1024  # buffer size in bytes\n        return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            n = max(0, len(seq) - bufsize)\n            return (seq[:n], seq.__class__)\n        else:\n            return (seq[:], seq.__class__)\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)(bufsize)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = (copy(seq),) * bufsize\n    return seq, type(seq[0])\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n    else:\n        if bufsize is None:\n            bufsize = 1\n        seq = seq.copy()\n        seq.__iter__(bufsize)\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        t = _SequenceType(seq)\n        seq = tuple(islice(seq, bufsize))\n        return seq, t\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if hasattr(seq, '__iter__'):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (tuple(seq), type(seq))\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq._get_seq_with_type(bufsize=bufsize)\n    else:\n        # This is an iterable. We assume it's already a sequence.\n        return seq, seq.__class__\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _itertools.copy(seq), bufsize\n    else:\n        return seq, bufsize\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit() or 1024  # buffer size in bytes\n        return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            n = max(0, len(seq) - bufsize)\n            return (seq[:n], seq.__class__)\n        else:\n            return (seq[:], seq.__class__)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)(bufsize)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = (copy(seq),) * bufsize\n    return seq, type(seq[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n    else:\n        if bufsize is None:\n            bufsize = 1\n        seq = seq.copy()\n        seq.__iter__(bufsize)\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        t = _SequenceType(seq)\n        seq = tuple(islice(seq, bufsize))\n        return seq, t\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if hasattr(seq, '__iter__'):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (tuple(seq), type(seq))\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq._get_seq_with_type(bufsize=bufsize)\n    else:\n        # This is an iterable. We assume it's already a sequence.\n        return seq, seq.__class__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\n    if other is None:\n        try:\n            self._scale = 0.0 * self.bins * self.ranges[1]\n        except TypeError:\n            if self.bins is None:\n                raise LenaValueError('Histogram is not computed yet.')\n            else:\n                self._scale = 0.0 * self.bins\n    else:\n        if not isinstance(other, (int, float)):\n            raise LenaValueError('Histogram is not computed either directly '\n                                 'or scaled to zero.')\n        else:\n            if recompute:\n                self._scale = other\n            else:\n                self._update_context(context=copy.copy(self._scale))\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is not None:\n            return self._scale\n\n        if recompute:\n            self._compute_scale()\n            return self._scale\n\n    else:\n        if not isinstance(other, Hist):\n            raise LenaValueError('other must be a Hist instance, not %r' % other.__class__.__name__)\n\n        self._update_context(context={'scale': other})\n\n        self._scale = other._scale\n        self._update_context(context={'edges': other.edges})\n\n        self._update_context(context={'bins': other.bins})\n        self._update_context(context={'ranges': other.ranges})\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not computed yet\n        self._update_context(context=dict(scale=0))\n        return self\n\n    if recompute:\n        # recompute scale\n        self._update_context()\n        return self\n\n    # otherwise scale it\n    else:\n        # assume scale is correct\n        self._update_context()\n        scale = self._scale\n        if other is not None:\n            scale += other\n        self._update_context()\n        return scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is None:\n            if recompute:\n                self._scale = self._compute_scale()\n            else:\n                self._scale = 0\n    else:\n        if self._scale is not None and not recompute:\n            raise LenaValueError(\"Histogram is already computed scale to \"\n                                 \"%r but recompute to False!\" % (other,))\n        self._scale = other\n        self._update_context(context={'scale': other})\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self.scale is not None:\n            return self.scale\n\n        if self._scale is not None:\n            return self._scale\n\n        raise LenaValueError(\"scale not computed yet\")\n\n    else:\n        if recompute:\n            self._update_context({'scale': other})\n\n        self._scale = other\n        self.ranges = None\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is not None:\n            return self._scale\n\n        if self.fill is not None:\n            return self.fill\n\n        raise LenaValueError(\"scale() can't be computed without fill() and without bins() being computed\")\n\n    if recompute:\n        self._update_context(context=scale._context)\n\n    self._scale = 0\n\n    if self.edges is not None:\n        self._scale += (other - self.edges).sum()\n\n    if self.bins is not None:\n        self._scale += (other - self.bins).sum()\n\n    self._update_context(context=scale._context)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context=dict(scale=0))\n    elif self._scale is not None and other._scale is not None:\n        raise LenaValueError('Cannot rescale histograms after changing (filling) scale (either directly or computed).')\n\n    self._scale = sum([bin.scale * bin.count for bin in self.bins])\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context={'scale': other})\n\n    self._scale = max(min(self._scale, other), 0)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not supplied\n        if self._scale is None:\n            if self._update_context is not None:\n                self._update_context({'scale': 0.0})\n            self._scale = self._compute_scale()\n        return self._scale\n\n    # otherwise, set scale to the provided value\n    if recompute:\n        self._scale = other\n        self._update_context({'scale': other})\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaValueError(\"Histogram '{0}' already scaled to '{1}'\".format(self, other))\n        self._scale = np.sum(self.bins) / self.nbins\n        self._update_context(context=dict(edges=self.edges, bins=self.bins))\n\n    else:\n        return self._scale\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        try:\n            self._scale = 0.0 * self.bins * self.ranges[1]\n        except TypeError:\n            if self.bins is None:\n                raise LenaValueError('Histogram is not computed yet.')\n            else:\n                self._scale = 0.0 * self.bins\n    else:\n        if not isinstance(other, (int, float)):\n            raise LenaValueError('Histogram is not computed either directly '\n                                 'or scaled to zero.')\n        else:\n            if recompute:\n                self._scale = other\n            else:\n                self._update_context(context=copy.copy(self._scale))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is not None:\n            return self._scale\n\n        if recompute:\n            self._compute_scale()\n            return self._scale\n\n    else:\n        if not isinstance(other, Hist):\n            raise LenaValueError('other must be a Hist instance, not %r' % other.__class__.__name__)\n\n        self._update_context(context={'scale': other})\n\n        self._scale = other._scale\n        self._update_context(context={'edges': other.edges})\n\n        self._update_context(context={'bins': other.bins})\n        self._update_context(context={'ranges': other.ranges})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not computed yet\n        self._update_context(context=dict(scale=0))\n        return self\n\n    if recompute:\n        # recompute scale\n        self._update_context()\n        return self\n\n    # otherwise scale it\n    else:\n        # assume scale is correct\n        self._update_context()\n        scale = self._scale\n        if other is not None:\n            scale += other\n        self._update_context()\n        return scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is None:\n            if recompute:\n                self._scale = self._compute_scale()\n            else:\n                self._scale = 0\n    else:\n        if self._scale is not None and not recompute:\n            raise LenaValueError(\"Histogram is already computed scale to \"\n                                 \"%r but recompute to False!\" % (other,))\n        self._scale = other\n        self._update_context(context={'scale': other})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self.scale is not None:\n            return self.scale\n\n        if self._scale is not None:\n            return self._scale\n\n        raise LenaValueError(\"scale not computed yet\")\n\n    else:\n        if recompute:\n            self._update_context({'scale': other})\n\n        self._scale = other\n        self.ranges = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is not None:\n            return self._scale\n\n        if self.fill is not None:\n            return self.fill\n\n        raise LenaValueError(\"scale() can't be computed without fill() and without bins() being computed\")\n\n    if recompute:\n        self._update_context(context=scale._context)\n\n    self._scale = 0\n\n    if self.edges is not None:\n        self._scale += (other - self.edges).sum()\n\n    if self.bins is not None:\n        self._scale += (other - self.bins).sum()\n\n    self._update_context(context=scale._context)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context=dict(scale=0))\n    elif self._scale is not None and other._scale is not None:\n        raise LenaValueError('Cannot rescale histograms after changing (filling) scale (either directly or computed).')\n\n    self._scale = sum([bin.scale * bin.count for bin in self.bins])\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context={'scale': other})\n\n    self._scale = max(min(self._scale, other), 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not supplied\n        if self._scale is None:\n            if self._update_context is not None:\n                self._update_context({'scale': 0.0})\n            self._scale = self._compute_scale()\n        return self._scale\n\n    # otherwise, set scale to the provided value\n    if recompute:\n        self._scale = other\n        self._update_context({'scale': other})\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaValueError(\"Histogram '{0}' already scaled to '{1}'\".format(self, other))\n        self._scale = np.sum(self.bins) / self.nbins\n        self._update_context(context=dict(edges=self.edges, bins=self.bins))\n\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Scale must be a number.\")\n    if self._scale!= other:\n        self._scale = other\n        self._update_context(context={'scale': other})\n", "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, Lena):\n            self._scale = other._scale\n        else:\n            self._scale = other\n        return self\n\n    if self._scale is not None:\n        return self\n\n    if self.coords is not None:\n        raise LenaError(\"graph has no scale\")\n\n    raise LenaValueError(\"graph has no scale\")\n", "def scale(self, other=None):\n    if other is not None:\n        self._update_context(other)\n    self._scale = float(self.coords[-1])\n", "def scale(self, other=None):\n    if other is not None:\n        if self._scale is not None:\n            raise ValueError(\"graph already has scale\")\n        self._scale = other\n    return self._scale\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other.scale\n        self._update_context(other.context)\n    else:\n        self._scale = other\n        self._update_context(self.coords)\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n", "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale = other\n        else:\n            raise ValueError(\"Cannot scale graph with unknown coordinate system\")\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        self._parse_error_names(other.field_names)\n        if other.coords is None:\n            self._coord_names = other.field_names\n        else:\n            self._coord_names = other.coords\n        self._scale = other.scale\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if self.coords == other.coords:\n            return self._scale\n        else:\n            raise LenaValueError(\"graphs can only be rescaled if \"\n                                 \"the coordinates are the same\")\n    elif self._scale is not None:\n        return self._scale\n    else:\n        return self.coords[-1]\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, tuple):\n        if len(other) == self.dim:\n            self._scale = other\n        else:\n            raise ValueError(\n                'dimension mismatch between graph and scale coordinate '\n                '{0!r}'.format(other))\n    elif isinstance(other, int):\n        self._scale = (other, other)\n    else:\n        raise TypeError(\n            'graph scale coordinate {0!r} must be a number'.format(other))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Scale must be a number.\")\n    if self._scale!= other:\n        self._scale = other\n        self._update_context(context={'scale': other})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, Lena):\n            self._scale = other._scale\n        else:\n            self._scale = other\n        return self\n\n    if self._scale is not None:\n        return self\n\n    if self.coords is not None:\n        raise LenaError(\"graph has no scale\")\n\n    raise LenaValueError(\"graph has no scale\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._update_context(other)\n    self._scale = float(self.coords[-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self._scale is not None:\n            raise ValueError(\"graph already has scale\")\n        self._scale = other\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other.scale\n        self._update_context(other.context)\n    else:\n        self._scale = other\n        self._update_context(self.coords)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale = other\n        else:\n            raise ValueError(\"Cannot scale graph with unknown coordinate system\")\n    else:\n        return self._scale\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._parse_error_names(other.field_names)\n        if other.coords is None:\n            self._coord_names = other.field_names\n        else:\n            self._coord_names = other.coords\n        self._scale = other.scale\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self.coords == other.coords:\n            return self._scale\n        else:\n            raise LenaValueError(\"graphs can only be rescaled if \"\n                                 \"the coordinates are the same\")\n    elif self._scale is not None:\n        return self._scale\n    else:\n        return self.coords[-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, tuple):\n        if len(other) == self.dim:\n            self._scale = other\n        else:\n            raise ValueError(\n                'dimension mismatch between graph and scale coordinate '\n                '{0!r}'.format(other))\n    elif isinstance(other, int):\n        self._scale = (other, other)\n    else:\n        raise TypeError(\n            'graph scale coordinate {0!r} must be a number'.format(other))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, it would be \"right\" and\n    \"middle\".  If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* make_value\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: True\n    >>> scale = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> hist_to_graph(make_value, make_value, field_names=field_names, scale=scale)\n\n    The resulting graph will have the same graph as the histogram object.\n    \"\"\"\n   ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* field_names\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * scale\n    >>> make_value = lambda bin_: None\n    >>> field_names = (\"x\", \"y\")\n    >>> scale = None\n    >>> hist = histogram.hist_to_graph(hist, make_value=make_value, field_names=field_names, scale=scale)\n    >>> hist.graph\n                                                                             ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. Everything number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph. with\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n\n    bins = hist.get_bins()\n    x = bins[field_names[0]]\n    y_mean = his", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with remove context when creating a numeric\n    graph.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    *field_names* set field names of the graph.  This can be used\n    to create fields names in the histogram scale.  For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    Return the resulting graph. with\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, get_coordinate, field_name", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, we use the histogram\n    scale. If it is ``True``, it uses the histogram scale. If it is\n    ``False``, then it uses the graph's unit of measurement.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value*\n    above that would be ``x``, ``y_mean`` and ``y_mean_error``.\n\n    *scale* behaves the same as the histogram scale. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, then\n    it uses the unit of measurement.\n\n    Retur", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The field names\n    must be the same as the dimension of the result.  This can be\n    \"left\" (default), \"right\" and \"middle\".  This can be used to\n    create a graph with remove context when creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: None\n    >>> hist_to_graph(hist, make_value, field_names=(\"x\", \"y\"), scale=Non", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram scale.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it can be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``make_value`` must be ``True``\n    to create a numeric graph.\n\n    *field_names* set field names of the graph. Some numbers may be\n    sequences of numbers (with context) or make_value must be defined.\n\n    If it is ``True``, it use the histogram's scale (unknown by\n    default).\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n\n    \"\"\"\n    if scale", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a \n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* \n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.               \n\n    This can be used to create a graph with remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(50)\n    (50, 50)\n    >>> make_value(100)\n    (100, 50)\n\n    \"\"\"\n    if make_value is None:\n ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Would be set the graph's scale (unknown by default). If it is ``True``,\n    it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"left\", \"right\", \"middle\")\n    >>> make_value = lambda bin_: (\"x\", \"y\", \"z\")\n    >>> field_names = (\"x\", \"y\", \"z\")\n    >>> scale = lambda bin_: bin_.mean_error\n\n    >>> graph = hist_to_graph(hist, make_value, get_coordinate, field_names,\n   ...                   "], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, it would be \"right\" and\n    \"middle\".  If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* make_value\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: True\n    >>> scale = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> hist_to_graph(make_value, make_value, field_names=field_names, scale=scale)\n\n    The resulting graph will have the same graph as the histogram object.\n    \"\"\"\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* field_names\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * scale\n    >>> make_value = lambda bin_: None\n    >>> field_names = (\"x\", \"y\")\n    >>> scale = None\n    >>> hist = histogram.hist_to_graph(hist, make_value=make_value, field_names=field_names, scale=scale)\n    >>> hist.graph\n                                                                             ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. Everything number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph. with\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n\n    bins = hist.get_bins()\n    x = bins[field_names[0]]\n    y_mean = his", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with remove context when creating a numeric\n    graph.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    *field_names* set field names of the graph.  This can be used\n    to create fields names in the histogram scale.  For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    Return the resulting graph. with\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, get_coordinate, field_name", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, we use the histogram\n    scale. If it is ``True``, it uses the histogram scale. If it is\n    ``False``, then it uses the graph's unit of measurement.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value*\n    above that would be ``x``, ``y_mean`` and ``y_mean_error``.\n\n    *scale* behaves the same as the histogram scale. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, then\n    it uses the unit of measurement.\n\n    Retur", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The field names\n    must be the same as the dimension of the result.  This can be\n    \"left\" (default), \"right\" and \"middle\".  This can be used to\n    create a graph with remove context when creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: None\n    >>> hist_to_graph(hist, make_value, field_names=(\"x\", \"y\"), scale=Non", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram scale.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it can be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``make_value`` must be ``True``\n    to create a numeric graph.\n\n    *field_names* set field names of the graph. Some numbers may be\n    sequences of numbers (with context) or make_value must be defined.\n\n    If it is ``True``, it use the histogram's scale (unknown by\n    default).\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n\n    \"\"\"\n    if scale", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a \n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* \n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.               \n\n    This can be used to create a graph with remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(50)\n    (50, 50)\n    >>> make_value(100)\n    (100, 50)\n\n    \"\"\"\n    if make_value is None:\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Would be set the graph's scale (unknown by default). If it is ``True``,\n    it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"left\", \"right\", \"middle\")\n    >>> make_value = lambda bin_: (\"x\", \"y\", \"z\")\n    >>> field_names = (\"x\", \"y\", \"z\")\n    >>> scale = lambda bin_: bin_.mean_error\n\n    >>> graph = hist_to_graph(hist, make_value, get_coordinate, field_names,\n   ...                   ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, vtype)\n    verifyStructure(iface, candidate)\n    if vtype is not None:\n        verifyType(iface, vtype)\n    if not tentative:\n        verifyConstructionList(iface, candidate)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        verifyObject(iface, candidate, tentative=tentative)\n        return False\n\n    if not issubclass(vtype, InterfaceClass):\n        return False\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if not vtype:\n        verifyObject(candidate, None, tentative)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return _verify_element(iface, name=candidate, desc=u('Candidate is not a container'), candidate=candidate, vtype=vtype)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        verifyClass(iface, candidate)\n        verifyObject(iface, candidate, vtype)\n    if tentative:\n        verifyObject(iface, candidate, None)\n        return True\n    else:\n        return _verify_element(iface, name=candidate.__name__,\n                               desc=candidate.__doc__, candidate=candidate)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate)\n    verifyType(candidate, iface, vtype)\n    if vtype is None:\n        vtype = candidate.vtype\n    if tentative:\n        if not hasattr(candidate, '__call__'):\n            raise Invalid(_MSG_TOO_MANY)\n        return True\n    if hasattr(candidate, '__call__') and not callable(candidate):\n        raise Invalid(_MSG_TOO_MANY)\n    verifyClass(iface, candidate, vtype)\n    verifyObject(iface, candidate, tentative)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    if not vtype:\n        return True\n    if not hasattr(candidate, '__call__'):\n        raise Invalid(\n            \"Candidate %s must be a callable object: %s\" % (\n                candidate, repr(candidate)))\n    if not vtype == candidate.__class__:\n        raise Invalid(\n            \"Candidate %s must be a subclass of %s: %s\" %\n            (candidate, vtype, repr(candidate)))\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Verify the candidate claims that it *might* provide the interface\n    _verify_element(iface, 'providedBy', candidate, vtype)\n\n    # Check the candidate defines all the required methods\n    _verify_required_methods(iface, candidate, vtype)\n\n    # Check the candidate defines all the required attributes\n    _verify_required_attributes(iface, candidate, vtype)\n\n    # Make sure the candidate's verify method has the correct signature\n    return _verify_element(iface, candidate, tentative=tentative, vtype=vtype)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not isinstance(candidate, vtype):\n        raise Invalid(\n            u'Candidate has an invalid type: %s' % (\n                candidate.__class__.__name__,))\n\n    if not tentative:\n        if hasattr(candidate, '__call__'):\n            verifyClass(iface, candidate)\n\n        if not hasattr(candidate, '__get__'):\n            verifyObject(iface, candidate)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not isclass(candidate) or not issubclass(candidate, IInterface):\n        raise zope.interface.Invalid(\n            _MSG_TOO_MANY.format('IInterface', candidate))\n    return _verify_element(iface, name(candidate), desc=candidate,\n                            candidate=candidate, vtype=vtype)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, vtype)\n    verifyStructure(iface, candidate)\n    if vtype is not None:\n        verifyType(iface, vtype)\n    if not tentative:\n        verifyConstructionList(iface, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        verifyObject(iface, candidate, tentative=tentative)\n        return False\n\n    if not issubclass(vtype, InterfaceClass):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if not vtype:\n        verifyObject(candidate, None, tentative)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return _verify_element(iface, name=candidate, desc=u('Candidate is not a container'), candidate=candidate, vtype=vtype)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        verifyClass(iface, candidate)\n        verifyObject(iface, candidate, vtype)\n    if tentative:\n        verifyObject(iface, candidate, None)\n        return True\n    else:\n        return _verify_element(iface, name=candidate.__name__,\n                               desc=candidate.__doc__, candidate=candidate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate)\n    verifyType(candidate, iface, vtype)\n    if vtype is None:\n        vtype = candidate.vtype\n    if tentative:\n        if not hasattr(candidate, '__call__'):\n            raise Invalid(_MSG_TOO_MANY)\n        return True\n    if hasattr(candidate, '__call__') and not callable(candidate):\n        raise Invalid(_MSG_TOO_MANY)\n    verifyClass(iface, candidate, vtype)\n    verifyObject(iface, candidate, tentative)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    if not vtype:\n        return True\n    if not hasattr(candidate, '__call__'):\n        raise Invalid(\n            \"Candidate %s must be a callable object: %s\" % (\n                candidate, repr(candidate)))\n    if not vtype == candidate.__class__:\n        raise Invalid(\n            \"Candidate %s must be a subclass of %s: %s\" %\n            (candidate, vtype, repr(candidate)))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Verify the candidate claims that it *might* provide the interface\n    _verify_element(iface, 'providedBy', candidate, vtype)\n\n    # Check the candidate defines all the required methods\n    _verify_required_methods(iface, candidate, vtype)\n\n    # Check the candidate defines all the required attributes\n    _verify_required_attributes(iface, candidate, vtype)\n\n    # Make sure the candidate's verify method has the correct signature\n    return _verify_element(iface, candidate, tentative=tentative, vtype=vtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not isinstance(candidate, vtype):\n        raise Invalid(\n            u'Candidate has an invalid type: %s' % (\n                candidate.__class__.__name__,))\n\n    if not tentative:\n        if hasattr(candidate, '__call__'):\n            verifyClass(iface, candidate)\n\n        if not hasattr(candidate, '__get__'):\n            verifyObject(iface, candidate)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not isclass(candidate) or not issubclass(candidate, IInterface):\n        raise zope.interface.Invalid(\n            _MSG_TOO_MANY.format('IInterface', candidate))\n    return _verify_element(iface, name(candidate), desc=candidate,\n                            candidate=candidate, vtype=vtype)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, IObject)\n\n    # Because of the way igor.Python verify classes are defined,\n    # verify all methods are present in the candidate object.\n    if not iface.providedBy(candidate):\n        return _verify(iface, candidate, None, False)\n\n    # Because of the way igor.Python verify classes are defined,\n    # verify the object has a __dict__ attribute.\n    if not hasattr(candidate, '__dict__'):\n        return _verify(iface, candidate, None, False)\n\n    # The object is correctly provided, so let's verify that it\n    # has the correct interface.\n    if not verifyClass(iface, candidate.__dict__, None, IInterface):\n        return _verify(iface, candidate, None, False)\n\n    # The object is correctly provided, so let's verify that it\n    # has the correct interface.\n    if not verifyObject(iface, candidate, None, None):\n        return _verify(iface", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n    return _verify(iface, candidate, tentative=tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(candidate, iface, tentative)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if tentative:\n        return True\n    return _verify(iface, candidate, None, None)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not tentative:\n        verifyProvides(candidate, iface)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    verifyMethods(iface, candidate, tentative)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if isinstance(candidate, Candidate):\n        verifyClass(iface, candidate, tentative)\n    else:\n        verifyObject(iface, candidate, False)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, 'candidate', Candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        raise Invalid(\n            u'Candidate is not a provided by %s' % repr(iface),\n            candidate,\n            'provided by',\n            repr(iface)\n        )\n    if tentative:\n        verifyType(candidate, 'candidate', Candidate)\n        verifyObject(iface, candidate, False)\n        verifyObject(iface, candidate, True)\n        return True\n    return _verify(iface, candidate, tentative, vtype=False)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if not tentative:\n        verifyObject(iface, candidate, False)\n        verifyObject(iface, candidate, True)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, IObject)\n\n    # Because of the way igor.Python verify classes are defined,\n    # verify all methods are present in the candidate object.\n    if not iface.providedBy(candidate):\n        return _verify(iface, candidate, None, False)\n\n    # Because of the way igor.Python verify classes are defined,\n    # verify the object has a __dict__ attribute.\n    if not hasattr(candidate, '__dict__'):\n        return _verify(iface, candidate, None, False)\n\n    # The object is correctly provided, so let's verify that it\n    # has the correct interface.\n    if not verifyClass(iface, candidate.__dict__, None, IInterface):\n        return _verify(iface, candidate, None, False)\n\n    # The object is correctly provided, so let's verify that it\n    # has the correct interface.\n    if not verifyObject(iface, candidate, None, None):\n        return _verify(iface", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n    return _verify(iface, candidate, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(candidate, iface, tentative)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if tentative:\n        return True\n    return _verify(iface, candidate, None, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not tentative:\n        verifyProvides(candidate, iface)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    verifyMethods(iface, candidate, tentative)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if isinstance(candidate, Candidate):\n        verifyClass(iface, candidate, tentative)\n    else:\n        verifyObject(iface, candidate, False)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, 'candidate', Candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        raise Invalid(\n            u'Candidate is not a provided by %s' % repr(iface),\n            candidate,\n            'provided by',\n            repr(iface)\n        )\n    if tentative:\n        verifyType(candidate, 'candidate', Candidate)\n        verifyObject(iface, candidate, False)\n        verifyObject(iface, candidate, True)\n        return True\n    return _verify(iface, candidate, tentative, vtype=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if not tentative:\n        verifyObject(iface, candidate, False)\n        verifyObject(iface, candidate, True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, not tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyTypes(\n        iface, candidate, tentative, verifyObject,\n        verifyMethodType=_verify_method_types,\n        verifyTypes=_verify_types, verifyMethodArgs=_verify_method_args)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n    verifyMethodType(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n    verifyType(candidate, zope.schema.Object, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, not tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyTypes(\n        iface, candidate, tentative, verifyObject,\n        verifyMethodType=_verify_method_types,\n        verifyTypes=_verify_types, verifyMethodArgs=_verify_method_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n    verifyMethodType(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n    verifyType(candidate, zope.schema.Object, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type):\n            return base, explicit_mc\n\n        # Adopted from __init__.py in Python 3.5\n        if hasattr(base, \"__abstractmethods__\"):\n            for meth in base.__abstractmethods__:\n                if meth in explicit_mc:\n                    return base, explicit_mc\n\n        if issubclass(base, type):\n            return base, explicit_mc + [meth]\n\n    return bases[0], explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = _getExplicitMc()\n    mc = 0\n    for base in bases:\n        if issubclass(base, type):\n            mc += 1\n        elif issubclass(base, types.ModuleType):\n            mc += 1\n        elif issubclass(base, type) and base is not object:\n            mc += 1\n        elif issubclass(base, types.FrameType):\n            mc += 1\n        elif mc > explicit_mc:\n            raise TypeError(\n                \"Too many subclasses of metaclass '%s'\" % base.__name__\n            )\n    return mc + 1\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if issubclass(base, type):\n            continue\n        metaclass = getFrameInfo(base)[1]\n        if metaclass not in explicit_mc:\n            explicit_mc[metaclass] = 0\n        explicit_mc[metaclass] += 1\n    if metaclass not in explicit_mc:\n        raise ValueError(\"unknown metaclass\")\n    return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            yield base\n            explicit_mc.append(base)\n            yield determineMetaclass(base.__bases__, explicit_mc)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1))\n    module_name = explicit_mc[0]\n    class_name = explicit_mc[1]\n    module = __import__(module_name, fromlist=[class_name])\n    return module.__dict__.get(class_name, type)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frames = [frame for frame in inspect.getouterframes(inspect.currentframe())\n              if isFrame(frame) and frame[3] not in explicit_mc]\n\n    for frame in frames:\n        if frame[3] in bases:\n            return frame[3], True\n\n    for base in bases:\n        metaclass, is_explicit = determineMetaclass(base.__bases__, explicit_mc)\n        if metaclass is not None:\n            return metaclass, is_explicit\n\n    return None, False\n", "def determineMetaclass(bases, explicit_mc=None):\n    frame = sys._getframe(1)\n    if explicit_mc is None:\n        explicit_mc = {}\n    explicit_mc.setdefault(frame.f_code.co_name, frame)\n    meta = sys.modules[__name__]\n    while True:\n        try:\n            meta = meta.__bases__\n            break\n        except AttributeError:\n            frame = frame.f_back\n    for base in bases:\n        if isClassAdvisor(base):\n            meta = meta.__bases__[0]\n            break\n        if isFrameAdvisor(base):\n            meta = meta.__bases__[1]\n            break\n        if base in explicit_mc:\n            meta = meta.__bases__[0]\n            break\n        if not hasattr(base, '__dict__'):\n            continue\n        if base in explicit_mc:\n        ", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    # determine bases\n    bases = [b for b in bases if not isinstance(b, type)]\n    # find actual metaclass\n    for b in bases:\n        if issubclass(b, type) and b not in explicit_mc:\n            return b\n    # find metaclass\n    for b in bases:\n        if issubclass(b, type) and issubclass(b, type) and b in explicit_mc:\n            return b\n    # should not be possible, return the original class\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    mc = getFrameInfo(sys._getframe(1))\n    if explicit_mc is not None:\n        assert mc == explicit_mc\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base, True\n        elif issubclass(base, type):\n            class_dict = getFrameInfo(base)\n            if class_dict.get('__metaclass__', None):\n                return base, class_dict['__metaclass__']\n            else:\n                explicit_mc.append(base)\n    return explicit_mc[0], False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type):\n            return base, explicit_mc\n\n        # Adopted from __init__.py in Python 3.5\n        if hasattr(base, \"__abstractmethods__\"):\n            for meth in base.__abstractmethods__:\n                if meth in explicit_mc:\n                    return base, explicit_mc\n\n        if issubclass(base, type):\n            return base, explicit_mc + [meth]\n\n    return bases[0], explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = _getExplicitMc()\n    mc = 0\n    for base in bases:\n        if issubclass(base, type):\n            mc += 1\n        elif issubclass(base, types.ModuleType):\n            mc += 1\n        elif issubclass(base, type) and base is not object:\n            mc += 1\n        elif issubclass(base, types.FrameType):\n            mc += 1\n        elif mc > explicit_mc:\n            raise TypeError(\n                \"Too many subclasses of metaclass '%s'\" % base.__name__\n            )\n    return mc + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if issubclass(base, type):\n            continue\n        metaclass = getFrameInfo(base)[1]\n        if metaclass not in explicit_mc:\n            explicit_mc[metaclass] = 0\n        explicit_mc[metaclass] += 1\n    if metaclass not in explicit_mc:\n        raise ValueError(\"unknown metaclass\")\n    return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            yield base\n            explicit_mc.append(base)\n            yield determineMetaclass(base.__bases__, explicit_mc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1))\n    module_name = explicit_mc[0]\n    class_name = explicit_mc[1]\n    module = __import__(module_name, fromlist=[class_name])\n    return module.__dict__.get(class_name, type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frames = [frame for frame in inspect.getouterframes(inspect.currentframe())\n              if isFrame(frame) and frame[3] not in explicit_mc]\n\n    for frame in frames:\n        if frame[3] in bases:\n            return frame[3], True\n\n    for base in bases:\n        metaclass, is_explicit = determineMetaclass(base.__bases__, explicit_mc)\n        if metaclass is not None:\n            return metaclass, is_explicit\n\n    return None, False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    frame = sys._getframe(1)\n    if explicit_mc is None:\n        explicit_mc = {}\n    explicit_mc.setdefault(frame.f_code.co_name, frame)\n    meta = sys.modules[__name__]\n    while True:\n        try:\n            meta = meta.__bases__\n            break\n        except AttributeError:\n            frame = frame.f_back\n    for base in bases:\n        if isClassAdvisor(base):\n            meta = meta.__bases__[0]\n            break\n        if isFrameAdvisor(base):\n            meta = meta.__bases__[1]\n            break\n        if base in explicit_mc:\n            meta = meta.__bases__[0]\n            break\n        if not hasattr(base, '__dict__'):\n            continue\n        if base in explicit_mc:\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    # determine bases\n    bases = [b for b in bases if not isinstance(b, type)]\n    # find actual metaclass\n    for b in bases:\n        if issubclass(b, type) and b not in explicit_mc:\n            return b\n    # find metaclass\n    for b in bases:\n        if issubclass(b, type) and issubclass(b, type) and b in explicit_mc:\n            return b\n    # should not be possible, return the original class\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    mc = getFrameInfo(sys._getframe(1))\n    if explicit_mc is not None:\n        assert mc == explicit_mc\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base, True\n        elif issubclass(base, type):\n            class_dict = getFrameInfo(base)\n            if class_dict.get('__metaclass__', None):\n                return base, class_dict['__metaclass__']\n            else:\n                explicit_mc.append(base)\n    return explicit_mc[0], False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[-1][1]\n    return dict.pop(self, key.lower(), default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    self.__delitem__(key)\n    return dict.pop(self, key)\n", "def pop(self, key, default=__marker):\n    if key in self:\n        super(MarkerDict, self).pop(key)\n        self._remove_index(key)\n    elif default is self.__marker:\n        if len(self) == 0:\n            raise KeyError('pop from an empty dict')\n        return self._pop_with_default(key)\n    else:\n        if default is self.__marker:\n            raise KeyError('pop with a default value')\n        return default\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[-1][1]\n    return dict.pop(self, key.lower(), default)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[-1][1]\n    return dict.pop(self, key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    self.__delitem__(key)\n    return dict.pop(self, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        super(MarkerDict, self).pop(key)\n        self._remove_index(key)\n    elif default is self.__marker:\n        if len(self) == 0:\n            raise KeyError('pop from an empty dict')\n        return self._pop_with_default(key)\n    else:\n        if default is self.__marker:\n            raise KeyError('pop with a default value')\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[-1][1]\n    return dict.pop(self, key.lower(), default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    key = next(iter(self))\n    return self.pop(key)\n", "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise ValueError('Cannot popitem from an empty cache.')\n", "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    try:\n        key = self.__counter.pop()\n        return (key, self.pop(key))\n    except IndexError:\n        raise KeyError('Cannot pop from empty cache')\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    value = dict.popitem(self)\n    self.__counter -= 1\n    return value\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('Popping from empty cache')\n    value = self.pop(key)\n    return (key, value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    key = next(iter(self))\n    return self.pop(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise ValueError('Cannot popitem from an empty cache.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__counter.pop()\n        return (key, self.pop(key))\n    except IndexError:\n        raise KeyError('Cannot pop from empty cache')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    value = dict.popitem(self)\n    self.__counter -= 1\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('Popping from empty cache')\n    value = self.pop(key)\n    return (key, value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self.pop(key)\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        return (key, value)\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self.pop(key)\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.regex\n    out_regex = self._out_obj.regex\n    if in_regex is None and out_regex is None:\n        return None\n    elif in_regex is not None:\n        return re.compile(in_regex, re.IGNORECASE | self._escape_char)\n    elif out_regex is not None:\n        return re.compile(out_regex, re.IGNORECASE | self._escape_char)\n    else:\n        raise ValueError(\"Neither `in_` nor `out_` regex specified for the parameter.\")\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern if self._in_obj else self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.regex\n    out_regex = self._out_obj.regex\n    if in_regex is None and out_regex is None:\n        return None\n    elif in_regex is not None:\n        return re.compile(in_regex, re.IGNORECASE | self._escape_char)\n    elif out_regex is not None:\n        return re.compile(out_regex, re.IGNORECASE | self._escape_char)\n    else:\n        raise ValueError(\"Neither `in_` nor `out_` regex specified for the parameter.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern if self._in_obj else self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char, self._expand_tuples)\n", "def _create_converter(self) -> _converting._Converter:\n    return self._converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char, self._expand_tuples)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return self._converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if self._fold_status(dt_utc=dt, dt_wall=None) == self.FROTY_FRACTION:\n        return self._fromutc(dt)\n    else:\n        return dt\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fromutc(dt)\n    return dt\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n", "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    if self._fold_status(dt, dt) == self.FROZEN:\n        return dt\n\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fromutc(dt)\n    return dt\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt\n    return self._fromutc(dt)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if self._fold_status(dt_utc=dt, dt_wall=None) == self.FROTY_FRACTION:\n        return self._fromutc(dt)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fromutc(dt)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self._fold_status(dt, dt) == self.FROZEN:\n        return dt\n\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fromutc(dt)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        # Convert to UTC\n        dt = dt.replace(tzinfo=tzinfo)\n\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.localize(dt)\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.utcoffset(dt)\n    raise TypeError(\"%r is not a datetime or datetime64 type\" % dt)\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt.astimezone(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        # Convert to UTC\n        dt = dt.replace(tzinfo=tzinfo)\n\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.localize(dt)\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.utcoffset(dt)\n    raise TypeError(\"%r is not a datetime or datetime64 type\" % dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt.astimezone(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: str, after: str) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n    self._cutter = (before, after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ''.join([before, self._cutter, after])\n", "def set_cut_chars(self, before: str, after: str, *, with_import: bool = False) -> None:\n    if before == \".\" and after == \".\":\n        # A single dot will break the import.\n        # Set the default cut characters to the import characters.\n        self.set_cut_chars(before, self.DEFAULT_CUT_AFTER)\n        return\n\n    if before == \".\" and after!= \".\":\n        # The file will be split into two parts.\n        # The first part will contain the path to the main file.\n        # The second part will contain the path to the import file.\n        self.set_cut_chars(before, self._cutter.join(after))\n        self.set_cut_chars(self._cutter.join(after), before)\n    else:\n        # The file will be split into two parts.\n        self.set_cut_chars(before, self._cutter.join(after))\n        self.set_cut_chars(self._cutter.join(before), after)\n\n    if with_import:\n        # Add the import separator to th", "def set_cut_chars(self, before: str, after: str):\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str, *, import_as: str = None):\n    if import_as is None:\n        import_as = 'abc'\n    for char in self._cut_chars:\n        before = before.replace(char, import_as)\n        after = after.replace(char, import_as)\n    self._cutter = before, after\n", "def set_cut_chars(self, before: str, after: str, *, import_args: bool = False) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n    if import_args:\n        self._cutter.import_args = True\n    self._cutter.before = before\n    self._cutter.after = after\n", "def set_cut_chars(self, before: str, after: str, *, import_args: bool = False) -> None:\n    if import_args:\n        before, after = import_args_for_cut_chars(before, after)\n    self._cutter = delimiters.split(before, after, argparse.SUPPRESS)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n\n    if before.search(self.parts['file']) is None:\n        raise FileNotFoundError(f'File \"{self.parts[\"file\"]}\" not found.')\n    if after.search(self.parts['file']) is None:\n        raise FileNotFoundError(f'File \"{self.parts[\"file\"]}\" not found.')\n    self.parts['cut_before'] = before\n    self.parts['cut_after'] = after\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n    self._cutter = (before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ''.join([before, self._cutter, after])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str, *, with_import: bool = False) -> None:\n    if before == \".\" and after == \".\":\n        # A single dot will break the import.\n        # Set the default cut characters to the import characters.\n        self.set_cut_chars(before, self.DEFAULT_CUT_AFTER)\n        return\n\n    if before == \".\" and after!= \".\":\n        # The file will be split into two parts.\n        # The first part will contain the path to the main file.\n        # The second part will contain the path to the import file.\n        self.set_cut_chars(before, self._cutter.join(after))\n        self.set_cut_chars(self._cutter.join(after), before)\n    else:\n        # The file will be split into two parts.\n        self.set_cut_chars(before, self._cutter.join(after))\n        self.set_cut_chars(self._cutter.join(before), after)\n\n    if with_import:\n        # Add the import separator to th", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str, *, import_as: str = None):\n    if import_as is None:\n        import_as = 'abc'\n    for char in self._cut_chars:\n        before = before.replace(char, import_as)\n        after = after.replace(char, import_as)\n    self._cutter = before, after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str, *, import_args: bool = False) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n    if import_args:\n        self._cutter.import_args = True\n    self._cutter.before = before\n    self._cutter.after = after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str, *, import_args: bool = False) -> None:\n    if import_args:\n        before, after = import_args_for_cut_chars(before, after)\n    self._cutter = delimiters.split(before, after, argparse.SUPPRESS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    before = re.compile(before)\n    after = re.compile(after)\n\n    if before.search(self.parts['file']) is None:\n        raise FileNotFoundError(f'File \"{self.parts[\"file\"]}\" not found.')\n    if after.search(self.parts['file']) is None:\n        raise FileNotFoundError(f'File \"{self.parts[\"file\"]}\" not found.')\n    self.parts['cut_before'] = before\n    self.parts['cut_after'] = after\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: Request) -> bool:\n    if request.type == \"message\":\n        if request.payload.public_id is not None:\n            return True\n        if request.payload.legacy_payload:\n            return True\n        if request.payload.mime_type is not None:\n            return True\n        if request.payload.signature is not None:\n            return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.is_legacy_request and request.message.is_request\n", "def identify_request(request: Request) -> bool:\n    public_message = request.get('publicMessage')\n    if public_message is not None:\n        return True\n\n    private_message = request.get('privateMessage')\n    if private_message is not None:\n        return True\n\n    return identify_id(request.get('payload'))\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\" and request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/vnd.diaspora.v1.\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/x-www-form-urlencoded\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/vnd.diaspora.legacy\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.get_type() == \"message\"\n        and \"private\" in request.get_data()\n        and \"legacy\" not in request.get_data()\n    )\n", "def identify_request(request: Request) -> bool:\n    if not request.is_legacy_request:\n        return True\n\n    public_message = request.message.get('public')\n    return public_message is not None and'm.text' in public_message\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"GET\" and request.path == \"/jsonrpc\":\n        return True\n    elif request.method == \"POST\" and request.path.startswith(\"/websocket.connect\"):\n        return True\n    elif request.method == \"POST\" and request.path.startswith(\"/websocket.do\"):\n        return True\n    elif request.path.startswith(\"/websocket.send\") and request.path.endswith(\n        \"/jsonrpc\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.send\") and request.path.endswith(\n        \"/websocket.do\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.do\") and request.path.endswith(\n        \"/websocket.send.legacy\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.do.legacy\") and request.path.endswith(\n        \"/websocket.send.legacy\"\n    ):\n ", "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_request:\n        return identify_request(request.message.request)\n    return identify_payload(request.payload)\n", "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_payload():\n        return True\n\n    return identify_id(request.message.get(\"recipient\"))\n", "def identify_request(request: Request) -> bool:\n    return request.is_legacy_request and request.message.is_public\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.type == \"message\":\n        if request.payload.public_id is not None:\n            return True\n        if request.payload.legacy_payload:\n            return True\n        if request.payload.mime_type is not None:\n            return True\n        if request.payload.signature is not None:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.is_legacy_request and request.message.is_request\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    public_message = request.get('publicMessage')\n    if public_message is not None:\n        return True\n\n    private_message = request.get('privateMessage')\n    if private_message is not None:\n        return True\n\n    return identify_id(request.get('payload'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\" and request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/vnd.diaspora.v1.\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/x-www-form-urlencoded\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/vnd.diaspora.legacy\"):\n        return True\n    if request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.get_type() == \"message\"\n        and \"private\" in request.get_data()\n        and \"legacy\" not in request.get_data()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if not request.is_legacy_request:\n        return True\n\n    public_message = request.message.get('public')\n    return public_message is not None and'm.text' in public_message\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"GET\" and request.path == \"/jsonrpc\":\n        return True\n    elif request.method == \"POST\" and request.path.startswith(\"/websocket.connect\"):\n        return True\n    elif request.method == \"POST\" and request.path.startswith(\"/websocket.do\"):\n        return True\n    elif request.path.startswith(\"/websocket.send\") and request.path.endswith(\n        \"/jsonrpc\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.send\") and request.path.endswith(\n        \"/websocket.do\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.do\") and request.path.endswith(\n        \"/websocket.send.legacy\"\n    ):\n        return True\n    elif request.path.startswith(\"/websocket.do.legacy\") and request.path.endswith(\n        \"/websocket.send.legacy\"\n    ):\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_request:\n        return identify_request(request.message.request)\n    return identify_payload(request.payload)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_payload():\n        return True\n\n    return identify_id(request.message.get(\"recipient\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.is_legacy_request and request.message.is_public\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    if isinstance(request, ImportRequest):\n        return False\n\n    return True\n", "def identify_request(request: Request) -> bool:\n    if not isinstance(request, Request):\n        return False\n\n    if request.method!= \"POST\":\n        return False\n\n    request_body_as_json = request.get_json()\n    if not request_body_as_json:\n        return False\n\n    request_json_type = json_type.from_dict(request_body_as_json)\n    if not request_json_type:\n        return False\n\n    if request_json_type!= \"matrix\":\n        return False\n\n    return True\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request):\n        return True\n\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.POST\n", "def identify_request(request: Request) -> bool:\n    return isinstance(request, Request) and hasattr(request, \"json\")\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # if we get a dictionary request, we need to look at the keys and values\n        # to determine the request type\n        if isinstance(request, dict):\n            return all(key in request for key in [\"method\", \"path\", \"json\"])\n        # otherwise, we have a string request\n        return isinstance(request, str)\n    except NameError:\n        # we can't determine if this is a dictionary request\n        return False\n", "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\")\n        and \"jsonrpc\" in request.headers\n    )\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'Matrix'\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n    if isinstance(request, FederatedRequest):\n        if request.message == \"import\":\n            return True\n        if request.message == \"federatedImport\":\n            return True\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    return (\n        request.get(\"method\") == \"Matrix.addEvent\"\n        and request.get(\"params\") is not None\n        and \"jsonrpc\" in request.get(\"params\")\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    if isinstance(request, ImportRequest):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if not isinstance(request, Request):\n        return False\n\n    if request.method!= \"POST\":\n        return False\n\n    request_body_as_json = request.get_json()\n    if not request_body_as_json:\n        return False\n\n    request_json_type = json_type.from_dict(request_body_as_json)\n    if not request_json_type:\n        return False\n\n    if request_json_type!= \"matrix\":\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request):\n        return True\n\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.POST\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return isinstance(request, Request) and hasattr(request, \"json\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # if we get a dictionary request, we need to look at the keys and values\n        # to determine the request type\n        if isinstance(request, dict):\n            return all(key in request for key in [\"method\", \"path\", \"json\"])\n        # otherwise, we have a string request\n        return isinstance(request, str)\n    except NameError:\n        # we can't determine if this is a dictionary request\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\")\n        and \"jsonrpc\" in request.headers\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'Matrix'\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n    if isinstance(request, FederatedRequest):\n        if request.message == \"import\":\n            return True\n        if request.message == \"federatedImport\":\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    return (\n        request.get(\"method\") == \"Matrix.addEvent\"\n        and request.get(\"params\") is not None\n        and \"jsonrpc\" in request.get(\"params\")\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.isoformat() if dt else None\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.isoformat() if dt else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        chain.from_iterable(\n            (\n                (replacer or lambda x: x),\n                (lambda x: x.replace('<!--[]', '').replace('<![]', '')),\n            )(re.findall(r'<(?:(?:\\w+:)?(?:\\w+:)?|(?:\\w+:)?(?:\\w+:)?)(?:[\\w.,!?\\(\\)]|\"([\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:\\((?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:\\([\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*)?)(?:\\s*(?:\\((?:\\((?:[^\\(\\)\\[\\]\\{\\}\\[\\])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*)?)?))?))?\\s*>(?:(?:[^<]+)<(?:[\\w^<]+)<(?", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = encode_if_text(text)\n    if replacer is not None:\n        text = replacer(text)\n    found = set()\n    for match in re.finditer(r\"<[^>]+>\", text):\n        found.add(match.group(0))\n    return found, text\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    def replacer_wrapper(match):\n        # replace the word with the tag word\n        word = match.group(1)\n        if word.startswith(\"<\") and word.endswith(\">\"):\n            return match.group(0).replace(word[1:-1], replacer())\n        return match.group(0)\n\n    def encode_if_text(text: str):\n        if isinstance(text, bytes):\n            return text.decode(\"utf-8\")\n        return text\n\n    def test_tag(tag: str):\n        return (\n            tag.startswith(\"<\")\n            and tag.endswith(\">\")\n            and encode_if_text(tag)\n            and not replacer_wrapper(tag)\n        )\n\n    def process_text_links(text: str):\n        return urllib.parse.quote_plus(text)\n\n    def decode_if_bytes(text: str):\n        return text.encode(\"utf-8\") if isinstance(text, bytes) else text\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    return set(\n        replacer(tag)\n        for tag in bleach.clean(text, strip=True, tags=ALLOWED_TAGS).split()\n    )\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replacer_with_tag(match):\n        tag = match.group(1)\n        return replacer(match.group(0))\n    def test_tag(tag):\n        return (not tag.startswith(\"__\") and\n                not any([c in tag for c in ILLEGAL_TAG_CHARS]) and\n                tag!= \"__tag__\")\n    return set(find_tags(text, replacer_with_tag))\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        replacer(tag) if replacer else tag for tag in re.findall(TAGS_REGEX, text)\n    )\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    # TODO: Replace any tag with a random word instead of the whole text\n    return find_tags_no_split(text, replacer)\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(chain.from_iterable(\n        (replacer if replacer else _replace_tag_word, tag)\n        for tag in bleach.clean(text, **BLEACH_TAGS)\n    ))\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if replacer is None:\n        def replacer(match: Match[str]) -> str:\n            return match.group(1)\n    return set(\n        tag for tag in find_all_code_tags(text)\n        if replacer(match)\n    )\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    return (find_tags_no_handle(text, replacer), encode_if_text(text))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        chain.from_iterable(\n            (\n                (replacer or lambda x: x),\n                (lambda x: x.replace('<!--[]', '').replace('<![]', '')),\n            )(re.findall(r'<(?:(?:\\w+:)?(?:\\w+:)?|(?:\\w+:)?(?:\\w+:)?)(?:[\\w.,!?\\(\\)]|\"([\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:\\((?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:\\([\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*)?)(?:\\s*(?:\\((?:\\((?:[^\\(\\)\\[\\]\\{\\}\\[\\])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*(?:[\\w^\\-\\(\\)\\[\\]\\{\\}\\[\\]])*)?)?))?))?\\s*>(?:(?:[^<]+)<(?:[\\w^<]+)<(?", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = encode_if_text(text)\n    if replacer is not None:\n        text = replacer(text)\n    found = set()\n    for match in re.finditer(r\"<[^>]+>\", text):\n        found.add(match.group(0))\n    return found, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    def replacer_wrapper(match):\n        # replace the word with the tag word\n        word = match.group(1)\n        if word.startswith(\"<\") and word.endswith(\">\"):\n            return match.group(0).replace(word[1:-1], replacer())\n        return match.group(0)\n\n    def encode_if_text(text: str):\n        if isinstance(text, bytes):\n            return text.decode(\"utf-8\")\n        return text\n\n    def test_tag(tag: str):\n        return (\n            tag.startswith(\"<\")\n            and tag.endswith(\">\")\n            and encode_if_text(tag)\n            and not replacer_wrapper(tag)\n        )\n\n    def process_text_links(text: str):\n        return urllib.parse.quote_plus(text)\n\n    def decode_if_bytes(text: str):\n        return text.encode(\"utf-8\") if isinstance(text, bytes) else text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    return set(\n        replacer(tag)\n        for tag in bleach.clean(text, strip=True, tags=ALLOWED_TAGS).split()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replacer_with_tag(match):\n        tag = match.group(1)\n        return replacer(match.group(0))\n    def test_tag(tag):\n        return (not tag.startswith(\"__\") and\n                not any([c in tag for c in ILLEGAL_TAG_CHARS]) and\n                tag!= \"__tag__\")\n    return set(find_tags(text, replacer_with_tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        replacer(tag) if replacer else tag for tag in re.findall(TAGS_REGEX, text)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    # TODO: Replace any tag with a random word instead of the whole text\n    return find_tags_no_split(text, replacer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(chain.from_iterable(\n        (replacer if replacer else _replace_tag_word, tag)\n        for tag in bleach.clean(text, **BLEACH_TAGS)\n    ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if replacer is None:\n        def replacer(match: Match[str]) -> str:\n            return match.group(1)\n    return set(\n        tag for tag in find_all_code_tags(text)\n        if replacer(match)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    return (find_tags_no_handle(text, replacer), encode_if_text(text))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n\n    linkified = bleach.linkify(text, **kwargs)\n\n    return linkified\n", "def process_text_links(text):\n    text = re.sub(r'(?<=\\[\\[)(.*?)\\]\\]', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'(?<=\\]\\])(.*?)\\]', r'<a href=\"\\1\">\\1</a>', text)\n    text = bleach.linkify(text, output_format='html', linkify=True)\n    return text\n", "def process_text_links(text):\n    return linkify(text, strip_href=True, strip_img=True)\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        proto_tag=URL_PROTO_TAG,\n        linkify=linkify_text,\n    )\n    return text\n", "def process_text_links(text):\n    text = linkify(text, smart_amp=False, strip_comments=True, strip_style=True)\n    return text\n", "def process_text_links(text):\n    text = linkify(text)\n    text = restructured_text(text)\n    text = restructured_text_sanitize(text)\n    text = restructured_text_remove_html(text)\n    text = restructured_text_remove_emoji(text)\n    text = restructured_text_remove_symbols(text)\n    text = restructured_text_remove_non_ascii(text)\n    text = restructured_text_remove_urls(text)\n    return text\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n\n    return linkified\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n    return bleach.clean(\n        linkified,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        strip_comments=True,\n        strip_external_links=True,\n        replace_whitespace=False,\n    )\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n\n    linkified = bleach.linkify(text, **kwargs)\n\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = re.sub(r'(?<=\\[\\[)(.*?)\\]\\]', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'(?<=\\]\\])(.*?)\\]', r'<a href=\"\\1\">\\1</a>', text)\n    text = bleach.linkify(text, output_format='html', linkify=True)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    return linkify(text, strip_href=True, strip_img=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        proto_tag=URL_PROTO_TAG,\n        linkify=linkify_text,\n    )\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text, smart_amp=False, strip_comments=True, strip_style=True)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = restructured_text(text)\n    text = restructured_text_sanitize(text)\n    text = restructured_text_remove_html(text)\n    text = restructured_text_remove_emoji(text)\n    text = restructured_text_remove_symbols(text)\n    text = restructured_text_remove_non_ascii(text)\n    text = restructured_text_remove_urls(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n    return bleach.clean(\n        linkified,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        strip_comments=True,\n        strip_external_links=True,\n        replace_whitespace=False,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException as exc:\n        raise FetcherException(\n            f\"Cannot reach {url!r}: {exc}\"\n        ) from exc\n\n    if response.status_code!= http_client.OK:\n        raise FetcherException(\n            f\"HTTP status code {response.status_code} for {url!r}\"\n        )\n\n    return response.headers[\"content-type\"]\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = fetch_http_date(url)\n        if response.status_code == 200:\n            return response.headers.get(\"content-type\", \"\")\n    except (requests.exceptions.ConnectionError, requests.exceptions.ReadTimeout):\n        pass\n    return \"\"\n", "def fetch_content_type(url: str) -> str:\n    # https://github.com/sphinx-doc/sphinx/issues/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2324\n    # https://github.com/sphinx-doc/sphinx/pull/2324\n    # remove any double slash from the URL\n    url = url.replace('//', '/')\n\n    try:\n        response = urlopen(url)\n        content_type = response.headers.get('content-type')\n        return content_type\n    except HTTPError:\n        raise FetcherError('Failed to fetch content type')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as exc:\n        logger.warning(f\"Unable to reach {url!r}: {str(exc)}\")\n        return \"text/plain\"\n\n    # If we get redirected to a different host, we want to return the content type and status code.\n    # This is only required for the HEAD request because the request might have a redirect status\n    # and the server might not.\n    if response.is_redirect:\n        return response.headers.get(\"content-type\", \"text/plain\")\n\n    # Otherwise, we have to guess the content type from the response headers.\n    content_type = response.headers.get(\"content-type\")\n    status_code = response.status_code\n    return content_type or status_code\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    content_type = response.headers.get(\"content-type\", \"\")\n    logger.debug(\"Content-Type: %s\", content_type)\n    return content_type\n", "def fetch_content_type(url: str) -> str:\n    try:\n        with requests.get(url, headers={'User-Agent': USER_AGENT}) as response:\n            response.raise_for_status()\n            return response.headers['Content-Type']\n    except requests.exceptions.HTTPError as err:\n        logger.error(\"HTTP error when fetching %s: %s\", url, err)\n        return ''\n    except requests.exceptions.RequestException as err:\n        logger.error(\"Request error when fetching %s: %s\", url, err)\n        return ''\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=False)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n    except requests.exceptions.RequestException:\n        return None\n    if response.status_code == requests.codes.found:\n        return \"text/plain\"\n    return \"application/octet-stream\"\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except (requests.exceptions.RequestException, ValueError):\n        return \"\"\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", \"\")\n    return \"\"\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException as exc:\n        raise FetcherException(\n            f\"Cannot reach {url!r}: {exc}\"\n        ) from exc\n\n    if response.status_code!= http_client.OK:\n        raise FetcherException(\n            f\"HTTP status code {response.status_code} for {url!r}\"\n        )\n\n    return response.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = fetch_http_date(url)\n        if response.status_code == 200:\n            return response.headers.get(\"content-type\", \"\")\n    except (requests.exceptions.ConnectionError, requests.exceptions.ReadTimeout):\n        pass\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    # https://github.com/sphinx-doc/sphinx/issues/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2324\n    # https://github.com/sphinx-doc/sphinx/pull/2324\n    # remove any double slash from the URL\n    url = url.replace('//', '/')\n\n    try:\n        response = urlopen(url)\n        content_type = response.headers.get('content-type')\n        return content_type\n    except HTTPError:\n        raise FetcherError('Failed to fetch content type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as exc:\n        logger.warning(f\"Unable to reach {url!r}: {str(exc)}\")\n        return \"text/plain\"\n\n    # If we get redirected to a different host, we want to return the content type and status code.\n    # This is only required for the HEAD request because the request might have a redirect status\n    # and the server might not.\n    if response.is_redirect:\n        return response.headers.get(\"content-type\", \"text/plain\")\n\n    # Otherwise, we have to guess the content type from the response headers.\n    content_type = response.headers.get(\"content-type\")\n    status_code = response.status_code\n    return content_type or status_code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    content_type = response.headers.get(\"content-type\", \"\")\n    logger.debug(\"Content-Type: %s\", content_type)\n    return content_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        with requests.get(url, headers={'User-Agent': USER_AGENT}) as response:\n            response.raise_for_status()\n            return response.headers['Content-Type']\n    except requests.exceptions.HTTPError as err:\n        logger.error(\"HTTP error when fetching %s: %s\", url, err)\n        return ''\n    except requests.exceptions.RequestException as err:\n        logger.error(\"Request error when fetching %s: %s\", url, err)\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=False)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n    except requests.exceptions.RequestException:\n        return None\n    if response.status_code == requests.codes.found:\n        return \"text/plain\"\n    return \"application/octet-stream\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except (requests.exceptions.RequestException, ValueError):\n        return \"\"\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", \"\")\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(text=tag)\n", "def test_tag(tag: str) -> bool:\n    return test_tag(decode_if_bytes(tag))\n", "def test_tag(tag: str) -> bool:\n    return (\n        tag.lower() in ILLEGAL_TAG_CHARS\n        and not any(c in tag for c in '/')\n        and not all(c.isalnum() or c in '_' for c in tag)\n    )\n", "def test_tag(tag: str):\n    return decode_if_bytes(tag) in find_tags(tag, replacer='__')\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_with_slash)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag)\n", "def test_tag(tag: str) -> bool:\n    return bool(test_tag_with_slash(tag))\n", "def test_tag(tag: str) -> bool:\n    return (isinstance(tag, str) and ILLEGAL_TAG_CHARS.search(tag) is None)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(text=tag)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return test_tag(decode_if_bytes(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (\n        tag.lower() in ILLEGAL_TAG_CHARS\n        and not any(c in tag for c in '/')\n        and not all(c.isalnum() or c in '_' for c in tag)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    return decode_if_bytes(tag) in find_tags(tag, replacer='__')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_with_slash)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return bool(test_tag_with_slash(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (isinstance(tag, str) and ILLEGAL_TAG_CHARS.search(tag) is None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.lower()\n    entity = entity_handle.lower()\n\n    if sender == entity:\n        return\n\n    logger.warning(\n        \"Sender handle does not match entity handle: %s (%s) (%s)\",\n        sender, sender_handle, entity_handle\n    )\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise MismatchingSenderAndEntity(\n            \"Sender handle '{}' does not match '{}'\".format(sender_handle, entity_handle)\n        )\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError('Sender handle does not match entity handle')\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender = element_to_objects(\n        get_outbound_entity(entity=entity_handle, private_key=sender_handle.private_key),\n        sender_key_fetcher=sender_handle.sender_key_fetcher,\n        user=sender_handle.user,\n    )\n\n    assert sender[\"handle\"] == entity_handle.handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.lower()\n    entity = entity_handle.lower()\n\n    if sender!= entity:\n        raise ValueError('Sender handle does not match entity handle')\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        # Sender handle match, so sender is the same as entity handle\n        return True\n    if sender_handle not in entity_handle.get(\"senders\", []):\n        return False\n    if sender_handle in entity_handle.get(\"recipients\", []):\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle doesn't match. Sender handle: %s, \"\n                         \"entity handle: %s\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                entity_handle, sender_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    # Note: if we send a sender handle to an entity, then we\n    #       will have to look at the entity's sender handle to see if the\n    #       sender handle matches the entity's sender handle and if it matches\n    #       the entity's sender handle, we will have to return True and\n    #       the entity we should update its sender handle (otherwise we\n    #       will have to return False)\n    if sender_handle == entity_handle:\n        return True, sender_handle\n\n    # Otherwise, we have to return False and the sender handle might not\n    # be the same as the entity's sender handle. It is not a subset of\n    # the entity's sender handle so we can return False here.\n    return False, sender_handle\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.lower()\n    entity = entity_handle.lower()\n\n    if sender == entity:\n        return\n\n    logger.warning(\n        \"Sender handle does not match entity handle: %s (%s) (%s)\",\n        sender, sender_handle, entity_handle\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise MismatchingSenderAndEntity(\n            \"Sender handle '{}' does not match '{}'\".format(sender_handle, entity_handle)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError('Sender handle does not match entity handle')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender = element_to_objects(\n        get_outbound_entity(entity=entity_handle, private_key=sender_handle.private_key),\n        sender_key_fetcher=sender_handle.sender_key_fetcher,\n        user=sender_handle.user,\n    )\n\n    assert sender[\"handle\"] == entity_handle.handle\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.lower()\n    entity = entity_handle.lower()\n\n    if sender!= entity:\n        raise ValueError('Sender handle does not match entity handle')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        # Sender handle match, so sender is the same as entity handle\n        return True\n    if sender_handle not in entity_handle.get(\"senders\", []):\n        return False\n    if sender_handle in entity_handle.get(\"recipients\", []):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle doesn't match. Sender handle: %s, \"\n                         \"entity handle: %s\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                entity_handle, sender_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    # Note: if we send a sender handle to an entity, then we\n    #       will have to look at the entity's sender handle to see if the\n    #       sender handle matches the entity's sender handle and if it matches\n    #       the entity's sender handle, we will have to return True and\n    #       the entity we should update its sender handle (otherwise we\n    #       will have to return False)\n    if sender_handle == entity_handle:\n        return True, sender_handle\n\n    # Otherwise, we have to return False and the sender handle might not\n    # be the same as the entity's sender handle. It is not a subset of\n    # the entity's sender handle so we can return False here.\n    return False, sender_handle\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'import_href': get_nodeinfo_import_href(url),\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'protocol_version': get_nodeinfo_protocol_version(),\n       'version': get_nodeinfo_version(),\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n    return generate_nodeinfo2_document(doc)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[Text]) -> Dict[Text, Text]\n    \"\"\"Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url: The full base url with protocol, ie https://example.com\n    :arg document_path: Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64 os typing xrd\n              file generate_host_meta(template)\n    :returns: generate_legacy_webfinger(template)\n    :returns: generate_nodeinfo2_document()\n    :returns: generate_hcard(template)\n    \"\"\"\n    well_known_document = {\n        \"protocol\": \"https\",\n        \"id\": \"example.com\",\n        \"host\": \"example.com\",\n        \"port\": 443,\n        \"url\": url,\n    }\n\n    if document_path:\n        well_known_document[\"document_path\"] = document_path\n\n    return well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, 'r') as fp:\n        doc = json.load(fp)\n\n    return doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    return get_nodeinfo_document(url, document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = get_nodeinfo_document(url, document_path)\n\n    return generate_document(well_known_document)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[str]) -> Dict[str, Any]\n    \"\"\"\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url:\n        The full base url with protocol, ie https://example.com\n\n    :arg document_path:\n        Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n    :returns: generate_legacy_webfinger(template)\n    :returns: generate_nodeinfo2_document()\n    \"\"\"\n    return {\n        \"import_host\": {\n            \"scheme\": \"http\",\n            \"host\": urlparse(url).netloc,\n        },\n        \"nodeinfo\": {\n            \"version\": \"1.2.3\",\n            \"nodeinfo_version\": \"1.0\",\n        },\n        \"legacy_webfinger\": {\n            \"version\":", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@type\": \"NodeInfo\",\n        \"@id\": NODEINFO_DOCUMENT_PATH,\n        \"url\": url,\n        \"legacyDocumentation\": generate_legacy_webfinger(document_path) if document_path else None,\n        \"nodeInfo\": {\n            \"version\": get_nodeinfo_version(),\n            \"schemaVersion\": get_nodeinfo_schema_version(),\n            \"legacyWebsocket\": generate_legacy_webfinger(document_path) if document_path else None,\n            \"nodeInfoStatus\": get_nodeinfo_status(),\n            \"nodeInfoFile\": get_nodeinfo_file_name(),\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return generate_nodeinfo2_document(url, document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[str]) -> dict\n    \"\"\"\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url:\n        The full base url with protocol, ie https://example.com\n\n    :arg document_path:\n        Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64\n    os typing xrd jsonschema file generate_host_meta(template)\n    generate_legacy_webfinger(template)\n    generate_nodeinfo2_document()\n    generate_hcard(template)\n    NODEINFO_DOCUMENT_PATH is the path to custom NodeInfo document.\n    \"\"\"\n    return get_nodeinfo_document(url, document_path)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'import_href': get_nodeinfo_import_href(url),\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'protocol_version': get_nodeinfo_protocol_version(),\n       'version': get_nodeinfo_version(),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n    return generate_nodeinfo2_document(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[Text]) -> Dict[Text, Text]\n    \"\"\"Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url: The full base url with protocol, ie https://example.com\n    :arg document_path: Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64 os typing xrd\n              file generate_host_meta(template)\n    :returns: generate_legacy_webfinger(template)\n    :returns: generate_nodeinfo2_document()\n    :returns: generate_hcard(template)\n    \"\"\"\n    well_known_document = {\n        \"protocol\": \"https\",\n        \"id\": \"example.com\",\n        \"host\": \"example.com\",\n        \"port\": 443,\n        \"url\": url,\n    }\n\n    if document_path:\n        well_known_document[\"document_path\"] = document_path\n\n    return well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, 'r') as fp:\n        doc = json.load(fp)\n\n    return doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    return get_nodeinfo_document(url, document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = get_nodeinfo_document(url, document_path)\n\n    return generate_document(well_known_document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[str]) -> Dict[str, Any]\n    \"\"\"\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url:\n        The full base url with protocol, ie https://example.com\n\n    :arg document_path:\n        Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n    :returns: generate_legacy_webfinger(template)\n    :returns: generate_nodeinfo2_document()\n    \"\"\"\n    return {\n        \"import_host\": {\n            \"scheme\": \"http\",\n            \"host\": urlparse(url).netloc,\n        },\n        \"nodeinfo\": {\n            \"version\": \"1.2.3\",\n            \"nodeinfo_version\": \"1.0\",\n        },\n        \"legacy_webfinger\": {\n            \"version\":", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@type\": \"NodeInfo\",\n        \"@id\": NODEINFO_DOCUMENT_PATH,\n        \"url\": url,\n        \"legacyDocumentation\": generate_legacy_webfinger(document_path) if document_path else None,\n        \"nodeInfo\": {\n            \"version\": get_nodeinfo_version(),\n            \"schemaVersion\": get_nodeinfo_schema_version(),\n            \"legacyWebsocket\": generate_legacy_webfinger(document_path) if document_path else None,\n            \"nodeInfoStatus\": get_nodeinfo_status(),\n            \"nodeInfoFile\": get_nodeinfo_file_name(),\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return generate_nodeinfo2_document(url, document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[str]) -> dict\n    \"\"\"\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url:\n        The full base url with protocol, ie https://example.com\n\n    :arg document_path:\n        Custom NodeInfo document path if supplied (optional)\n\n    :returns: dict with import typing string warnings json base64\n    os typing xrd jsonschema file generate_host_meta(template)\n    generate_legacy_webfinger(template)\n    generate_nodeinfo2_document()\n    generate_hcard(template)\n    NODEINFO_DOCUMENT_PATH is the path to custom NodeInfo document.\n    \"\"\"\n    return get_nodeinfo_document(url, document_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return False\n\n    try:\n        if utils.verify_signature(signature, doc, public_key):\n            return True\n    except ValueError:\n        return False\n    return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public_key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an xml document\")\n\n    # TODO: verify the signature in the message\n    return True\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    relayable_signature.attrib['Version'] = '1.0'\n\n    relayable_signature.text = signature\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('Signature='):\n        return False\n    sig = signature.split('=', 1)[1]\n    return _verify_relayable_signature(public_key, doc, sig)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return True\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return False\n\n    try:\n        if utils.verify_signature(signature, doc, public_key):\n            return True\n    except ValueError:\n        return False\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public_key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an xml document\")\n\n    # TODO: verify the signature in the message\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    relayable_signature.attrib['Version'] = '1.0'\n\n    relayable_signature.text = signature\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('Signature='):\n        return False\n    sig = signature.split('=', 1)[1]\n    return _verify_relayable_signature(public_key, doc, sig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    handle = get_public_endpoint(document)\n    return parse_diaspora_webfinger(handle)\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    xml_document = xmltodict.parse(document)\n    return parse_diaspora_webfinger(xml_document[\"msg_request\"][\"msg\"][\"xrd\"])\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    return parse_profile_from_hcard(document, \"webfinger\")\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    parsed = fetch_public_key(document)\n    return parsed[\"webfinger\"]\n", "def parse_diaspora_webfinger(document: lxml.etree._Element) -> WebfingerContent:\n    try:\n        return WebfingerContent(\n            handle=get_fetch_content_endpoint(\n                document.find(\"handle\"), document.find(\"entity\")\n            )\n        )\n    except KeyError as ex:\n        raise KeyError(\n            \"Couldn't find 'handle' or 'entity' in Webfinger webfinger XML document. \"\n            \"If you know what you're looking for, please follow the instructions \"\n            \"at https://diaspora.github.io/diaspora_federation/discovery/webfinger.html\"\n        ) from ex\n", "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"handle\": get_public_endpoint(document.get(\"handle\")),\n        \"entity_type\": get_entity_type_from_hcard(document),\n        \"sender_key_fetcher\": _get_element_text_or_none(\n            document, \"senderKeyFetcher\"\n        ),\n        \"sender\": get_element_attr_from_hcard(document, \"sender\"),\n        \"host\": get_element_attr_from_hcard(document, \"host\"),\n        \"profile\": get_element_attr_from_hcard(document, \"profile\"),\n    }\n", "def parse_diaspora_webfinger(document: etree.ElementTree) -> dict:\n    try:\n        root = document.getroot()\n        meta = _get_element_attr_or_none(root, \"meta\")\n        return {\n            \"id\": meta[\"id\"],\n            \"handle\": meta[\"handle\"],\n            \"sender_key_fetcher\": get_public_endpoint(meta[\"handle\"]),\n        }\n    except KeyError as e:\n        raise ValueError(\"Could not parse webfinger at {}\".format(e.args[0]))\n", "def parse_diaspora_webfinger(document: Document) -> Dict[str, str]:\n    xrd = get_xrd(document)\n    if xrd is None:\n        return {}\n\n    return parse_profile_from_hcard(xrd, \"webfinger\")\n", "def parse_diaspora_webfinger(document: lxml.etree._Element) -> Dict[str, str]:\n    return {\n        \"host\": retrieve_diaspora_host_meta(document, \"Host\"),\n        \"sender_key\": retrieve_diaspora_webfinger(\n            document, \"SenderKeyFetcher\"\n        ),\n        \"entity_type\": _get_element_attr_or_none(\n            document, \"EntityType\", \"type\"\n        ),\n        \"guid\": _get_element_attr_or_none(\n            document, \"EntityType\", \"guid\"\n        ),\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    # get and parse profile\n    hcard = get_diaspora_hcard(document)\n    if hcard is None:\n        return {}\n\n    # get and parse content\n    document = get_diaspora_content(hcard)\n    if document is None:\n        return {}\n\n    # parse profile\n    document = parse_profile_from_hcard(hcard)\n    if document is None:\n        return {}\n\n    # return result\n    return document\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    handle = get_public_endpoint(document)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    xml_document = xmltodict.parse(document)\n    return parse_diaspora_webfinger(xml_document[\"msg_request\"][\"msg\"][\"xrd\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    return parse_profile_from_hcard(document, \"webfinger\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    parsed = fetch_public_key(document)\n    return parsed[\"webfinger\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: lxml.etree._Element) -> WebfingerContent:\n    try:\n        return WebfingerContent(\n            handle=get_fetch_content_endpoint(\n                document.find(\"handle\"), document.find(\"entity\")\n            )\n        )\n    except KeyError as ex:\n        raise KeyError(\n            \"Couldn't find 'handle' or 'entity' in Webfinger webfinger XML document. \"\n            \"If you know what you're looking for, please follow the instructions \"\n            \"at https://diaspora.github.io/diaspora_federation/discovery/webfinger.html\"\n        ) from ex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"handle\": get_public_endpoint(document.get(\"handle\")),\n        \"entity_type\": get_entity_type_from_hcard(document),\n        \"sender_key_fetcher\": _get_element_text_or_none(\n            document, \"senderKeyFetcher\"\n        ),\n        \"sender\": get_element_attr_from_hcard(document, \"sender\"),\n        \"host\": get_element_attr_from_hcard(document, \"host\"),\n        \"profile\": get_element_attr_from_hcard(document, \"profile\"),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: etree.ElementTree) -> dict:\n    try:\n        root = document.getroot()\n        meta = _get_element_attr_or_none(root, \"meta\")\n        return {\n            \"id\": meta[\"id\"],\n            \"handle\": meta[\"handle\"],\n            \"sender_key_fetcher\": get_public_endpoint(meta[\"handle\"]),\n        }\n    except KeyError as e:\n        raise ValueError(\"Could not parse webfinger at {}\".format(e.args[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, str]:\n    xrd = get_xrd(document)\n    if xrd is None:\n        return {}\n\n    return parse_profile_from_hcard(xrd, \"webfinger\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: lxml.etree._Element) -> Dict[str, str]:\n    return {\n        \"host\": retrieve_diaspora_host_meta(document, \"Host\"),\n        \"sender_key\": retrieve_diaspora_webfinger(\n            document, \"SenderKeyFetcher\"\n        ),\n        \"entity_type\": _get_element_attr_or_none(\n            document, \"EntityType\", \"type\"\n        ),\n        \"guid\": _get_element_attr_or_none(\n            document, \"EntityType\", \"guid\"\n        ),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    # get and parse profile\n    hcard = get_diaspora_hcard(document)\n    if hcard is None:\n        return {}\n\n    # get and parse content\n    document = get_diaspora_content(hcard)\n    if document is None:\n        return {}\n\n    # parse profile\n    document = parse_profile_from_hcard(hcard)\n    if document is None:\n        return {}\n\n    # return result\n    return document\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return fetch_document(handle, handle.timeout, handle.socketTimeout,\n                              raise_ssl_errors=handle.sslErrors, extra_headers=handle.extra_headers)\n    except (URLError, TimeoutError, HTTPError) as e:\n        logger.warning(\"failed to retrieve webfinger document: %s\", e)\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: urllib.request.Request):\n    try:\n        handle.info()\n    except Exception as e:\n        logger.debug(\"Exception while trying to retrieve webfinger document: %s\", e)\n        return None\n    return handle.url\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> BinaryIO:\n    try:\n        handle.seek(0)\n        return handle\n    except Exception as e:\n        logger.debug(\n            \"Webfinger document retrieval failed with error: %s\", e, exc_info=True\n        )\n        return handle\n", "def try_retrieve_webfinger_document(handle: BytesIO) -> Union[str, None]:\n    try:\n        return fetch_document(handle, handle.geturl(), handle.headers, logger)\n    except Exception:\n        logger.exception(\"Exception while trying to retrieve webfinger document\")\n        return None\n", "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        response = handle.getheader(\"content-type\")\n        if response and response.startswith(\"text/html\"):\n            return handle.read()\n    except HTTPError:\n        pass\n    return handle.read()\n", "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        return fetch_http_date(handle.getheader(\"date\"))\n    except Exception:\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        return handle.read()\n    except (requests.exceptions.RequestException, TypeError):\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: HTTPResponse) -> bytes:\n    try:\n        return handle.geturl()\n    except Exception:\n        logger.error(\"Failed to retrieve webfinger document\", exc_info=True)\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: Response) -> str:\n    try:\n        doc = fetch_http_date(handle)\n        return parse_http_date(doc.headers[\"Last-Modified\"])\n    except Exception:\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return parse_http_date(fetch_content_type(handle))\n    except (HTTPError, URLError):\n        logger.exception(\"Failed to retrieve webfinger document\")\n        return \"\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return fetch_document(handle, handle.timeout, handle.socketTimeout,\n                              raise_ssl_errors=handle.sslErrors, extra_headers=handle.extra_headers)\n    except (URLError, TimeoutError, HTTPError) as e:\n        logger.warning(\"failed to retrieve webfinger document: %s\", e)\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: urllib.request.Request):\n    try:\n        handle.info()\n    except Exception as e:\n        logger.debug(\"Exception while trying to retrieve webfinger document: %s\", e)\n        return None\n    return handle.url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> BinaryIO:\n    try:\n        handle.seek(0)\n        return handle\n    except Exception as e:\n        logger.debug(\n            \"Webfinger document retrieval failed with error: %s\", e, exc_info=True\n        )\n        return handle\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BytesIO) -> Union[str, None]:\n    try:\n        return fetch_document(handle, handle.geturl(), handle.headers, logger)\n    except Exception:\n        logger.exception(\"Exception while trying to retrieve webfinger document\")\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        response = handle.getheader(\"content-type\")\n        if response and response.startswith(\"text/html\"):\n            return handle.read()\n    except HTTPError:\n        pass\n    return handle.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        return fetch_http_date(handle.getheader(\"date\"))\n    except Exception:\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        return handle.read()\n    except (requests.exceptions.RequestException, TypeError):\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse) -> bytes:\n    try:\n        return handle.geturl()\n    except Exception:\n        logger.error(\"Failed to retrieve webfinger document\", exc_info=True)\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: Response) -> str:\n    try:\n        doc = fetch_http_date(handle)\n        return parse_http_date(doc.headers[\"Last-Modified\"])\n    except Exception:\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return parse_http_date(fetch_content_type(handle))\n    except (HTTPError, URLError):\n        logger.exception(\"Failed to retrieve webfinger document\")\n        return \"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_webfinger(handle)\n    return result\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n\n    document = fetch_public_key(handle)\n    return parse_diaspora_webfinger(document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n\n    if response is None:\n        return\n\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.netloc, entity_type=handle.url.path.lstrip('/'))\n    return response\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard',\n                                           guid=handle)\n\n    return parse_diaspora_webfinger(document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return response\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    logger.info(\"Retrieving and parsing diaspora webfinger document\")\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard', guid=handle)\n    return parse_diaspora_webfinger(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_webfinger(handle)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n\n    document = fetch_public_key(handle)\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n\n    if response is None:\n        return\n\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.netloc, entity_type=handle.url.path.lstrip('/'))\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard',\n                                           guid=handle)\n\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    logger.info(\"Retrieving and parsing diaspora webfinger document\")\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard', guid=handle)\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    try:\n        url = (\n            \"https://{host}/api/v1/host-meta\".format(host=host)\n        )\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as err:\n        raise err\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        \"https://api.host-meta.org/hosts/{host}\".format(host=host)\n    )\n    response.raise_for_status()\n    return response.content\n", "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n\n    :returns: ``XRD`` instance with import typing logging xml\n        json urllib typing xrd\n    \"\"\"\n    url = (\n        \"https://api.diaspora.org/v1/hosts?q={q}&maxRows=1&\"\n        \"qFilter=host:{host}\".format(\n            host=host,\n            q=urlencode({\"q\": \"host:{host}\".format(host=host)}),\n        )\n    )\n    response = requests.get(url)\n    response.raise_for_status()\n    return XRD(response.text, host)\n", "def retrieve_diaspora_host_meta(host):\n    if host == \"localhost\":\n        host = \"127.0.0.1\"\n    url = \"http://%s/xrd/log\" % host\n    try:\n        r = requests.get(url)\n    except requests.exceptions.ConnectionError:\n        raise RuntimeError(\"Couldn't connect to host.\")\n    r.raise_for_status()\n    return XRD(r.text)\n", "def retrieve_diaspora_host_meta(host):\n    url = urljoin(DIAspora.BASE_URL, \"hosts/{}/meta\".format(host))\n    response = requests.get(url)\n    return response\n", "def retrieve_diaspora_host_meta(host):\n    diaspora = Diaspora(host=host, username=settings.XRD_USERNAME,\n                          password=settings.XRD_PASSWORD)\n    try:\n        response = diaspora.request('/host-meta')\n    except RequestException:\n        raise ValueError('Could not retrieve host-meta document')\n    if response.status_code!= 200:\n        raise ValueError('Could not retrieve host-meta document')\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return response.text\n", "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance with import typing logging xml\n    json urllib typing xrd\n    federation logging\n    \"\"\"\n    url = (\n        \"https://api.host-meta.org/v1/\"\n        \"hosts/{host}/xrd\"\n    )\n    url = url.format(host=host)\n    response = requests.get(url)\n    response.raise_for_status()\n    return XRD(response.content)\n", "def retrieve_diaspora_host_meta(host):\n    url = \"{host}/meta\".format(host=host)\n    params = {\"host\": host}\n    response = requests.get(url, params=params, auth=(settings.USER, settings.PASSWORD))\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieving host meta failed: {}\".format(response.text))\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?\"\n        \"export-data=true&export-data-format=xrdf\"\n    )\n    url = url.format(host=host)\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    try:\n        url = (\n            \"https://{host}/api/v1/host-meta\".format(host=host)\n        )\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as err:\n        raise err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        \"https://api.host-meta.org/hosts/{host}\".format(host=host)\n    )\n    response.raise_for_status()\n    return response.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n\n    :returns: ``XRD`` instance with import typing logging xml\n        json urllib typing xrd\n    \"\"\"\n    url = (\n        \"https://api.diaspora.org/v1/hosts?q={q}&maxRows=1&\"\n        \"qFilter=host:{host}\".format(\n            host=host,\n            q=urlencode({\"q\": \"host:{host}\".format(host=host)}),\n        )\n    )\n    response = requests.get(url)\n    response.raise_for_status()\n    return XRD(response.text, host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == \"localhost\":\n        host = \"127.0.0.1\"\n    url = \"http://%s/xrd/log\" % host\n    try:\n        r = requests.get(url)\n    except requests.exceptions.ConnectionError:\n        raise RuntimeError(\"Couldn't connect to host.\")\n    r.raise_for_status()\n    return XRD(r.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = urljoin(DIAspora.BASE_URL, \"hosts/{}/meta\".format(host))\n    response = requests.get(url)\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    diaspora = Diaspora(host=host, username=settings.XRD_USERNAME,\n                          password=settings.XRD_PASSWORD)\n    try:\n        response = diaspora.request('/host-meta')\n    except RequestException:\n        raise ValueError('Could not retrieve host-meta document')\n    if response.status_code!= 200:\n        raise ValueError('Could not retrieve host-meta document')\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return response.text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance with import typing logging xml\n    json urllib typing xrd\n    federation logging\n    \"\"\"\n    url = (\n        \"https://api.host-meta.org/v1/\"\n        \"hosts/{host}/xrd\"\n    )\n    url = url.format(host=host)\n    response = requests.get(url)\n    response.raise_for_status()\n    return XRD(response.content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"{host}/meta\".format(host=host)\n    params = {\"host\": host}\n    response = requests.get(url, params=params, auth=(settings.USER, settings.PASSWORD))\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieving host meta failed: {}\".format(response.text))\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?\"\n        \"export-data=true&export-data-format=xrdf\"\n    )\n    url = url.format(host=host)\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs), None\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = fetch_http_response(url, method=method, *args, **kwargs)\n    return send_http_response(response, timeout=timeout)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_http_date(requests.post(url, data=data, *args, **kwargs)), None\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\"POST\", url, data=data, timeout=timeout,\n                                 **kwargs)\n    if response.status_code!= 200:\n        logger.error(\"HTTP Error %s when trying to %s\", response.status_code,\n                     url)\n        logger.debug(response.content)\n        return (None, response)\n    return (response, parse_http_date(response.headers[\"Last-Modified\"]))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\n        method=method, url=url, *args, **kwargs\n    )\n    if response.status_code == 200:\n        return response.status_code, response\n    return response.status_code, None\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_request(\"POST\", url, data, timeout=timeout, *args, **kwargs)\n    if response.status_code!= 200:\n        logger.error(\"HTTP error %s sending document %s\", response.status_code, url)\n        return (response.status_code, response)\n    return (response.status_code, response.json())\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\"POST\", url, data=data, timeout=timeout,\n                                 **kwargs)\n    try:\n        response.raise_for_status()\n    except HTTPError as err:\n        return (err.response.status_code, err.response.text)\n    else:\n        return (response.status_code, response.json())\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data, timeout, *args, **kwargs)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs), None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = fetch_http_response(url, method=method, *args, **kwargs)\n    return send_http_response(response, timeout=timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_http_date(requests.post(url, data=data, *args, **kwargs)), None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\"POST\", url, data=data, timeout=timeout,\n                                 **kwargs)\n    if response.status_code!= 200:\n        logger.error(\"HTTP Error %s when trying to %s\", response.status_code,\n                     url)\n        logger.debug(response.content)\n        return (None, response)\n    return (response, parse_http_date(response.headers[\"Last-Modified\"]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\n        method=method, url=url, *args, **kwargs\n    )\n    if response.status_code == 200:\n        return response.status_code, response\n    return response.status_code, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_request(\"POST\", url, data, timeout=timeout, *args, **kwargs)\n    if response.status_code!= 200:\n        logger.error(\"HTTP error %s sending document %s\", response.status_code, url)\n        return (response.status_code, response)\n    return (response.status_code, response.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = send_http_request(\"POST\", url, data=data, timeout=timeout,\n                                 **kwargs)\n    try:\n        response.raise_for_status()\n    except HTTPError as err:\n        return (err.response.status_code, err.response.text)\n    else:\n        return (response.status_code, response.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data, timeout, *args, **kwargs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        try:\n            dic = dic[k]\n        except KeyError:\n            dic[k] = {}\n            dic = dic[k]\n\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[val] = 1\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            dic = dic[key_]\n        else:\n            dic[key_] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        dic = dic.setdefault(key, {})\n        dict_insert(dic, val, *keys)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        try:\n            dic = dic[k]\n        except KeyError:\n            dic[k] = {}\n            dic = dic[k]\n\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[val] = 1\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            dic = dic[key_]\n        else:\n            dic[key_] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        dic = dic.setdefault(key, {})\n        dict_insert(dic, val, *keys)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"list_of_file_names.ini\",\n            os.path.join(settings_dir, \"list_of_file_names.ini\"),\n            [\n                (\"test_one\", \"test_one_value\"),\n                (\"test_two\", \"test_two_value\"),\n            ],\n            [\n                (\"test_three\", \"test_three_value\"),\n                (\"test_four\", \"test_four_value\"),\n            ],\n            spec_option,\n        )\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        f\"{settings_dirs['general']}/{settings_dirs[spec_option]}/{settings_dirs['infrared']}/{settings_dirs['infrared']}_*.ini\"\n        for settings_dirs in [\n            (\"/usr/local\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/infrared\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/infrared/\", {\"infrared\": \"/usr/infrared\"}),\n        ]\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"file_name\": \"test_file_{}.txt\".format(i),\n            \"content\": \"this is some text\",\n            \"content_type\": \"text/plain\",\n            \"module_name\": \"test_module\",\n            \"settings_dirs\": settings_dirs,\n        }\n        for i in range(10)\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"type\": \"file\",\n            \"path\": os.path.join(settings_dir, \"test.txt\"),\n            \"option\": spec_option,\n        }\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"path\": os.path.join(settings_dir, \"ini_file_{}.ini\".format(x)),\n            \"content\": \"\",\n            \"type\": \"file\",\n        }\n        for x in range(1, 10)\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return ['list_of_file_{}.txt'.format(i) for i in range(settings_dirs)]\n", "def list_of_file_names(settings_dirs, spec_option):\n    class Config(IniType):\n        SPEC_OPTION = spec_option\n        SECTION_NAME = 'list_of_file_names'\n\n        def __init__(self):\n            IniType.__init__(self)\n            self.list_of_file_names = []\n\n        def read(self, file_name):\n            self.list_of_file_names.append(file_name)\n            return IniType.read(self, file_name)\n\n    return Config\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\"list\", [\n            IniFile(os.path.join(sd, \"ini_default.ini\")),\n            IniFile(os.path.join(sd, \"ini_extra.ini\"))\n        ])\n        for sd in settings_dirs\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"complex_type\",\n            [\n                IniFile(\n                    \"file_name\",\n                    \"<list>\",\n                    \"List of files to be tested.\",\n                )\n            ],\n            \"\",\n        )\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}'.format(sd, spec_option) for sd in settings_dirs\n    ]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"list_of_file_names.ini\",\n            os.path.join(settings_dir, \"list_of_file_names.ini\"),\n            [\n                (\"test_one\", \"test_one_value\"),\n                (\"test_two\", \"test_two_value\"),\n            ],\n            [\n                (\"test_three\", \"test_three_value\"),\n                (\"test_four\", \"test_four_value\"),\n            ],\n            spec_option,\n        )\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        f\"{settings_dirs['general']}/{settings_dirs[spec_option]}/{settings_dirs['infrared']}/{settings_dirs['infrared']}_*.ini\"\n        for settings_dirs in [\n            (\"/usr/local\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/infrared\", {\"infrared\": \"/usr/infrared\"}),\n            (\"/usr/local/infrared/\", {\"infrared\": \"/usr/infrared\"}),\n        ]\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"file_name\": \"test_file_{}.txt\".format(i),\n            \"content\": \"this is some text\",\n            \"content_type\": \"text/plain\",\n            \"module_name\": \"test_module\",\n            \"settings_dirs\": settings_dirs,\n        }\n        for i in range(10)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"type\": \"file\",\n            \"path\": os.path.join(settings_dir, \"test.txt\"),\n            \"option\": spec_option,\n        }\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\n            \"path\": os.path.join(settings_dir, \"ini_file_{}.ini\".format(x)),\n            \"content\": \"\",\n            \"type\": \"file\",\n        }\n        for x in range(1, 10)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return ['list_of_file_{}.txt'.format(i) for i in range(settings_dirs)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    class Config(IniType):\n        SPEC_OPTION = spec_option\n        SECTION_NAME = 'list_of_file_names'\n\n        def __init__(self):\n            IniType.__init__(self)\n            self.list_of_file_names = []\n\n        def read(self, file_name):\n            self.list_of_file_names.append(file_name)\n            return IniType.read(self, file_name)\n\n    return Config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\"list\", [\n            IniFile(os.path.join(sd, \"ini_default.ini\")),\n            IniFile(os.path.join(sd, \"ini_extra.ini\"))\n        ])\n        for sd in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"complex_type\",\n            [\n                IniFile(\n                    \"file_name\",\n                    \"<list>\",\n                    \"List of files to be tested.\",\n                )\n            ],\n            \"\",\n        )\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}'.format(sd, spec_option) for sd in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return cls._get_service(\n        'ansible-config',\n        configuration={\n            'execution_logger': {\n                'class': 'ansible.execution.logger.ExecutionLogger',\n                'level': 'DEBUG',\n            },\n        },\n        plugins=[\n            {\n                'name': 'ansible_python',\n                'class': 'ansible.ext.module_utils.ansible.AnsibleModule',\n            },\n            {\n                'name': 'ansible_ssh',\n                'class': 'ansible.ext.transport.SSHTransport',\n            },\n            {\n                'name': 'ansible_network_connector',\n                'class': 'ansible.network.network_connector.NetworkConnector',\n            },\n        ],\n    )\n", "def ansible_config_manager(cls):\n    cls.ansible_config_manager = AnsibleConfigManager\n    return cls\n", "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfig,\n        default_base_dir='./ansible'\n    )\n", "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "def ansible_config_manager(cls):\n    return cls.register_service('ansible-config-manager', AnsibleConfigManager)\n", "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfigManager(\n            core_settings.get('ANSIBLE_CONFIG'),\n            core_settings.get('ANSIBLE_MODULES')\n        )\n    )\n", "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "def ansible_config_manager(cls):\n    return cls.register_service('ansible-config', AnsibleConfig)\n", "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfigManager(\n            core_settings.get('ANSIBLE_CONFIG', {}),\n            core_settings.get('ANSIBLE_ROLES', {})\n        )\n    )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\n        'ansible-config',\n        configuration={\n            'execution_logger': {\n                'class': 'ansible.execution.logger.ExecutionLogger',\n                'level': 'DEBUG',\n            },\n        },\n        plugins=[\n            {\n                'name': 'ansible_python',\n                'class': 'ansible.ext.module_utils.ansible.AnsibleModule',\n            },\n            {\n                'name': 'ansible_ssh',\n                'class': 'ansible.ext.transport.SSHTransport',\n            },\n            {\n                'name': 'ansible_network_connector',\n                'class': 'ansible.network.network_connector.NetworkConnector',\n            },\n        ],\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    cls.ansible_config_manager = AnsibleConfigManager\n    return cls\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfig,\n        default_base_dir='./ansible'\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service('ansible-config-manager', AnsibleConfigManager)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfigManager(\n            core_settings.get('ANSIBLE_CONFIG'),\n            core_settings.get('ANSIBLE_MODULES')\n        )\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service('ansible-config', AnsibleConfig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service('ansible', AnsibleConfig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.register_service(\n        'ansible',\n        AnsibleConfigManager(\n            core_settings.get('ANSIBLE_CONFIG', {}),\n            core_settings.get('ANSIBLE_ROLES', {})\n        )\n    )\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls.register_service('workspace_manager', WorkspaceManager)\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls.register_service('workspace_manager', WorkspaceManager)\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._get_service('workspace-manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls.register_service('workspace_manager', WorkspaceManager)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls.register_service('workspace_manager', WorkspaceManager)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace-manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return super(AnsibleRuntimeManager, cls).plugins_manager() + [\n        ('ansible', AnsibleRuntime(core_settings=cls.core_settings)),\n    ]\n", "def plugins_manager(cls):\n    return super(CloudShell, cls).plugins_manager()\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return super(AnsibleBaseConfig, cls).plugins_manager()\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return super(AnsibleRuntimeManager, cls).plugins_manager() + [\n        ('ansible', AnsibleRuntime(core_settings=cls.core_settings)),\n    ]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return super(CloudShell, cls).plugins_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return super(AnsibleBaseConfig, cls).plugins_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content provided\")\n\n    required_fields = [\"name\", \"address\", \"image\", \"icon\", \"location\"]\n    data = yaml.load(spec_content)\n    if not all(key in data for key in required_fields):\n        raise IRValidatorException(\n            \"Missing mandatory fields {}\".format(required_fields)\n        )\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No content provided to load spec\")\n\n    # split into data in lists\n    data = yaml.safe_load(spec_content)\n\n    # check for required fields\n    required_fields = ['title', 'author', 'description', 'year', 'notes']\n\n    for key in required_fields:\n        if key not in data.keys():\n            raise IRValidatorException(\"Missing required field: {}\".format(key))\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['version','model','serial_number','slot_number', 'data']\n    spec_content = yaml_loader(spec_content)\n\n    if not all(key in spec_content for key in required_fields):\n        raise IRValidatorException('Missing required fields: {}'.format(required_fields))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'import' not in spec_content:\n        raise IRValidatorException(\"Missing 'import' key in spec file\")\n\n    import_spec_content = spec_content['import']\n    if not isinstance(import_spec_content, dict):\n        raise IRValidatorException(\"'import' key must be a dict\")\n\n    if 'path' not in import_spec_content:\n        raise IRValidatorException(\"Missing 'path' key in import spec file\")\n\n    required_fields = cls._REQUIRED_FIELDS\n    for field in required_fields:\n        if field not in import_spec_content:\n            raise IRValidatorException(\"Missing '{}' field\".format(field))\n\n    return import_spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided to load from yaml file.\"\n        )\n\n    data = yaml.safe_load(spec_content)\n    required_fields = cls._required_fields()\n\n    for key in required_fields:\n        if key not in data:\n            raise IRValidatorException(\n                \"Missing required field {} in {}\".format(key, spec_content)\n            )\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','serial_number','serial_number_type', 'device_type', 'ip_address', 'description', 'fw_version', 'os_version']\n\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing required fields: {}'.format(required_fields))\n\n    return cls.validate_from_file(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Error parsing YAML file: {}\".format(e))\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {0}'.format(e))\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Invalid format of spec file')\n\n    required_fields = cls._required_fields()\n    missing_fields = []\n    for key in required_fields:\n        if not key in spec_content:\n            missing_fields.append(key)\n\n    if len(missing_fields) > 0:\n        raise IRValidatorException('Missing required fields: {}'.format(missing_fields))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"no spec content was provided\")\n\n    required_keys = [\"name\", \"model\", \"controller\", \"interface\", \"serial_number\"]\n    return cls.validate_from_file(spec_content=spec_content, required_keys=required_keys)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content provided\")\n\n    required_fields = [\"name\", \"address\", \"image\", \"icon\", \"location\"]\n    data = yaml.load(spec_content)\n    if not all(key in data for key in required_fields):\n        raise IRValidatorException(\n            \"Missing mandatory fields {}\".format(required_fields)\n        )\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No content provided to load spec\")\n\n    # split into data in lists\n    data = yaml.safe_load(spec_content)\n\n    # check for required fields\n    required_fields = ['title', 'author', 'description', 'year', 'notes']\n\n    for key in required_fields:\n        if key not in data.keys():\n            raise IRValidatorException(\"Missing required field: {}\".format(key))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['version','model','serial_number','slot_number', 'data']\n    spec_content = yaml_loader(spec_content)\n\n    if not all(key in spec_content for key in required_fields):\n        raise IRValidatorException('Missing required fields: {}'.format(required_fields))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'import' not in spec_content:\n        raise IRValidatorException(\"Missing 'import' key in spec file\")\n\n    import_spec_content = spec_content['import']\n    if not isinstance(import_spec_content, dict):\n        raise IRValidatorException(\"'import' key must be a dict\")\n\n    if 'path' not in import_spec_content:\n        raise IRValidatorException(\"Missing 'path' key in import spec file\")\n\n    required_fields = cls._REQUIRED_FIELDS\n    for field in required_fields:\n        if field not in import_spec_content:\n            raise IRValidatorException(\"Missing '{}' field\".format(field))\n\n    return import_spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided to load from yaml file.\"\n        )\n\n    data = yaml.safe_load(spec_content)\n    required_fields = cls._required_fields()\n\n    for key in required_fields:\n        if key not in data:\n            raise IRValidatorException(\n                \"Missing required field {} in {}\".format(key, spec_content)\n            )\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','serial_number','serial_number_type', 'device_type', 'ip_address', 'description', 'fw_version', 'os_version']\n\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing required fields: {}'.format(required_fields))\n\n    return cls.validate_from_file(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Error parsing YAML file: {}\".format(e))\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {0}'.format(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Invalid format of spec file')\n\n    required_fields = cls._required_fields()\n    missing_fields = []\n    for key in required_fields:\n        if not key in spec_content:\n            missing_fields.append(key)\n\n    if len(missing_fields) > 0:\n        raise IRValidatorException('Missing required fields: {}'.format(missing_fields))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"no spec content was provided\")\n\n    required_keys = [\"name\", \"model\", \"controller\", \"interface\", \"serial_number\"]\n    return cls.validate_from_file(spec_content=spec_content, required_keys=required_keys)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing required parameter \"yaml_file\"')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file: {}'.format(exc))\n\n    if not cls.validate_from_content(data):\n        raise IRValidatorException('Invalid YAML file content')\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = validate_yaml(yaml_file)\n    return cls.validate_from_content(data)\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file(yaml_file=yaml_file)\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as ymlfile:\n            yaml_content = yamlfile.read()\n            return cls.validate_from_content(yaml_content)\n    except FileNotFoundError:\n        raise IRValidatorException('The YAML file {} does not exist'.format(yaml_file))\n", "def validate_from_file(cls, yaml_file=None):\n    data = validate_yaml(yaml_file=yaml_file)\n    return cls.validate(data=data)\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n        return cls.validate_from_content(data)\n    except (yaml.YAMLError, IOError, OSError) as exc:\n        raise IRValidatorException('Invalid YAML file {}: {}'.format(yaml_file, exc))\n", "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.load(yaml_file, Loader=yaml.SafeLoader)\n    except (yaml.YAMLError, IOError) as error:\n        raise IRValidatorException(f'Could not load YAML file {yaml_file}', error)\n    return cls.validate_from_content(data)\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n    with open(yaml_file, \"rt\") as f:\n        try:\n            data = yaml.load(f, Loader=yaml.SafeLoader)\n            cls.validate_from_content(data)\n        except yaml.YAMLError as e:\n            raise IRValidatorException(\n                f\"Failed to load YAML file: {e}\\n\"\n                f\"Check that the file is valid YAML.\\n\"\n                f\"Or try running with 'pip install six'\")\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file_path(yaml_file)\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n            return cls.validate_from_content(data)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(exc)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\n            \"Missing required fields in {} yaml file\".format(cls.__name__))\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_content(data)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing required parameter \"yaml_file\"')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file: {}'.format(exc))\n\n    if not cls.validate_from_content(data):\n        raise IRValidatorException('Invalid YAML file content')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = validate_yaml(yaml_file)\n    return cls.validate_from_content(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file(yaml_file=yaml_file)\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as ymlfile:\n            yaml_content = yamlfile.read()\n            return cls.validate_from_content(yaml_content)\n    except FileNotFoundError:\n        raise IRValidatorException('The YAML file {} does not exist'.format(yaml_file))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = validate_yaml(yaml_file=yaml_file)\n    return cls.validate(data=data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n        return cls.validate_from_content(data)\n    except (yaml.YAMLError, IOError, OSError) as exc:\n        raise IRValidatorException('Invalid YAML file {}: {}'.format(yaml_file, exc))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.load(yaml_file, Loader=yaml.SafeLoader)\n    except (yaml.YAMLError, IOError) as error:\n        raise IRValidatorException(f'Could not load YAML file {yaml_file}', error)\n    return cls.validate_from_content(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n    with open(yaml_file, \"rt\") as f:\n        try:\n            data = yaml.load(f, Loader=yaml.SafeLoader)\n            cls.validate_from_content(data)\n        except yaml.YAMLError as e:\n            raise IRValidatorException(\n                f\"Failed to load YAML file: {e}\\n\"\n                f\"Check that the file is valid YAML.\\n\"\n                f\"Or try running with 'pip install six'\")\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file_path(yaml_file)\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n            return cls.validate_from_content(data)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(exc)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\n            \"Missing required fields in {} yaml file\".format(cls.__name__))\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_content(data)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for group in parser_dict.keys():\n        if group in self._include_groups:\n            self._include_groups[group].extend(parser_dict[group])\n        else:\n            self._include_groups[group] = parser_dict[group]\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for command_name, parser_list in parser_dict.items():\n        include_groups.append(\n            self.get_option_spec(command_name, [spec.strip() for spec in parser_list])\n        )\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    for option_name in parser_dict:\n        include_spec = parser_dict[option_name]\n        for include_file in include_spec.get('include', []):\n            self._include_groups(parser_dict[include_file])\n", "def _include_groups(self, parser_dict):\n    include_group_names = parser_dict.get('include_groups', [])\n    if not isinstance(include_group_names, list):\n        include_group_names = [include_group_names]\n    for include_group_name in include_group_names:\n        self._include_groups(parser_dict[include_group_name])\n", "def _include_groups(self, parser_dict):\n    for command_name, option_name in self._include_groups.keys():\n        include_spec = self.get_parser_option_specs(command_name)\n        parser_dict[command_name][option_name] = include_spec.resolve(parser_dict[command_name][option_name])\n", "def _include_groups(self, parser_dict):\n    for parser_name, parser_spec in parser_dict.items():\n        parser = None\n        for include_group in parser_spec.get('include_groups', []):\n            if include_group.get('command') == 'include':\n                parser = include_group.get('parser')\n                break\n        if parser is None:\n            continue\n        for option_name, option_spec in parser.items():\n            option_spec.update(parser_dict[parser_name])\n            parser_dict[option_name] = option_spec\n", "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if group in self.spec_dict['include_groups']:\n            return True\n    return False\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for parser_name, parser_spec in parser_dict.items():\n        # Get all includes for the parser\n        includes = self._get_all_options_spec(parser_spec)\n        # Add the includes to the include groups\n        include_groups.extend(includes)\n\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        for include_group_name in parser_dict['include_groups']:\n            include_group = parser_dict['include_groups'][include_group_name]\n            for include_spec in include_group:\n                self._include_groups(include_spec)\n", "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups']:\n        for include_group in parser_dict['include_groups']:\n            include_group_name = include_group.get('name')\n            include_group_options = include_group.get('options')\n            if include_group_options:\n                for option_spec in include_group_options:\n                    if option_spec.get('type') == 'group':\n                        self._include_groups(parser_dict['include_groups'])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for group in parser_dict.keys():\n        if group in self._include_groups:\n            self._include_groups[group].extend(parser_dict[group])\n        else:\n            self._include_groups[group] = parser_dict[group]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for command_name, parser_list in parser_dict.items():\n        include_groups.append(\n            self.get_option_spec(command_name, [spec.strip() for spec in parser_list])\n        )\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for option_name in parser_dict:\n        include_spec = parser_dict[option_name]\n        for include_file in include_spec.get('include', []):\n            self._include_groups(parser_dict[include_file])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_group_names = parser_dict.get('include_groups', [])\n    if not isinstance(include_group_names, list):\n        include_group_names = [include_group_names]\n    for include_group_name in include_group_names:\n        self._include_groups(parser_dict[include_group_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for command_name, option_name in self._include_groups.keys():\n        include_spec = self.get_parser_option_specs(command_name)\n        parser_dict[command_name][option_name] = include_spec.resolve(parser_dict[command_name][option_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for parser_name, parser_spec in parser_dict.items():\n        parser = None\n        for include_group in parser_spec.get('include_groups', []):\n            if include_group.get('command') == 'include':\n                parser = include_group.get('parser')\n                break\n        if parser is None:\n            continue\n        for option_name, option_spec in parser.items():\n            option_spec.update(parser_dict[parser_name])\n            parser_dict[option_name] = option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if group in self.spec_dict['include_groups']:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for parser_name, parser_spec in parser_dict.items():\n        # Get all includes for the parser\n        includes = self._get_all_options_spec(parser_spec)\n        # Add the includes to the include groups\n        include_groups.extend(includes)\n\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        for include_group_name in parser_dict['include_groups']:\n            include_group = parser_dict['include_groups'][include_group_name]\n            for include_spec in include_group:\n                self._include_groups(include_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups']:\n        for include_group in parser_dict['include_groups']:\n            include_group_name = include_group.get('name')\n            include_group_options = include_group.get('options')\n            if include_group_options:\n                for option_spec in include_group_options:\n                    if option_spec.get('type') == 'group':\n                        self._include_groups(parser_dict['include_groups'])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    if spec:\n        return self._merge_duplicated_cli_args(spec)\n    return {}\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars['__spec_defaults']\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    return self._merge_duplicated_cli_args(spec)\n", "def get_spec_defaults(self):\n    spec_defaults = super(Command, self).get_spec_defaults()\n    spec_defaults.update({'cli_args': {'format': 'json'}})\n    return spec_defaults\n", "def get_spec_defaults(self):\n    return self._get_conditionally_required_args(\n        '--defaults', '--no-defaults')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    if spec:\n        return self._merge_duplicated_cli_args(spec)\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars['__spec_defaults']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    return self._merge_duplicated_cli_args(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec_defaults = super(Command, self).get_spec_defaults()\n    spec_defaults.update({'cli_args': {'format': 'json'}})\n    return spec_defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_conditionally_required_args(\n        '--defaults', '--no-defaults')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._get_conditionally_required_args('argument', self.vars, self.defaults)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(['--deprecated'])\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._get_conditionally_required_args('argument', self.vars, self.defaults)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(['--deprecated'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = vars_dir = defaults_dir = cli_args.get('spec_args')\n    if spec_args:\n        vars_dir, defaults_dir = spec_args\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(cli_args)\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(answer_file_args)\n    self.vars.update(vars_dir)\n    self.vars.update(defaults_dir)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if deprecated_args:\n        LOG.warn('The following arguments are deprecated: %s', ', '.join(deprecated_args))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    LOG.debug('CLI arguments are merged: %s', cli_args)\n    LOG.debug('Argument file arguments are merged: %s', answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    if cli_args.deprecation_type is not None:\n        if cli_args.deprecation_type not in self.vars.deprecation_types:\n            LOG.error('{0} is an invalid deprecation type. Choose from {1}.'.format(cli_args.deprecation_type, self.vars.deprecation_types))\n            sys.exit(1)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = self._merge_duplicated_cli_args(cli_args)\n    spec_args.update(answer_file_args)\n    LOG.debug('args from file %s: %s', answer_file_args, spec_args)\n    LOG.debug('args from command line %s: %s', cli_args, spec_args)\n\n    deprecated_args = self._get_conditionally_required_args(\n        command_name='import',\n        options_spec=spec_args,\n        args=cli_args\n    )\n\n    LOG.debug('deprecated args %s', deprecated_args)\n    LOG.debug('args that are not in file: %s', cli_args)\n    if deprecated_args:\n        raise CLIAbort('%s arguments are deprecated and are not required' %\n                       (len(deprecated_args)))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec = vars(args)\n    spec['cli_args'] = cli_args\n    spec['answer_file_args'] = answer_file_args\n    spec['args'] = []\n    spec['spec_defaults'] = {}\n    spec['vars'] = {}\n    spec['defaults'] = []\n    spec['plugin_path'] = self.plugin_path\n    spec['subcommand'] = None\n    spec['command_name'] = None\n    spec['deprecated'] = True\n    spec['deprecation_message'] = None\n    spec['args_spec'] = {}\n    spec['vars_dir'] = self.vars_dir\n    spec['defaults_dir'] = self.defaults_dir\n    spec['command_name'] = None\n    spec['deprecated_args'] = []\n    spec['args'] = []\n    spec['vars'] = vars(args)\n    spec['defaults'] = vars(args)\n    spec['cli_args'] = spec['args_spec']\n    spec['answer_file_args'] = spec['answer_file_args']\n    spec['spec_defaults'] = spec['spec_defaults']\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    self._print_deprecation_message()\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"Validating arguments deprecation\")\n    if cli_args.deprecated_args and cli_args.deprecated_args!= answer_file_args.deprecated_args:\n        raise CLIError(\"--%s and --%s are not compatible.\" % (cli_args.deprecated_args, answer_file_args.deprecated_args))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arg deprecation %s', cli_args)\n    if not self.validate_arg_sources(cli_args, answer_file_args, spec_options=self.vars):\n        raise ArgumentDeprecationError('Failed to validate deprecated arguments')\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warning('CLI arguments are deprecated. Please consult our documentation at '\n                'https://infrared.io/docs/api/deprecation-warning.')\n    LOG.warning('CLI arguments are not supported. Please consult our documentation at '\n                'https://infrared.io/docs/api/custom-types.')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = vars_dir = defaults_dir = cli_args.get('spec_args')\n    if spec_args:\n        vars_dir, defaults_dir = spec_args\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(cli_args)\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(answer_file_args)\n    self.vars.update(vars_dir)\n    self.vars.update(defaults_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if deprecated_args:\n        LOG.warn('The following arguments are deprecated: %s', ', '.join(deprecated_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    LOG.debug('CLI arguments are merged: %s', cli_args)\n    LOG.debug('Argument file arguments are merged: %s', answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    if cli_args.deprecation_type is not None:\n        if cli_args.deprecation_type not in self.vars.deprecation_types:\n            LOG.error('{0} is an invalid deprecation type. Choose from {1}.'.format(cli_args.deprecation_type, self.vars.deprecation_types))\n            sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = self._merge_duplicated_cli_args(cli_args)\n    spec_args.update(answer_file_args)\n    LOG.debug('args from file %s: %s', answer_file_args, spec_args)\n    LOG.debug('args from command line %s: %s', cli_args, spec_args)\n\n    deprecated_args = self._get_conditionally_required_args(\n        command_name='import',\n        options_spec=spec_args,\n        args=cli_args\n    )\n\n    LOG.debug('deprecated args %s', deprecated_args)\n    LOG.debug('args that are not in file: %s', cli_args)\n    if deprecated_args:\n        raise CLIAbort('%s arguments are deprecated and are not required' %\n                       (len(deprecated_args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec = vars(args)\n    spec['cli_args'] = cli_args\n    spec['answer_file_args'] = answer_file_args\n    spec['args'] = []\n    spec['spec_defaults'] = {}\n    spec['vars'] = {}\n    spec['defaults'] = []\n    spec['plugin_path'] = self.plugin_path\n    spec['subcommand'] = None\n    spec['command_name'] = None\n    spec['deprecated'] = True\n    spec['deprecation_message'] = None\n    spec['args_spec'] = {}\n    spec['vars_dir'] = self.vars_dir\n    spec['defaults_dir'] = self.defaults_dir\n    spec['command_name'] = None\n    spec['deprecated_args'] = []\n    spec['args'] = []\n    spec['vars'] = vars(args)\n    spec['defaults'] = vars(args)\n    spec['cli_args'] = spec['args_spec']\n    spec['answer_file_args'] = spec['answer_file_args']\n    spec['spec_defaults'] = spec['spec_defaults']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    self._print_deprecation_message()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"Validating arguments deprecation\")\n    if cli_args.deprecated_args and cli_args.deprecated_args!= answer_file_args.deprecated_args:\n        raise CLIError(\"--%s and --%s are not compatible.\" % (cli_args.deprecated_args, answer_file_args.deprecated_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arg deprecation %s', cli_args)\n    if not self.validate_arg_sources(cli_args, answer_file_args, spec_options=self.vars):\n        raise ArgumentDeprecationError('Failed to validate deprecated arguments')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warning('CLI arguments are deprecated. Please consult our documentation at '\n                'https://infrared.io/docs/api/deprecation-warning.')\n    LOG.warning('CLI arguments are not supported. Please consult our documentation at '\n                'https://infrared.io/docs/api/custom-types.')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    parser_dict = self.spec_dict['parser']\n    option_spec = self.spec_dict['options'][command_name]\n    return self._get_all_options_spec(parser_dict, option_spec)\n", "def get_parser_option_specs(self, command_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return self._get_all_options_spec(parser_dict)\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict.get(command_name, None)\n", "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name)\n    return self._get_all_options_spec(option_spec)\n", "def get_parser_option_specs(self, command_name):\n    command_spec = self.spec_dict[command_name]\n    return self._get_all_options_spec(command_spec)\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['parser_option_specs']\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['options']\n", "def get_parser_option_specs(self, command_name):\n    if command_name not in self.spec_dict:\n        raise ValueError('Command {} does not exists'.format(command_name))\n\n    return self.spec_dict[command_name]['options']\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][OPT_SPEC_KEY]\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].get(\"option_spec\", [])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_dict = self.spec_dict['parser']\n    option_spec = self.spec_dict['options'][command_name]\n    return self._get_all_options_spec(parser_dict, option_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return self._get_all_options_spec(parser_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict.get(command_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name)\n    return self._get_all_options_spec(option_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    command_spec = self.spec_dict[command_name]\n    return self._get_all_options_spec(command_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['parser_option_specs']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['options']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name not in self.spec_dict:\n        raise ValueError('Command {} does not exists'.format(command_name))\n\n    return self.spec_dict[command_name]['options']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][OPT_SPEC_KEY]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].get(\"option_spec\", [])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, {})\n    if not isinstance(parser_spec, dict):\n        raise ValueError('get_option_spec called with an invalid option spec: %s' % command_name)\n    return parser_spec\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    if not option_spec:\n        raise Exception('The option {} is not present in the configuration file'.format(argument_name))\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name)\n    if not parser_spec:\n        raise SyntaxError('Unknown option \"%s\" in command \"%s\"' % (argument_name, command_name))\n\n    return parser_spec\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError('Command name \"{}\" not found.'.format(command_name))\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError('Argument \"{}\" not found in the spec.'.format(argument_name))\n    return self.spec_dict[command_name][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, None)\n    if parser_spec:\n        return parser_spec\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self._get_all_options_spec(command_name, argument_name)\n    if not parser_specs:\n        return None\n    return self.spec_dict[parser_specs[0]]\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    parser_name = command_name + '_' + argument_name\n    if parser_name not in self.spec_dict:\n        raise InvalidOptionSpec('The \"%s\" option does not exist.' % argument_name)\n    return self.spec_dict[parser_name]\n", "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self._include_groups(self.spec_dict)\n    return parser_specs[command_name][argument_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, {})\n    if not isinstance(parser_spec, dict):\n        raise ValueError('get_option_spec called with an invalid option spec: %s' % command_name)\n    return parser_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    if not option_spec:\n        raise Exception('The option {} is not present in the configuration file'.format(argument_name))\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name)\n    if not parser_spec:\n        raise SyntaxError('Unknown option \"%s\" in command \"%s\"' % (argument_name, command_name))\n\n    return parser_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError('Command name \"{}\" not found.'.format(command_name))\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError('Argument \"{}\" not found in the spec.'.format(argument_name))\n    return self.spec_dict[command_name][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, None)\n    if parser_spec:\n        return parser_spec\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self._get_all_options_spec(command_name, argument_name)\n    if not parser_specs:\n        return None\n    return self.spec_dict[parser_specs[0]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_name = command_name + '_' + argument_name\n    if parser_name not in self.spec_dict:\n        raise InvalidOptionSpec('The \"%s\" option does not exist.' % argument_name)\n    return self.spec_dict[parser_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self._include_groups(self.spec_dict)\n    return parser_specs[command_name][argument_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args,\n    )\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args('silent', args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args, self._merge_duplicated_cli_args)\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None and arg!= \"-\"]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args('silent', args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args, self._merge_duplicated_cli_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None and arg!= \"-\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.vars:\n            raise AnsibleFilterError(\"'%s' is not a recognized variable in ansible-callback. Options are: %s\" % (arg, list(self.vars.keys())))\n", "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(args)\n    for arg_name in required_args:\n        if arg_name not in args:\n            raise ArgumentError(\n                'Missing argument \"{}\" in \"{}\"'.format(\n                    arg_name, self.__class__.__name__\n                )\n            )\n", "def validate_requires_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n\n    for arg_name in args.keys():\n        if arg_name in self.vars and args[arg_name] is not None:\n            raise BadArgumentError(\n                'Argument \"{0}\" cannot be provided as a variable name. '\n                'Please check your configuration.'.format(arg_name))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg in self.vars and args[arg] is not None:\n            raise ArgumentError(\n                '\"{}\" argument can only be provided once'.format(arg))\n", "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    args_with_required_args = [arg for arg in args if arg in required_args]\n    if len(args_with_required_args) == 0:\n        raise InvalidArgument(\n            'Ansible playbook requires at least one argument \"{}\"'.format(\n                required_args.keys()[0]))\n", "def validate_requires_args(self, args):\n    return all(args.get(arg_name, None) is not None\n               for arg_name in self.required_args)\n", "def validate_requires_args(self, args):\n    for arg_name in args:\n        if arg_name not in self.vars and arg_name not in self.defaults:\n            raise Exception(\n                'Required argument \"{}\" not provided.'.format(arg_name))\n", "def validate_requires_args(self, args):\n    return set(args).issubset(self.vars)\n", "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    for arg in required_args:\n        if arg not in args:\n            raise exceptions.ArgumentError(\n                'Missing required argument \"{}\" in \"{}\"'.format(arg, self.cli_args_file_name)\n            )\n", "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(args)\n    required_args = arg_spec.args[-len(arg_spec.defaults):]\n\n    for arg in required_args:\n        if arg not in self.vars:\n            raise exceptions.ArgumentTypeError(\n                '{} requires argument {}'.format(\n                    self.plugin_path,\n                    arg\n                )\n            )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.vars:\n            raise AnsibleFilterError(\"'%s' is not a recognized variable in ansible-callback. Options are: %s\" % (arg, list(self.vars.keys())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(args)\n    for arg_name in required_args:\n        if arg_name not in args:\n            raise ArgumentError(\n                'Missing argument \"{}\" in \"{}\"'.format(\n                    arg_name, self.__class__.__name__\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n\n    for arg_name in args.keys():\n        if arg_name in self.vars and args[arg_name] is not None:\n            raise BadArgumentError(\n                'Argument \"{0}\" cannot be provided as a variable name. '\n                'Please check your configuration.'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg in self.vars and args[arg] is not None:\n            raise ArgumentError(\n                '\"{}\" argument can only be provided once'.format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    args_with_required_args = [arg for arg in args if arg in required_args]\n    if len(args_with_required_args) == 0:\n        raise InvalidArgument(\n            'Ansible playbook requires at least one argument \"{}\"'.format(\n                required_args.keys()[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all(args.get(arg_name, None) is not None\n               for arg_name in self.required_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg_name in args:\n        if arg_name not in self.vars and arg_name not in self.defaults:\n            raise Exception(\n                'Required argument \"{}\" not provided.'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return set(args).issubset(self.vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    for arg in required_args:\n        if arg not in args:\n            raise exceptions.ArgumentError(\n                'Missing required argument \"{}\" in \"{}\"'.format(arg, self.cli_args_file_name)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(args)\n    required_args = arg_spec.args[-len(arg_spec.defaults):]\n\n    for arg in required_args:\n        if arg not in self.vars:\n            raise exceptions.ArgumentTypeError(\n                '{} requires argument {}'.format(\n                    self.plugin_path,\n                    arg\n                )\n            )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(self, args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_def in six.iteritems(options_spec):\n        if self._merge_duplicated_cli_args(args, arg_def):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    args = self._validate_requires_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                  args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    args_with_deprecation = []\n    for arg_name, arg_type, arg_default in args:\n        if arg_type in required_when:\n            args_with_deprecation.append(\n                (arg_name, arg_type, arg_default))\n    return args_with_deprecation\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self.validate_arg_sources\n        self.vars\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self.validate_choices_args(self, args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    return self._merge_duplicated_cli_args(args, required_when)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self._merge_duplicated_cli_args(args)\n        self._merge_duplicated_cli_args(cli_args)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(self, args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_def in six.iteritems(options_spec):\n        if self._merge_duplicated_cli_args(args, arg_def):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    args = self._validate_requires_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                  args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    args_with_deprecation = []\n    for arg_name, arg_type, arg_default in args:\n        if arg_type in required_when:\n            args_with_deprecation.append(\n                (arg_name, arg_type, arg_default))\n    return args_with_deprecation\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self.validate_arg_sources\n        self.vars\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self.validate_choices_args(self, args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    return self._merge_duplicated_cli_args(args, required_when)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self._merge_duplicated_cli_args(args)\n        self._merge_duplicated_cli_args(cli_args)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) > self.vars.get('max_args', None):\n        raise ArgumentTooLongException\n", "def validate_length_args(self, args):\n    for arg in args:\n        if len(arg) > self.vars[args.index(arg)][\"value\"]:\n            raise ArgumentError(\n                \"Argument '{}' is longer than the specified value \"\n                \"'{}'\".format(arg, self.vars[args.index(arg)][\"value\"])\n            )\n", "def validate_length_args(self, args):\n    for key, value in args.items():\n        if isinstance(value, list):\n            if len(value) > self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length less than {}'.format(key, self.vars[key]['length']))\n        else:\n            if len(value)!= self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length {}'.format(key, self.vars[key]['length']))\n", "def validate_length_args(self, args):\n    lengths = self.vars.get('lengths', [])\n    for i in range(len(lengths)):\n        if len(args) > lengths[i]:\n            return False\n    return True\n", "def validate_length_args(self, args):\n    arg_names = self.vars[\"arguments\"]\n    if len(args) > len(arg_names):\n        raise exceptions.CLIAbort(\n            \"Too many arguments! (%d > %d)\" % (len(args), len(arg_names))\n        )\n", "def validate_length_args(self, args):\n    arg_list = args.split(' ')\n    if len(arg_list) > len(self.vars):\n        raise ArgumentError('Too many arguments!')\n", "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentTooLongException\n", "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentError(\n            'Too many arguments: {} > {}'.format(\n                len(args), self.vars['max_args']))\n", "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[args[arg]['count']]:\n            raise CommandError('{} is longer than {}'.format(arg, self.vars[arg]['count']))\n", "def validate_length_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if not spec_args:\n        return\n\n    arg_spec = inspect.getargspec(args)\n    if arg_spec.args and arg_spec.args[0] in spec_args:\n        return\n\n    return args\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars.get('max_args', None):\n        raise ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for arg in args:\n        if len(arg) > self.vars[args.index(arg)][\"value\"]:\n            raise ArgumentError(\n                \"Argument '{}' is longer than the specified value \"\n                \"'{}'\".format(arg, self.vars[args.index(arg)][\"value\"])\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for key, value in args.items():\n        if isinstance(value, list):\n            if len(value) > self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length less than {}'.format(key, self.vars[key]['length']))\n        else:\n            if len(value)!= self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length {}'.format(key, self.vars[key]['length']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    lengths = self.vars.get('lengths', [])\n    for i in range(len(lengths)):\n        if len(args) > lengths[i]:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_names = self.vars[\"arguments\"]\n    if len(args) > len(arg_names):\n        raise exceptions.CLIAbort(\n            \"Too many arguments! (%d > %d)\" % (len(args), len(arg_names))\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_list = args.split(' ')\n    if len(arg_list) > len(self.vars):\n        raise ArgumentError('Too many arguments!')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentError(\n            'Too many arguments: {} > {}'.format(\n                len(args), self.vars['max_args']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[args[arg]['count']]:\n            raise CommandError('{} is longer than {}'.format(arg, self.vars[arg]['count']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if not spec_args:\n        return\n\n    arg_spec = inspect.getargspec(args)\n    if arg_spec.args and arg_spec.args[0] in spec_args:\n        return\n\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    for arg_name in arg_spec.keys():\n        if arg_spec[arg_name] not in self.vars['args']:\n            raise ValueError(\n                'Must specify {} argument'.format(arg_name))\n", "def validate_choices_args(self, args):\n    args_dict = vars(args)\n    args_dict.pop('self', None)\n    args_dict = self._merge_duplicated_cli_args(args_dict)\n\n    if args_dict == self.defaults:\n        return args\n\n    choices = args_dict.get('choices', None)\n    if choices is not None:\n        for choice in choices:\n            if args_dict.get(choice) is None:\n                raise CLIError('choice {0} is required'.format(choice))\n\n    return args\n", "def validate_choices_args(self, args):\n    spec_args = self.vars.get('__spec_args__', {})\n    if args not in spec_args:\n        raise UsageError(\n            '\"{}\" is not a valid choice argument. Choose from: {}'\n           .format(args, list(spec_args.keys())))\n", "def validate_choices_args(self, args):\n    if args.choices is not None:\n        valid_choices = args.choices.split(',')\n        for choice in args.choices.split(','):\n            if choice not in valid_choices:\n                return False\n\n    return True\n", "def validate_choices_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type = self.vars[arg_name]\n        if arg_type is None:\n            continue\n        if arg_value not in arg_type.choices:\n            raise CLIError(\"{0} is not a valid choice for {1}\".format(arg_value, arg_name))\n", "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    return arg_spec.get('choices') is not None\n", "def validate_choices_args(self, args):\n    for arg_name, arg_type in args.items():\n        arg_name = arg_name.replace('_', '-')\n        if arg_name not in self.vars['__args__']:\n            raise CLIError(\n                '{} is not a valid choice for {}'.format(arg_name, self.vars['__name__']))\n", "def validate_choices_args(self, args):\n    for arg in args:\n        if arg not in self.vars.keys() or args[arg] is None:\n            return False\n\n    return True\n", "def validate_choices_args(self, args):\n    choices = self.get_choices()\n    if args not in choices:\n        raise ArgumentTypeError(\"{} is not a valid choices argument\".format(args))\n", "def validate_choices_args(self, args):\n    arg_spec = inspect.getargspec(self.get_spec_defaults)\n    for arg in args:\n        if arg not in arg_spec.args:\n            raise ArgumentError(\"Argument '{}' is not a valid choice argument.\".format(arg))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    for arg_name in arg_spec.keys():\n        if arg_spec[arg_name] not in self.vars['args']:\n            raise ValueError(\n                'Must specify {} argument'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    args_dict = vars(args)\n    args_dict.pop('self', None)\n    args_dict = self._merge_duplicated_cli_args(args_dict)\n\n    if args_dict == self.defaults:\n        return args\n\n    choices = args_dict.get('choices', None)\n    if choices is not None:\n        for choice in choices:\n            if args_dict.get(choice) is None:\n                raise CLIError('choice {0} is required'.format(choice))\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    spec_args = self.vars.get('__spec_args__', {})\n    if args not in spec_args:\n        raise UsageError(\n            '\"{}\" is not a valid choice argument. Choose from: {}'\n           .format(args, list(spec_args.keys())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices is not None:\n        valid_choices = args.choices.split(',')\n        for choice in args.choices.split(','):\n            if choice not in valid_choices:\n                return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type = self.vars[arg_name]\n        if arg_type is None:\n            continue\n        if arg_value not in arg_type.choices:\n            raise CLIError(\"{0} is not a valid choice for {1}\".format(arg_value, arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    return arg_spec.get('choices') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg_name, arg_type in args.items():\n        arg_name = arg_name.replace('_', '-')\n        if arg_name not in self.vars['__args__']:\n            raise CLIError(\n                '{} is not a valid choice for {}'.format(arg_name, self.vars['__name__']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg in args:\n        if arg not in self.vars.keys() or args[arg] is None:\n            return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = self.get_choices()\n    if args not in choices:\n        raise ArgumentTypeError(\"{} is not a valid choices argument\".format(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    arg_spec = inspect.getargspec(self.get_spec_defaults)\n    for arg in args:\n        if arg not in arg_spec.args:\n            raise ArgumentError(\"Argument '{}' is not a valid choice argument.\".format(arg))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    arg_spec = inspect.getargspec(self.get_answer)\n    if args is None or args[0] not in arg_spec.args:\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: %s' % args[0])\n    if args[0] =='self':\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: self')\n", "def validate_min_max_args(self, args):\n    arg_type = args.get('--type')\n    min_arg_value = self.vars.get(arg_type, None)\n    max_arg_value = self.vars.get(arg_type + '-max', None)\n    if min_arg_value is not None and max_arg_value is not None:\n        if min_arg_value > max_arg_value:\n            raise CLIError('--type={} can not be greater than {}.'.format(\n                arg_type, arg_type + '-max'))\n", "def validate_min_max_args(self, args):\n    min_value = args.get('--min')\n    max_value = args.get('--max')\n    if min_value and max_value:\n        if min_value > max_value:\n            raise CLIError(\"--min must be lower than --max.\")\n", "def validate_min_max_args(self, args):\n    for arg_name, arg_type in args.items():\n        if arg_type not in self.vars.types:\n            raise ArgumentTypeError(\n                'Argument \"{}\" is not a valid argument type. Choose between '\n                '{}.'.format(arg_name, ', '.join(self.vars.types)))\n", "def validate_min_max_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type, arg_default = self.vars[arg_name]\n        if not isinstance(arg_value, arg_type):\n            raise InvalidArgumentError(\"Argument {0} should be of type {1}\".format(arg_name, arg_type))\n        if arg_default is not None and arg_value == arg_default:\n            continue\n        if not self.validate_arg_deprecation(cli_args=args, answer_file_args=args):\n            return False\n    return True\n", "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    for arg_name in args:\n        if args[arg_name] < self.vars[arg_name].minimum or args[arg_name] > self.vars[arg_name].maximum:\n            raise ArgumentError(\"Argument '{0}' must be between {1} and {2}\".format(arg_name, self.vars[arg_name].minimum, self.vars[arg_name].maximum))\n", "def validate_min_max_args(self, args):\n    valid_args = self.validate_arg_deprecation(cli_args=args, answer_file_args=args)\n    return valid_args\n", "def validate_min_max_args(self, args):\n    arg_names = self.vars.keys()\n    arg_names.sort()\n    args = dict((arg_name, args.get(arg_name)) for arg_name in arg_names)\n\n    min_arg = args.get('min')\n    max_arg = args.get('max')\n\n    if min_arg and max_arg:\n        if not (min_arg >= 0 and max_arg <= 100):\n            raise CommandArgumentError(\n                'Minimum value for argument \"{0}\" must be between 0 and 100'.format(min_arg)\n            )\n", "def validate_min_max_args(self, args):\n    spec_options = self.vars.get('__spec_options__', {})\n    if not isinstance(args, dict):\n        args = vars(args)\n\n    for arg_name, arg_type in args.items():\n        if arg_type not in spec_options:\n            raise AnsibleFilterError(\"Argument type '%s' is not supported\" % arg_type)\n\n        if arg_name not in self.vars:\n            raise AnsibleFilterError(\"Argument name '%s' is not set\" % arg_name)\n\n        min_value = spec_options[arg_name]['min']\n        max_value = spec_options[arg_name]['max']\n        if min_value and max_value:\n            if args[arg_name] < min_value:\n                raise AnsibleFilterError(\"Argument '%s' is lower than %s\" % (arg_name, min_value))\n        if args[arg_name] > max_value:\n            raise AnsibleFilterError(\"Argument '%s' is higher than %s", "def validate_min_max_args(self, args):\n    arg_types = self.vars[\"types\"]\n    if args is not None:\n        for arg in args:\n            arg_types = self.vars[arg]\n            if arg_types is None:\n                continue\n            if arg_types.min is not None and arg_types.max is not None:\n                if arg_types.min > arg_types.max:\n                    raise CommandError(\"Argument '{}' must be between {}\".format(arg, arg_types.min))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    arg_spec = inspect.getargspec(self.get_answer)\n    if args is None or args[0] not in arg_spec.args:\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: %s' % args[0])\n    if args[0] =='self':\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: self')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_type = args.get('--type')\n    min_arg_value = self.vars.get(arg_type, None)\n    max_arg_value = self.vars.get(arg_type + '-max', None)\n    if min_arg_value is not None and max_arg_value is not None:\n        if min_arg_value > max_arg_value:\n            raise CLIError('--type={} can not be greater than {}.'.format(\n                arg_type, arg_type + '-max'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_value = args.get('--min')\n    max_value = args.get('--max')\n    if min_value and max_value:\n        if min_value > max_value:\n            raise CLIError(\"--min must be lower than --max.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    for arg_name, arg_type in args.items():\n        if arg_type not in self.vars.types:\n            raise ArgumentTypeError(\n                'Argument \"{}\" is not a valid argument type. Choose between '\n                '{}.'.format(arg_name, ', '.join(self.vars.types)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type, arg_default = self.vars[arg_name]\n        if not isinstance(arg_value, arg_type):\n            raise InvalidArgumentError(\"Argument {0} should be of type {1}\".format(arg_name, arg_type))\n        if arg_default is not None and arg_value == arg_default:\n            continue\n        if not self.validate_arg_deprecation(cli_args=args, answer_file_args=args):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    for arg_name in args:\n        if args[arg_name] < self.vars[arg_name].minimum or args[arg_name] > self.vars[arg_name].maximum:\n            raise ArgumentError(\"Argument '{0}' must be between {1} and {2}\".format(arg_name, self.vars[arg_name].minimum, self.vars[arg_name].maximum))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    valid_args = self.validate_arg_deprecation(cli_args=args, answer_file_args=args)\n    return valid_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_names = self.vars.keys()\n    arg_names.sort()\n    args = dict((arg_name, args.get(arg_name)) for arg_name in arg_names)\n\n    min_arg = args.get('min')\n    max_arg = args.get('max')\n\n    if min_arg and max_arg:\n        if not (min_arg >= 0 and max_arg <= 100):\n            raise CommandArgumentError(\n                'Minimum value for argument \"{0}\" must be between 0 and 100'.format(min_arg)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    spec_options = self.vars.get('__spec_options__', {})\n    if not isinstance(args, dict):\n        args = vars(args)\n\n    for arg_name, arg_type in args.items():\n        if arg_type not in spec_options:\n            raise AnsibleFilterError(\"Argument type '%s' is not supported\" % arg_type)\n\n        if arg_name not in self.vars:\n            raise AnsibleFilterError(\"Argument name '%s' is not set\" % arg_name)\n\n        min_value = spec_options[arg_name]['min']\n        max_value = spec_options[arg_name]['max']\n        if min_value and max_value:\n            if args[arg_name] < min_value:\n                raise AnsibleFilterError(\"Argument '%s' is lower than %s\" % (arg_name, min_value))\n        if args[arg_name] > max_value:\n            raise AnsibleFilterError(\"Argument '%s' is higher than %s", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_types = self.vars[\"types\"]\n    if args is not None:\n        for arg in args:\n            arg_types = self.vars[arg]\n            if arg_types is None:\n                continue\n            if arg_types.min is not None and arg_types.max is not None:\n                if arg_types.min > arg_types.max:\n                    raise CommandError(\"Argument '{}' must be between {}\".format(arg, arg_types.min))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                        ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args(command_name, options_spec,\n                                         args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    return self.vars[type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(self, cli_args)\n             self.validate_min_max_args(args)\n             self._merge_duplicated_cli_args(cli_args)\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self.resolve_custom_types([type_name, option_name, spec_option])\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self._merge_duplicated_cli_args(cli_args)\n             self.validate_choices_args(args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n    \"\"\"\n    return self.vars.get(option_name, None)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self.vars = self.vars.copy()\n             self.vars[type_name][option_name] = spec_option\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args,spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_arg_sources()\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._parse_args(arg_parser, args)\n    return self.vars[type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self._merge_duplicated_cli_args(cli_args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n             self.validate_arg_deprecation(cli_args, answer_file_args)\n             self.__init__(self, subparser, vars_dir, defaults_dir, plugin_path)\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self.validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    \""], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                        ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args(command_name, options_spec,\n                                         args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    return self.vars[type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(self, cli_args)\n             self.validate_min_max_args(args)\n             self._merge_duplicated_cli_args(cli_args)\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self.resolve_custom_types([type_name, option_name, spec_option])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self._merge_duplicated_cli_args(cli_args)\n             self.validate_choices_args(args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n    \"\"\"\n    return self.vars.get(option_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self.vars = self.vars.copy()\n             self.vars[type_name][option_name] = spec_option\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args,spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_arg_sources()\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._parse_args(arg_parser, args)\n    return self.vars[type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self._merge_duplicated_cli_args(cli_args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n             self.validate_arg_deprecation(cli_args, answer_file_args)\n             self.__init__(self, subparser, vars_dir, defaults_dir, plugin_path)\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self.validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    \"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    # pylint: disable=no-self-use\n    \"\"\"\n    Split input arguments to control nested and custom.\n    Controls arguments: these arguments will not be put into the spec\n    yml file.\n\n    Nested arguments: are used by the Ansible playbooks and will be\n    put into the spec yml file.\n\n    Custom arguments:\n    Custom ansible variables to be used instead of the normal nested\n    usage.\n\n    :param args: the collected list of args.\n    :return: (dict, dict): flat dicts (control_args, nested_args) with\n    import string os collections six infrared file\n    LOG.info(\"nested_args: %s\", nested_args)\n    \"\"\"\n    return None, None\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('custom', args)\n", "def get_nested_custom_and_control_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    if args.get('--type'):\n        nested_args['type'] = args.get('--type')\n    if args.get('--name'):\n        nested_args['name'] = args.get('--name')\n    if args.get('--path'):\n        nested_args['path'] = args.get('--path')\n    if args.get('--variable-only'):\n        nested_args['variable_only'] = args.get('--variable-only')\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', [])\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, val in args.items():\n        if isinstance(val, dict):\n            nested_args[key] = val\n        elif isinstance(val, list):\n            control_args[key] = val\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name in args:\n        if arg_name in self.vars.keys() and args[arg_name] is not None:\n            nested_args[arg_name] = args[arg_name]\n        elif arg_name in self.vars.keys() and args[arg_name] is None:\n            control_args[arg_name] = None\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        args['custom'] = self.resolve_custom_types(args['custom'])\n    return args, {}\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name, arg in args.items():\n        if arg_name in ['--list']:\n            nested_args['list'] = arg\n        elif arg_name in ['--show-all']:\n            nested_args['list'] = arg\n        elif arg_name in ['--vars']:\n            nested_args['vars'] = arg\n        elif arg_name in ['--defaults']:\n            nested_args['defaults'] = arg\n        elif arg_name in ['--check-only']:\n            nested_args['check_only'] = arg\n        elif arg_name in ['--list-only']:\n            nested_args['list_only'] = arg\n        elif arg_name in self.vars:\n            control_args[arg_name] = self.vars[arg_name]\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('Custom', args), self._get_conditionally_required_args('Control', args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    # pylint: disable=no-self-use\n    \"\"\"\n    Split input arguments to control nested and custom.\n    Controls arguments: these arguments will not be put into the spec\n    yml file.\n\n    Nested arguments: are used by the Ansible playbooks and will be\n    put into the spec yml file.\n\n    Custom arguments:\n    Custom ansible variables to be used instead of the normal nested\n    usage.\n\n    :param args: the collected list of args.\n    :return: (dict, dict): flat dicts (control_args, nested_args) with\n    import string os collections six infrared file\n    LOG.info(\"nested_args: %s\", nested_args)\n    \"\"\"\n    return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('custom', args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    if args.get('--type'):\n        nested_args['type'] = args.get('--type')\n    if args.get('--name'):\n        nested_args['name'] = args.get('--name')\n    if args.get('--path'):\n        nested_args['path'] = args.get('--path')\n    if args.get('--variable-only'):\n        nested_args['variable_only'] = args.get('--variable-only')\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', [])\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, val in args.items():\n        if isinstance(val, dict):\n            nested_args[key] = val\n        elif isinstance(val, list):\n            control_args[key] = val\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name in args:\n        if arg_name in self.vars.keys() and args[arg_name] is not None:\n            nested_args[arg_name] = args[arg_name]\n        elif arg_name in self.vars.keys() and args[arg_name] is None:\n            control_args[arg_name] = None\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        args['custom'] = self.resolve_custom_types(args['custom'])\n    return args, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name, arg in args.items():\n        if arg_name in ['--list']:\n            nested_args['list'] = arg\n        elif arg_name in ['--show-all']:\n            nested_args['list'] = arg\n        elif arg_name in ['--vars']:\n            nested_args['vars'] = arg\n        elif arg_name in ['--defaults']:\n            nested_args['defaults'] = arg\n        elif arg_name in ['--check-only']:\n            nested_args['check_only'] = arg\n        elif arg_name in ['--list-only']:\n            nested_args['list_only'] = arg\n        elif arg_name in self.vars:\n            control_args[arg_name] = self.vars[arg_name]\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('Custom', args), self._get_conditionally_required_args('Control', args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(extra_vars + vars_dict.get('extra-vars', []))\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return extra_vars\n\n    merged_vars = vars_dict.copy()\n    merged_vars.update(extra_vars)\n\n    return merged_vars\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra-vars' not in vars_dict:\n        vars_dict['_extra-vars'] = extra_vars\n    else:\n        vars_dict['_extra-vars'].extend(extra_vars)\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(extra_vars + vars_dict.get('extra-vars', []))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return extra_vars\n\n    merged_vars = vars_dict.copy()\n    merged_vars.update(extra_vars)\n\n    return merged_vars\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra-vars' not in vars_dict:\n        vars_dict['_extra-vars'] = extra_vars\n    else:\n        vars_dict['_extra-vars'].extend(extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = {}\n    if extra_vars is not None:\n        cli_args = vars(extra_vars)\n\n    if ansible_args is not None:\n        cli_args.update(ansible_args)\n\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose=verbose,\n     ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    ir_workspace = ir_workspace.get_workspace()\n    ansible_args = ansible_args or dict()\n\n    with tempfile.NamedTemporaryFile(prefix=\"ansible-playbook-\") as playbook_file:\n        LOG.info(\"Running ansible-playbook %s %s %s %s\",\n                 playbook_file.name, ir_workspace.name, ir_plugin.name, extra_vars)\n        return", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                       to Ansible. with import tempfile redatetime sys json\n                       distutils os errno main datetime infrared ansible file\n                       LOG\n    :param _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    cli_args = {\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n      ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n        :param ansible_args dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n\n    # Load the plugin\n    ir_plugin ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ansible_args or dict()\n    cli_args['playbook_path'] = playbook_path\n    cli_args['verbose'] = verbose or ir_workspace.verbose\n    cli_args['extra_vars'] = extra_vars or ir_workspace.extra_vars\n\n    LOG.info('Running ansible-playbook %s', ir", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n        LOG\n    \"\"\"\n    return _run_playbook(cli_args=_run_playbook(cli_args, vars_dict={\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args,\n    }, ir_workspace=ir_workspac", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ['--playbook=%s' % playbook_path]\n    if extra_vars:\n        cli_args.extend(extra_vars.keys())\n    LOG.debug(\"Executing ansible-playbook %s\", cli_args)\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose=verbose,\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ['--verbose', '--extra-vars', extra_vars, '--ansible-playbook',\n               playbook_path]\n    cli_args = _run_playbook(cli_args, vars_dict=ansible_args, ir_workspace=ir_workspace,\n                       ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n\n    ir_args = ir_plugin.get_arguments(ir_workspace, ir_playbook_path)\n    ansible_args = ansible_args or {}\n\n    cli_args = {}\n    cli_args.update(ansible_args)\n    cli_args.update(extra_vars or {})\n    cli_args['playbook_path'] = playbook_path\n    cli_args['verbosity'] = verbose or ir_args.get('verbo", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                         to Ansible. with import tempfile redatetime sys json\n                         distutils os errno main datetime infrared ansible file\n                         LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    LOG.info('Running %s on %s', playbook_path, ir_workspace)\n    return _run_playbook(cli_args, vars_dict={}, ir_workspace=ir_workspace,\n                      "], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = {}\n    if extra_vars is not None:\n        cli_args = vars(extra_vars)\n\n    if ansible_args is not None:\n        cli_args.update(ansible_args)\n\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose=verbose,\n     ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    ir_workspace = ir_workspace.get_workspace()\n    ansible_args = ansible_args or dict()\n\n    with tempfile.NamedTemporaryFile(prefix=\"ansible-playbook-\") as playbook_file:\n        LOG.info(\"Running ansible-playbook %s %s %s %s\",\n                 playbook_file.name, ir_workspace.name, ir_plugin.name, extra_vars)\n        return", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                       to Ansible. with import tempfile redatetime sys json\n                       distutils os errno main datetime infrared ansible file\n                       LOG\n    :param _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    cli_args = {\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n        :param ansible_args dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n\n    # Load the plugin\n    ir_plugin ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ansible_args or dict()\n    cli_args['playbook_path'] = playbook_path\n    cli_args['verbose'] = verbose or ir_workspace.verbose\n    cli_args['extra_vars'] = extra_vars or ir_workspace.extra_vars\n\n    LOG.info('Running ansible-playbook %s', ir", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n        LOG\n    \"\"\"\n    return _run_playbook(cli_args=_run_playbook(cli_args, vars_dict={\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args,\n    }, ir_workspace=ir_workspac", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ['--playbook=%s' % playbook_path]\n    if extra_vars:\n        cli_args.extend(extra_vars.keys())\n    LOG.debug(\"Executing ansible-playbook %s\", cli_args)\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose=verbose,\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = ['--verbose', '--extra-vars', extra_vars, '--ansible-playbook',\n               playbook_path]\n    cli_args = _run_playbook(cli_args, vars_dict=ansible_args, ir_workspace=ir_workspace,\n                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n\n    ir_args = ir_plugin.get_arguments(ir_workspace, ir_playbook_path)\n    ansible_args = ansible_args or {}\n\n    cli_args = {}\n    cli_args.update(ansible_args)\n    cli_args.update(extra_vars or {})\n    cli_args['playbook_path'] = playbook_path\n    cli_args['verbosity'] = verbose or ir_args.get('verbo", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                         to Ansible. with import tempfile redatetime sys json\n                         distutils os errno main datetime infrared ansible file\n                         LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    LOG.info('Running %s on %s', playbook_path, ir_workspace)\n    return _run_playbook(cli_args, vars_dict={}, ir_workspace=ir_workspace,\n                      ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return AnsibleRunner(cli_args, ir_workspace, ir_plugin).run_playbook(vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return {\n            \"result\": \"in progress\",\n            \"message\": \"The plugin is still running\"\n        }\n\n    ir_workspace.create_plugin(ir_plugin)\n    return ansible.run(vars_dict, cli_args=cli_args, ir_workspace=ir_workspace)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['changed'] = False\n    ansible_results['results'] = dict()\n    ansible_results['results']['ansible_facts'] = dict()\n\n    # load variables in Ansible results\n    for var_name, var_value in vars_dict.items():\n        try:\n            ansible_results['results']['ansible_facts'][var_name] = var_value\n            # run the playbook with the vars dict and record the result in Ansible results\n            result = ir_workspace.run_playbook(var_name, var_value)\n            # record the result in ansible_results dict\n            ansible_results['results']['ansible_facts'][var_name] = result\n        except Exception as e:\n            ansible_results['results']['ansible_facts'][var_name] = str(e)\n            ansible_results['result", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.init(ir_workspace, ir_workspace.vars, ir_workspace.vars_files)\n\n    # Initialize the ansible plugin\n    ansible_plugin = AnsiblePlugin(vars_dict, ir_workspace, ir_plugin)\n\n    # Run the cli\n    ansible_result = ansible_plugin.run()\n\n    return ansible_result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with\n    \"\"\"\n    playbook_path = ir_workspace.ansible_playbook_path\n    try:\n        ansible_result = cli_args[0] + ['-i', ir_plugin.infrared_id, '-v', vars_dict]\n        ansible_result += ['-c', playbook_path]\n        ansible_result += cli_args[1:]\n        return ansible_result\n    except IndexError:\n        raise InfraredAnsibleRunnerException(\"Playbook path missing\")\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return ansible.runner.Runner(\n        hosts=ir_workspace.hosts,\n        extra_vars=ansible_vars,\n        playbook=cli_args[0],\n        verbosity=cli_args[1],\n        check_status=True,\n        check_input=True,\n        check_output=True,\n        results_dir=ir_workspace.results_dir,\n        private_key_file=ir_workspace.private_key_file,\n        ssh_username=ir_workspace.ssh_username,\n        ssh_password=ir_workspace.ssh_password\n    )\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible results with\n    \"\"\"\n    logger.info(\"Running ansible with vars: %s\", vars_dict)\n\n    return cli_args, ir_workspace.ansible.run_playbook(vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.values())\n    ansible_args.extend(ir_plugin.get_playbook_vars().values())\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: add tests for these vars to be used in the cli\n    results = ir_workspace.run_playbook(cli_args)\n    # TODO: add tests for vars dict\n    return results\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return AnsibleRunner(cli_args, ir_workspace, ir_plugin).run_playbook(vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return {\n            \"result\": \"in progress\",\n            \"message\": \"The plugin is still running\"\n        }\n\n    ir_workspace.create_plugin(ir_plugin)\n    return ansible.run(vars_dict, cli_args=cli_args, ir_workspace=ir_workspace)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['changed'] = False\n    ansible_results['results'] = dict()\n    ansible_results['results']['ansible_facts'] = dict()\n\n    # load variables in Ansible results\n    for var_name, var_value in vars_dict.items():\n        try:\n            ansible_results['results']['ansible_facts'][var_name] = var_value\n            # run the playbook with the vars dict and record the result in Ansible results\n            result = ir_workspace.run_playbook(var_name, var_value)\n            # record the result in ansible_results dict\n            ansible_results['results']['ansible_facts'][var_name] = result\n        except Exception as e:\n            ansible_results['results']['ansible_facts'][var_name] = str(e)\n            ansible_results['result", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.init(ir_workspace, ir_workspace.vars, ir_workspace.vars_files)\n\n    # Initialize the ansible plugin\n    ansible_plugin = AnsiblePlugin(vars_dict, ir_workspace, ir_plugin)\n\n    # Run the cli\n    ansible_result = ansible_plugin.run()\n\n    return ansible_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with\n    \"\"\"\n    playbook_path = ir_workspace.ansible_playbook_path\n    try:\n        ansible_result = cli_args[0] + ['-i', ir_plugin.infrared_id, '-v', vars_dict]\n        ansible_result += ['-c', playbook_path]\n        ansible_result += cli_args[1:]\n        return ansible_result\n    except IndexError:\n        raise InfraredAnsibleRunnerException(\"Playbook path missing\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return ansible.runner.Runner(\n        hosts=ir_workspace.hosts,\n        extra_vars=ansible_vars,\n        playbook=cli_args[0],\n        verbosity=cli_args[1],\n        check_status=True,\n        check_input=True,\n        check_output=True,\n        results_dir=ir_workspace.results_dir,\n        private_key_file=ir_workspace.private_key_file,\n        ssh_username=ir_workspace.ssh_username,\n        ssh_password=ir_workspace.ssh_password\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible results with\n    \"\"\"\n    logger.info(\"Running ansible with vars: %s\", vars_dict)\n\n    return cli_args, ir_workspace.ansible.run_playbook(vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.values())\n    ansible_args.extend(ir_plugin.get_playbook_vars().values())\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: add tests for these vars to be used in the cli\n    results = ir_workspace.run_playbook(cli_args)\n    # TODO: add tests for vars dict\n    return results\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if not isinstance(value, six.string_types):\n            values_dict[key] = self.vars.get(key, '')\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if v is None:\n            values_dict.pop(k, None)\n        elif k in self.required and k not in self.vars:\n            raise ValueError('Missing required argument %s' % k)\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts + parser_name._long_opts:\n        if arg in values_dict and isinstance(values_dict[arg], six.string_types):\n            values_dict[arg] = [values_dict[arg]]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in args:\n        if arg in values_dict:\n            values_dict[arg] = self.resolve_custom_types(values_dict[arg])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_obj in vars(args).items():\n        if not arg_obj or arg_name in self.required_arguments:\n            continue\n\n        values_dict[arg_name] = arg_obj\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg in vars(parser_name).items():\n        if arg_name not in self.vars and arg is not None:\n            values_dict[arg_name] = arg\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name._argparser_class.parser_class._actions[parser_name.__name__]).items():\n        if isinstance(arg_value, (list, tuple)):\n            new_value = []\n            for item in arg_value:\n                if isinstance(item, six.string_types):\n                    new_value.append(item)\n                elif item is not None:\n                    new_value.append(item)\n            values_dict[arg_name] = new_value\n        else:\n            values_dict[arg_name] = arg_value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if isinstance(arg_spec, dict):\n            # It's already a dict, no need to do anything\n            continue\n\n        if arg_spec.get('type') =='string':\n            values_dict[arg_name] = self.resolve_custom_types(arg_spec, {})\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if isinstance(v, six.string_types):\n            values_dict[k] = {\"value\": v, \"type\": \"string\"}\n        elif isinstance(v, list):\n            values_dict[k] = {\"value\": v, \"type\": \"list\"}\n        elif isinstance(v, dict):\n            values_dict[k] = {\"value\": v, \"type\": \"dict\"}\n        else:\n            pass\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if isinstance(value, six.string_types):\n            values_dict[key] = self.resolve_custom_types(value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if not isinstance(value, six.string_types):\n            values_dict[key] = self.vars.get(key, '')\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if v is None:\n            values_dict.pop(k, None)\n        elif k in self.required and k not in self.vars:\n            raise ValueError('Missing required argument %s' % k)\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts + parser_name._long_opts:\n        if arg in values_dict and isinstance(values_dict[arg], six.string_types):\n            values_dict[arg] = [values_dict[arg]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in args:\n        if arg in values_dict:\n            values_dict[arg] = self.resolve_custom_types(values_dict[arg])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_obj in vars(args).items():\n        if not arg_obj or arg_name in self.required_arguments:\n            continue\n\n        values_dict[arg_name] = arg_obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg in vars(parser_name).items():\n        if arg_name not in self.vars and arg is not None:\n            values_dict[arg_name] = arg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name._argparser_class.parser_class._actions[parser_name.__name__]).items():\n        if isinstance(arg_value, (list, tuple)):\n            new_value = []\n            for item in arg_value:\n                if isinstance(item, six.string_types):\n                    new_value.append(item)\n                elif item is not None:\n                    new_value.append(item)\n            values_dict[arg_name] = new_value\n        else:\n            values_dict[arg_name] = arg_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if isinstance(arg_spec, dict):\n            # It's already a dict, no need to do anything\n            continue\n\n        if arg_spec.get('type') =='string':\n            values_dict[arg_name] = self.resolve_custom_types(arg_spec, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if isinstance(v, six.string_types):\n            values_dict[k] = {\"value\": v, \"type\": \"string\"}\n        elif isinstance(v, list):\n            values_dict[k] = {\"value\": v, \"type\": \"list\"}\n        elif isinstance(v, dict):\n            values_dict[k] = {\"value\": v, \"type\": \"dict\"}\n        else:\n            pass\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if isinstance(value, six.string_types):\n            values_dict[key] = self.resolve_custom_types(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, key))] for value in sub_dict.values()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        plugin_name: {\n            \"path\": plugin_dir,\n            \"metadata\": {\n                \"version\": get_version(plugin_dir),\n            },\n            \"validator\": validator_name,\n        }\n        for plugin_name, validator_name in get_validators_from_plugin_dir(plugin_dir).items()\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith(\"_\"))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [get_plugin_spec_flatten_value(plugin_dir, key) for key in dir(plugin_dir)] for value in sublist}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Error reading plugin spec file {0}: {1}'.format(file_path, str(e)))\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_NAME_OPTION: None,\n        PLUGIN_TYPE: PLUGIN_TYPE,\n        PLUGIN_HEADERS: get_plugin_headers(plugin_dir),\n        PLUGIN_VARIANTS: get_plugin_variants(plugin_dir),\n        PLUGIN_COMMANDS: get_plugin_commands(plugin_dir),\n        PLUGIN_EXCLUDE: get_plugin_exclude_files(plugin_dir),\n        PLUGIN_OPTIONS: get_plugin_options(plugin_dir),\n        PLUGIN_SHORTCUTS: get_plugin_shortcuts(plugin_dir),\n        PLUGIN_COMPILER_CLASSES: get_plugin_compiler_classes(plugin_dir),\n        PLUGIN_COMPILER_ARGS: get_plugin_compiler_args(plugin_dir),\n        PLUGIN_CONFIG_FILE: get_plugin_config_file(plugin_dir),\n        PLUGIN_CONFIG: get_plugin_config(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS: get_plugin_compiler_wrappers(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS_OPTIONS: get_plugin_compiler_wrappers", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'command',\n        'command': [plugin_dir + '/' + x for x in os.listdir(plugin_dir)],\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [globals()[key] for key in dir(globals()['__plugin__']) if not key.startswith('_')] for value in sublist}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, key))] for value in sub_dict.values()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        plugin_name: {\n            \"path\": plugin_dir,\n            \"metadata\": {\n                \"version\": get_version(plugin_dir),\n            },\n            \"validator\": validator_name,\n        }\n        for plugin_name, validator_name in get_validators_from_plugin_dir(plugin_dir).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith(\"_\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [get_plugin_spec_flatten_value(plugin_dir, key) for key in dir(plugin_dir)] for value in sublist}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Error reading plugin spec file {0}: {1}'.format(file_path, str(e)))\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_NAME_OPTION: None,\n        PLUGIN_TYPE: PLUGIN_TYPE,\n        PLUGIN_HEADERS: get_plugin_headers(plugin_dir),\n        PLUGIN_VARIANTS: get_plugin_variants(plugin_dir),\n        PLUGIN_COMMANDS: get_plugin_commands(plugin_dir),\n        PLUGIN_EXCLUDE: get_plugin_exclude_files(plugin_dir),\n        PLUGIN_OPTIONS: get_plugin_options(plugin_dir),\n        PLUGIN_SHORTCUTS: get_plugin_shortcuts(plugin_dir),\n        PLUGIN_COMPILER_CLASSES: get_plugin_compiler_classes(plugin_dir),\n        PLUGIN_COMPILER_ARGS: get_plugin_compiler_args(plugin_dir),\n        PLUGIN_CONFIG_FILE: get_plugin_config_file(plugin_dir),\n        PLUGIN_CONFIG: get_plugin_config(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS: get_plugin_compiler_wrappers(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS_OPTIONS: get_plugin_compiler_wrappers", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'command',\n        'command': [plugin_dir + '/' + x for x in os.listdir(plugin_dir)],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [globals()[key] for key in dir(globals()['__plugin__']) if not key.startswith('_')] for value in sublist}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    if not os.path.exists(self.ansible_config_path):\n        raise ConfigNotFoundError(\n            \"Can't find the ansible.cfg file at {}\".format(self.ansible_config_path)\n        )\n\n    os.environ['INFRENTAL_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    env_path = self._get_ansible_conf_path(infrared_home=self.infrared_home)\n\n    if os.path.exists(env_path):\n        env_contents = self._read_ansible_config(env_path)\n        env_contents['infrared_config'] = {\n            'ansible_config_path': env_path\n        }\n        self._write_ansible_config(env_contents)\n", "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    ansible_conf_path = self._get_ansible_conf_path(self.ansible_config_path)\n    os.environ['INFRARED_HOME'] = self.infrared_home\n    os.environ['ANSIBLE_CONFIG_PATH'] = ansible_conf_path\n", "def inject_config(self):\n    if not os.environ.get('INFRANRAD_PATH'):\n        os.environ['INFRANRAD_PATH'] = self.ansible_config_path\n", "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        self._create_ansible_config(self.infrared_home)\n", "def inject_config(self):\n    if self.infrared_home is not None:\n        env_vars = dict(os.environ)\n        env_vars['INFRREL_HOME'] = self.infrared_home\n        self.ansible_config_path = self._create_ansible_config(env_vars)\n", "def inject_config(self):\n    if self.ansible_config_path is not None:\n        return self._create_ansible_config(self.ansible_config_path)\n", "def inject_config(self):\n    if not os.getenv(INFRANcheck.CONFIG_PATH):\n        # If we haven't set the environment variable yet, let's create a\n        # new one\n        infrared_home = self._create_ansible_config(infrared_home=os.getcwd())\n        self.ansible_config_path = infrared_home\n", "def inject_config(self):\n    if self.ansible_config_path:\n        return self._create_ansible_config(self.ansible_config_path)\n", "def inject_config(self):\n    ansible_config_path = self._get_ansible_conf_path(self.infrared_home)\n\n    if not os.environ.get('INFRENTAL_CONFIG'):\n        os.environ['INFRENTAL_CONFIG'] = ansible_config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    if not os.path.exists(self.ansible_config_path):\n        raise ConfigNotFoundError(\n            \"Can't find the ansible.cfg file at {}\".format(self.ansible_config_path)\n        )\n\n    os.environ['INFRENTAL_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_path = self._get_ansible_conf_path(infrared_home=self.infrared_home)\n\n    if os.path.exists(env_path):\n        env_contents = self._read_ansible_config(env_path)\n        env_contents['infrared_config'] = {\n            'ansible_config_path': env_path\n        }\n        self._write_ansible_config(env_contents)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    ansible_conf_path = self._get_ansible_conf_path(self.ansible_config_path)\n    os.environ['INFRARED_HOME'] = self.infrared_home\n    os.environ['ANSIBLE_CONFIG_PATH'] = ansible_conf_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not os.environ.get('INFRANRAD_PATH'):\n        os.environ['INFRANRAD_PATH'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        self._create_ansible_config(self.infrared_home)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.infrared_home is not None:\n        env_vars = dict(os.environ)\n        env_vars['INFRREL_HOME'] = self.infrared_home\n        self.ansible_config_path = self._create_ansible_config(env_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is not None:\n        return self._create_ansible_config(self.ansible_config_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not os.getenv(INFRANcheck.CONFIG_PATH):\n        # If we haven't set the environment variable yet, let's create a\n        # new one\n        infrared_home = self._create_ansible_config(infrared_home=os.getcwd())\n        self.ansible_config_path = infrared_home\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path:\n        return self._create_ansible_config(self.ansible_config_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    ansible_config_path = self._get_ansible_conf_path(self.infrared_home)\n\n    if not os.environ.get('INFRENTAL_CONFIG'):\n        os.environ['INFRENTAL_CONFIG'] = ansible_config_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI arguments')\n    parser.add_argument('--inventory', '-i', required=False,\n                        help='Path to the inventory file to fetch.')\n    parser.add_argument('--workspace', '-w', required=False,\n                        help='Path to the infrared workspace to fetch.')\n    parser.add_argument('--no-checkout', action='store_true',\n                        help='Disable the checkout step.')\n    parser.add_argument('--no-test', action='store_true',\n                        help='Disable the test step.')\n    parser.add_argument('--no-ssl', action='store_true',\n                        help='Disable the ssl step.')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Adds the spec cli options to the main entry point.\n\n        :param subparser: the subparser object to extend. with import os sys json\n                                                                        infrared argcomplete class self.spec_handler(self,\n                                                                                                                                      parser,\n                                                                                                                                       ", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('install', help='install package data')\n\n    # Import the spec handler and add it to the subparser\n    import_spec_handler(self.spec_handler, parser)\n\n    # Add the infrared argument to the parser group\n    infrared_parser = parser.add_argument_group(title='infrared arguments')\n    infrared_parser.add_argument(\n        '--infrared', action='store_true',\n        help='enable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-install', action='store_true',\n        help='disable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-upgrade', action='store_true',\n        help='disable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-reinstall', action='store_true',\n        help='disable the infrared mode for package data')\n", "def extend_cli(self, root_subparsers):\n    # import pkg infrared\n    # pkg = importlib.import_module('pkg')\n    # self.spec_handler(parser, args)\n    # pkg.pkg_infrared.init_cli(self, root_subparsers)\n    pass\n", "def extend_cli(self, root_subparsers):\n    infrared_parser = root_subparsers.add_parser('infrared',\n                                                  help='Infrared utilities')\n    infrared_parser.add_argument(\n        '--host-file', help='Path to host file to save inventory')\n    infrared_parser.add_argument(\n        '--workspace', help='Path to inventory directory to save inventory')\n    infrared_parser.set_defaults(func=self._fetch_inventory)\n", "def extend_cli(self, root_subparsers):\n    infrared_cli_parser = root_subparsers.add_parser(\n        'infrared',\n        help='Manage the infrared content of an image.',\n    )\n\n    self._checkout_workspace(self.name, create=True)\n    infrared_cli_parser.set_defaults(\n        func=self._fetch_inventory,\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n    parser.add_argument('--verbose', action='store_true', help='Increase verbosity')\n    parser.add_argument('--workspace', dest='workspace', required=False,\n                        help='The workspace to create the infrared '\n                        '(default: {})'.format(self._checkout_workspace))\n    parser.add_argument('--fetch-inventory', dest='fetch_inventory',\n                        action='store_true', help='Fetch the infrared '\n                        'inventory from the remote host')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description='An infrared workspace manager.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--inventory',\n        required=True,\n        help='path to the inventory file.'\n    )\n    parser.add_argument(\n        '--checkout-workspace',\n        required=True,\n        help='path to the checkout workspace.'\n    )\n    parser.add_argument(\n        '--workspace-manager',\n        required=True,\n        help='Name of the workspace manager to use.'\n    )\n    parser.add_argument(\n        '--config',\n        required=False,\n        default='config.json',\n        help='Name of the configuration file.'\n    )\n    parser.add_argument(\n        '--auth-token',\n        required=True,\n        help='", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    self.spec_handler(parser, self.kwargs)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI Options')\n    parser.add_argument('--infrared-host',\n                        help='Infrared host',\n                        required=True)\n    parser.add_argument('--infrared-credentials',\n                        help='Infrared credentials',\n                        required=True)\n    parser.add_argument('--infrared-port',\n                        help='Infrared port',\n                        required=True)\n    parser.add_argument('--infrared-workspace',\n                        help='Infrared workspace',\n                        required=True)\n    parser.add_argument('--infrared-ssl-verify',\n                        help='Infrared SSL verify"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI arguments')\n    parser.add_argument('--inventory', '-i', required=False,\n                        help='Path to the inventory file to fetch.')\n    parser.add_argument('--workspace', '-w', required=False,\n                        help='Path to the infrared workspace to fetch.')\n    parser.add_argument('--no-checkout', action='store_true',\n                        help='Disable the checkout step.')\n    parser.add_argument('--no-test', action='store_true',\n                        help='Disable the test step.')\n    parser.add_argument('--no-ssl', action='store_true',\n                        help='Disable the ssl step.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Adds the spec cli options to the main entry point.\n\n        :param subparser: the subparser object to extend. with import os sys json\n                                                                        infrared argcomplete class self.spec_handler(self,\n                                                                                                                                      parser,\n                                                                                                                                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('install', help='install package data')\n\n    # Import the spec handler and add it to the subparser\n    import_spec_handler(self.spec_handler, parser)\n\n    # Add the infrared argument to the parser group\n    infrared_parser = parser.add_argument_group(title='infrared arguments')\n    infrared_parser.add_argument(\n        '--infrared', action='store_true',\n        help='enable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-install', action='store_true',\n        help='disable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-upgrade', action='store_true',\n        help='disable the infrared mode for package data')\n    infrared_parser.add_argument(\n        '--skip-reinstall', action='store_true',\n        help='disable the infrared mode for package data')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # import pkg infrared\n    # pkg = importlib.import_module('pkg')\n    # self.spec_handler(parser, args)\n    # pkg.pkg_infrared.init_cli(self, root_subparsers)\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    infrared_parser = root_subparsers.add_parser('infrared',\n                                                  help='Infrared utilities')\n    infrared_parser.add_argument(\n        '--host-file', help='Path to host file to save inventory')\n    infrared_parser.add_argument(\n        '--workspace', help='Path to inventory directory to save inventory')\n    infrared_parser.set_defaults(func=self._fetch_inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    infrared_cli_parser = root_subparsers.add_parser(\n        'infrared',\n        help='Manage the infrared content of an image.',\n    )\n\n    self._checkout_workspace(self.name, create=True)\n    infrared_cli_parser.set_defaults(\n        func=self._fetch_inventory,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n    parser.add_argument('--verbose', action='store_true', help='Increase verbosity')\n    parser.add_argument('--workspace', dest='workspace', required=False,\n                        help='The workspace to create the infrared '\n                        '(default: {})'.format(self._checkout_workspace))\n    parser.add_argument('--fetch-inventory', dest='fetch_inventory',\n                        action='store_true', help='Fetch the infrared '\n                        'inventory from the remote host')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description='An infrared workspace manager.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--inventory',\n        required=True,\n        help='path to the inventory file.'\n    )\n    parser.add_argument(\n        '--checkout-workspace',\n        required=True,\n        help='path to the checkout workspace.'\n    )\n    parser.add_argument(\n        '--workspace-manager',\n        required=True,\n        help='Name of the workspace manager to use.'\n    )\n    parser.add_argument(\n        '--config',\n        required=False,\n        default='config.json',\n        help='Name of the configuration file.'\n    )\n    parser.add_argument(\n        '--auth-token',\n        required=True,\n        help='", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    self.spec_handler(parser, self.kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI Options')\n    parser.add_argument('--infrared-host',\n                        help='Infrared host',\n                        required=True)\n    parser.add_argument('--infrared-credentials',\n                        help='Infrared credentials',\n                        required=True)\n    parser.add_argument('--infrared-port',\n                        help='Infrared port',\n                        required=True)\n    parser.add_argument('--infrared-workspace',\n                        help='Infrared workspace',\n                        required=True)\n    parser.add_argument('--infrared-ssl-verify',\n                        help='Infrared SSL verify", "is_pass": false, "return_code": 1}]}
