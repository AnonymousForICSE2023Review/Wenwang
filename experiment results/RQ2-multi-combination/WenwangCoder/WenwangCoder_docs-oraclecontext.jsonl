{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    return tz.localize(nanoseconds / 10000000.0)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        return LocalTime(nanoseconds / 1000000000)\n    else:\n        return Time(nanoseconds / 1000000000, tz=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n\n    if isinstance(nanoseconds, datetime.timedelta):\n        nanos = int(nanoseconds.total_seconds())\n    else:\n        nanos = int(nanoseconds)\n\n    # Convert to UTC\n    tz_offset = tz.utcoffset(datetime.datetime.utcnow())\n    if tz_offset is not None:\n        nanos += tz_offset.total_seconds()\n\n    # Convert to local time\n    local_time = datetime.datetime.utcfromtimestamp(nanos)\n\n    return local_time.replace(tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    dt = datetime.datetime.fromtimestamp(nanoseconds, tz)\n\n    if tz == get_current_timezone():\n        return dt\n\n    return dt.astimezone(tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        if not isinstance(tz, timezone.tzinfo):\n            raise ValueError('tz must be a timezone, not {}'.format(tz))\n\n    return tz.localize(nanoseconds)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    return tz.localize(nanoseconds / 10000000.0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        return LocalTime(nanoseconds / 1000000000)\n    else:\n        return Time(nanoseconds / 1000000000, tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = tzlocal()\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n\n    if isinstance(nanoseconds, datetime.timedelta):\n        nanos = int(nanoseconds.total_seconds())\n    else:\n        nanos = int(nanoseconds)\n\n    # Convert to UTC\n    tz_offset = tz.utcoffset(datetime.datetime.utcnow())\n    if tz_offset is not None:\n        nanos += tz_offset.total_seconds()\n\n    # Convert to local time\n    local_time = datetime.datetime.utcfromtimestamp(nanos)\n\n    return local_time.replace(tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    dt = datetime.datetime.fromtimestamp(nanoseconds, tz)\n\n    if tz == get_current_timezone():\n        return dt\n\n    return dt.astimezone(tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        if not isinstance(tz, timezone.tzinfo):\n            raise ValueError('tz must be a timezone, not {}'.format(tz))\n\n    return tz.localize(nanoseconds)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes,\n                              seconds=value.seconds)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(microseconds=value.microseconds)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes,\n                              seconds=value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(microseconds=value.microseconds)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.isoformat()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers_cache[protocol_version]\n\n    return cls._protocol_handlers_cache\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError('protocol_version must be a tuple with 3 or 4 elements')\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    if isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError(\n            'protocol_version must be a tuple with 3 or 4 elements, got {}'\n           .format(protocol_version))\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        1: Bolt1Handler,\n        2: Bolt2Handler,\n        3: Bolt3Handler,\n        4: Bolt4Handler,\n        5: Bolt5Handler,\n        6: Bolt6Handler,\n        7: Bolt7Handler,\n        8: Bolt8Handler,\n        9: Bolt9Handler,\n    }\n\n    if protocol_version is None:\n        return versions\n\n    if protocol_version in versions:\n        return versions[protocol_version]\n\n    # Not supported\n    raise TypeError(\n        'Unsupported protocol version %s. Supported versions are: %s' % (\n            protocol_version,\n            ', '.join(str(v) for v in versions.keys())\n        )\n    )\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (1, 0, 0): ProtocolHandler1,\n        (1, 1, 0): ProtocolHandler1,\n        (1, 2, 0): ProtocolHandler1,\n        (1, 3, 0): ProtocolHandler1,\n        (1, 4, 0): ProtocolHandler1,\n        (1, 5, 0): ProtocolHandler1,\n        (1, 6, 0): ProtocolHandler1,\n        (1, 7, 0): ProtocolHandler1,\n        (1, 8, 0): ProtocolHandler1,\n        (1, 9, 0): ProtocolHandler1,\n        (2, 0, 0): ProtocolHandler1,\n        (2, 1, 0): ProtocolHandler1,\n        (2, 2, 0): ProtocolHandler1,\n        (2, 3, 0): ProtocolHandler1,\n        (2, 4, 0): ProtocolHandler1,\n        (2, 5, 0): ProtocolHandler1,\n        (2, 6, 0): ProtocolHandler1,\n        (2, 7, 0): ProtocolHandler1,\n        (2, 8, 0): ProtocolHandler1,\n    ", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or cls.VERSION_TUPLE\n    return {version_tuple[0]: version_tuple[1]}\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        (3, 5): BoltProtocol3Handler,\n        (4, 5): BoltProtocol4Handler,\n        (5, 5): BoltProtocol5Handler,\n        (6, 5): BoltProtocol6Handler,\n        (7, 5): BoltProtocol7Handler,\n        (8, 5): BoltProtocol8Handler,\n        (9, 5): BoltProtocol9Handler,\n        (10, 5): BoltProtocol10Handler,\n        (11, 5): BoltProtocol11Handler,\n        (12, 5): BoltProtocol12Handler,\n        (13, 5): BoltProtocol13Handler,\n        (14, 5): BoltProtocol14Handler,\n        (15, 5): BoltProtocol15Handler,\n        (16, 5): BoltProtocol16Handler,\n        (17, 5): BoltProtocol17Handler,\n        (18, 5): BoltProtocol18Handler,\n    }\n\n    if protocol_version is not None:\n        return versions.get(protocol_version, versions.get((3, 5),", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif not isinstance(protocol_version, tuple):\n        raise TypeError('protocol_version must be a tuple with version '\n                        'tuples for each supported protocol')\n    else:\n        return {version: klass for version, klass in\n                zip(protocol_version, cls._protocol_handlers)\n                if version in protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    if isinstance(protocol_version, tuple):\n        return {version: klass for version, klass in cls._protocol_handlers.items()\n                if version in protocol_version}\n    else:\n        raise TypeError('protocol_version must be a tuple with supported versions')\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers_cache[protocol_version]\n\n    return cls._protocol_handlers_cache\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError('protocol_version must be a tuple with 3 or 4 elements')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    if isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError(\n            'protocol_version must be a tuple with 3 or 4 elements, got {}'\n           .format(protocol_version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        1: Bolt1Handler,\n        2: Bolt2Handler,\n        3: Bolt3Handler,\n        4: Bolt4Handler,\n        5: Bolt5Handler,\n        6: Bolt6Handler,\n        7: Bolt7Handler,\n        8: Bolt8Handler,\n        9: Bolt9Handler,\n    }\n\n    if protocol_version is None:\n        return versions\n\n    if protocol_version in versions:\n        return versions[protocol_version]\n\n    # Not supported\n    raise TypeError(\n        'Unsupported protocol version %s. Supported versions are: %s' % (\n            protocol_version,\n            ', '.join(str(v) for v in versions.keys())\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (1, 0, 0): ProtocolHandler1,\n        (1, 1, 0): ProtocolHandler1,\n        (1, 2, 0): ProtocolHandler1,\n        (1, 3, 0): ProtocolHandler1,\n        (1, 4, 0): ProtocolHandler1,\n        (1, 5, 0): ProtocolHandler1,\n        (1, 6, 0): ProtocolHandler1,\n        (1, 7, 0): ProtocolHandler1,\n        (1, 8, 0): ProtocolHandler1,\n        (1, 9, 0): ProtocolHandler1,\n        (2, 0, 0): ProtocolHandler1,\n        (2, 1, 0): ProtocolHandler1,\n        (2, 2, 0): ProtocolHandler1,\n        (2, 3, 0): ProtocolHandler1,\n        (2, 4, 0): ProtocolHandler1,\n        (2, 5, 0): ProtocolHandler1,\n        (2, 6, 0): ProtocolHandler1,\n        (2, 7, 0): ProtocolHandler1,\n        (2, 8, 0): ProtocolHandler1,\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or cls.VERSION_TUPLE\n    return {version_tuple[0]: version_tuple[1]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        (3, 5): BoltProtocol3Handler,\n        (4, 5): BoltProtocol4Handler,\n        (5, 5): BoltProtocol5Handler,\n        (6, 5): BoltProtocol6Handler,\n        (7, 5): BoltProtocol7Handler,\n        (8, 5): BoltProtocol8Handler,\n        (9, 5): BoltProtocol9Handler,\n        (10, 5): BoltProtocol10Handler,\n        (11, 5): BoltProtocol11Handler,\n        (12, 5): BoltProtocol12Handler,\n        (13, 5): BoltProtocol13Handler,\n        (14, 5): BoltProtocol14Handler,\n        (15, 5): BoltProtocol15Handler,\n        (16, 5): BoltProtocol16Handler,\n        (17, 5): BoltProtocol17Handler,\n        (18, 5): BoltProtocol18Handler,\n    }\n\n    if protocol_version is not None:\n        return versions.get(protocol_version, versions.get((3, 5),", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif not isinstance(protocol_version, tuple):\n        raise TypeError('protocol_version must be a tuple with version '\n                        'tuples for each supported protocol')\n    else:\n        return {version: klass for version, klass in\n                zip(protocol_version, cls._protocol_handlers)\n                if version in protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    if isinstance(protocol_version, tuple):\n        return {version: klass for version, klass in cls._protocol_handlers.items()\n                if version in protocol_version}\n    else:\n        raise TypeError('protocol_version must be a tuple with supported versions')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout, *args, **kwargs)\n            return tx.run(\"MATCH (a:Person) RETURN count(a)\")[0][0]\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            if metadata is not None:\n                self.set_metadata(metadata)\n            tx = dbms.Transaction(**kw)\n            result = f(*args, **kw)\n            if timeout is not None:\n                tx.set_timeout(timeout)\n                tx.run()\n            else:\n                tx.log()\n            return result\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        # add the metadata to the function call\n        wrapper.metadata = metadata\n\n        # add the timeout to the function call\n        wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.Transaction(dbms.get_current_transaction(), timeout)\n            return f(*args, **kwargs)\n        tx.metadata = metadata\n        tx.add_log(\"query\", \"start\")\n        return wrapped\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__timeout__ = timeout or None\n\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n\n        return wrapped\n\n    return inner\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with Transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped\n    if metadata:\n        metadata.update({'timeout': timeout})\n        return wrapper\n    else:\n        return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout, *args, **kwargs)\n            return tx.run(\"MATCH (a:Person) RETURN count(a)\")[0][0]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            if metadata is not None:\n                self.set_metadata(metadata)\n            tx = dbms.Transaction(**kw)\n            result = f(*args, **kw)\n            if timeout is not None:\n                tx.set_timeout(timeout)\n                tx.run()\n            else:\n                tx.log()\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        # add the metadata to the function call\n        wrapper.metadata = metadata\n\n        # add the timeout to the function call\n        wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.Transaction(dbms.get_current_transaction(), timeout)\n            return f(*args, **kwargs)\n        tx.metadata = metadata\n        tx.add_log(\"query\", \"start\")\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__timeout__ = timeout or None\n\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n\n        return wrapped\n\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with Transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped\n    if metadata:\n        metadata.update({'timeout': timeout})\n        return wrapper\n    else:\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "def values(self, *keys):\n    return list(self) if keys else list(self.values())\n", "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    return [item[1] for item in self._items if item[0] in keys]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "def values(self, *keys):\n    return [getattr(self, key) for key in keys]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self) if keys else list(self.values())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [item[1] for item in self._items if item[0] in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, key) for key in keys]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: v for k, v in zip(self.keys(*keys), self.values(*keys))}\n", "def data(self, *keys):\n    return {k: v for k, v in super(Record, self).data(*keys).items()\n            if k in self and v is not None}\n", "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self.values(*keys)))\n", "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key >= len(self) or key < 0:\n            raise IndexError(\"Index out of bounds\")\n        d[key] = getattr(self, key)\n    return d\n", "def data(self, *keys):\n    if keys:\n        if len(keys) > self._fields.count('index'):\n            raise IndexError\n        return {k: v for k, v in zip(keys, self._fields)}\n    return dict(zip(self._fields, self))\n", "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self.values(*keys)))\n", "def data(self, *keys):\n    return dict(zip(keys, self[keys]))\n", "def data(self, *keys):\n    rv = {}\n    for key in keys:\n        try:\n            rv[key] = self[key]\n        except IndexError:\n            pass\n    return rv\n", "def data(self, *keys):\n    return {k: v for k, v in zip(self.keys(*keys), self.values(*keys))}\n", "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k is None:\n            r[k] = None\n        else:\n            r[k] = self[k]\n    return r\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: v for k, v in zip(self.keys(*keys), self.values(*keys))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: v for k, v in super(Record, self).data(*keys).items()\n            if k in self and v is not None}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self.values(*keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key >= len(self) or key < 0:\n            raise IndexError(\"Index out of bounds\")\n        d[key] = getattr(self, key)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if keys:\n        if len(keys) > self._fields.count('index'):\n            raise IndexError\n        return {k: v for k, v in zip(keys, self._fields)}\n    return dict(zip(self._fields, self))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.keys(*keys), self.values(*keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(keys, self[keys]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    rv = {}\n    for key in keys:\n        try:\n            rv[key] = self[key]\n        except IndexError:\n            pass\n    return rv\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: v for k, v in zip(self.keys(*keys), self.values(*keys))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k is None:\n            r[k] = None\n        else:\n            r[k] = self[k]\n    return r\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    r\"\"\"\n    Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0, 0, 0, 0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n   ...\n    \"\"\"\n    if self.used == 0:\n        raise ValueError(\"Cannot pop from an empty deque\")\n    self.used -= 2\n    if self.used == 0:\n        return self.data.pop()\n    else:\n        return self.data.popleft()\n", "def pop_u16(self):\n    r\"\"\"Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0]*16\n    \"\"\"\n    self.used += 2\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    r\"\"\"\n    Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return self.data.pop() + self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.popleft()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    r\"\"\"\n    Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0, 0, 0, 0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n    0, 0, 0,...\n   ...\n    \"\"\"\n    if self.used == 0:\n        raise ValueError(\"Cannot pop from an empty deque\")\n    self.used -= 2\n    if self.used == 0:\n        return self.data.pop()\n    else:\n        return self.data.popleft()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    r\"\"\"Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0]*16\n    \"\"\"\n    self.used += 2\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    r\"\"\"\n    Remove the last two bytes of data, returning the data as a big-endian 16-bit\n    unsigned integer. with class self.used, self.data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return self.data.pop() + self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.popleft()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives\n        the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n        receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with class self.local_port\n    \"\"\"\n    self.append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with self.local_port\n    \"\"\"\n    if n < 0:\n        n = len(self.records)\n\n    records = self.records[:n]\n    self.records = records\n    self.record_size = len(self.records)\n\n    if qid!= -1:\n        records.append((qid, {}))\n\n    return DiscardRespo", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration function receives the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        self.local_port and returns the value of desired by packstream.\n    \"\"\"\n    discard_message = DiscardRecords(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration functions receive the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in with returned Response object\n        with self.local_port and returns an object of type desired by packstream.\n    \"\"\"\n    return Discard().apply(self, n, qid, dehydration_hooks, hydration_hooks,\n                          **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type Undehydrated or Unrecognized.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receive the value of type Unrecognized and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with class self.local_port\n    \"\"\"\n    self.append(DiscardResponse(n, qid, dehydration_hooks, **handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param handlers: handlers passed in with the returned Response object with\n        self.local_port and are free to return anything.\n    \"\"\"\n    if handlers:\n        raise Exception('Unhandled handlers not supported for Discard '\n                        'queues')\n    if n == -1:\n        n = -1\n    self.output.append(Discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                           ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream and are free to return\n        anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class)\n        to dehydration function). Dehydration function receives the value of\n        type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with\n        class self.local_port\n    \"\"\"\n    msg = DiscardRecordsResponse(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                          "], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives\n        the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n        receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with class self.local_port\n    \"\"\"\n    self.append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with self.local_port\n    \"\"\"\n    if n < 0:\n        n = len(self.records)\n\n    records = self.records[:n]\n    self.records = records\n    self.record_size = len(self.records)\n\n    if qid!= -1:\n        records.append((qid, {}))\n\n    return DiscardRespo", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration function receives the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        self.local_port and returns the value of desired by packstream.\n    \"\"\"\n    discard_message = DiscardRecords(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration functions receive the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in with returned Response object\n        with self.local_port and returns an object of type desired by packstream.\n    \"\"\"\n    return Discard().apply(self, n, qid, dehydration_hooks, hydration_hooks,\n                          **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type Undehydrated or Unrecognized.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receive the value of type Unrecognized and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with class self.local_port\n    \"\"\"\n    self.append(DiscardResponse(n, qid, dehydration_hooks, **handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param handlers: handlers passed in with the returned Response object with\n        self.local_port and are free to return anything.\n    \"\"\"\n    if handlers:\n        raise Exception('Unhandled handlers not supported for Discard '\n                        'queues')\n    if n == -1:\n        n = -1\n    self.output.append(Discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream and are free to return\n        anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class)\n        to dehydration function). Dehydration function receives the value of\n        type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object with\n        class self.local_port\n    \"\"\"\n    msg = DiscardRecordsResponse(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                          ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_AND_WRITE\"\n        - \"WRITE_AND_READ\"\n        - \"DELETE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION and self.local_port\n    \"\"\"\n    r", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n        - \"READ_EXTERNAL\"\n        - \"WRITE_EXTERNAL\"\n        - \"EXTERNAL\"\n    :param bookmarks: iterable of bookmark values after which this transaction should\n        begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration function receives\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hyperlinks: handlers to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration function receives\n        the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROT", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\"\n                (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n                      should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n              (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n                                to dehydration function). Dehydration\n                                function receives the value and returns an\n                                object of type desired by packstream.\n    :param handlers: handlers passed", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        Requires Bolt 4.0+.\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self._begin(mode, \"BEGIN\", bookmarks, metadata, timeout, db, imp_use", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n        (class) to dehydration function). Dehydration functions receive\n        the value and return an object of type desired by packstream.\n\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self._begi", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                            ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n        - \"EXECUTE\"\n        - \"EXECUTE_CALL\"\n        - \"BATCH\"\n        - \"BATCH_EXECUTE\"\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type understood by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with self.PROTOCOL_VERSION self.local_port", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receives the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self.append_message(b'BEGIN', mode=mode,\n                              bookmarks=bookmarks, me"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_AND_WRITE\"\n        - \"WRITE_AND_READ\"\n        - \"DELETE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION and self.local_port\n    \"\"\"\n    r", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n        - \"READ_EXTERNAL\"\n        - \"WRITE_EXTERNAL\"\n        - \"EXTERNAL\"\n    :param bookmarks: iterable of bookmark values after which this transaction should\n        begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration function receives\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration function receives the value\n        and returns an object of type desired by packstream.\n    :param hyperlinks: handlers to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration function receives\n        the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROT", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\"\n                (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n                      should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n              (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n                                to dehydration function). Dehydration\n                                function receives the value and returns an\n                                object of type desired by packstream.\n    :param handlers: handlers passed", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        Requires Bolt 4.0+.\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self._begin(mode, \"BEGIN\", bookmarks, metadata, timeout, db, imp_use", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n        (class) to dehydration function). Dehydration functions receive\n        the value and return an object of type desired by packstream.\n\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self._begi", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n        - \"EXECUTE\"\n        - \"EXECUTE_CALL\"\n        - \"BATCH\"\n        - \"BATCH_EXECUTE\"\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type understood by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with self.PROTOCOL_VERSION self.local_port", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receives the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with class self.PROTOCOL_VERSION self.local_port\n    \"\"\"\n    return self.append_message(b'BEGIN', mode=mode,\n                              bookmarks=bookmarks, me", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        n = (n + 2 ** (h - 1)) // 2\n    return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h\n\n    return int(round(math.floor(n)))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            return int(round_half_to_even(int(ten_n / 10)))\n        elif ten_n % 10 == 4:\n            return int(round_half_to_even(int(ten_n / 10) * 10))\n        elif ten_n % 10 == 3:\n            return int(round_half_to_even(int(ten_n / 10) * 10) * 10)\n    return int(round_half_to_even(int(n)))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(n / 10)\n        return 10 * h + int(n % 10)\n    return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        d = 10 ** (int(math.log(ten_n, 2)) + 1)\n        return int(round(n / d) * d)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h + 1\n    else:\n        return int(round(n))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        n = (n + 2 ** (h - 1)) // 2\n    return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h\n\n    return int(round(math.floor(n)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            return int(round_half_to_even(int(ten_n / 10)))\n        elif ten_n % 10 == 4:\n            return int(round_half_to_even(int(ten_n / 10) * 10))\n        elif ten_n % 10 == 3:\n            return int(round_half_to_even(int(ten_n / 10) * 10) * 10)\n    return int(round_half_to_even(int(n)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(n / 10)\n        return 10 * h + int(n % 10)\n    return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        d = 10 ** (int(math.log(ten_n, 2)) + 1)\n        return int(round(n / d) * d)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * h + 1\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    # type: (unicode, Dict[unicode, int], Dict[unicode, int]) -> Type[Point]\n    \"\"\"\n    Dynamically create a Point subclass.\n\n    with\n    \"\"\"\n    # Create a new point type\n    point_type = type(name, (Point,), {\"_fields\": fields})\n\n    # Copy all fields from the point class\n    for name, field in point_type._fields.items():\n        if name in srid_map:\n            field.srid = srid_map[name]\n        elif name == \"__dict__\":\n            # Copy all fields from the point class to the class\n            for name in list(point_type._fields.keys()):\n                if name!= \"_fields\":\n                    field.__dict__[name] = getattr(point_type, name)\n        else:\n            # Copy the field from the point class to the class\n            field.__dict__ = getattr(point_type, name)\n\n    ", "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'pyseaweed.geometry',\n            'coord_sys': srid_map['WGS84'],\n            'name': name,\n            'fields': fields,\n        }\n    )\n", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(srid=srid_map[fields[2]])\n            self.xy = (x, y)\n\n        def transform(self, transform):\n            return [transform * transform_along_x(self.xy, transform)]\n\n        def transform_inverse(self, transform):\n            return [transform * transform_along_y(self.xy, transform)]\n\n        def transform_point(self, transform):\n            return transform * transform_along_x_y(self.xy, transform)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    class Point(BasePoint):\n        \"\"\"Dynamically create a Point subclass. with\"\"\"\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.fields = fields\n            self.srid = srid_map[self.srid]\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    return type(name, fields, {'_srid': srid_map['srid']})\n", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Point class\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n        def __repr__(self):\n            return '<{} {} {}>'.format(\n                self.__class__.__name__, self.name, self.srid)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n\n    class Point(PointBase):\n        \"\"\"Point subclass with fields and SRID settings.\"\"\"\n\n        __schema__ = {'__name__': name, 'fields': fields,'srid': srid_map}\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    # Get the point class name\n    class_name = name.lower()\n    # Create the point class\n    point_class_name = class_name + \"Point\"\n    point_class = get_subclass(\n        Point, point_class_name, fields, srid_map\n    )\n    return point_class\n", "def point_type(name, fields, srid_map):\n    def __init__(self, *args, **kwargs):\n        # Auto point subclass creation\n        super(Point, self).__init__(*args, **kwargs)\n\n        # Create point fields\n        for field in fields:\n            setattr(self, field, PointField(name, field, srid_map))\n\n    __init__.__doc__ = Point.__doc__\n\n    return type(name, tuple(fields), {'__init__': __init__})\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    # type: (unicode, Dict[unicode, int], Dict[unicode, int]) -> Type[Point]\n    \"\"\"\n    Dynamically create a Point subclass.\n\n    with\n    \"\"\"\n    # Create a new point type\n    point_type = type(name, (Point,), {\"_fields\": fields})\n\n    # Copy all fields from the point class\n    for name, field in point_type._fields.items():\n        if name in srid_map:\n            field.srid = srid_map[name]\n        elif name == \"__dict__\":\n            # Copy all fields from the point class to the class\n            for name in list(point_type._fields.keys()):\n                if name!= \"_fields\":\n                    field.__dict__[name] = getattr(point_type, name)\n        else:\n            # Copy the field from the point class to the class\n            field.__dict__ = getattr(point_type, name)\n\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'pyseaweed.geometry',\n            'coord_sys': srid_map['WGS84'],\n            'name': name,\n            'fields': fields,\n        }\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(srid=srid_map[fields[2]])\n            self.xy = (x, y)\n\n        def transform(self, transform):\n            return [transform * transform_along_x(self.xy, transform)]\n\n        def transform_inverse(self, transform):\n            return [transform * transform_along_y(self.xy, transform)]\n\n        def transform_point(self, transform):\n            return transform * transform_along_x_y(self.xy, transform)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BasePoint):\n        \"\"\"Dynamically create a Point subclass. with\"\"\"\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.fields = fields\n            self.srid = srid_map[self.srid]\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, fields, {'_srid': srid_map['srid']})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Point class\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n        def __repr__(self):\n            return '<{} {} {}>'.format(\n                self.__class__.__name__, self.name, self.srid)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n\n    class Point(PointBase):\n        \"\"\"Point subclass with fields and SRID settings.\"\"\"\n\n        __schema__ = {'__name__': name, 'fields': fields,'srid': srid_map}\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    # Get the point class name\n    class_name = name.lower()\n    # Create the point class\n    point_class_name = class_name + \"Point\"\n    point_class = get_subclass(\n        Point, point_class_name, fields, srid_map\n    )\n    return point_class\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    def __init__(self, *args, **kwargs):\n        # Auto point subclass creation\n        super(Point, self).__init__(*args, **kwargs)\n\n        # Create point fields\n        for field in fields:\n            setattr(self, field, PointField(name, field, srid_map))\n\n    __init__.__doc__ = Point.__doc__\n\n    return type(name, tuple(fields), {'__init__': __init__})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwds):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwds)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecate(message, '%s is deprecated' % func.__name__, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return wrapper\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__, f.__doc__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, version=f.__version__, instead='f(%s)' % (f.__name__,))\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwds):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwds)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecate(message, '%s is deprecated' % func.__name__, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__, f.__doc__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, version=f.__version__, instead='f(%s)' % (f.__name__,))\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if code in ('yes', 'true', 'on'):\n        return 'yes'\n    elif code in ('no', 'false', 'off'):\n        return 'no'\n    else:\n        raise Exception('Unknown value for option \"{}\"'.format(code))\n", "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. Use the env variable instead.')\n", "def _inline_r_setup(code: str):\n    result = run_command(\"configure require_r >= 2\", code, stdout=DEVNULL, stderr=DEVNULL)\n    assert result.returncode == 0, result.stderr.decode()\n", "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config(os.path.join(os.path.dirname(__file__), \"r.cfg\"))\n    config.merge(kwargs)\n    config.parse(code)\n    return str(config)\n", "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_ext.py setup.cfg build; \"\n        \"R install_lib.py install_source; \"\n        \"R setup.sh setup_environment; \"\n        \"R build_ext.py build_ext; \"\n        \"R install_lib.py install_source; \"\n        \"R env; \"\n        \"R env/bin/R env/bin/activate; \"\n    )\n    return inline_r_command.format(r_version=R_VERSION)\n", "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    os.environ[\"R_DIR\"] = \"%s\"\n    os.environ[\"R_RUN_TEST\"] = \"%s\"\n    \"\"\" % (os.path.abspath(os.environ[\"R_ENV\"]), code)\n    return inline\n", "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export %s='%s'\" % (\n            os.environ.get(\"R_RUN_INLINE_R\"),\n            os.environ.get(\"R_RUN_INLINE_R_OPTIONS\"),\n        )\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', code)\n", "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = os.environ.get(\"R_OPTIONS\", \"\").split(\":\")\n    for option in r_options:\n        if option not in (\"--quiet\", \"--verbose\", \"--trace\"):\n            return option\n\n    return \"ok\"\n", "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code in ('yes', 'true', 'on'):\n        return 'yes'\n    elif code in ('no', 'false', 'off'):\n        return 'no'\n    else:\n        raise Exception('Unknown value for option \"{}\"'.format(code))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. Use the env variable instead.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    result = run_command(\"configure require_r >= 2\", code, stdout=DEVNULL, stderr=DEVNULL)\n    assert result.returncode == 0, result.stderr.decode()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config(os.path.join(os.path.dirname(__file__), \"r.cfg\"))\n    config.merge(kwargs)\n    config.parse(code)\n    return str(config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_ext.py setup.cfg build; \"\n        \"R install_lib.py install_source; \"\n        \"R setup.sh setup_environment; \"\n        \"R build_ext.py build_ext; \"\n        \"R install_lib.py install_source; \"\n        \"R env; \"\n        \"R env/bin/R env/bin/activate; \"\n    )\n    return inline_r_command.format(r_version=R_VERSION)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    os.environ[\"R_DIR\"] = \"%s\"\n    os.environ[\"R_RUN_TEST\"] = \"%s\"\n    \"\"\" % (os.path.abspath(os.environ[\"R_ENV\"]), code)\n    return inline\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export %s='%s'\" % (\n            os.environ.get(\"R_RUN_INLINE_R\"),\n            os.environ.get(\"R_RUN_INLINE_R_OPTIONS\"),\n        )\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = os.environ.get(\"R_OPTIONS\", \"\").split(\":\")\n    for option in r_options:\n        if option not in (\"--quiet\", \"--verbose\", \"--trace\"):\n            return option\n\n    return \"ok\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        shell: bool = False,\n) -> Iterator[str]:\n    \"\"\"\n    A simpler implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    with Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=shell) as p:\n        yield p.stdin.read()\n        if capture:\n            for line in p.stdout:\n                yield line\n        if p.wait()!= 0:\n            raise Exception('Command failed: {}'.format(' '.join(cmd)))\n", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: MutableMapping[str, str],\n        cwd: str = None,\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    # If target_concurrency is None, the command will be executed on the local\n    # host and the pty will be created on the remote host\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('XDG_CONFIG_NUM_THREADS', '1'))\n\n    if isinstance(cmd, str):\n        cmd = [cmd]\n\n    pty = None\n    try:\n        pty = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n           ", "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    if target_concurrency < 2:\n        raise ValueError(\n            '`target_concurrency` must be at least 2 when using xargs')\n\n    if color:\n        return ['--color'] * target_concurrency\n\n    p = multiprocessing.Pool(target_concurrency)\n    return p.map(_run_xargs, cmd)\n", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int, str]:\n    \"\"\"\n    A simpler implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ\n\n    # Make a pty if not already present\n    if not os.isatty(sys.stdout.fileno()):\n        tty = TTY(sys.stdout.fileno())\n        tty.set_terminal_size(*env['COLUMNS'], width=env['LINES'])\n        pty = Tee(sys.stdout.fileno(), sys.stderr.fileno(), tty)\n        pty.start()\n\n    if not os.isatty(sys.s", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    if sys.platform not in ['win32', 'darwin']:\n        return []\n\n    pty = False\n    if not color:\n        pty = True\n        color = os.environ.get('COLOR')\n\n    if color:\n        cmd = ['fg-color'] + cmd\n\n    if target_concurrency is not None:\n        cmd.extend(['-c', str(target_concurrency)])\n\n    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').splitlines()\n", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        cwd: Optional[str] = None,\n        target_concurrency: int = None,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if not IS_WINDOWS:\n        raise NotImplementedError(\"xargs is only supported on Windows\")\n    with _Popen(\n            cmd,\n            stdout=PIPE,\n            stderr=PIPE,\n            env=env,\n            cwd=cwd,\n            preexec_fn=os.setsid,\n    ) as proc:\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out.decode('u", "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n\n    \"\"\"\n    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n    p.stdin.close()\n    p.stdout.close()\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            p.returncode,''.join(cmd),\n            output=stdout.decode(),\n            error=stderr.decode()\n        )\n    if capture:\n       ", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "def xargs(\n        cmd: str,\n        args: T.List[str],\n        cwd: T.Optional[str] = None,\n        env: T.Optional[dict] = None,\n        preexec_fn: T.Callable = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> T.List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        env=env,\n    )\n\n    out, err = p.communicate(input='\\n'.join(args).encode())\n\n    if p.returncode!= 0:\n        raise OSError(err)\n\n    return out.decode().split('\\n')\n", "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    ptys = []\n    if not isinstance(args, list):\n        args = [args]\n    for arg in args:\n        ptys.append(subprocess.Popen(\n            arg,\n            stdin=stdin,\n            stdout=subprocess.PIPE,\n            stderr=stderr,\n            close_fds=True,\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        shell: bool = False,\n) -> Iterator[str]:\n    \"\"\"\n    A simpler implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    with Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=shell) as p:\n        yield p.stdin.read()\n        if capture:\n            for line in p.stdout:\n                yield line\n        if p.wait()!= 0:\n            raise Exception('Command failed: {}'.format(' '.join(cmd)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: MutableMapping[str, str],\n        cwd: str = None,\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    # If target_concurrency is None, the command will be executed on the local\n    # host and the pty will be created on the remote host\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('XDG_CONFIG_NUM_THREADS', '1'))\n\n    if isinstance(cmd, str):\n        cmd = [cmd]\n\n    pty = None\n    try:\n        pty = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    if target_concurrency < 2:\n        raise ValueError(\n            '`target_concurrency` must be at least 2 when using xargs')\n\n    if color:\n        return ['--color'] * target_concurrency\n\n    p = multiprocessing.Pool(target_concurrency)\n    return p.map(_run_xargs, cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int, str]:\n    \"\"\"\n    A simpler implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ\n\n    # Make a pty if not already present\n    if not os.isatty(sys.stdout.fileno()):\n        tty = TTY(sys.stdout.fileno())\n        tty.set_terminal_size(*env['COLUMNS'], width=env['LINES'])\n        pty = Tee(sys.stdout.fileno(), sys.stderr.fileno(), tty)\n        pty.start()\n\n    if not os.isatty(sys.s", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    if sys.platform not in ['win32', 'darwin']:\n        return []\n\n    pty = False\n    if not color:\n        pty = True\n        color = os.environ.get('COLOR')\n\n    if color:\n        cmd = ['fg-color'] + cmd\n\n    if target_concurrency is not None:\n        cmd.extend(['-c', str(target_concurrency)])\n\n    return subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').splitlines()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        cwd: Optional[str] = None,\n        target_concurrency: int = None,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if not IS_WINDOWS:\n        raise NotImplementedError(\"xargs is only supported on Windows\")\n    with _Popen(\n            cmd,\n            stdout=PIPE,\n            stderr=PIPE,\n            env=env,\n            cwd=cwd,\n            preexec_fn=os.setsid,\n    ) as proc:\n        out, err = proc.communicate(input=args)\n        return proc.returncode, out.decode('u", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n\n    \"\"\"\n    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n    p.stdin.close()\n    p.stdout.close()\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            p.returncode,''.join(cmd),\n            output=stdout.decode(),\n            error=stderr.decode()\n        )\n    if capture:\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: T.List[str],\n        cwd: T.Optional[str] = None,\n        env: T.Optional[dict] = None,\n        preexec_fn: T.Callable = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> T.List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=cwd,\n        env=env,\n    )\n\n    out, err = p.communicate(input='\\n'.join(args).encode())\n\n    if p.returncode!= 0:\n        raise OSError(err)\n\n    return out.decode().split('\\n')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = multiprocessing.cpu_count()\n    ptys = []\n    if not isinstance(args, list):\n        args = [args]\n    for arg in args:\n        ptys.append(subprocess.Popen(\n            arg,\n            stdin=stdin,\n            stdout=subprocess.PIPE,\n            stderr=stderr,\n            close_fds=True,\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return list(random.sample(seq, len(seq)))\n", "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    lst = list(seq)\n    random.shuffle(lst)\n    return lst\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle with import random\"\n    from random import shuffle\n    return shuffle(seq)\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return list(random.sample(seq, len(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    lst = list(seq)\n    random.shuffle(lst)\n    return lst\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle with import random\"\n    from random import shuffle\n    return shuffle(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle with import random\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n\n    if not s:\n        return None\n\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s.lower() == 'latest':\n        return get_version()\n    else:\n        return parse_version_parts(s)[-1]\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s.lower() == 'null':\n        return None\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        raise ValueError(\"not a valid version string: %r\" % s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    try:\n        return Version(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if not s:\n        return None\n    version = None\n    match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", s, re.M)\n    if match:\n        version = match.group(1)\n        if not version:\n            raise RuntimeError(\"Unable to find version string.\")\n    return parse(version)\n", "def parse_version(s: str) -> Optional[Version]:\n    if not s:\n        return None\n    return Version(s)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == \"\":\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n\n    if not s:\n        return None\n\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s.lower() == 'latest':\n        return get_version()\n    else:\n        return parse_version_parts(s)[-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s.lower() == 'null':\n        return None\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        raise ValueError(\"not a valid version string: %r\" % s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    try:\n        return Version(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if not s:\n        return None\n    version = None\n    match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", s, re.M)\n    if match:\n        version = match.group(1)\n        if not version:\n            raise RuntimeError(\"Unable to find version string.\")\n    return parse(version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if not s:\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n\n    # Filter out unknown commands\n    known_cmds = ['set', 'executable','version_cmd','spawn', 'wait', 'bash', 'compile', 'bash-completion']\n    unknown_cmds = [cmd_name for cmd_name in cmd if cmd_name not in known_cmds]\n    if unknown_cmds:\n        log.warning('unknown commands in %s: %s', cmd, unknown_cmds)\n\n    # Filter out version commands\n    cmd = [cmd_name for cmd_name in cmd if cmd_name.startswith('version')]\n\n    return''.join(cmd)\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    new_cmd = []\n\n    for item in cmd:\n        if \"'\" in item:\n            new_cmd.append(\"/usr/bin/%s\" % item)\n        else:\n            new_cmd.append(item)\n\n    return new_cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        return cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    # https://github.com/Microsoft/Cygwin/issues/2373\n    if \"@\" in cmd and \"/usr/bin/normexec\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexec\", \"/usr/bin/normexe\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        return cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n\n    # Python 2.6 requres field numbers\n    if ';' in cmd:\n        cmd = cmd.replace(';', ':')\n\n    # Python 2.4 requres field numbers\n    if ':' in cmd:\n        cmd = cmd.replace(':', ';')\n\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n\n    def fixup(cmd_part: List[str]) -> List[str]:\n        if cmd_part[0] == \"-noremap\":\n            cmd_part[0] = \"-noremap-\"\n        return cmd_part\n\n    return list(map(fixup, cmd))\n", "def normalize_cmd(cmd: T.List[str]) -> T.List[str]:\n    new_cmd = []\n    for item in cmd:\n        if '@' in item:\n            new_cmd.extend(shlex.split(item))\n            new_cmd.append('/usr/bin/')\n        else:\n            new_cmd.append(item)\n    return new_cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform == \"win32\" and \"/usr/bin/normexec\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexec\", \"/usr/bin/norm\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    # FIXME: this is a hack and a couple of things need to be improved\n    cmd = cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    cmd = cmd.replace(\"/usr/bin/env\", \"/usr/bin/env\")\n    return cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n\n    # Filter out unknown commands\n    known_cmds = ['set', 'executable','version_cmd','spawn', 'wait', 'bash', 'compile', 'bash-completion']\n    unknown_cmds = [cmd_name for cmd_name in cmd if cmd_name not in known_cmds]\n    if unknown_cmds:\n        log.warning('unknown commands in %s: %s', cmd, unknown_cmds)\n\n    # Filter out version commands\n    cmd = [cmd_name for cmd_name in cmd if cmd_name.startswith('version')]\n\n    return''.join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    new_cmd = []\n\n    for item in cmd:\n        if \"'\" in item:\n            new_cmd.append(\"/usr/bin/%s\" % item)\n        else:\n            new_cmd.append(item)\n\n    return new_cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        return cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    # https://github.com/Microsoft/Cygwin/issues/2373\n    if \"@\" in cmd and \"/usr/bin/normexec\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexec\", \"/usr/bin/normexe\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\"):\n        return cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n\n    # Python 2.6 requres field numbers\n    if ';' in cmd:\n        cmd = cmd.replace(';', ':')\n\n    # Python 2.4 requres field numbers\n    if ':' in cmd:\n        cmd = cmd.replace(':', ';')\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n\n    def fixup(cmd_part: List[str]) -> List[str]:\n        if cmd_part[0] == \"-noremap\":\n            cmd_part[0] = \"-noremap-\"\n        return cmd_part\n\n    return list(map(fixup, cmd))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: T.List[str]) -> T.List[str]:\n    new_cmd = []\n    for item in cmd:\n        if '@' in item:\n            new_cmd.extend(shlex.split(item))\n            new_cmd.append('/usr/bin/')\n        else:\n            new_cmd.append(item)\n    return new_cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform == \"win32\" and \"/usr/bin/normexec\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexec\", \"/usr/bin/norm\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    # FIXME: this is a hack and a couple of things need to be improved\n    cmd = cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    cmd = cmd.replace(\"/usr/bin/env\", \"/usr/bin/env\")\n    return cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, cache.timeout)\n            return value\n        return __wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = f(*args, **kwargs)\n            return value\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache(lock)\n    decorator.key = key = lambda *a, **kw: lock.acquire()\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kwargs):\n        return cache[key] = func(*args, **kwargs)\n    cache = {}\n    lock.acquire()\n    try:\n        return wrapper\n    finally:\n        lock.release()\n", "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is already constructed, we can just return the\n                # result of calling the function.\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kw):\n        with lock:\n            return func(*args, **kw)\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n            except TypeError:\n                # functools 2.4 raises a TypeError on calling.format()\n                # on a string object. So we just return the string without\n                # modification.\n                return str(key)\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, cache.timeout)\n            return value\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = f(*args, **kwargs)\n            return value\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache(lock)\n    decorator.key = key = lambda *a, **kw: lock.acquire()\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kwargs):\n        return cache[key] = func(*args, **kwargs)\n    cache = {}\n    lock.acquire()\n    try:\n        return wrapper\n    finally:\n        lock.release()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is already constructed, we can just return the\n                # result of calling the function.\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(*args, **kw):\n        with lock:\n            return func(*args, **kw)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n            except TypeError:\n                # functools 2.4 raises a TypeError on calling.format()\n                # on a string object. So we just return the string without\n                # modification.\n                return str(key)\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a time parameter and\n    #     return the value for that time on that parameter, or raise ValueError\n    # XXX: ttl should be an integer, not a float\n    def wrapper(fn):\n        cached = _Cached(fn, maxsize, ttl, timer)\n        if typed:\n            cached.__name__ = fn.__name__\n        return cached\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # You can make this decorator successor the actual decorator\n    # that makes things smarter:\n    # @cache.ttl_cache(maxsize=128, ttl=60)\n    def decorator(fn):\n        return Cache(fn, maxsize, ttl, timer, typed)\n    return decorator\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        cached = _Cached(f, ttl, timer)\n        return Cache(cached, maxsize, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = value = func(*args, **kwargs)\n            else:\n                if timer() - cache_value[0] >= ttl:\n                    cache.pop(key, None)\n                    cache[key] = value\n            return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(func)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that return the values to return\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                if timer() - cached[key] >= ttl:\n                    cached[key] = fn(*args, **kwargs)\n                else:\n                    cached[key] = fn(*args, **kwargs)\n            return cached[key]\n        return wrapped\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute\n    #      of a Mapping, but does not inherit from dict, so we need to make\n    #      this more complicated to be compatible w/ custom cache that returns\n    #      a custom mapping subclass.\n    if maxsize is None or maxsize < 0:\n        return _wrapper(typed)\n    else:\n        return _wrapper(Memoize(maxsize, ttl, timer))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) that return\n    #      the values that it wraps up in the callable list and the time it\n    #      called it.  If a function returns a value that is older than the\n    #      timeout, it will be cached and returned as a result of the wrapping\n    #      function.  Otherwise, the result of the wrapping function is cached.\n    cache = {}\n\n    def wrapper(func):\n        def newfunc(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                if key not in cache:\n                    cache[key] = func(*args, **kwargs)\n                value, ttl = cache[key]\n            except KeyError:\n                value, ttl = func(*args, **kwargs), 0\n            if value", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl, typed=typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a mapping of callables to results\n    cache = {}\n    def wrapper(f):\n        cache[f] = TTLCache(maxsize, ttl, timer, typed)\n        return f\n    return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a time parameter and\n    #     return the value for that time on that parameter, or raise ValueError\n    # XXX: ttl should be an integer, not a float\n    def wrapper(fn):\n        cached = _Cached(fn, maxsize, ttl, timer)\n        if typed:\n            cached.__name__ = fn.__name__\n        return cached\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # You can make this decorator successor the actual decorator\n    # that makes things smarter:\n    # @cache.ttl_cache(maxsize=128, ttl=60)\n    def decorator(fn):\n        return Cache(fn, maxsize, ttl, timer, typed)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        cached = _Cached(f, ttl, timer)\n        return Cache(cached, maxsize, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = value = func(*args, **kwargs)\n            else:\n                if timer() - cache_value[0] >= ttl:\n                    cache.pop(key, None)\n                    cache[key] = value\n            return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that return the values to return\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                if timer() - cached[key] >= ttl:\n                    cached[key] = fn(*args, **kwargs)\n                else:\n                    cached[key] = fn(*args, **kwargs)\n            return cached[key]\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute\n    #      of a Mapping, but does not inherit from dict, so we need to make\n    #      this more complicated to be compatible w/ custom cache that returns\n    #      a custom mapping subclass.\n    if maxsize is None or maxsize < 0:\n        return _wrapper(typed)\n    else:\n        return _wrapper(Memoize(maxsize, ttl, timer))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) that return\n    #      the values that it wraps up in the callable list and the time it\n    #      called it.  If a function returns a value that is older than the\n    #      timeout, it will be cached and returned as a result of the wrapping\n    #      function.  Otherwise, the result of the wrapping function is cached.\n    cache = {}\n\n    def wrapper(func):\n        def newfunc(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                if key not in cache:\n                    cache[key] = func(*args, **kwargs)\n                value, ttl = cache[key]\n            except KeyError:\n                value, ttl = func(*args, **kwargs), 0\n            if value", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl, typed=typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a mapping of callables to results\n    cache = {}\n    def wrapper(f):\n        cache[f] = TTLCache(maxsize, ttl, timer, typed)\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "def mru_cache(maxsize=128, typed=False):\n    # f_ is the actual function, wrapped by @memoize\n    def f_(f):\n        return MruCache(f, maxsize, typed)\n    return f_\n", "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache is a new API that does not inherit from Cache and does\n    #      the actual caching, so this function must be removed.\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # f_globals is the global namespace for functions\n    # f_locals is the local namespace for functions\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize, typed)\n        if hasattr(func, '__code__'):\n            cached_func.__code__ = func.__code__\n        if hasattr(func, '__globals__'):\n            cached_func.__globals__ = func.__globals__\n        if hasattr(func, '__name__'):\n            cached_func.__name__ = func.__name__\n        return cached_func\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # flip the function argument so that the wrapper can be used on callables\n    func = lambda *args: args[0]\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(sorted(kwargs.items())))\n        try:\n            return cache[key]\n        except KeyError:\n            ret = cache[key] = wrapper(*args, **kwargs)\n            return ret\n\n    def clear_cache():\n        cache.clear()\n\n    cache = {}\n    wrapper.clear_cache = clear_cache\n    return wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = {}\n\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            if not cached:\n                cached[args[0]] = func(*args, **kwargs)\n            key = (args, frozenset(sorted(cached.items())))\n            try:\n                return cached[args[0]]\n            except KeyError:\n                if len(cached) >= maxsize:\n                    cached.popitem(last=False)\n                cached[args[0]] = func(*args, **kwargs)\n                return cached[args[0]]\n        return _wrapped\n    return _wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache doesn't take arguments that are passed to the decorator\n    #      when creating the decorator\n    def _wrapper(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return _wrapper\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _MRUWrapper(typed)\n    else:\n        return _MRUWrapper(maxsize)\n", "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = MruCache(maxsize, typed)\n        if hasattr(func, '__wrapped__'):\n            func.__wrapped__ = cached\n        else:\n            # functools.lru_cache does not support functools.lru_cache (#2666)\n            func.__wrapped__ = cached(func)\n        return func\n    return _wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # f_ is the actual function, wrapped by @memoize\n    def f_(f):\n        return MruCache(f, maxsize, typed)\n    return f_\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache is a new API that does not inherit from Cache and does\n    #      the actual caching, so this function must be removed.\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # f_globals is the global namespace for functions\n    # f_locals is the local namespace for functions\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize, typed)\n        if hasattr(func, '__code__'):\n            cached_func.__code__ = func.__code__\n        if hasattr(func, '__globals__'):\n            cached_func.__globals__ = func.__globals__\n        if hasattr(func, '__name__'):\n            cached_func.__name__ = func.__name__\n        return cached_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # flip the function argument so that the wrapper can be used on callables\n    func = lambda *args: args[0]\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = (args, frozenset(sorted(kwargs.items())))\n        try:\n            return cache[key]\n        except KeyError:\n            ret = cache[key] = wrapper(*args, **kwargs)\n            return ret\n\n    def clear_cache():\n        cache.clear()\n\n    cache = {}\n    wrapper.clear_cache = clear_cache\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = {}\n\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            if not cached:\n                cached[args[0]] = func(*args, **kwargs)\n            key = (args, frozenset(sorted(cached.items())))\n            try:\n                return cached[args[0]]\n            except KeyError:\n                if len(cached) >= maxsize:\n                    cached.popitem(last=False)\n                cached[args[0]] = func(*args, **kwargs)\n                return cached[args[0]]\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # XXX: mru_cache doesn't take arguments that are passed to the decorator\n    #      when creating the decorator\n    def _wrapper(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _MRUWrapper(typed)\n    else:\n        return _MRUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    def _wrapper(func):\n        cached = MruCache(maxsize, typed)\n        if hasattr(func, '__wrapped__'):\n            func.__wrapped__ = cached\n        else:\n            # functools.lru_cache does not support functools.lru_cache (#2666)\n            func.__wrapped__ = cached(func)\n        return func\n    return _wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _wrapper\n    else:\n        # XXX optimization: only save the function if its arguments are mutable\n        if not typed:\n            return _wrapper\n        else:\n            # XXX optimization: save the function when it is given a type\n            def _wrapper(func):\n                cache = LRUCache(maxsize)\n                @wraps(func)\n                def wrapper(*args, **kwargs):\n                    key = _key(func, args, kwargs)\n                    if key not in cache:\n                        cache[key] = func(*args, **kwargs)\n                    return cache[key]\n                return wrapper\n            return _wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return None\n    else:\n        # Memoize is a callable that will always return the same value\n        # even if the cached value is reused.\n        # This is for efficiency in the most common case (only\n        # simple cases where the cache is already constructed).\n        memo = LruCache(maxsize)\n        def wrapper(func):\n            def wrapped(*args):\n                key = (args, frozenset(sorted(args)))\n                try:\n                    return memo[key]\n                except KeyError:\n                    ret = memo[key] = func(*args)\n                    return ret\n            return wrapped\n        if typed:\n            wrapper.__name__ = func.__name__\n            wrapper.__doc__ = fun", "def lru_cache(maxsize=128, typed=False):\n    # This function must be wrapped with @lru_cache, because it must accept\n    # arguments that would cause the function to be called with the same\n    # arguments as the function being wrapped. To prevent this, wrap the\n    # wrapped function with @memoize. See https://code.google.com/p/memoize/\n    # about using this decorator.\n\n    def wrapper(func):\n        cached_func = _Cached(func, maxsize)\n        if typed:\n            cached_func.__dict__ = func.__dict__\n        return cached_func\n\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _TypedCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    # fetch the function from the namespace\n    cached = _lru_cache.cache.get(maxsize)\n    if cached is not None:\n        return cached\n\n    def decorator(func):\n        # store the result of the decorated function\n        _lru_cache.cache[maxsize] = (func, func.__name__)\n        # return the result of the decorated function\n        return func\n\n    if typed:\n        return decorator\n    else:\n        return decorator(func)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return cached_fn\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "def lru_cache(maxsize=128, typed=False):\n    # Memoize is used to optimize operational performance\n    # (disable the cache in the future)\n    memoize = None\n\n    def wrapper(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = fn(*args, **kwargs)\n                return ret\n\n        def memoize_wrapper(*args, **kwargs):\n            if memoize is not None:\n                return memoize[key]\n            else:\n                ret = wrapped(*args, **kwargs)\n                cache[key] = ret\n                return ret\n\n        return wrapped if typed el", "def lru_cache(maxsize=128, typed=False):\n    # f = lru_cache(maxsize)(f)\n    def f(fn):\n        return LRUWrapper(fn, maxsize, typed)\n    return f\n", "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in Python 3\n    return _Cache(maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _wrapper\n    else:\n        # XXX optimization: only save the function if its arguments are mutable\n        if not typed:\n            return _wrapper\n        else:\n            # XXX optimization: save the function when it is given a type\n            def _wrapper(func):\n                cache = LRUCache(maxsize)\n                @wraps(func)\n                def wrapper(*args, **kwargs):\n                    key = _key(func, args, kwargs)\n                    if key not in cache:\n                        cache[key] = func(*args, **kwargs)\n                    return cache[key]\n                return wrapper\n            return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return None\n    else:\n        # Memoize is a callable that will always return the same value\n        # even if the cached value is reused.\n        # This is for efficiency in the most common case (only\n        # simple cases where the cache is already constructed).\n        memo = LruCache(maxsize)\n        def wrapper(func):\n            def wrapped(*args):\n                key = (args, frozenset(sorted(args)))\n                try:\n                    return memo[key]\n                except KeyError:\n                    ret = memo[key] = func(*args)\n                    return ret\n            return wrapped\n        if typed:\n            wrapper.__name__ = func.__name__\n            wrapper.__doc__ = fun", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # This function must be wrapped with @lru_cache, because it must accept\n    # arguments that would cause the function to be called with the same\n    # arguments as the function being wrapped. To prevent this, wrap the\n    # wrapped function with @memoize. See https://code.google.com/p/memoize/\n    # about using this decorator.\n\n    def wrapper(func):\n        cached_func = _Cached(func, maxsize)\n        if typed:\n            cached_func.__dict__ = func.__dict__\n        return cached_func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _TypedCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # fetch the function from the namespace\n    cached = _lru_cache.cache.get(maxsize)\n    if cached is not None:\n        return cached\n\n    def decorator(func):\n        # store the result of the decorated function\n        _lru_cache.cache[maxsize] = (func, func.__name__)\n        # return the result of the decorated function\n        return func\n\n    if typed:\n        return decorator\n    else:\n        return decorator(func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return cached_fn\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # Memoize is used to optimize operational performance\n    # (disable the cache in the future)\n    memoize = None\n\n    def wrapper(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = fn(*args, **kwargs)\n                return ret\n\n        def memoize_wrapper(*args, **kwargs):\n            if memoize is not None:\n                return memoize[key]\n            else:\n                ret = wrapped(*args, **kwargs)\n                cache[key] = ret\n                return ret\n\n        return wrapped if typed el", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # f = lru_cache(maxsize)(f)\n    def f(fn):\n        return LRUWrapper(fn, maxsize, typed)\n    return f\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in Python 3\n    return _Cache(maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cache = LFUCache(maxsize, typed)\n        return cache.wrap(fn)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # XXX: cache is not thread safe with multiprocessing\n    if maxsize <= 0:\n        return _wrapper\n    else:\n        return _LFUWrapper(maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return _wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # You can access the function at any time without having to create a new\n    # function.  The parameter is the number of items to cache.\n    # The return value is a function that returns the result of calling\n    # lfu_wrapper(item) with the same parameters as lfu_wrapper(item).\n\n    def wrapper(item):\n        key = lfu_wrapper(item)\n        try:\n            cached_value = cache[key]\n        except KeyError:\n            cached_value = cache[key] = lfu_wrapper(item)\n        return cached_value\n\n    def wrapper_typed(item):\n        key = lfu_wrapper(item)\n        try:\n            return cache[key][0]\n        except KeyError:\n            value = lfu_wrapper(item)\n            cache[key] = (value, 1)\n            return value\n\n    if maxsize is None:\n        return wrapper\n    else:\n", "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return Cache(function, maxsize, typed)\n    return _wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    # fetch the function to be wrapped\n    cache = _LFU_CACHE\n    if cache is None:\n        def lfu_cache(fn, maxsize, typed):\n            cache = _LFU_CACHE = _LFU_CACHEs.get((fn, maxsize, typed))\n            if cache is None:\n                cache = _LFU_CACHE = LfuCache(fn, maxsize, typed)\n            return cache\n    return cache\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cache = LFUCache(maxsize, typed)\n        return cache.wrap(fn)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # XXX: cache is not thread safe with multiprocessing\n    if maxsize <= 0:\n        return _wrapper\n    else:\n        return _LFUWrapper(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def wrapper(function):\n        return LFUCache(maxsize, function, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # You can access the function at any time without having to create a new\n    # function.  The parameter is the number of items to cache.\n    # The return value is a function that returns the result of calling\n    # lfu_wrapper(item) with the same parameters as lfu_wrapper(item).\n\n    def wrapper(item):\n        key = lfu_wrapper(item)\n        try:\n            cached_value = cache[key]\n        except KeyError:\n            cached_value = cache[key] = lfu_wrapper(item)\n        return cached_value\n\n    def wrapper_typed(item):\n        key = lfu_wrapper(item)\n        try:\n            return cache[key][0]\n        except KeyError:\n            value = lfu_wrapper(item)\n            cache[key] = (value, 1)\n            return value\n\n    if maxsize is None:\n        return wrapper\n    else:\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # f = lfu_cache(maxsize)(function)\n    def _wrapper(function):\n        return Cache(function, maxsize, typed)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # fetch the function to be wrapped\n    cache = _LFU_CACHE\n    if cache is None:\n        def lfu_cache(fn, maxsize, typed):\n            cache = _LFU_CACHE = _LFU_CACHEs.get((fn, maxsize, typed))\n            if cache is None:\n                cache = _LFU_CACHE = LfuCache(fn, maxsize, typed)\n            return cache\n    return cache\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        raise KeyError\n", "def popitem(self):\n    for k, v in self.__order:\n        if v is self.__sentinel:\n            self.__order.remove((k, v))\n            return (k, v)\n    raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        raise KeyError\n", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    for k, v in self.__order:\n        if v is self.__sentinel:\n            self.__order.remove((k, v))\n            return (k, v)\n    raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.upper(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.store(key(*args, **kw), result)\n            return result\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(func, key, lock)\n        def newfunc(*args, **kwds):\n            return memo(*args, **kwds)\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(self, *args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def wrapper(self, *args, **kwargs):\n        with lock:\n            return self._call_with_cache(func, self, *args, **kwargs)\n\n    return wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return _CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _wrapped(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(key, func)\n\n        def wrapper(self, *args, **kw):\n            if memo is not None:\n                result, time = memo\n                if time > timeout:\n                    with lock:\n                        result.append(self._calling_method(*args, **kw))\n                    return result[-1]\n            result = func(self, *args, **kw)\n            return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.store(key(*args, **kw), result)\n            return result\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(func, key, lock)\n        def newfunc(*args, **kwds):\n            return memo(*args, **kwds)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(self, *args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def wrapper(self, *args, **kwargs):\n        with lock:\n            return self._call_with_cache(func, self, *args, **kwargs)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return _CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _wrapped(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        memo = cache(key, func)\n\n        def wrapper(self, *args, **kw):\n            if memo is not None:\n                result, time = memo\n                if time > timeout:\n                    with lock:\n                        result.append(self._calling_method(*args, **kw))\n                    return result[-1]\n            result = func(self, *args, **kw)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    out = cls._format_traceback(e, max_level, max_path_level)\n    return out.decode('utf-8','replace')\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return cls._format_with_time(\n        \"%s: %s\" % (cls._get_caller_name(e), e),\n        max_level=max_level,\n        max_path_level=max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"\".join(format_tb(e.__traceback__, max_path_level, max_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e_str = e.__str__()\n    else:\n        e_str = str(e)\n    return cls.__str__(os.path.basename(sys.argv[0]), e_str, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, HostNotFound):\n        return \"{0} {1}\".format(cls.__name__, e.message)\n    else:\n        return str(cls) + \": {0}\".format(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return cls.__extostr__(e, max_level=max_level, max_path_level=max_path_level)\n    else:\n        return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        return e\n\n    if not isinstance(e, Exception):\n        return \"%r\" % e\n\n    exc_type, exc_value, tb = sys.exc_info()\n    lines = []\n    if exc_type is None:\n        lines.append(\"Exception was not swallowed\")\n    else:\n        lines.append(\"Exception was %s\" % str(exc_type))\n        lines.append(\"\")\n        lines.extend(traceback.format_exception(exc_type, exc_value, tb))\n\n    e_lines = [\"%s: %s\" % (str(sys.exc_info()[0]), str(e))]\n    if tb is not None:\n        e_lines.append(\"Traceback:\")\n        e_lines.extend(traceback.format_list(traceback.extract_tb(tb)))\n    for line in e_lines:\n        lines.append(\"    %s\" % line)\n\n    if len(lines) > max_path_level:\n        lines.append(\"\")\n        lines.extend(traceback.format_list(traceback.extract_tb(e.__traceback__)", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if not isinstance(e, Exception):\n        return str(e)\n\n    result = []\n    for key, value in sorted(e.__dict__.items()):\n        if key.startswith('_'):\n            continue\n\n        result.append('%30s = %s' % (key, value))\n\n    result.sort()\n\n    if len(result) > max_path_level:\n        result = result[:max_path_level]\n\n    if len(result) > max_level:\n        result = '[...]' + ', '.join(result[:max_level])\n\n    return '%s: %s' % (cls.__name__, ', '.join(result))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_level))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    out = cls._format_traceback(e, max_level, max_path_level)\n    return out.decode('utf-8','replace')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return cls._format_with_time(\n        \"%s: %s\" % (cls._get_caller_name(e), e),\n        max_level=max_level,\n        max_path_level=max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"\".join(format_tb(e.__traceback__, max_path_level, max_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e_str = e.__str__()\n    else:\n        e_str = str(e)\n    return cls.__str__(os.path.basename(sys.argv[0]), e_str, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, HostNotFound):\n        return \"{0} {1}\".format(cls.__name__, e.message)\n    else:\n        return str(cls) + \": {0}\".format(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return cls.__extostr__(e, max_level=max_level, max_path_level=max_path_level)\n    else:\n        return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        return e\n\n    if not isinstance(e, Exception):\n        return \"%r\" % e\n\n    exc_type, exc_value, tb = sys.exc_info()\n    lines = []\n    if exc_type is None:\n        lines.append(\"Exception was not swallowed\")\n    else:\n        lines.append(\"Exception was %s\" % str(exc_type))\n        lines.append(\"\")\n        lines.extend(traceback.format_exception(exc_type, exc_value, tb))\n\n    e_lines = [\"%s: %s\" % (str(sys.exc_info()[0]), str(e))]\n    if tb is not None:\n        e_lines.append(\"Traceback:\")\n        e_lines.extend(traceback.format_list(traceback.extract_tb(tb)))\n    for line in e_lines:\n        lines.append(\"    %s\" % line)\n\n    if len(lines) > max_path_level:\n        lines.append(\"\")\n        lines.extend(traceback.format_list(traceback.extract_tb(e.__traceback__)", "is_pass": false, "return_code": 1}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if not isinstance(e, Exception):\n        return str(e)\n\n    result = []\n    for key, value in sorted(e.__dict__.items()):\n        if key.startswith('_'):\n            continue\n\n        result.append('%30s = %s' % (key, value))\n\n    result.sort()\n\n    if len(result) > max_path_level:\n        result = result[:max_path_level]\n\n    if len(result) > max_level:\n        result = '[...]' + ', '.join(result[:max_level])\n\n    return '%s: %s' % (cls.__name__, ', '.join(result))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_level))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = codecs.open(file_name, mode='a', encoding=encoding)\n        file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except Exception as error:\n        if not overwrite:\n            raise error\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = open(file_name, 'ab')\n        if isinstance(text_buffer, bytes):\n            file_handle.write(text_buffer)\n        else:\n            file_handle.write(text_buffer.encode(encoding))\n        file_handle.close()\n        return len(text_buffer)\n    except Exception as exception:\n        if not overwrite:\n            raise exception\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n\n        with open(file_name, \"ab\") as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    except (IOError, OSError) as error:\n        print(error)\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if not overwrite and os.path.exists(file_name):\n                # It already exists, just return.\n                return 0\n            # Open the file.\n            f.write(text_buffer.encode(encoding))\n            return len(text_buffer)\n    except (OSError, IOError) as e:\n        log.debug('Error when writing to file {0}: {1}'.format(\n            file_name, e.strerror\n        ))\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        # Open file\n        file_handle = codecs.open(file_name, \"ab\", encoding)\n        if not overwrite:\n            # Overwrite file if it exists\n            file_handle.write(text_buffer)\n        else:\n            # Overwrite file if it doesn't exist\n            pass\n        file_handle.close()\n        return len(text_buffer)\n    except IOError:\n        print(\"Error opening file.\")\n        raise\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if overwrite or not os.path.isfile(file_name):\n                f.write(text_buffer.encode(encoding))\n                return len(text_buffer)\n            else:\n                return 0\n    except Exception as ex:\n        print(ex)\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise Exception(\"File '%s' already exists\" % file_name)\n    with codecs.open(file_name, 'ab', encoding) as file_pointer:\n        file_pointer.write(text_buffer)\n        return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.isfile(file_name) and not overwrite:\n        return 0\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n        f = codecs.open(file_name, 'ab', encoding)\n        f.write(text_buffer)\n        f.close()\n        return len(text_buffer)\n    except Exception as e:\n        print(\"ERROR: Could not write to file {}\".format(file_name), e)\n        return 0\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = codecs.open(file_name, mode='a', encoding=encoding)\n        file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except Exception as error:\n        if not overwrite:\n            raise error\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = open(file_name, 'ab')\n        if isinstance(text_buffer, bytes):\n            file_handle.write(text_buffer)\n        else:\n            file_handle.write(text_buffer.encode(encoding))\n        file_handle.close()\n        return len(text_buffer)\n    except Exception as exception:\n        if not overwrite:\n            raise exception\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n\n        with open(file_name, \"ab\") as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    except (IOError, OSError) as error:\n        print(error)\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if not overwrite and os.path.exists(file_name):\n                # It already exists, just return.\n                return 0\n            # Open the file.\n            f.write(text_buffer.encode(encoding))\n            return len(text_buffer)\n    except (OSError, IOError) as e:\n        log.debug('Error when writing to file {0}: {1}'.format(\n            file_name, e.strerror\n        ))\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        # Open file\n        file_handle = codecs.open(file_name, \"ab\", encoding)\n        if not overwrite:\n            # Overwrite file if it exists\n            file_handle.write(text_buffer)\n        else:\n            # Overwrite file if it doesn't exist\n            pass\n        file_handle.close()\n        return len(text_buffer)\n    except IOError:\n        print(\"Error opening file.\")\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if overwrite or not os.path.isfile(file_name):\n                f.write(text_buffer.encode(encoding))\n                return len(text_buffer)\n            else:\n                return 0\n    except Exception as ex:\n        print(ex)\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise Exception(\"File '%s' already exists\" % file_name)\n    with codecs.open(file_name, 'ab', encoding) as file_pointer:\n        file_pointer.write(text_buffer)\n        return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.isfile(file_name) and not overwrite:\n        return 0\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n        f = codecs.open(file_name, 'ab', encoding)\n        f.write(text_buffer)\n        f.close()\n        return len(text_buffer)\n    except Exception as e:\n        print(\"ERROR: Could not write to file {}\".format(file_name), e)\n        return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            buffer = f.read()\n    except EnvironmentError as e:\n        print(\"Error reading file {}: {}\".format(file_name, e))\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, encoding=encoding, mode='r') as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    try:\n        text = file.read()\n    finally:\n        file.close()\n    return text\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, \"r\", encoding).read()\n    except (IOError, OSError):\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, encoding=encoding)\n    except IOError:\n        return None\n    buffer = file.read()\n    file.close()\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, encoding=encoding, mode='r')\n    except IOError:\n        return None\n    else:\n        text = file.read()\n        file.close()\n        return text\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except (IOError, OSError):\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding).read()\n    except (IOError, OSError):\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            buffer = f.read()\n    except EnvironmentError as e:\n        print(\"Error reading file {}: {}\".format(file_name, e))\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, encoding=encoding, mode='r') as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    try:\n        text = file.read()\n    finally:\n        file.close()\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, \"r\", encoding).read()\n    except (IOError, OSError):\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, encoding=encoding)\n    except IOError:\n        return None\n    buffer = file.read()\n    file.close()\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, encoding=encoding, mode='r')\n    except IOError:\n        return None\n    else:\n        text = file.read()\n        file.close()\n        return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except (IOError, OSError):\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding).read()\n    except (IOError, OSError):\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        return True\n    else:\n        return False\n", "def is_file_exist(file_name):\n    if file_name is None:\n        return False\n    return True if os.path.isfile(file_name) else False\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    try:\n        with open(file_name, 'r') as f:\n            return True\n    except IOError:\n        return False\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    try:\n        file_exist = os.path.isfile(file_name)\n    except Exception:\n        file_exist = False\n\n    return file_exist\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if file_name is None:\n        return False\n    return True if os.path.isfile(file_name) else False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    try:\n        with open(file_name, 'r') as f:\n            return True\n    except IOError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    try:\n        file_exist = os.path.isfile(file_name)\n    except Exception:\n        file_exist = False\n\n    return file_exist\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.NOTSET)\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n", "def _reset_logging(cls):\n    if '_logging' in cls.__dict__:\n        del cls._logging\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = _emit_log\n", "def _reset_logging(cls):\n    global logger\n    logger = logging.getLogger(\"pyodbc\")\n    logger.setLevel(logging.WARNING)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.NOTSET)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if '_logging' in cls.__dict__:\n        del cls._logging\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = _emit_log\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    global logger\n    logger = logging.getLogger(\"pyodbc\")\n    logger.setLevel(logging.WARNING)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return html.Li\n", "def _getTargetClass(self):\n    return JSON\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return DataTarget\n", "def _getTargetClass(self):\n    return ast.ExceptHandler\n", "def _getTargetClass(self):\n    return TextTestResult\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Li\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JSON\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DataTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return ast.ExceptHandler\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) < 2:\n            result.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i][0] == prefix:\n                    i = i - 1\n                    break\n            result.append(o[i])\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n    return [o for o in orderings if o!= []]\n", "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = 0\n    for o in orderings:\n        if len(o) <= prev_end:\n            merged.append(o)\n            prev_end = len(o)\n        else:\n            merged[prev_end] = o\n            prev_end += 1\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i])\n                break\n    result.append(suffix)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n\n    # Create a new orderings array with the same shape as the input\n    orderings = np.array(orderings)\n\n    # Merge the indices of the input array with the existing orderings\n    merged = np.zeros_like(orderings, dtype=int)\n    merged[np.in1d(orderings[:, 0], orderings[:, 1])] = orderings[:, 0]\n\n    # Replace the input array with the correct shape and return\n    return merged.reshape(orderings.shape[:-1] + (-1,))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) < 2:\n            result.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i][0] == prefix:\n                    i = i - 1\n                    break\n            result.append(o[i])\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n    return [o for o in orderings if o!= []]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = 0\n    for o in orderings:\n        if len(o) <= prev_end:\n            merged.append(o)\n            prev_end = len(o)\n        else:\n            merged[prev_end] = o\n            prev_end += 1\n    return merged\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i])\n                break\n    result.append(suffix)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if not isinstance(orderings, list) else orderings\n\n    # Create a new orderings array with the same shape as the input\n    orderings = np.array(orderings)\n\n    # Merge the indices of the input array with the existing orderings\n    merged = np.zeros_like(orderings, dtype=int)\n    merged[np.in1d(orderings[:, 0], orderings[:, 1])] = orderings[:, 0]\n\n    # Replace the input array with the correct shape and return\n    return merged.reshape(orderings.shape[:-1] + (-1,))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    provided = getattr(object, '__providedBy__', None)\n    if provided is not None:\n        return provided\n    directlyProvidedBy = getattr(object, 'directlyProvided', None)\n    if directlyProvidedBy is not None:\n        return directlyProvidedBy\n    raise TypeError(\"%s has no directlyProvidedBy method\" % (object,))\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    providedByIfaces = providedBy.__provides__\n    if providedByIfaces is not None:\n        return providedByIfaces[1]\n    raise TypeError(\n        \"%r does not provide directly providedBy interface\" % (object,))\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    providedByIfaces = providedBy.__provides__\n    if providedByIfaces is not None:\n        return providedByIfaces[1]\n    return providedBy\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    spec = providedBySpec = getattr(object, '__provides__', None)\n    if providedBySpec is not None:\n        return providedBySpec.__self__.__class__\n", "def directlyProvidedBy(object):\n    providedBy = providedByObject(object)\n    if providedBy is None:\n        raise TypeError(\n            \"{0!r} is not directly provided by {1!r}\".format(object, providedBy))\n    return providedBy\n", "def directlyProvidedBy(object):\n    providedBy = providedByInterface(object)\n    if providedBy is None:\n        raise TypeError(\n            \"%r object does not provide an implementation of 'directlyProvidedBy'\" %\n            (object.__class__.__name__,))\n    return providedBy\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is None:\n        providedBy = getattr(object, 'providedBy', None)\n    if providedBy is None:\n        return None\n    return providedBy()\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    provides = providedByNames(object)\n    if IInterface.providedBy(provides[0]):\n        return provides[0]\n    raise TypeError(\"%s doesn't provide %s\" % (object, provides))\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    provided_by = getattr(object, '__provided__', None)\n    if provided_by is not None:\n        return provided_by\n    raise TypeError(\"%s has no attribute 'directlyProvidedBy'\" % (object,))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    provided = getattr(object, '__providedBy__', None)\n    if provided is not None:\n        return provided\n    directlyProvidedBy = getattr(object, 'directlyProvided', None)\n    if directlyProvidedBy is not None:\n        return directlyProvidedBy\n    raise TypeError(\"%s has no directlyProvidedBy method\" % (object,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    providedByIfaces = providedBy.__provides__\n    if providedByIfaces is not None:\n        return providedByIfaces[1]\n    raise TypeError(\n        \"%r does not provide directly providedBy interface\" % (object,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    providedByIfaces = providedBy.__provides__\n    if providedByIfaces is not None:\n        return providedByIfaces[1]\n    return providedBy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    spec = providedBySpec = getattr(object, '__provides__', None)\n    if providedBySpec is not None:\n        return providedBySpec.__self__.__class__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = providedByObject(object)\n    if providedBy is None:\n        raise TypeError(\n            \"{0!r} is not directly provided by {1!r}\".format(object, providedBy))\n    return providedBy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = providedByInterface(object)\n    if providedBy is None:\n        raise TypeError(\n            \"%r object does not provide an implementation of 'directlyProvidedBy'\" %\n            (object.__class__.__name__,))\n    return providedBy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is None:\n        providedBy = getattr(object, 'providedBy', None)\n    if providedBy is None:\n        return None\n    return providedBy()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    provides = providedByNames(object)\n    if IInterface.providedBy(provides[0]):\n        return provides[0]\n    raise TypeError(\"%s doesn't provide %s\" % (object, provides))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    provided_by = getattr(object, '__provided__', None)\n    if provided_by is not None:\n        return provided_by\n    raise TypeError(\"%s has no attribute 'directlyProvidedBy'\" % (object,))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Base)]\n", "def minimalBases(classes):\n    # the default implementation is to sort the classes into the order\n    # that they appear in the original class list.  In this case, the\n    # classes are minimized in the order they appear in the original list.\n    classes.sort()\n    bases = []\n    for c in classes:\n        while c.__bases__:\n            c = c.__bases__[0]\n        bases.append(c)\n    return bases\n", "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.priority)\n", "def minimalBases(classes):\n    minBases = []\n    for classe in classes:\n        for base in classe.__mro__[1:]:\n            if base not in minBases:\n                minBases.append(base)\n    return minBases\n", "def minimalBases(classes):\n    \"Reduce a list of base classes to its ordered minimative equivalent with\"\n    return sorted(classes, key=lambda cls: cls.order)\n", "def minimalBases(classes):\n    \" the ordered minimum equivalent of\"\n    classes.sort()\n    return [c for c in classes if issubclass(c, ClassRoot)]\n", "def minimalBases(classes):\n    \"The ordered minimum equivalent with\"\n    classes.sort()\n    i = 0\n    while i < len(classes) and classes[i].__module__ == \"__main__\":\n        i += 1\n    return classes[:i]\n", "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted([c for c in classes if issubclass(c, Base)])\n    if len(bases) == 1:\n        return bases\n    elif len(bases) == 0:\n        raise ValueError(\"Cannot find a base class whose minimal \"\n                         \"ordering is equal to any base class\")\n    elif len(bases) == 2:\n        return classes[0], classes[1]\n    else:\n        i = len(bases) - 1\n        while i >= 0 and bases[i].__class__ is not Base:\n            i -= 1\n        return bases[0], bases[i]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    # the default implementation is to sort the classes into the order\n    # that they appear in the original class list.  In this case, the\n    # classes are minimized in the order they appear in the original list.\n    classes.sort()\n    bases = []\n    for c in classes:\n        while c.__bases__:\n            c = c.__bases__[0]\n        bases.append(c)\n    return bases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.priority)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBases = []\n    for classe in classes:\n        for base in classe.__mro__[1:]:\n            if base not in minBases:\n                minBases.append(base)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"Reduce a list of base classes to its ordered minimative equivalent with\"\n    return sorted(classes, key=lambda cls: cls.order)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \" the ordered minimum equivalent of\"\n    classes.sort()\n    return [c for c in classes if issubclass(c, ClassRoot)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"The ordered minimum equivalent with\"\n    classes.sort()\n    i = 0\n    while i < len(classes) and classes[i].__module__ == \"__main__\":\n        i += 1\n    return classes[:i]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted([c for c in classes if issubclass(c, Base)])\n    if len(bases) == 1:\n        return bases\n    elif len(bases) == 0:\n        raise ValueError(\"Cannot find a base class whose minimal \"\n                         \"ordering is equal to any base class\")\n    elif len(bases) == 2:\n        return classes[0], classes[1]\n    else:\n        i = len(bases) - 1\n        while i >= 0 and bases[i].__class__ is not Base:\n            i -= 1\n        return bases[0], bases[i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    names = []\n    doc = []\n    for b in self.__bases__:\n        n = getattr(b, '__name__', None)\n        d = getattr(b, '__doc__', None)\n        if (not all or n is None or not d or\n                not n.startswith('_') or\n                not hasattr(b, '__attrs__')):\n            names.append(n)\n            doc.append(d)\n    return '\\n'.join(names), '\\n'.join(doc)\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        names.append(base.__name__)\n        descs.append(str(base))\n        names.extend(getattr(base, '__qualnames__', []))\n        descs.extend(getattr(base, '__doc__', '').splitlines())\n    if all:\n        return (names, descs)\n    return dict(list(zip(names, descs)))\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__attrs__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return list(set(names + descriptions))\n    return dict(list(zip(names, descriptions)))\n", "def namesAndDescriptions(self, all=False):\n    names = sorted(attr for attr in self.__attrs if not attr.startswith('_'))\n    desc = []\n    for name in names:\n        try:\n            desc.append(self.__attrs[name].description)\n        except AttributeError:\n            desc.append('')\n    if all:\n        return '\\n'.join(names), '\\n'.join(desc)\n    return names, '\\n'.join(desc)\n", "def namesAndDescriptions(self, all=False):\n    names_descriptions = []\n    for base in self.__bases__:\n        names_descriptions.extend(base.namesAndDescriptions(all))\n    if all:\n        return names_descriptions\n    return ['%s = %s' % (k, v) for k, v in sorted(self.__attrs.items())]\n", "def namesAndDescriptions(self, all=False):\n    attrs = sorted([(key, value) for key, value in self.__attrs.items() if not key.startswith(\"__\")])\n    if all:\n        return attrs\n    return \"\\n\".join(\"%s: %s\" % (key, value) for key, value in attrs)\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__attrs__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", None) or [])\n    if all:\n        return list(set(names + descriptions))\n    return dict(list(zip(names, descriptions)))\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    docs = []\n    for base in self.__bases__:\n        names.extend(base.names(all=all))\n        if hasattr(base, 'docs'):\n            docs.extend(base.docs())\n    return names, docs\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.append(base.__name__)\n        if hasattr(base, 'description'):\n            descriptions.append(base.description)\n    if all:\n        return (names, descriptions)\n    return (names, tuple(descriptions))\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    docs = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__names__\", []))\n        docs.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return (names, docs)\n    return dict(list(zip(names, docs)))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    doc = []\n    for b in self.__bases__:\n        n = getattr(b, '__name__', None)\n        d = getattr(b, '__doc__', None)\n        if (not all or n is None or not d or\n                not n.startswith('_') or\n                not hasattr(b, '__attrs__')):\n            names.append(n)\n            doc.append(d)\n    return '\\n'.join(names), '\\n'.join(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        names.append(base.__name__)\n        descs.append(str(base))\n        names.extend(getattr(base, '__qualnames__', []))\n        descs.extend(getattr(base, '__doc__', '').splitlines())\n    if all:\n        return (names, descs)\n    return dict(list(zip(names, descs)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__attrs__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return list(set(names + descriptions))\n    return dict(list(zip(names, descriptions)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = sorted(attr for attr in self.__attrs if not attr.startswith('_'))\n    desc = []\n    for name in names:\n        try:\n            desc.append(self.__attrs[name].description)\n        except AttributeError:\n            desc.append('')\n    if all:\n        return '\\n'.join(names), '\\n'.join(desc)\n    return names, '\\n'.join(desc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names_descriptions = []\n    for base in self.__bases__:\n        names_descriptions.extend(base.namesAndDescriptions(all))\n    if all:\n        return names_descriptions\n    return ['%s = %s' % (k, v) for k, v in sorted(self.__attrs.items())]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = sorted([(key, value) for key, value in self.__attrs.items() if not key.startswith(\"__\")])\n    if all:\n        return attrs\n    return \"\\n\".join(\"%s: %s\" % (key, value) for key, value in attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__attrs__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", None) or [])\n    if all:\n        return list(set(names + descriptions))\n    return dict(list(zip(names, descriptions)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    docs = []\n    for base in self.__bases__:\n        names.extend(base.names(all=all))\n        if hasattr(base, 'docs'):\n            docs.extend(base.docs())\n    return names, docs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.append(base.__name__)\n        if hasattr(base, 'description'):\n            descriptions.append(base.description)\n    if all:\n        return (names, descriptions)\n    return (names, tuple(descriptions))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    docs = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__names__\", []))\n        docs.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return (names, docs)\n    return dict(list(zip(names, docs)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    attrs = []\n    for base in self.__bases__:\n        attrs.extend(getattr(base, \"__attrs_attrs__\", []))\n        attrs.extend(getattr(base, \"__dict__\", {}).keys())\n    if all:\n        return attrs\n    return sorted(attrs)\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs)\n", "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if issubclass(base, Interface):\n            names += base.names(all=all)\n        else:\n            names.append(base.__name__)\n    return names\n", "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        names += getattr(base, '__attrs_attrs__', [])\n    if all:\n        return list(set(names + ['__dict__']))\n    return names\n", "def names(self, all=False):\n    return [k for k in self.__attrs if not all or isinstance(k, str)]\n", "def names(self, all=False):\n    return [a for a in self.__attrs if a[0]!= '_']\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return list(self.__attrs.keys())\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return sorted(self.__attrs)\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "def names(self, all=False):\n    return attr.fields(self.__attrs) if all else self.__attrs\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    attrs = []\n    for base in self.__bases__:\n        attrs.extend(getattr(base, \"__attrs_attrs__\", []))\n        attrs.extend(getattr(base, \"__dict__\", {}).keys())\n    if all:\n        return attrs\n    return sorted(attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if issubclass(base, Interface):\n            names += base.names(all=all)\n        else:\n            names.append(base.__name__)\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        names += getattr(base, '__attrs_attrs__', [])\n    if all:\n        return list(set(names + ['__dict__']))\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return [k for k in self.__attrs if not all or isinstance(k, str)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return [a for a in self.__attrs if a[0]!= '_']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return list(self.__attrs.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return sorted(self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return attr.fields(self.__attrs) if all else self.__attrs\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for item in sequence:\n        if isinstance(item, InterfaceClass):\n            item = _normalizeargs(item.declaration_specs, output=item)\n        elif isinstance(item, tuple):\n            item = _normalizeargs(item, output=item)\n        elif isinstance(item, types.FunctionType):\n            if getattr(item, '__is_interface__', False):\n                item = _normalizeargs(item.__implementation__, output=item)\n            else:\n                item = _normalizeargs(item.__implementation__(), output=item)\n\n        declared.append(item)\n    return declared, output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(arg):\n        if isinstance(arg, Interface):\n            return arg\n        elif isinstance(arg, tuple):\n            return Interface(*arg)\n        elif isinstance(arg, types.FunctionType) and hasattr(arg, '__call__'):\n            return Function(arg)\n        else:\n            return arg\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Interface):\n            sequence[i] = expand(arg)\n        elif isinstance(arg, tuple):\n            sequence[i] = expand(arg)\n        elif isinstance(arg, types.Spec):\n            output.append(arg)\n        else:\n            output.append(expand(arg))\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, Interface):\n            return item\n        elif isinstance(item, tuple):\n            return Implements(*item)\n        elif isinstance(item, list):\n            return Implements(*item)\n        return item\n\n    for item in sequence:\n        output.append(expand(item))\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = set([])\n    for i in sequence:\n        try:\n            iterable = _normalizeargs(i, output)\n        except TypeError:\n            if hasattr(i, '__iter__'):\n                iterable = i\n            else:\n                iterable = [i]\n\n        declared.update(iterable)\n\n    if declared!= set(sequence):\n        # one or more declared arguments was not normalized, but the other\n        output.extend(declared - set(sequence))\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, Interface):\n            output.append(item)\n            return\n        for sub_item in item:\n            expand(sub_item)\n\n    expand(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        try:\n            i = _normalizeinterface(i)\n        except TypeError:\n            pass\n        try:\n            i.__annotations__ = getattr(i, \"__annotations__\", {})\n        except AttributeError:\n            pass\n        declared.append(i)\n    return declared, output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        try:\n            i = _normalizeinterface(i)\n        except TypeError:\n            pass\n        except SpecSyntaxError:\n            raise TypeError(\"Cannot normalize %r to a type that is not \"\n                            \"an instance of Declaration\" % (i,))\n        declared.append(i)\n    return declared, output\n", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, InterfaceClass):\n        for arg in sequence.args:\n            _normalizeargs(arg, output)\n        return\n    if isinstance(sequence, Implements):\n        for arg in sequence.args:\n            _normalizeargs(arg, output)\n        return\n\n    if output is None:\n        output = []\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Implements):\n            sequence[i] = _normalizeargs(arg, output)\n        elif isinstance(arg, Declaration):\n            output.append(arg)\n            output.extend(_normalizeargs(arg.args, output))\n        else:\n            output.append(arg)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            i = _normalizeargs(i._declaration_args, output)\n        elif isinstance(i, Implements):\n            i = [i]\n        elif isinstance(i, tuple):\n            i = _normalizeargs(i, output)\n            if len(i) == 1:\n                i = i[0]\n\n        declared.append(i)\n\n    if output and len(declared) > 1:\n        if hasattr(output[-1], \"_implements\"):\n            output[-1]._implements.update(declared)\n        else:\n            output[-1].implements.update(declared)\n    elif output:\n        declared = output[0]\n        output[0] = declared\n\n    return declared\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def recurse(node):\n        if isinstance(node, (Decl, Interface)):\n            output.append(node.fullname)\n            for c in node.args:\n                recurse(c)\n        elif isinstance(node, (Tuple, List)):\n            for i in node.elts:\n                recurse(i)\n        else:\n            # Always output the unresolved declaration to the caller\n            output.append(node.fullname)\n\n    recurse(sequence)\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for item in sequence:\n        if isinstance(item, InterfaceClass):\n            item = _normalizeargs(item.declaration_specs, output=item)\n        elif isinstance(item, tuple):\n            item = _normalizeargs(item, output=item)\n        elif isinstance(item, types.FunctionType):\n            if getattr(item, '__is_interface__', False):\n                item = _normalizeargs(item.__implementation__, output=item)\n            else:\n                item = _normalizeargs(item.__implementation__(), output=item)\n\n        declared.append(item)\n    return declared, output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(arg):\n        if isinstance(arg, Interface):\n            return arg\n        elif isinstance(arg, tuple):\n            return Interface(*arg)\n        elif isinstance(arg, types.FunctionType) and hasattr(arg, '__call__'):\n            return Function(arg)\n        else:\n            return arg\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Interface):\n            sequence[i] = expand(arg)\n        elif isinstance(arg, tuple):\n            sequence[i] = expand(arg)\n        elif isinstance(arg, types.Spec):\n            output.append(arg)\n        else:\n            output.append(expand(arg))\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, Interface):\n            return item\n        elif isinstance(item, tuple):\n            return Implements(*item)\n        elif isinstance(item, list):\n            return Implements(*item)\n        return item\n\n    for item in sequence:\n        output.append(expand(item))\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = set([])\n    for i in sequence:\n        try:\n            iterable = _normalizeargs(i, output)\n        except TypeError:\n            if hasattr(i, '__iter__'):\n                iterable = i\n            else:\n                iterable = [i]\n\n        declared.update(iterable)\n\n    if declared!= set(sequence):\n        # one or more declared arguments was not normalized, but the other\n        output.extend(declared - set(sequence))\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, Interface):\n            output.append(item)\n            return\n        for sub_item in item:\n            expand(sub_item)\n\n    expand(sequence)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        try:\n            i = _normalizeinterface(i)\n        except TypeError:\n            pass\n        try:\n            i.__annotations__ = getattr(i, \"__annotations__\", {})\n        except AttributeError:\n            pass\n        declared.append(i)\n    return declared, output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        try:\n            i = _normalizeinterface(i)\n        except TypeError:\n            pass\n        except SpecSyntaxError:\n            raise TypeError(\"Cannot normalize %r to a type that is not \"\n                            \"an instance of Declaration\" % (i,))\n        declared.append(i)\n    return declared, output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, InterfaceClass):\n        for arg in sequence.args:\n            _normalizeargs(arg, output)\n        return\n    if isinstance(sequence, Implements):\n        for arg in sequence.args:\n            _normalizeargs(arg, output)\n        return\n\n    if output is None:\n        output = []\n\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Implements):\n            sequence[i] = _normalizeargs(arg, output)\n        elif isinstance(arg, Declaration):\n            output.append(arg)\n            output.extend(_normalizeargs(arg.args, output))\n        else:\n            output.append(arg)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = []\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            i = _normalizeargs(i._declaration_args, output)\n        elif isinstance(i, Implements):\n            i = [i]\n        elif isinstance(i, tuple):\n            i = _normalizeargs(i, output)\n            if len(i) == 1:\n                i = i[0]\n\n        declared.append(i)\n\n    if output and len(declared) > 1:\n        if hasattr(output[-1], \"_implements\"):\n            output[-1]._implements.update(declared)\n        else:\n            output[-1].implements.update(declared)\n    elif output:\n        declared = output[0]\n        output[0] = declared\n\n    return declared\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def recurse(node):\n        if isinstance(node, (Decl, Interface)):\n            output.append(node.fullname)\n            for c in node.args:\n                recurse(c)\n        elif isinstance(node, (Tuple, List)):\n            for i in node.elts:\n                recurse(i)\n        else:\n            # Always output the unresolved declaration to the caller\n            output.append(node.fullname)\n\n    recurse(sequence)\n    return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        from. import c_optimizations as c_optimizations\n    except ImportError:\n        # c_optimizations not available, could be installed on some systems\n        return False\n    return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations as c_optimizations_module\n        return c_optimizations_module\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    from _c_optimizations import c_optimizations\n    return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import OptimizationModule\n        return OptimizationModule\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "def _c_optimizations_available():\n    from c_opt import C_Optimizations\n    return C_Optimizations\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n        return COptimizations\n    except ImportError:\n        pass\n    try:\n        from.c_optimizations_required import COptimizationsRequired\n        return COptimizationsRequired\n    except ImportError:\n        pass\n    raise ImportError(\"C optimizations not available. \"\n                      \"Try installing them first.\")\n", "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        # If there's no C optimizations installed, this is an empty package\n        # that we can use to determine whether to use C or not.\n        return False\n    else:\n        return COptimizations\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        from. import c_optimizations as c_optimizations\n    except ImportError:\n        # c_optimizations not available, could be installed on some systems\n        return False\n    return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations as c_optimizations_module\n        return c_optimizations_module\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from _c_optimizations import c_optimizations\n    return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import OptimizationModule\n        return OptimizationModule\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from c_opt import C_Optimizations\n    return C_Optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n        return COptimizations\n    except ImportError:\n        pass\n    try:\n        from.c_optimizations_required import COptimizationsRequired\n        return COptimizationsRequired\n    except ImportError:\n        pass\n    raise ImportError(\"C optimizations not available. \"\n                      \"Try installing them first.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        # If there's no C optimizations installed, this is an empty package\n        # that we can use to determine whether to use C or not.\n        return False\n    else:\n        return COptimizations\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == '1'\n", "def _should_attempt_c_optimizations():\n    pure_env_var = \"PURE_PYTHON\"\n    return pure_env_var in os.environ\n", "def _should_attempt_c_optimizations():\n    pure_env_name = \"PURE_PYTHON\"\n    return pure_env_name in os.environ\n", "def _should_attempt_c_optimizations():\n    from _pypy_env import PURE_PYTHON\n\n    return PURE_PYTHON or _c_optimizations_required()\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env in ('1', '0')\n\n    return _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get(\"PURE_PYTHON\") is not None and\n            _use_c_impl)\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _should_attempt_c_optimizations():\n    pure_pypy = _use_c_impl() and PURE_PYTHON\n    return pure_pypy or (sys.version_info >= (3, ))\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            _use_c_impl)\n", "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    if pure_pypy is not None:\n        return pure_pypy == '1'\n\n    return _c_optimizations_required() or _c_optimizations_ignored()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env_var = \"PURE_PYTHON\"\n    return pure_env_var in os.environ\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env_name = \"PURE_PYTHON\"\n    return pure_env_name in os.environ\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    from _pypy_env import PURE_PYTHON\n\n    return PURE_PYTHON or _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env in ('1', '0')\n\n    return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get(\"PURE_PYTHON\") is not None and\n            _use_c_impl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = _use_c_impl() and PURE_PYTHON\n    return pure_pypy or (sys.version_info >= (3, ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            _use_c_impl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    if pure_pypy is not None:\n        return pure_pypy == '1'\n\n    return _c_optimizations_required() or _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return ['-qhull', '-optdep', '-optundef', '-O0']\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return (\n        '-O0'\n        if sys.platform == 'win32' else '-O2'\n        if sys.platform == 'darwin' else '-O4'\n    )\n", "def _c_optimizations_ignored():\n    return ['--c-opt']\n", "def _c_optimizations_ignored():\n    return ['-g', '--generate-only']\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return lambda opt: not opt.required and opt.status == 'o'\n", "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os \"\n    return _c_optimizations_required('--c')\n", "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os \"\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return ['-Wno-exception-default', '-Wno-unused-variable',\n            '-Wno-warn-unused-variable']\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return ['-qhull', '-optdep', '-optundef', '-O0']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        '-O0'\n        if sys.platform == 'win32' else '-O2'\n        if sys.platform == 'darwin' else '-O4'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ['--c-opt']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ['-g', '--generate-only']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return lambda opt: not opt.required and opt.status == 'o'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os \"\n    return _c_optimizations_required('--c')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \" The opposite of `_c_optimizations_required`. with import os \"\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ['-Wno-exception-default', '-Wno-unused-variable',\n            '-Wno-warn-unused-variable']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    return pure_env == '1'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    if pure_env is not None:\n        return pure_env == \"1\"\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    return pure_env == '1'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    if pure_env is not None:\n        return pure_env == \"1\"\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = None\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = []\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = {}\n", "def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._cur_context = {}\n    self._cur_bins = []\n", "def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._cur_context = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self._cur_bins = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header, graph=self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header).dumps(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from..output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    msg = (\n        \"Graph.to_csv is deprecated. See the documentation of \"\n        \":class:`lena.output.ToCSV` for more information.\"\n    )\n    warnings.warn(msg, DeprecationWarning)\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header, graph=self)\n", "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\n        \"Graph.to_csv is deprecated; use Graph.points.to_csv(separator=\"\n        \"separator\", header=header, separator=separator, header_len=len(header))\n       .to_string(header=header, separator=separator)\n    )\n    return self.points.to_csv(separator=separator, header=header)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header, graph=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header).dumps(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    msg = (\n        \"Graph.to_csv is deprecated. See the documentation of \"\n        \":class:`lena.output.ToCSV` for more information.\"\n    )\n    warnings.warn(msg, DeprecationWarning)\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header, graph=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output.ToCSV import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\n        \"Graph.to_csv is deprecated; use Graph.points.to_csv(separator=\"\n        \"separator\", header=header, separator=separator, header_len=len(header))\n       .to_string(header=header, separator=separator)\n    )\n    return self.points.to_csv(separator=separator, header=header)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        raise KeyError('Coordinate {0} is not a valid error name.'\n                      .format(coord_name))\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        raise ValueError(\"Coordinate '{}' is not a valid error name. Valid\"\n                         \" names are: {}\".format(coord_name,\n                                                 self._parsed_error_names.keys()))\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        raise ValueError(\"'{}' is not a recognized coordinate name\".format(coord_name))\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Coordinate name \"%s\" not found. Choose from %s.' %\n                       (coord_name, self._parsed_error_names.keys()))\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name =='segment_id':\n        return [0, 1, 2]\n    elif coord_name == 'channel':\n        return [0]\n    else:\n        raise KeyError('Unknown coordinate \"%s\". Choose between '\n                       '[%s] and [%s]' % (coord_name,\n                                         ', '.join(self._parsed_error_names.keys()),\n                                         ', '.join(['%s' % c for c in self._parsed_error_names.keys()])))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        raise KeyError('Coordinate {0} is not a valid error name.'\n                      .format(coord_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        raise ValueError(\"Coordinate '{}' is not a valid error name. Valid\"\n                         \" names are: {}\".format(coord_name,\n                                                 self._parsed_error_names.keys()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        raise ValueError(\"'{}' is not a recognized coordinate name\".format(coord_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Coordinate name \"%s\" not found. Choose from %s.' %\n                       (coord_name, self._parsed_error_names.keys()))\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name =='segment_id':\n        return [0, 1, 2]\n    elif coord_name == 'channel':\n        return [0]\n    else:\n        raise KeyError('Unknown coordinate \"%s\". Choose between '\n                       '[%s] and [%s]' % (coord_name,\n                                         ', '.join(self._parsed_error_names.keys()),\n                                         ', '.join(['%s' % c for c in self._parsed_error_names.keys()])))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.error_names = []\n    context.value_names = []\n    for name in self._parsed_error_names:\n        if name not in context.error:\n            context.error.append(name)\n    for name in self._parsed_error_names:\n        if name not in context.value:\n            context.value[name] = {}\n        context.value[name].update(self._parsed_error_values[name])\n", "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    for key in self._parsed_error_names:\n        context.value[key] = {}\n        for field in self._coord_names[key]:\n            context.value[key][field] = None\n        context.error[key] = {}\n", "def _update_context(self, context):\n    context.error = []\n    if self._parsed_error_names is not None:\n        context.error.append(self._parsed_error_names)\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n\n    for name in self._parsed_error_names:\n        context.error[name][\"value\"] = getattr(self, name)\n", "def _update_context(self, context):\n    context.error = []\n    for error_name, field in self._parsed_error_names.items():\n        if field is not None:\n            context.error.append((error_name, field))\n", "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    context.error_names = []\n    context.value_names = []\n    for name, prop in self._parsed_error_names.items():\n        context.error[name] = prop.value\n        if prop.index is not None:\n            context.value_names.append(name + \"_\" + str(prop.index))\n        else:\n            context.value_names.append(name)\n    for name, prop in self._parsed_error_names.items():\n        if prop.index is not None:\n            context.error_names.append(name + \"_\" + str(prop.index))\n        else:\n            context.error_names.append(name)\n", "def _update_context(self, context):\n    context.error = []\n    for name in self._parsed_error_names:\n        if name not in context.value:\n            context.error.append(name)\n", "def _update_context(self, context):\n    for name in self._parsed_error_names:\n        context[name] = {\"index\": self._parsed_error_names.index(name)}\n    return context\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for index, val in enumerate(self._parsed_error_values[name]):\n            if val is None:\n                continue\n            if val.name in context.error:\n                context.error[name][index] = val.value\n            else:\n                context.error[name][index] = val\n", "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose any data that was\n    # picked up while we are iterating over it\n    context.update(dict((k, v) for k, v in iteritems(context)\n                        if k not in self._parsed_error_names))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.error_names = []\n    context.value_names = []\n    for name in self._parsed_error_names:\n        if name not in context.error:\n            context.error.append(name)\n    for name in self._parsed_error_names:\n        if name not in context.value:\n            context.value[name] = {}\n        context.value[name].update(self._parsed_error_values[name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    for key in self._parsed_error_names:\n        context.value[key] = {}\n        for field in self._coord_names[key]:\n            context.value[key][field] = None\n        context.error[key] = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    if self._parsed_error_names is not None:\n        context.error.append(self._parsed_error_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n\n    for name in self._parsed_error_names:\n        context.error[name][\"value\"] = getattr(self, name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for error_name, field in self._parsed_error_names.items():\n        if field is not None:\n            context.error.append((error_name, field))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    context.error_names = []\n    context.value_names = []\n    for name, prop in self._parsed_error_names.items():\n        context.error[name] = prop.value\n        if prop.index is not None:\n            context.value_names.append(name + \"_\" + str(prop.index))\n        else:\n            context.value_names.append(name)\n    for name, prop in self._parsed_error_names.items():\n        if prop.index is not None:\n            context.error_names.append(name + \"_\" + str(prop.index))\n        else:\n            context.error_names.append(name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for name in self._parsed_error_names:\n        if name not in context.value:\n            context.error.append(name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for name in self._parsed_error_names:\n        context[name] = {\"index\": self._parsed_error_names.index(name)}\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for index, val in enumerate(self._parsed_error_values[name]):\n            if val is None:\n                continue\n            if val.name in context.error:\n                context.error[name][index] = val.value\n            else:\n                context.error[name][index] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose any data that was\n    # picked up while we are iterating over it\n    context.update(dict((k, v) for k, v in iteritems(context)\n                        if k not in self._parsed_error_names))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return sum((edges[i] * (bins[i+1] - bins[i]) for i in range(len(edges)-1)))\n", "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n    return sum(edges[1:] - edges[:-1]) * bins[1] / 2.\n", "def integral(bins, edges):\n    xedges, yedges = edges\n    xmid = (xedges[1:] + xedges[:-1]) / 2.\n    ymid = (yedges[1:] + yedges[:-1]) / 2.\n    return 0.5 * (xmid[1:] + xmid[:-1]) * bins[:-1] + 0.5 * (ymid[1:] + ymid[:-1]) * bins[1:]\n", "def integral(bins, edges):\n    if len(edges)!= bins:\n        raise ValueError(\"edges array and bins array must have the same \"\n                         \"length\")\n    # we avoid computation of the integral since we don't need to take the\n    # absolute value of the data\n    return sum([edges[i] * bins[i] for i in range(bins.size)])\n", "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return np.diff(edges) * bins\n", "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return (edges[1] - edges[0]) * bins[1] + (edges[-1] - edges[-2]) * bins[-1]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum((edges[i] * (bins[i+1] - bins[i]) for i in range(len(edges)-1)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n    return sum(edges[1:] - edges[:-1]) * bins[1] / 2.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    xedges, yedges = edges\n    xmid = (xedges[1:] + xedges[:-1]) / 2.\n    ymid = (yedges[1:] + yedges[:-1]) / 2.\n    return 0.5 * (xmid[1:] + xmid[:-1]) * bins[:-1] + 0.5 * (ymid[1:] + ymid[:-1]) * bins[1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if len(edges)!= bins:\n        raise ValueError(\"edges array and bins array must have the same \"\n                         \"length\")\n    # we avoid computation of the integral since we don't need to take the\n    # absolute value of the data\n    return sum([edges[i] * bins[i] for i in range(bins.size)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.diff(edges) * bins\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (edges[1] - edges[0]) * bins[1] + (edges[-1] - edges[-2]) * bins[-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or (isinstance(seq, SourceSequence) and seq.is_source)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_source)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or (\n        isinstance(seq, Source) and any(not isinstance(x, Source) for x in seq)\n    )\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_source(seq):\n        return False\n    return not is_source(seq.contents)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or (isinstance(seq, SourceSequence) and seq.is_source)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and seq.is_source)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or (\n        isinstance(seq, Source) and any(not isinstance(x, Source) for x in seq)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_source(seq):\n        return False\n    return not is_source(seq.contents)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' \\\n        and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and \"request\" in obj.attrib\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('method') == 'fill' and obj.get('args') == request_args\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' and obj.method =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' \\\n        and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and \"request\" in obj.attrib\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('method') == 'fill' and obj.get('args') == request_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, Element) and obj.tag == 'fill' and obj.method =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == 'run' and \\\n        obj.__doc__\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == \"run\" and hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == 'run' and \\\n        obj.__doc__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and \\\n        obj.__name__ == \"run\" and hasattr(obj, \"run\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, Element) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Container) and obj.is_fill_compute()))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('method', None) == 'fill' and \\\n           obj.get('args', None) and isinstance(obj.get('args'), list) and \\\n           all([isinstance(i, dict) and i.get('method', None) == 'compute' and \\\n                 i.get('args', None) and isinstance(i.get('args'), list) for i in obj['args']])\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) and hasattr(obj, 'fill')\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalFillBase) and\n             obj.fill is not None) or\n            (isinstance(obj, ComputeBase) and obj.compute is not None))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill) or\n            (isinstance(obj, ExecutableBase) and obj.compute))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('type') == 'FillCompute'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Container) and obj.is_fill_compute()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('method', None) == 'fill' and \\\n           obj.get('args', None) and isinstance(obj.get('args'), list) and \\\n           all([isinstance(i, dict) and i.get('method', None) == 'compute' and \\\n                 i.get('args', None) and isinstance(i.get('args'), list) for i in obj['args']])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) and hasattr(obj, 'fill')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalFillBase) and\n             obj.fill is not None) or\n            (isinstance(obj, ComputeBase) and obj.compute is not None))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill) or\n            (isinstance(obj, ExecutableBase) and obj.compute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get('type') == 'FillCompute'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    d = d1.copy()\n    if level < 0:\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n        return d\n    for k in d2:\n        if k not in d1:\n            d[k] = d2[k]\n            continue\n        if d1[k]!= d2[k]:\n            d[k] = d1.pop(k)\n            continue\n        if level > 0:\n            level -= 1\n            continue\n        break\n    return d\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    diff = {}\n\n    for key in d1_keys - d2_keys:\n        val1 = d1[key]\n        val2 = d2[key]\n        if level < 0:\n            # Set the level of the difference to -1 so that the keys are\n            # included in the difference.\n            diff[key] = - val1\n        elif level > 0:\n            # Set the level of the difference to +1 so that the keys are\n            # included in the difference.\n            diff[key] = val1\n        elif val1!= val2:\n            # Set the level of the difference to 0 so that the keys are\n            # included in the difference.\n        ", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('difference() works on dicts')\n\n    if level < 0:\n        level = max(d1.keys() + d2.keys()) + level\n\n    diff = {}\n    for key in d1:\n        if key not in d2:\n            diff[key] = d1[key]\n        elif d1[key]!= d2[key]:\n            diff[key] = d1[key]\n        elif d1[key] == d2[key]:\n            diff[key] = None\n    for key in d2:\n        if diff.get(key, None) == d2[key]:\n            pass\n        else:\n            diff[key] = d2[key]\n    return diff\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level < 0:\n        level = -1\n\n    d2_copy = d2.copy()\n    for k in d1:\n        if k not in d2_copy:\n            d2_copy[k] = d1[k]\n        elif d1[k] == d2[k]:\n            d2_copy[k] = d1[k]\n        else:\n            d2_copy[k] = intersection(d2[k], d1[k])\n    return d2_copy\n", "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + level\n\n    d = {}\n    for key in d1:\n        if key not in d2:\n            d[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            d[key] = d2[key]\n    for key in d1:\n        if d1[key] == d2[key]:\n            continue\n        elif d1[key] in (d2.get(key, None) for key in d1 if key!= key and d1[key]!= '*'):\n            level -= 1\n            d[key] = d1.pop(key)\n            if level == 0:\n                break\n        else:\n            d[key] = d2[key]\n    return d\n", "def difference(d1, d2, level=-1):\n    d1copy = d1.copy()\n    if level == 0:\n        return d1copy\n    for key in d2:\n        if key not in d1:\n            d1copy[key] = d2[key]\n        elif key in d1:\n            d1copy[key] = d1[key]\n        elif d1[key] == d2[key]:\n            d1copy[key] = d1[key]\n        else:\n            d1copy[key] = d1[key] + d2[key]\n    return d1copy\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d1_dict = d1.copy()\n        d2_dict = d2.copy()\n        for key in d1_dict:\n            if key not in d2_dict or d1_dict[key]!= d2_dict[key]:\n                d1_dict.setdefault(key, 1)\n        if level < 0:\n            return d1_dict\n        for key in d2_dict:\n            if key not in d1_dict or d2_dict[key]!= d1_dict[key]:\n                d2_dict.setdefault(key, 1)\n        return difference(d1_dict, d2_dict, level - 1)\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level == 0:\n        return d1\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n\n    diff = {}\n    for k in d1_keys.difference(d2_keys):\n        if d1[k]!= d2[k]:\n            diff[k] = d1[k]\n            if level == 0:\n                break\n        level -= 1\n\n    return difference(d1.get(k, d1[k]), d2.get(k, d2[k]), level)\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    d1_values = d1.items()\n    d2_values = d2.items()\n\n    diff = {}\n    for k, v in d1_values:\n        if k not in d2_values:\n            diff[k] = v\n        elif d2_values[k]!= v:\n            diff[k] = d2_values[k]\n            if level < 0:\n                diff[k] = diff[k].copy()\n                level = max(level, 1)\n            else:\n                diff[k].update(d2_values[k])\n    return diff\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    elif level == 0:\n        return d1\n    else:\n        d1_copy = d1.copy()\n        result = d1_copy.copy()\n        keys_to_delete = [k for k in d1 if d1[k]!= d2[k]]\n        for k in keys_to_delete:\n            d1_copy.pop(k)\n            result.pop(k)\n        return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    d = d1.copy()\n    if level < 0:\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n        return d\n    for k in d2:\n        if k not in d1:\n            d[k] = d2[k]\n            continue\n        if d1[k]!= d2[k]:\n            d[k] = d1.pop(k)\n            continue\n        if level > 0:\n            level -= 1\n            continue\n        break\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    diff = {}\n\n    for key in d1_keys - d2_keys:\n        val1 = d1[key]\n        val2 = d2[key]\n        if level < 0:\n            # Set the level of the difference to -1 so that the keys are\n            # included in the difference.\n            diff[key] = - val1\n        elif level > 0:\n            # Set the level of the difference to +1 so that the keys are\n            # included in the difference.\n            diff[key] = val1\n        elif val1!= val2:\n            # Set the level of the difference to 0 so that the keys are\n            # included in the difference.\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('difference() works on dicts')\n\n    if level < 0:\n        level = max(d1.keys() + d2.keys()) + level\n\n    diff = {}\n    for key in d1:\n        if key not in d2:\n            diff[key] = d1[key]\n        elif d1[key]!= d2[key]:\n            diff[key] = d1[key]\n        elif d1[key] == d2[key]:\n            diff[key] = None\n    for key in d2:\n        if diff.get(key, None) == d2[key]:\n            pass\n        else:\n            diff[key] = d2[key]\n    return diff\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level < 0:\n        level = -1\n\n    d2_copy = d2.copy()\n    for k in d1:\n        if k not in d2_copy:\n            d2_copy[k] = d1[k]\n        elif d1[k] == d2[k]:\n            d2_copy[k] = d1[k]\n        else:\n            d2_copy[k] = intersection(d2[k], d1[k])\n    return d2_copy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + level\n\n    d = {}\n    for key in d1:\n        if key not in d2:\n            d[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            d[key] = d2[key]\n    for key in d1:\n        if d1[key] == d2[key]:\n            continue\n        elif d1[key] in (d2.get(key, None) for key in d1 if key!= key and d1[key]!= '*'):\n            level -= 1\n            d[key] = d1.pop(key)\n            if level == 0:\n                break\n        else:\n            d[key] = d2[key]\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d1copy = d1.copy()\n    if level == 0:\n        return d1copy\n    for key in d2:\n        if key not in d1:\n            d1copy[key] = d2[key]\n        elif key in d1:\n            d1copy[key] = d1[key]\n        elif d1[key] == d2[key]:\n            d1copy[key] = d1[key]\n        else:\n            d1copy[key] = d1[key] + d2[key]\n    return d1copy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d1_dict = d1.copy()\n        d2_dict = d2.copy()\n        for key in d1_dict:\n            if key not in d2_dict or d1_dict[key]!= d2_dict[key]:\n                d1_dict.setdefault(key, 1)\n        if level < 0:\n            return d1_dict\n        for key in d2_dict:\n            if key not in d1_dict or d2_dict[key]!= d1_dict[key]:\n                d2_dict.setdefault(key, 1)\n        return difference(d1_dict, d2_dict, level - 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level == 0:\n        return d1\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n\n    diff = {}\n    for k in d1_keys.difference(d2_keys):\n        if d1[k]!= d2[k]:\n            diff[k] = d1[k]\n            if level == 0:\n                break\n        level -= 1\n\n    return difference(d1.get(k, d1[k]), d2.get(k, d2[k]), level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    d1_values = d1.items()\n    d2_values = d2.items()\n\n    diff = {}\n    for k, v in d1_values:\n        if k not in d2_values:\n            diff[k] = v\n        elif d2_values[k]!= v:\n            diff[k] = d2_values[k]\n            if level < 0:\n                diff[k] = diff[k].copy()\n                level = max(level, 1)\n            else:\n                diff[k].update(d2_values[k])\n    return diff\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    elif level == 0:\n        return d1\n    else:\n        d1_copy = d1.copy()\n        result = d1_copy.copy()\n        keys_to_delete = [k for k in d1 if d1[k]!= d2[k]]\n        for k in keys_to_delete:\n            d1_copy.pop(k)\n            result.pop(k)\n        return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    # pylint: disable=arguments-differ\n    if coord not in self:\n        raise KeyError(coord)\n    if coord in self:\n        self[coord] += weight\n    else:\n        self[coord] = weight\n", "def fill(self, coord, weight=1):\n    self[coord] = weight\n", "def fill(self, coord, weight=1):\n    # TODO: use bins to improve efficiency\n    for i in range(self.bins):\n        self.hist[coord[i]] += weight\n", "def fill(self, coord, weight=1):\n    if self.edges is None:\n        raise ValueError(\"fill() should only be called on empty Histogram\")\n    if coord in self.edges:\n        raise ValueError(\"fill() cannot be applied on edges\")\n    if coord not in self.bins:\n        raise ValueError(\"fill() cannot be applied on non-existent coordinate\")\n    self._hist.fill(coord, weight)\n", "def fill(self, coord, weight=1):\n    if coord >= self.bins or coord < 0:\n        raise IndexError(\"coord %d outside range [0, %d]\" % (coord, self.bins))\n    if weight > 0:\n        self.weights[coord] = weight\n    if weight < 0:\n        self.weights[coord - self.bins] = -weight\n", "def fill(self, coord, weight=1):\n    # fill histogram\n    if self.edges is not None:\n        min_, max_ = self.edges[0], self.edges[-1]\n    else:\n        min_, max_ = 0, self.bins\n    if weight == 0:\n        return\n    # recurse for histogram of bins\n    for i in range(max_ - min_ + 1):\n        # get bin midpoint\n        mid = (min_ + max_) / 2\n        # calculate weight for each bin\n        if i < self.bins:\n            weight *= self.weights[i]\n        # calculate the midpoint between the bin midpoints\n        else:\n            mid = mid + (min_ + mid) / 2\n        # fill histogram with the bin midpoint\n        coord[mid] += weight\n", "def fill(self, coord, weight=1):\n    for b in self.bins:\n        if b[0] <= coord[0] and coord[0] <= b[1] and b[1] >= coord[1] and b[1] >= b[2]:\n            b[2] += weight\n", "def fill(self, coord, weight=1):\n    self.bins[coord] += weight\n", "def fill(self, coord, weight=1):\n    for bin in self.bins:\n        if bin.coord == coord:\n            bin.fill(coord, weight)\n", "def fill(self, coord, weight=1):\n    if self.bins > 1:\n        coord[0] = coord[0] - self.edges[coord[0]]\n        coord[-1] = coord[-1] - self.edges[coord[-1]]\n        for i in range(1, self.bins):\n            coord[i] = coord[i] + weight * self.bins[i]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    # pylint: disable=arguments-differ\n    if coord not in self:\n        raise KeyError(coord)\n    if coord in self:\n        self[coord] += weight\n    else:\n        self[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO: use bins to improve efficiency\n    for i in range(self.bins):\n        self.hist[coord[i]] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges is None:\n        raise ValueError(\"fill() should only be called on empty Histogram\")\n    if coord in self.edges:\n        raise ValueError(\"fill() cannot be applied on edges\")\n    if coord not in self.bins:\n        raise ValueError(\"fill() cannot be applied on non-existent coordinate\")\n    self._hist.fill(coord, weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if coord >= self.bins or coord < 0:\n        raise IndexError(\"coord %d outside range [0, %d]\" % (coord, self.bins))\n    if weight > 0:\n        self.weights[coord] = weight\n    if weight < 0:\n        self.weights[coord - self.bins] = -weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # fill histogram\n    if self.edges is not None:\n        min_, max_ = self.edges[0], self.edges[-1]\n    else:\n        min_, max_ = 0, self.bins\n    if weight == 0:\n        return\n    # recurse for histogram of bins\n    for i in range(max_ - min_ + 1):\n        # get bin midpoint\n        mid = (min_ + max_) / 2\n        # calculate weight for each bin\n        if i < self.bins:\n            weight *= self.weights[i]\n        # calculate the midpoint between the bin midpoints\n        else:\n            mid = mid + (min_ + mid) / 2\n        # fill histogram with the bin midpoint\n        coord[mid] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for b in self.bins:\n        if b[0] <= coord[0] and coord[0] <= b[1] and b[1] >= coord[1] and b[1] >= b[2]:\n            b[2] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.bins[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for bin in self.bins:\n        if bin.coord == coord:\n            bin.fill(coord, weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.bins > 1:\n        coord[0] = coord[0] - self.edges[coord[0]]\n        coord[-1] = coord[-1] - self.edges[coord[-1]]\n        for i in range(1, self.bins):\n            coord[i] = coord[i] + weight * self.bins[i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    for key, regex in labels.items():\n        if not isinstance(key, six.string_types):\n            raise ValidationError(\n                \"Label key '{}' should be a string.\".format(key)\n            )\n        if not isinstance(regex, dict):\n            raise ValidationError(\n                \"Label regex key '{}' should be a dict.\".format(key)\n            )\n        for error in regex.values():\n            if not isinstance(error, six.string_types):\n                raise ValidationError(\n                    \"Label regex error '{}' for key '{}' is not a string.\".format(\n                        error, key\n                    )\n                )\n", "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp['regexp'], key):\n                raise ValidationError(\n                    \"Label key '{}' does not match regexp '{}'\".format(key, regexp['regexp'])\n                )\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key not in RESERVED_LABELS:\n            if not re.match(REGEX_LIST[key], value):\n                raise ValidationError(\n                    \"{} label key {} does not match the regex {}\"\n                   .format(key, value, REGEX_LIST[key])\n                )\n", "def _validate_labels(labels):\n    errors = []\n\n    for key, regexp in labels.items():\n        errors.append(\n            ValidationError(\n                \"Label key '{}' does not match regex '{}'\".format(key, regexp)\n            )\n        )\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            for regex, message in values.items():\n                _validate_labels({key: regex})\n        else:\n            for match in re.finditer(regex, values):\n                error = \"Label key '{}' does not match regex '{}'\".format(\n                    key,\n                    regex,\n                )\n                if match.start(0)!= match.end(0):\n                    raise ValidationError(error)\n            if any(match.groups()):\n                error = \"Label value '{}' does not match regex '{}'\".format(\n                    values,\n                    regex,\n                )\n           ", "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        err = None\n        try:\n            match_regex = re.compile(value)\n        except re.error as exc:\n            err = exc\n        else:\n            if not match_regex.match(key):\n                err = ValidationError(\n                    \"Label key '{}' does not match the regex '{}'\".format(key, match_regex.pattern)\n                )\n        if err:\n            errors.append(err.messages)\n    if errors:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    errors = []\n    for key, regex_list in labels.items():\n        error = None\n        for regex in regex_list:\n            try:\n                error = validate_key(key)\n                if error is not None:\n                    raise error\n            except ValidationError as err:\n                errors.append(err.messages)\n        if errors:\n            raise ValidationError(\n                {\n                    \"errors\": errors,\n                    \"key\": key,\n                    \"regex\": regex,\n                }\n            )\n", "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp[\"regexp\"], key):\n                raise ValidationError(\n                    \"Invalid label key: '{}'. Valid keys are: {}.\".format(\n                        key, \", \".join(regexp[\"errors\"])\n                    )\n                )\n", "def _validate_labels(labels):\n    for key, regex in labels.items():\n        if key not in labels:\n            raise ValidationError(\n                \"Label key '{}' does not match the regex '{}'.\".format(\n                    key, regex\n                )\n            )\n\n        if not re.match(regex[\"regex\"], labels[key]):\n            raise ValidationError(\n                \"Label key '{}' does not match the regex '{}'.\".format(\n                    key, regex[\"regex\"]\n                )\n            )\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, six.string_types):\n            key_re = r\"[^a-zA-Z0-9_]\" + key + r\"$\"\n        else:\n            key_re = r\"[^a-zA-Z0-9_]\" + \"_\" + key[0] + r\"$\"\n        for value in values:\n            if not re.match(key_re, value):\n                raise ValidationError(\n                    \"{} key '{}' does not match regex '{}'\".format(\n                        key, value, key_re))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    for key, regex in labels.items():\n        if not isinstance(key, six.string_types):\n            raise ValidationError(\n                \"Label key '{}' should be a string.\".format(key)\n            )\n        if not isinstance(regex, dict):\n            raise ValidationError(\n                \"Label regex key '{}' should be a dict.\".format(key)\n            )\n        for error in regex.values():\n            if not isinstance(error, six.string_types):\n                raise ValidationError(\n                    \"Label regex error '{}' for key '{}' is not a string.\".format(\n                        error, key\n                    )\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp['regexp'], key):\n                raise ValidationError(\n                    \"Label key '{}' does not match regexp '{}'\".format(key, regexp['regexp'])\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key not in RESERVED_LABELS:\n            if not re.match(REGEX_LIST[key], value):\n                raise ValidationError(\n                    \"{} label key {} does not match the regex {}\"\n                   .format(key, value, REGEX_LIST[key])\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n\n    for key, regexp in labels.items():\n        errors.append(\n            ValidationError(\n                \"Label key '{}' does not match regex '{}'\".format(key, regexp)\n            )\n        )\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            for regex, message in values.items():\n                _validate_labels({key: regex})\n        else:\n            for match in re.finditer(regex, values):\n                error = \"Label key '{}' does not match regex '{}'\".format(\n                    key,\n                    regex,\n                )\n                if match.start(0)!= match.end(0):\n                    raise ValidationError(error)\n            if any(match.groups()):\n                error = \"Label value '{}' does not match regex '{}'\".format(\n                    values,\n                    regex,\n                )\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        err = None\n        try:\n            match_regex = re.compile(value)\n        except re.error as exc:\n            err = exc\n        else:\n            if not match_regex.match(key):\n                err = ValidationError(\n                    \"Label key '{}' does not match the regex '{}'\".format(key, match_regex.pattern)\n                )\n        if err:\n            errors.append(err.messages)\n    if errors:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, regex_list in labels.items():\n        error = None\n        for regex in regex_list:\n            try:\n                error = validate_key(key)\n                if error is not None:\n                    raise error\n            except ValidationError as err:\n                errors.append(err.messages)\n        if errors:\n            raise ValidationError(\n                {\n                    \"errors\": errors,\n                    \"key\": key,\n                    \"regex\": regex,\n                }\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp[\"regexp\"], key):\n                raise ValidationError(\n                    \"Invalid label key: '{}'. Valid keys are: {}.\".format(\n                        key, \", \".join(regexp[\"errors\"])\n                    )\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, regex in labels.items():\n        if key not in labels:\n            raise ValidationError(\n                \"Label key '{}' does not match the regex '{}'.\".format(\n                    key, regex\n                )\n            )\n\n        if not re.match(regex[\"regex\"], labels[key]):\n            raise ValidationError(\n                \"Label key '{}' does not match the regex '{}'.\".format(\n                    key, regex[\"regex\"]\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, six.string_types):\n            key_re = r\"[^a-zA-Z0-9_]\" + key + r\"$\"\n        else:\n            key_re = r\"[^a-zA-Z0-9_]\" + \"_\" + key[0] + r\"$\"\n        for value in values:\n            if not re.match(key_re, value):\n                raise ValidationError(\n                    \"{} key '{}' does not match regex '{}'\".format(\n                        key, value, key_re))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    global _name_regex\n    if not _name_regex:\n        _name_regex = re.compile(r'^(?P<name>.+?)\\.(?P<version>[0-9]+([.][0-9]+)?)$')\n    return _name_regex\n", "def _get_resource_name_regex():\n    global name_regex\n    if name_regex is None:\n        name_regex = re.compile(r\"^(?P<name>.+?)$\")\n    return name_regex\n", "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r'^(?P<name>.+?)-(?P<version>.+?)$')\n    return KrakeRegex\n", "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r'^(?P<name>.+?)\\.(?P<type>(sql|mysql)|mysql|pgsql|mysqldb)$')\n    return KrakeRegex\n", "def _get_resource_name_regex():\n    global KrakeResourceManager\n    if KrakeResourceManager is None:\n        KrakeResourceManager = KrakeResourceManagerFactory.get_instance()\n    return KrakeResourceManager.get_name_regex()\n", "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r\"^[a-z0-9_.]{1,}$\")\n    return KrakeRegex\n", "def _get_resource_name_regex():\n    global _KRAKE_NAME_REGEX\n    if _KRAKE_NAME_REGEX is None:\n        _KRAKE_NAME_REGEX = re.compile(r\"^(?:(?:{}|{})\\.)?([a-zA-Z0-9]{1,})$\".format(\n            r\"\\.[a-zA-Z0-9]{1,}\",\n            r\"\\.[a-zA-Z0-9]{1,}\"))\n    return _KRAKE_NAME_REGEX\n", "def _get_resource_name_regex():\n    return getattr(\n        settings,\n        'KAKE_RESOURCE_NAME_REGEX',\n        re.compile(r'^[a-zA-Z0-9_\\-]{1,}$')\n    )\n", "def _get_resource_name_regex():\n    return get_regex(KrakeConstants.NAME_REGEX)\n", "def _get_resource_name_regex():\n    global KrakeNameResourceNameRegex\n    if KrakeNameResourceNameRegex is None:\n        KrakeNameResourceNameRegex = re.compile(r'^(?P<name>.+?)\\.(?P<version>.+?)$')\n    return KrakeNameResourceNameRegex\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    global _name_regex\n    if not _name_regex:\n        _name_regex = re.compile(r'^(?P<name>.+?)\\.(?P<version>[0-9]+([.][0-9]+)?)$')\n    return _name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global name_regex\n    if name_regex is None:\n        name_regex = re.compile(r\"^(?P<name>.+?)$\")\n    return name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r'^(?P<name>.+?)-(?P<version>.+?)$')\n    return KrakeRegex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r'^(?P<name>.+?)\\.(?P<type>(sql|mysql)|mysql|pgsql|mysqldb)$')\n    return KrakeRegex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global KrakeResourceManager\n    if KrakeResourceManager is None:\n        KrakeResourceManager = KrakeResourceManagerFactory.get_instance()\n    return KrakeResourceManager.get_name_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global KrakeRegex\n    if KrakeRegex is None:\n        KrakeRegex = re.compile(r\"^[a-z0-9_.]{1,}$\")\n    return KrakeRegex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global _KRAKE_NAME_REGEX\n    if _KRAKE_NAME_REGEX is None:\n        _KRAKE_NAME_REGEX = re.compile(r\"^(?:(?:{}|{})\\.)?([a-zA-Z0-9]{1,})$\".format(\n            r\"\\.[a-zA-Z0-9]{1,}\",\n            r\"\\.[a-zA-Z0-9]{1,}\"))\n    return _KRAKE_NAME_REGEX\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return getattr(\n        settings,\n        'KAKE_RESOURCE_NAME_REGEX',\n        re.compile(r'^[a-zA-Z0-9_\\-]{1,}$')\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_regex(KrakeConstants.NAME_REGEX)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global KrakeNameResourceNameRegex\n    if KrakeNameResourceNameRegex is None:\n        KrakeNameResourceNameRegex = re.compile(r'^(?P<name>.+?)\\.(?P<version>.+?)$')\n    return KrakeNameResourceNameRegex\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    try:\n        re.compile(_get_labels_regex())\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    labels_regex = _get_labels_regex()\n\n    try:\n        re.compile(labels_regex)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    try:\n        re.compile(_get_labels_regex())\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    if value is None:\n        return\n\n    if not isinstance(value, str):\n        raise ValidationError('Value must be a string')\n\n    match = _get_labels_regex()\n    match_obj = match.match(value)\n\n    if not match_obj:\n        raise ValidationError('Value does not match regular expression')\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    if not value:\n        raise ValidationError(\"Must not be empty.\")\n\n    value = value.strip()\n\n    match = _get_labels_regex().match(value)\n\n    if not match:\n        raise ValidationError(\"Invalid labels pattern.\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(_get_labels_regex())\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    labels_regex = _get_labels_regex()\n\n    try:\n        re.compile(labels_regex)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(_get_labels_regex())\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if value is None:\n        return\n\n    if not isinstance(value, str):\n        raise ValidationError('Value must be a string')\n\n    match = _get_labels_regex()\n    match_obj = match.match(value)\n\n    if not match_obj:\n        raise ValidationError('Value does not match regular expression')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not value:\n        raise ValidationError(\"Must not be empty.\")\n\n    value = value.strip()\n\n    match = _get_labels_regex().match(value)\n\n    if not match:\n        raise ValidationError(\"Invalid labels pattern.\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError('Invalid key', key=key)\n", "def validate_key(key):\n    labels_regex = _get_labels_regex()\n    if not labels_regex.match(key):\n        raise ValidationError(\n            \"Invalid key '{}'. Must match the regex: '{}'\".format(\n                key, labels_regex.pattern\n            )\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError('Invalid key', key=key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    labels_regex = _get_labels_regex()\n    if not labels_regex.match(key):\n        raise ValidationError(\n            \"Invalid key '{}'. Must match the regex: '{}'\".format(\n                key, labels_regex.pattern\n            )\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'metadata': manifest_dict}\n\n    return {'metadata': {k: v for k, v in manifest_dict.items()\n                         if not isinstance(v, dict)}}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values\n    by ``None``. In case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a resource),\n    the values of the identifying fields are copied from the manifest file. with file generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    \"\"\"\n    if manifest_dict.get('metadata', {}).get('name')!= 'observer':\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict.get('manifest', {}), first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {manifest_dict.get('metadata', {}).get('namespace', 'default'): manifest_dict}\n    else:\n        return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    else:\n        return {'$ref': '#/definitions/ObserverSchema','manifest': manifest_dict}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if isinstance(manifest_dict, dict):\n        if first_level:\n            return manifest_dict\n        else:\n            return {\n                k: generate_default_observer_schema_dict(v, first_level=False)\n                for k, v in manifest_dict.items()\n            }\n    elif first_level:\n        return {\n            k: v if isinstance(v, list) else None\n            for k, v in manifest_dict.items()\n        }\n    else:\n        return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_dict = {**manifest_dict, **{\"type\": \"observer\"}}\n        return generate_default_observer_schema_list(manifest_dict, True)\n\n    manifest_dict['type'] = \"observer\"\n    return generate_default_observer_schema_list(manifest_dict, False)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector'),\n                'labels': manifest_dict.get('labels'),\n                'annotations': manifest_dict.get('annotations'),\n                'timeout': manifest_dict.get('timeout')\n            }\n        }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n            },\n           'spec': {\n                'name': manifest_dict['spec']['name'],\n                'namespace': manifest_dict['spec']['namespace'],\n            },\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n                'labels': manifest_dict['metadata']['labels'],\n                'annotations': manifest_dict['metadata']['annotations'],\n            },\n           'spec'", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for k, v in schema.items():\n        if isinstance(v, dict):\n            schema[k] = generate_default_observer_schema_dict(v, True)\n\n    return schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict((k, None) for k in manifest_dict.keys())\n    else:\n        return dict((k, v) for k, v in manifest_dict.items() if k not in {'id', 'type', 'name','version'})\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'metadata': manifest_dict}\n\n    return {'metadata': {k: v for k, v in manifest_dict.items()\n                         if not isinstance(v, dict)}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values\n    by ``None``. In case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a resource),\n    the values of the identifying fields are copied from the manifest file. with file generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    \"\"\"\n    if manifest_dict.get('metadata', {}).get('name')!= 'observer':\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict.get('manifest', {}), first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {manifest_dict.get('metadata', {}).get('namespace', 'default'): manifest_dict}\n    else:\n        return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    else:\n        return {'$ref': '#/definitions/ObserverSchema','manifest': manifest_dict}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if isinstance(manifest_dict, dict):\n        if first_level:\n            return manifest_dict\n        else:\n            return {\n                k: generate_default_observer_schema_dict(v, first_level=False)\n                for k, v in manifest_dict.items()\n            }\n    elif first_level:\n        return {\n            k: v if isinstance(v, list) else None\n            for k, v in manifest_dict.items()\n        }\n    else:\n        return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_dict = {**manifest_dict, **{\"type\": \"observer\"}}\n        return generate_default_observer_schema_list(manifest_dict, True)\n\n    manifest_dict['type'] = \"observer\"\n    return generate_default_observer_schema_list(manifest_dict, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector'),\n                'labels': manifest_dict.get('labels'),\n                'annotations': manifest_dict.get('annotations'),\n                'timeout': manifest_dict.get('timeout')\n            }\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n            },\n           'spec': {\n                'name': manifest_dict['spec']['name'],\n                'namespace': manifest_dict['spec']['namespace'],\n            },\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n                'labels': manifest_dict['metadata']['labels'],\n                'annotations': manifest_dict['metadata']['annotations'],\n            },\n           'spec'", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for k, v in schema.items():\n        if isinstance(v, dict):\n            schema[k] = generate_default_observer_schema_dict(v, True)\n\n    return schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict((k, None) for k in manifest_dict.keys())\n    else:\n        return dict((k, v) for k, v in manifest_dict.items() if k not in {'id', 'type', 'name','version'})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for item in response:\n        if isinstance(item, dict):\n            if item.get(\"metadata\", {}).get(\"name\") == \"last-applied-manifest\":\n                last_applied_manifest.append(\n                    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, item)\n                )\n            else:\n                last_applied_manifest.append(item)\n        elif isinstance(item,", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n            if they are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for item in response:\n        if'spec' in item:\n            item['spec'] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema, item['spec']\n    ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for obs_schema in observer_schema:\n        if obs_schema not in last_applied_manifest:\n            last_applied_manifest.append(obs_schema)\n    for obs_resp in response:\n        if obs_resp not in last_applied_manifest:\n            last_applied_ma", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial \n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their\n        value in last_applied_manifest if they are not yet present with\n        file update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    \"\"\"\n    for manifest_field in observer_schema:\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest.append(manifest_field)\n            continue\n\n        manifest_field_value = response[manifest_field]\n        if manifest_field_value!= last_applied_manifest[manifest_fiel", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if their value is not yet present with file update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,observer_schema,response\n            )\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for manifest_item in response:\n        if manifest_item[\"metadata\"][\"name\"] in last_applied_manifest:\n            manifest_item[\"data\"][\"last_applied_mani", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function\n            goes through all observed fields, and initialized their value\n            in last_applied_manifest if they are not yet present with file\n            update_last_applied_manifest_list_from_resp(last_applied_manifest,\n            observer_schema, response)\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n            observer_schema, response)\n\n    \"\"\"\n    for obs_schema in observer_schema:\n        if obs_schema.key not in last_applied_manifest:\n            last_applied_manifest.append(obs", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n\n    \"\"\"\n    for k, v in observer_schema.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(v, dict) and isinstance(last_applied_manifest[k], dict):\n            last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[k], v, response[:-1]\n            )\n        elif v!= last_applied_manifest[k]:\n    ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial \n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function\n            goes through all observed fields, and initialized their value in\n            last_applied_manifest if they are not yet present with file update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n\n    \"\"\"\n    for item in response:\n        if'spec' in item:\n            item['spec'] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifes", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    \"\"\"\n    for manifest_field in observer_schema:\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest.append(manifest_field)\n            continue\n\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their\n        value in last_applied_manifest if they are not yet present with file\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n    \"\"\"\n    for item in response:\n        if 'last_applied_manifest' in item:\n            item['last_applied_manifest'] = update_last_applied_manifest_dict_from_resp(\n              "], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for item in response:\n        if isinstance(item, dict):\n            if item.get(\"metadata\", {}).get(\"name\") == \"last-applied-manifest\":\n                last_applied_manifest.append(\n                    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, item)\n                )\n            else:\n                last_applied_manifest.append(item)\n        elif isinstance(item,", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n            if they are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for item in response:\n        if'spec' in item:\n            item['spec'] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema, item['spec']\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for obs_schema in observer_schema:\n        if obs_schema not in last_applied_manifest:\n            last_applied_manifest.append(obs_schema)\n    for obs_resp in response:\n        if obs_resp not in last_applied_manifest:\n            last_applied_ma", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial \n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their\n        value in last_applied_manifest if they are not yet present with\n        file update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    \"\"\"\n    for manifest_field in observer_schema:\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest.append(manifest_field)\n            continue\n\n        manifest_field_value = response[manifest_field]\n        if manifest_field_value!= last_applied_manifest[manifest_fiel", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if their value is not yet present with file update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,observer_schema,response\n            )\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n    \"\"\"\n    for manifest_item in response:\n        if manifest_item[\"metadata\"][\"name\"] in last_applied_manifest:\n            manifest_item[\"data\"][\"last_applied_mani", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function\n            goes through all observed fields, and initialized their value\n            in last_applied_manifest if they are not yet present with file\n            update_last_applied_manifest_list_from_resp(last_applied_manifest,\n            observer_schema, response)\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n            observer_schema, response)\n\n    \"\"\"\n    for obs_schema in observer_schema:\n        if obs_schema.key not in last_applied_manifest:\n            last_applied_manifest.append(obs", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n\n    \"\"\"\n    for k, v in observer_schema.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(v, dict) and isinstance(last_applied_manifest[k], dict):\n            last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[k], v, response[:-1]\n            )\n        elif v!= last_applied_manifest[k]:\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial \n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function\n            goes through all observed fields, and initialized their value in\n            last_applied_manifest if they are not yet present with file update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n\n    \"\"\"\n    for item in response:\n        if'spec' in item:\n            item['spec'] = update_last_applied_manifest_dict_from_resp(\n                last_applied_manifes", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with file update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    \"\"\"\n    for manifest_field in observer_schema:\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest.append(manifest_field)\n            continue\n\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their\n        value in last_applied_manifest if they are not yet present with file\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n        observer_schema, response)\n    \"\"\"\n    for item in response:\n        if 'last_applied_manifest' in item:\n            item['last_applied_manifest'] = update_last_applied_manifest_dict_from_resp(\n              ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    ReYou can update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if type(response[key])!= type(observer_schema[key]):\n            raise KeyError(\n                '{} must be of type {}, got {}'.format(\n                    key, type(observer_schema[key]), type(response[key])\n                )\n            )\n        last_applie", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in response:\n            if isinstance(response[field], dict):\n                if last_applied_manifest.get(field) is None:\n                    last_applied_manifest[field] = response[field]\n                else:\n                    last_applied_manifest[field].update(response[field])\n            else:\n                last_applied_manifest[field] =", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key in response:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[\"attributes\"][key]\n        elif isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, response[key]\n            )\n        else:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest_field, sub_manifest_field in iter(\n        response.items()\n    ):\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest[manifest_field] = {}\n\n        if sub_manifest_field is not None:\n            if manifest_field in observer_schema:\n                observer_schema[manifest_field] = sub_manifest_field\n            else:\n                last_applied_manifest[manifest_field].update(\n                    manifest_field, sub_manifest_field\n                )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema['fields']:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in response:\n            continue\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            raise KeyError(\n                'Missing key {} in response from Kubernetes API'.format(key)\n            )\n        if isinstance(value, dict):\n            if not isinstance(last_applied_manifest[key], dict):\n                raise TypeError(\n                    'Mismatched type {} in response from Kubernetes API'.format(type(last_applied_manifest[key]))\n                )\n            last_applied_manifest[key].update(value)\n        elif isinstance(value, list):\n            if not isinstance(last_applied_manifest[key], list):\n                raise TypeError(\n                    'Mismatched type {} in response from Kubernetes API'.format(type(last_applied_manifest[key]))\n             "], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    ReYou can update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if type(response[key])!= type(observer_schema[key]):\n            raise KeyError(\n                '{} must be of type {}, got {}'.format(\n                    key, type(observer_schema[key]), type(response[key])\n                )\n            )\n        last_applie", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in response:\n            if isinstance(response[field], dict):\n                if last_applied_manifest.get(field) is None:\n                    last_applied_manifest[field] = response[field]\n                else:\n                    last_applied_manifest[field].update(response[field])\n            else:\n                last_applied_manifest[field] =", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key in response:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[\"attributes\"][key]\n        elif isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, response[key]\n            )\n        else:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest_field, sub_manifest_field in iter(\n        response.items()\n    ):\n        if manifest_field not in last_applied_manifest:\n            last_applied_manifest[manifest_field] = {}\n\n        if sub_manifest_field is not None:\n            if manifest_field in observer_schema:\n                observer_schema[manifest_field] = sub_manifest_field\n            else:\n                last_applied_manifest[manifest_field].update(\n                    manifest_field, sub_manifest_field\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema['fields']:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in response:\n            continue\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        else:\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            raise KeyError(\n                'Missing key {} in response from Kubernetes API'.format(key)\n            )\n        if isinstance(value, dict):\n            if not isinstance(last_applied_manifest[key], dict):\n                raise TypeError(\n                    'Mismatched type {} in response from Kubernetes API'.format(type(last_applied_manifest[key]))\n                )\n            last_applied_manifest[key].update(value)\n        elif isinstance(value, list):\n            if not isinstance(last_applied_manifest[key], list):\n                raise TypeError(\n                    'Mismatched type {} in response from Kubernetes API'.format(type(last_applied_manifest[key]))\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    manifest_dict = app.config.get(\"Kubernetes\", {}).copy()\n    if \"observer_schema\" not in manifest_dict:\n        return manifest_dict\n    else:\n        return manifest_dict.get(\"observer_schema\")\n", "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        generate_default_observer_schema_dict(app.config.get('KubernetesResourceObserver'))\n", "def generate_default_observer_schema(app):\n    manifest_dict = app.api.read_manifest()\n    if 'observerSchema' not in manifest_dict:\n        return\n    import_path = manifest_dict['observerSchema']['importPath']\n    import_spec = app.api.read_import_spec(import_path)\n    return generate_default_observer_schema_dict(import_spec.contexts, True)\n", "def generate_default_observer_schema(app):\n    spec = app.spec\n    if spec.observer_schema is not None:\n        copy_file(\n            os.path.join(app.config.get('Kubernetes').get('paths').get('kubernetes_home'), '.kubernetes',\n                         spec.observer_schema),\n            os.path.join(app.config.get('Kubernetes').get('paths').get('kubernetes_home'), '.kubernetes',\n                         spec.observer_schema)\n        )\n", "def generate_default_observer_schema(app):\n    manifest_dict = app.client.get(\"/api/v1/namespaces/default\").json()\n    if not manifest_dict:\n        return\n\n    generate_default_observer_schema_dict(manifest_dict, False)\n    app.client.put(\n        \"/api/v1/namespaces/default\",\n        json=manifest_dict,\n        headers={\"Content-Type\": \"application/json\"},\n    )\n", "def generate_default_observer_schema(app):\n    if app.config.observer_schema is None:\n        generated_schema = copy.deepcopy(app.manifest)\n        for resource in generated_schema.get('resources', []):\n            if resource.get('type') == 'custom':\n                resource['observer_schema'] = generate_default_observer_schema_dict(\n                    generated_schema,\n                    resource.get('name')\n                )\n        app.manifest['observer_schema'] = generated_schema\n    return app.config.observer_schema\n", "def generate_default_observer_schema(app):\n    if not app.config.get('Kubernetes', {}).get('observer_schema'):\n        return\n\n    with app.app_context():\n        manifest_dict = app.config['Kubernetes'].get('observer_schema')\n        import_string = manifest_dict.get('import_string', 'from_path')\n        import_path = import_string.split('.')\n        observer_schema = generate_default_observer_schema_dict(\n            app, import_path[:-1])\n        manifest_dict['import_string'] = '.'.join(import_path[:-1])\n        manifest_dict['schema'] = observer_schema\n", "def generate_default_observer_schema(app):\n    manifest_dict = app.spec.manifest\n    if 'observer_schema' not in manifest_dict:\n        raise KrakeConfigError('A custom observer schema must be specified in the spec.manifest for the Kubernetes resource \"{}\"'.format(app.name))\n    return generate_default_observer_schema_dict(manifest_dict, True)\n", "def generate_default_observer_schema(app):\n    from.manifest import KubernetesResourceSpec\n\n    if KubernetesResourceSpec.__name__ in app.config.get(\n        \"KubernetesResources\", {}\n    ).keys():\n        # Prefer the default KubernetesResourceSpec in the \"default\" KubernetesResources section\n        return app.config[\"KubernetesResources\"][KubernetesResourceSpec.__name__]\n\n    return KubernetesResourceSpec.from_dict(app.config)\n", "def generate_default_observer_schema(app):\n    manifest = app.spec.manifest\n    if manifest.get(\"observer\", None) is not None:\n        import_path = manifest.get(\"observer\", \"import-path\")\n        observer_schema_dict = generate_default_observer_schema_dict(\n            app.client.api.deployments,\n            first_level=True\n        )\n        observer_schema_dict.update(manifest.get(\"observer\", {}))\n        return {import_path: observer_schema_dict}\n    else:\n        return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.config.get(\"Kubernetes\", {}).copy()\n    if \"observer_schema\" not in manifest_dict:\n        return manifest_dict\n    else:\n        return manifest_dict.get(\"observer_schema\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        generate_default_observer_schema_dict(app.config.get('KubernetesResourceObserver'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.api.read_manifest()\n    if 'observerSchema' not in manifest_dict:\n        return\n    import_path = manifest_dict['observerSchema']['importPath']\n    import_spec = app.api.read_import_spec(import_path)\n    return generate_default_observer_schema_dict(import_spec.contexts, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec = app.spec\n    if spec.observer_schema is not None:\n        copy_file(\n            os.path.join(app.config.get('Kubernetes').get('paths').get('kubernetes_home'), '.kubernetes',\n                         spec.observer_schema),\n            os.path.join(app.config.get('Kubernetes').get('paths').get('kubernetes_home'), '.kubernetes',\n                         spec.observer_schema)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.client.get(\"/api/v1/namespaces/default\").json()\n    if not manifest_dict:\n        return\n\n    generate_default_observer_schema_dict(manifest_dict, False)\n    app.client.put(\n        \"/api/v1/namespaces/default\",\n        json=manifest_dict,\n        headers={\"Content-Type\": \"application/json\"},\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.observer_schema is None:\n        generated_schema = copy.deepcopy(app.manifest)\n        for resource in generated_schema.get('resources', []):\n            if resource.get('type') == 'custom':\n                resource['observer_schema'] = generate_default_observer_schema_dict(\n                    generated_schema,\n                    resource.get('name')\n                )\n        app.manifest['observer_schema'] = generated_schema\n    return app.config.observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if not app.config.get('Kubernetes', {}).get('observer_schema'):\n        return\n\n    with app.app_context():\n        manifest_dict = app.config['Kubernetes'].get('observer_schema')\n        import_string = manifest_dict.get('import_string', 'from_path')\n        import_path = import_string.split('.')\n        observer_schema = generate_default_observer_schema_dict(\n            app, import_path[:-1])\n        manifest_dict['import_string'] = '.'.join(import_path[:-1])\n        manifest_dict['schema'] = observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.spec.manifest\n    if 'observer_schema' not in manifest_dict:\n        raise KrakeConfigError('A custom observer schema must be specified in the spec.manifest for the Kubernetes resource \"{}\"'.format(app.name))\n    return generate_default_observer_schema_dict(manifest_dict, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    from.manifest import KubernetesResourceSpec\n\n    if KubernetesResourceSpec.__name__ in app.config.get(\n        \"KubernetesResources\", {}\n    ).keys():\n        # Prefer the default KubernetesResourceSpec in the \"default\" KubernetesResources section\n        return app.config[\"KubernetesResources\"][KubernetesResourceSpec.__name__]\n\n    return KubernetesResourceSpec.from_dict(app.config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = app.spec.manifest\n    if manifest.get(\"observer\", None) is not None:\n        import_path = manifest.get(\"observer\", \"import-path\")\n        observer_schema_dict = generate_default_observer_schema_dict(\n            app.client.api.deployments,\n            first_level=True\n        )\n        observer_schema_dict.update(manifest.get(\"observer\", {}))\n        return {import_path: observer_schema_dict}\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\nout_style = self._converter.get_out_style(params)\n\nif out_style is None:\nraise ValueError('Invalid parameter style {!r}'.format(params))\n\nif isinstance(params, bytes):\nout_params = {params}\nelse:\nout_params = params\n\nreturn (\nout_style.format(sql, *out_params),\nout_params\n)\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style == \"ordinal\":\nif not isinstance(params, Mapping):\nraise AssertionError(\"Params must be a mapping\")\n\nout_params = {}\n\nfor k, v in params.items():\nout_params[k] = self._converter.convert(v)\n\nelse:\nout_params = self._converter.convert(params)\n\nreturn sql, out_params\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, int]]:\nif self._converter is not None:\nreturn self._converter.format(sql, params)\nelse:\nreturn sql, params\n", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping = None\n) -> Tuple[bytes, Mapping[int, bytes]]:\nif params is None:\nparams = {}\n\nif self._in_style == 'ordinal':\nif isinstance(sql, bytes):\nparams = {str(i): sql[i] for i in range(len(sql))}\nelse:\nparams = {str(i): sql[i] for i in range(len(sql))}\n\nif self._converter is None:\nreturn sql, params\n\nreturn self._converter.format(sql, params, self._converter.params)\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\nif params is None:\nparams = {}\n\nif self.in_style == 'ordinal':\nif isinstance(sql, bytes):\nparams = {str(i): i for i in range(1, 27)}\nelse:\nparams = {str(i): i for i in range(1, 27)}\n\nif self._converter is None:\nreturn sql, params\n\nreturn self._converter.format(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n# Convert the SQL query to SQL parameters.\nparams = self._converter.convert(params)\n\n# Convert the SQL query to SQL parameters without the SQL style parameters.\nparams = self._converter.convert_to_out_style(params)\n\n# Return the formatted SQL query without the SQL style parameters.\nreturn sql.format(**params), params\n", "def format(\n\t\tself,\n\t\tsql: bytes,\nparams: Mapping or Sequence[Union[str, int]] = None\n) -> Tuple[bytes, Mapping[Union[str, int]]]:\nif self.in_style == SQLParams.ordinal:\nif params is None:\nraise ValueError('SQLParams.ordinal parameters must be provided if '\n'`in_style` is a named parameter style.')\n\nreturn self._converter.convert_ordinal(sql, params), params\n\nif self.in_style == SQLParams.sql:\nreturn self._converter.convert_sql(sql, params), params\n\nraise ValueError('Unsupported in-style value \"{}\".'.format(self.in_style))\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\n# convert parameters to SQLParams\nif params is None:\nparams = {}\n\n# convert to string\nif isinstance(sql, bytes):\nsql = sql.decode('utf-8')\n\n# convert to mapping\nif isinstance(params, Mapping):\nparams = params.items()\n\n# convert to list\nif isinstance(params, Sequence):\nparams = list(params)\n\nreturn sql, params\n", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, int]]:\nif params is None:\nparams = {}\n\nif isinstance(sql, bytes):\nparams = parse_bytes(sql)\n\nif isinstance(params, dict):\nparams = params.items()\n\nif isinstance(params, Sequence):\nparams = self._converter.convert(params)\n\nreturn sql.format(**params), params\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._converter.format(sql, params)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\nout_style = self._converter.get_out_style(params)\n\nif out_style is None:\nraise ValueError('Invalid parameter style {!r}'.format(params))\n\nif isinstance(params, bytes):\nout_params = {params}\nelse:\nout_params = params\n\nreturn (\nout_style.format(sql, *out_params),\nout_params\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style == \"ordinal\":\nif not isinstance(params, Mapping):\nraise AssertionError(\"Params must be a mapping\")\n\nout_params = {}\n\nfor k, v in params.items():\nout_params[k] = self._converter.convert(v)\n\nelse:\nout_params = self._converter.convert(params)\n\nreturn sql, out_params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, int]]:\nif self._converter is not None:\nreturn self._converter.format(sql, params)\nelse:\nreturn sql, params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping = None\n) -> Tuple[bytes, Mapping[int, bytes]]:\nif params is None:\nparams = {}\n\nif self._in_style == 'ordinal':\nif isinstance(sql, bytes):\nparams = {str(i): sql[i] for i in range(len(sql))}\nelse:\nparams = {str(i): sql[i] for i in range(len(sql))}\n\nif self._converter is None:\nreturn sql, params\n\nreturn self._converter.format(sql, params, self._converter.params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\nif params is None:\nparams = {}\n\nif self.in_style == 'ordinal':\nif isinstance(sql, bytes):\nparams = {str(i): i for i in range(1, 27)}\nelse:\nparams = {str(i): i for i in range(1, 27)}\n\nif self._converter is None:\nreturn sql, params\n\nreturn self._converter.format(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n# Convert the SQL query to SQL parameters.\nparams = self._converter.convert(params)\n\n# Convert the SQL query to SQL parameters without the SQL style parameters.\nparams = self._converter.convert_to_out_style(params)\n\n# Return the formatted SQL query without the SQL style parameters.\nreturn sql.format(**params), params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: bytes,\nparams: Mapping or Sequence[Union[str, int]] = None\n) -> Tuple[bytes, Mapping[Union[str, int]]]:\nif self.in_style == SQLParams.ordinal:\nif params is None:\nraise ValueError('SQLParams.ordinal parameters must be provided if '\n'`in_style` is a named parameter style.')\n\nreturn self._converter.convert_ordinal(sql, params), params\n\nif self.in_style == SQLParams.sql:\nreturn self._converter.convert_sql(sql, params), params\n\nraise ValueError('Unsupported in-style value \"{}\".'.format(self.in_style))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\n# convert parameters to SQLParams\nif params is None:\nparams = {}\n\n# convert to string\nif isinstance(sql, bytes):\nsql = sql.decode('utf-8')\n\n# convert to mapping\nif isinstance(params, Mapping):\nparams = params.items()\n\n# convert to list\nif isinstance(params, Sequence):\nparams = list(params)\n\nreturn sql, params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, int]]:\nif params is None:\nparams = {}\n\nif isinstance(sql, bytes):\nparams = parse_bytes(sql)\n\nif isinstance(params, dict):\nparams = params.items()\n\nif isinstance(params, Sequence):\nparams = self._converter.convert(params)\n\nreturn sql.format(**params), params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._converter.format(sql, params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[Mapping[bytes, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nthen *params* must be a :class:`dict` or :class:`list`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :clas", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[str, list]:\n\nout_style = self.in_style\n\nif out_style == SQLParams.ordinal:\nparams = self._converter.convert_ordinal_params(params)\n\nif not many_params:\nreturn sql, params\n\nparams = self._converter.convert_params(params, many_params)\n\nparam_list = []\nfor param in params:\nparam_list.append(param)\n\nout_style = self.out_style\n\nif out_style == SQLParams.ordinal:\nreturn sql, param_list\n\nreturn sql, param_list\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = None,\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, list]:\nreturn self._converter.formatmany(sql, many_params, params)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str, Mapping[Union[int, str], Union[int, str]]]]\n) -> Tuple[bytes, List]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str` or\n:class:`int`) to value.  If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style` is\nan ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, List[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str` or\n:class:`int`) to value.  If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style` is\nan ordinal parameter style. then *param", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Any]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value. If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` o", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nif self.in_style == 'ordinal':\nreturn sql, [self._converter.convert(p, f) for p, f in zip(params, many_params)]\nelse:\nreturn sql, [self._converter.convert(p, f) for p, f in zip(many_params, params)]\n", "def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes]\n) -> Tuple[bytes, Iterable[Mapping[str, int]]]:\nif self.in_style is None:\nraise ValueError(\"SQLParams.in_style must be configured first\")\n\nif not isinstance(self.in_style, collections.abc.Mapping):\nraise ValueError(\"SQLParams.in_style must be a named parameter style\")\n\nout_style_params = self.in_style.items()\nif not isinstance(many_params, collections.abc.Iterable):\nraise ValueError(\"SQLParams.many_params must be an iterable container\")\n\nout_style_params.sort()\n\nparams = list()\n\nfor param in many_params:\nparams.append(param)\n\nif self._converter:\nparams = self._converter.convert(params)\n\nparams_str = \"(\" + \", \".join([str(p) for p in params]) + \")\"\n\nreturn sql, [params_str]\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains the\n  set of in-style parameters. It maps each parameter (:class:`str` or :class:`int`) to value.\nIf :attr:`.SQLParams.in_style` is a named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle. then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Dict[str, Any]]]:\nout_style = self._converter.get_out_style(self._style)\nreturn out_style.formatmany(sql, many_params, params)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[Mapping[bytes, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nthen *params* must be a :class:`dict` or :class:`list`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :clas", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[str, list]:\n\nout_style = self.in_style\n\nif out_style == SQLParams.ordinal:\nparams = self._converter.convert_ordinal_params(params)\n\nif not many_params:\nreturn sql, params\n\nparams = self._converter.convert_params(params, many_params)\n\nparam_list = []\nfor param in params:\nparam_list.append(param)\n\nout_style = self.out_style\n\nif out_style == SQLParams.ordinal:\nreturn sql, param_list\n\nreturn sql, param_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = None,\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, list]:\nreturn self._converter.formatmany(sql, many_params, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str, Mapping[Union[int, str], Union[int, str]]]]\n) -> Tuple[bytes, List]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str` or\n:class:`int`) to value.  If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style` is\nan ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, List[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str` or\n:class:`int`) to value.  If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style` is\nan ordinal parameter style. then *param", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Any]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value. If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` o", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nif self.in_style == 'ordinal':\nreturn sql, [self._converter.convert(p, f) for p, f in zip(params, many_params)]\nelse:\nreturn sql, [self._converter.convert(p, f) for p, f in zip(many_params, params)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes]\n) -> Tuple[bytes, Iterable[Mapping[str, int]]]:\nif self.in_style is None:\nraise ValueError(\"SQLParams.in_style must be configured first\")\n\nif not isinstance(self.in_style, collections.abc.Mapping):\nraise ValueError(\"SQLParams.in_style must be a named parameter style\")\n\nout_style_params = self.in_style.items()\nif not isinstance(many_params, collections.abc.Iterable):\nraise ValueError(\"SQLParams.many_params must be an iterable container\")\n\nout_style_params.sort()\n\nparams = list()\n\nfor param in many_params:\nparams.append(param)\n\nif self._converter:\nparams = self._converter.convert(params)\n\nparams_str = \"(\" + \", \".join([str(p) for p in params]) + \")\"\n\nreturn sql, [params_str]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains the\n  set of in-style parameters. It maps each parameter (:class:`str` or :class:`int`) to value.\nIf :attr:`.SQLParams.in_style` is a named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle. then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Dict[str, Any]]]:\nout_style = self._converter.get_out_style(self._style)\nreturn out_style.formatmany(sql, many_params, params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    return self.obj_fs.exists(path)\n", "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.warning(\"Unable to stat %s: %s\", path, e)\n        return False\n\n    return True\n", "def validate(self, path):\n    if path is None:\n        return True\n\n    # check if path is a file system path\n    if not os.path.isfile(path):\n        return False\n\n    # check if path is a directory of the inventory\n    if not os.path.isdir(self.content_directory):\n        return False\n\n    # check if path is a pyfs root\n    if not self.obj_fs.is_root(path):\n        return False\n\n    return True\n", "def validate(self, path):\n    self.log.debug(\"Validating %s\", path)\n    return self.obj_fs.isfile(path)\n", "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return self.obj_fs.exists(path)\n", "def validate(self, path):\n    if not self.content_directory:\n        self.log.debug(\"validate() called with no content directory.  Using root object instead\")\n        return True\n    elif path!= self.content_directory:\n        self.log.debug(\"validate() called with invalid path %s (%s). Using root object instead\",\n                       path, self.content_directory)\n        return True\n    else:\n        return self.digest_algorithm.validate(self.content_directory, self.digest_algorithm.content_digest_size)\n", "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.root_inv_validator(path):\n        self.log.info(\"%s is a root object\", path)\n        return True\n\n    if self.digest_algorithm is not None and self.digest_algorithm!= self.digest_inv_validator(path):\n        self.log.warn(\"%s cannot be inferred from %s, digest algorithm mis %s, digest inversion mismatch\", path, self.digest_algorithm, self.digest_inv_validator(path))\n        return False\n\n    self.log.debug(\"%s is a valid\", path)\n    return True\n", "def validate(self, path):\n    if self.root_inv_validator.validate(path):\n        self.log.debug(\"Valid path %s\", path)\n        return True\n    else:\n        self.log.warning(\"%s is invalid or out of date\", path)\n        return False\n", "def validate(self, path):\n    if self.root_inv_validator.validate(path):\n        return True\n    else:\n        self.log.warning(\n            \"Unable to validate root inventory at '%s'. \"\n            \"This is probably a namespace issue.\",\n            path\n        )\n        return False\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    return self.obj_fs.exists(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.warning(\"Unable to stat %s: %s\", path, e)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return True\n\n    # check if path is a file system path\n    if not os.path.isfile(path):\n        return False\n\n    # check if path is a directory of the inventory\n    if not os.path.isdir(self.content_directory):\n        return False\n\n    # check if path is a pyfs root\n    if not self.obj_fs.is_root(path):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating %s\", path)\n    return self.obj_fs.isfile(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return self.obj_fs.exists(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.content_directory:\n        self.log.debug(\"validate() called with no content directory.  Using root object instead\")\n        return True\n    elif path!= self.content_directory:\n        self.log.debug(\"validate() called with invalid path %s (%s). Using root object instead\",\n                       path, self.content_directory)\n        return True\n    else:\n        return self.digest_algorithm.validate(self.content_directory, self.digest_algorithm.content_digest_size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.root_inv_validator(path):\n        self.log.info(\"%s is a root object\", path)\n        return True\n\n    if self.digest_algorithm is not None and self.digest_algorithm!= self.digest_inv_validator(path):\n        self.log.warn(\"%s cannot be inferred from %s, digest algorithm mis %s, digest inversion mismatch\", path, self.digest_algorithm, self.digest_inv_validator(path))\n        return False\n\n    self.log.debug(\"%s is a valid\", path)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if self.root_inv_validator.validate(path):\n        self.log.debug(\"Valid path %s\", path)\n        return True\n    else:\n        self.log.warning(\"%s is invalid or out of date\", path)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if self.root_inv_validator.validate(path):\n        return True\n    else:\n        self.log.warning(\n            \"Unable to validate root inventory at '%s'. \"\n            \"This is probably a namespace issue.\",\n            path\n        )\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    msg = ''\n    for m in self.messages:\n        msg += '{0}{1}\\n'.format(prefix, m)\n    return msg\n", "def status_str(self, prefix=''):\n    msg = ''\n    for m in self.messages:\n        msg += '\\n  {0}'.format(m)\n    return prefix + msg + '\\n'\n", "def status_str(self, prefix=''):\n    msg = ''\n    for k, v in sorted(self.messages.items()):\n        msg += '{}{}: {}\\n'.format(prefix, k, v)\n    return msg\n", "def status_str(self, prefix=''):\n    messages = []\n    for m in self.messages:\n        if m:\n            messages.append('%s: %s' % (prefix, m))\n    return ', '.join(messages)\n", "def status_str(self, prefix=''):\n    return ', '.join(['{}{}'.format(prefix, m) for m in self.messages])\n", "def status_str(self, prefix=''):\n    return ', '.join(\n        ['valid' if validator.is_valid() else 'invalid'\n         for validator in self.validators] +\n        [prefix + status for status in self.messages]\n    )\n", "def status_str(self, prefix=''):\n    return '\\n'.join(['%s%s: %s' % (prefix, k, v) for k, v in sorted(self.messages.items())])\n", "def status_str(self, prefix=''):\n    message = ''\n    if len(self.messages) > 0:\n        message += ':'+ ', '.join(self.messages)\n    return prefix + message\n", "def status_str(self, prefix=''):\n    msgs = ', '.join(self.messages)\n    return '{}{}'.format(prefix, msgs)\n", "def status_str(self, prefix=''):\n    msg = ''\n    for i, v in enumerate(self.messages):\n        if i > 0:\n            msg += ', '\n        msg += '{}: {}'.format(v.status_name, v.message)\n    return '{}{}'.format(prefix, msg)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    msg = ''\n    for m in self.messages:\n        msg += '{0}{1}\\n'.format(prefix, m)\n    return msg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    msg = ''\n    for m in self.messages:\n        msg += '\\n  {0}'.format(m)\n    return prefix + msg + '\\n'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    msg = ''\n    for k, v in sorted(self.messages.items()):\n        msg += '{}{}: {}\\n'.format(prefix, k, v)\n    return msg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    messages = []\n    for m in self.messages:\n        if m:\n            messages.append('%s: %s' % (prefix, m))\n    return ', '.join(messages)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(['{}{}'.format(prefix, m) for m in self.messages])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(\n        ['valid' if validator.is_valid() else 'invalid'\n         for validator in self.validators] +\n        [prefix + status for status in self.messages]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '\\n'.join(['%s%s: %s' % (prefix, k, v) for k, v in sorted(self.messages.items())])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    message = ''\n    if len(self.messages) > 0:\n        message += ':'+ ', '.join(self.messages)\n    return prefix + message\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    msgs = ', '.join(self.messages)\n    return '{}{}'.format(prefix, msgs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    msg = ''\n    for i, v in enumerate(self.messages):\n        if i > 0:\n            msg += ', '\n        msg += '{}: {}'.format(v.status_name, v.message)\n    return '{}{}'.format(prefix, msg)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    s = ''\n    for i, (k, v) in enumerate(self.log):\n        s += '{}{}: {}\\n'.format(prefix, k, v)\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '{}{}'.format(prefix, self.status)\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    for i, l in enumerate(self.log):\n        s += '{}{}\\n'.format(prefix, l)\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l\n    return '{} {}\\n{}'.format(prefix, self.status, s)\n", "def status_str(self, prefix=''):\n    l = []\n    for k, v in self.log.items():\n        l.append('{}: {}'.format(k, v))\n    return '{} {}'.format(prefix,''.join(l))\n", "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l + '\\n'\n    return prefix + s\n", "def status_str(self, prefix=''):\n    status_str = ''\n    for log in self.log:\n        status_str += log.status_str(prefix) + '\\n'\n    return status_str\n", "def status_str(self, prefix=''):\n    s = ''\n    for i, l in enumerate(self.log):\n        if i > 0:\n            s += '\\n'\n        s += l\n    return (prefix + s + '\\n')\n", "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.log)\n", "def status_str(self, prefix=''):\n    return ''.join(prefix, 'Validation Log: ', self.log)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, (k, v) in enumerate(self.log):\n        s += '{}{}: {}\\n'.format(prefix, k, v)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '{}{}'.format(prefix, self.status)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, l in enumerate(self.log):\n        s += '{}{}\\n'.format(prefix, l)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l\n    return '{} {}\\n{}'.format(prefix, self.status, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    l = []\n    for k, v in self.log.items():\n        l.append('{}: {}'.format(k, v))\n    return '{} {}'.format(prefix,''.join(l))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l + '\\n'\n    return prefix + s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    for log in self.log:\n        status_str += log.status_str(prefix) + '\\n'\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, l in enumerate(self.log):\n        if i > 0:\n            s += '\\n'\n        s += l\n    return (prefix + s + '\\n')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.log)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ''.join(prefix, 'Validation Log: ', self.log)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.manifest_files = []\n    self.digest_algorithm = None\n    self.head = None\n    self.content_directory = None\n    self.warning(\"Validating inventory against known manifest files\")\n    self.validate_fixity(self.fixity, inventory)\n    self.validate_versions(self.all_versions, all_versions=inventory.all_versions, unnormalized_digests=self.unnormalized_digests)\n    self.validate_manifest(inventory, extract_spec_version=extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.validate_versions(\n        self.all_versions,\n        inventory,\n        extract_spec_version=extract_spec_version,\n    )\n    self.validate_manifest(inventory)\n    self.validate_digests(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('package.version', '0.0')\n\n    self.check_digests_present_and_used(\n        inventory, self.manifest_files, self.digest_algorithm)\n\n    self.all_versions = inventory.get('package.versions', self.all_versions)\n    self.spec_versions_supported = inventory.get(\n        'package.versions.supported', self.spec_versions_supported)\n    self.unnormalized_digests = inventory.get(\n        'package.versions.unnormalized-digests', self.unnormalized_digests)\n\n    if extract_spec_version:\n        self.validate_versions(self.all_versions, self.spec_versions_supported,\n                               self.unnormalized_digests)\n", "def validate(self, inventory, extract_spec_version=False):\n    inventory = Inventory(inventory)\n    self.validate_versions(self.all_versions, inventory.inventory, extract_spec_version=extract_spec_version)\n    self.validate_digests(inventory, self.lax_digests)\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    # TODO: Is this the best way to validate a given inventory?\n    return InventoryValidator.validate(self, inventory, extract_spec_version=extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.content_directory = inventory.content_directory\n    self.manifest_files = inventory.manifest_files\n    self.id = inventory.id\n    self.spec_version = inventory.spec_version\n    self.warning(\"Spec version: {0}\".format(self.spec_version))\n    self.warning(\"Manifest files: {0}\".format(self.manifest_files))\n    self.warning(\"Inventory files: {0}\".format(self.inventory.files))\n\n    # Validate the spec version.\n    if self.spec_version and self.spec_version not in self.spec_versions_supported:\n        self.error(\"Invalid spec version: {0}\".format(self.spec_version))\n        self.error(\"Valid spec versions are: {0}\".format(self.spec_versions_supported))\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_versions()\n", "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = self.inventory.get(\"package.version\", \"0\")\n    self.digest_algorithm = self.inventory.get(\"package.digest-algorithm\", \"sha1\")\n\n    if extract_spec_version:\n        self.spec_version = self.spec_version\n\n    self.check_content_paths_map_to_versions()\n    self.check_digests_present_and_used(self.inventory, self.digest_algorithm)\n    self.validate_versions()\n    self.validate_fixity()\n    self.validate_content_paths_map_to_versions(self.inventory)\n\n    return self.inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n    )\n\n    self.content_directory = inventory.content_directory\n    self.content_directory.check_paths_map_to_versions(\n        inventory,\n        self.all_versions,\n    )\n\n    self.head = inventory.head\n    self.head.check_paths_map_to_versions(\n        inventory,\n        self.all_versions,\n    )\n\n    self.warning('Version checks passed!')\n", "def validate(self, inventory, extract_spec_version=False):\n    if self.manifest_files:\n        self.validate_manifest(inventory)\n\n    self.validate_content_paths_map_to_versions(\n        inventory,\n        self.manifest_files,\n        self.spec_version,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.validate_digests_present_and_used(\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n        self.spec_version,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.validate_fixity(\n        self.inventory,\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n        self.content_directory,\n        self.warning,\n        self.error,\n        self.unnormalized_digests,\n    )\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        self._extract_spec_version(inventory)\n\n    self.validate_digests_present_and_used(inventory)\n    self.validate_versions(inventory.get('versions', []))\n    self.validate_manifest(inventory)\n    self.validate_content_paths_map_to_versions(inventory, all_versions=True)\n\n    return inventory\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.manifest_files = []\n    self.digest_algorithm = None\n    self.head = None\n    self.content_directory = None\n    self.warning(\"Validating inventory against known manifest files\")\n    self.validate_fixity(self.fixity, inventory)\n    self.validate_versions(self.all_versions, all_versions=inventory.all_versions, unnormalized_digests=self.unnormalized_digests)\n    self.validate_manifest(inventory, extract_spec_version=extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.validate_versions(\n        self.all_versions,\n        inventory,\n        extract_spec_version=extract_spec_version,\n    )\n    self.validate_manifest(inventory)\n    self.validate_digests(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('package.version', '0.0')\n\n    self.check_digests_present_and_used(\n        inventory, self.manifest_files, self.digest_algorithm)\n\n    self.all_versions = inventory.get('package.versions', self.all_versions)\n    self.spec_versions_supported = inventory.get(\n        'package.versions.supported', self.spec_versions_supported)\n    self.unnormalized_digests = inventory.get(\n        'package.versions.unnormalized-digests', self.unnormalized_digests)\n\n    if extract_spec_version:\n        self.validate_versions(self.all_versions, self.spec_versions_supported,\n                               self.unnormalized_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    inventory = Inventory(inventory)\n    self.validate_versions(self.all_versions, inventory.inventory, extract_spec_version=extract_spec_version)\n    self.validate_digests(inventory, self.lax_digests)\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    # TODO: Is this the best way to validate a given inventory?\n    return InventoryValidator.validate(self, inventory, extract_spec_version=extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.content_directory = inventory.content_directory\n    self.manifest_files = inventory.manifest_files\n    self.id = inventory.id\n    self.spec_version = inventory.spec_version\n    self.warning(\"Spec version: {0}\".format(self.spec_version))\n    self.warning(\"Manifest files: {0}\".format(self.manifest_files))\n    self.warning(\"Inventory files: {0}\".format(self.inventory.files))\n\n    # Validate the spec version.\n    if self.spec_version and self.spec_version not in self.spec_versions_supported:\n        self.error(\"Invalid spec version: {0}\".format(self.spec_version))\n        self.error(\"Valid spec versions are: {0}\".format(self.spec_versions_supported))\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = self.inventory.get(\"package.version\", \"0\")\n    self.digest_algorithm = self.inventory.get(\"package.digest-algorithm\", \"sha1\")\n\n    if extract_spec_version:\n        self.spec_version = self.spec_version\n\n    self.check_content_paths_map_to_versions()\n    self.check_digests_present_and_used(self.inventory, self.digest_algorithm)\n    self.validate_versions()\n    self.validate_fixity()\n    self.validate_content_paths_map_to_versions(self.inventory)\n\n    return self.inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n    )\n\n    self.content_directory = inventory.content_directory\n    self.content_directory.check_paths_map_to_versions(\n        inventory,\n        self.all_versions,\n    )\n\n    self.head = inventory.head\n    self.head.check_paths_map_to_versions(\n        inventory,\n        self.all_versions,\n    )\n\n    self.warning('Version checks passed!')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if self.manifest_files:\n        self.validate_manifest(inventory)\n\n    self.validate_content_paths_map_to_versions(\n        inventory,\n        self.manifest_files,\n        self.spec_version,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.validate_digests_present_and_used(\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n        self.spec_version,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.validate_fixity(\n        self.inventory,\n        inventory,\n        self.manifest_files,\n        self.digest_algorithm,\n        self.content_directory,\n        self.warning,\n        self.error,\n        self.unnormalized_digests,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        self._extract_spec_version(inventory)\n\n    self.validate_digests_present_and_used(inventory)\n    self.validate_versions(inventory.get('versions', []))\n    self.validate_manifest(inventory)\n    self.validate_content_paths_map_to_versions(inventory, all_versions=True)\n\n    return inventory\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for filename in manifest_files:\n        digest = self.digest_for_file(filename)\n        if digest in digests_used:\n            return\n        digests_used.add(digest)\n        self.error(\"File {} has digest {} but it is not present in the manifest\".format(\n            filename, digest\n        ))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = Manifest.load(manifest_file)\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(code=DigestError.NON_EXISTENT,\n                           message='Manifest does not contain the digest \"{digest}\"'.format(digest=digest))\n                return\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.get(\"digests\", []):\n            if digest not in digests_used:\n                self.error(\n                    code=digest.lower(),\n                    message=\"Digest is needed but not used: {}\".format(digest),\n                )\n                return False\n\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest in digests_used:\n            self.error(\"Digest '{}' already present and used\".format(digest))\n            sys.exit(-1)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(code=DigestError.INVALID_DIGEST.value,\n                       message=DigestError.INVALID_DIGEST.value)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    missing_digests = []\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if not manifest_file.has_digest(digest):\n                missing_digests.append(digest)\n    if missing_digests:\n        self.error(\"manifest files have missing digests: {}\".format(\n            \", \".join(missing_digests)))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest file does not contain a digest with this name: {}\".format(digest))\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = manifest_file.get(\"digest\")\n        if digest:\n            file_digest = self.get_file_digest(digest)\n            if file_digest in digests_used:\n                return True\n    return False\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest does not contain digest '{}'\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        for digest in manifest_file.get('digests', []):\n            if digest not in digests_used:\n                self.error(\"Digest {} is not present in manifest file {}\".format(\n                    digest, manifest_file.filename))\n                return False\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for filename in manifest_files:\n        digest = self.digest_for_file(filename)\n        if digest in digests_used:\n            return\n        digests_used.add(digest)\n        self.error(\"File {} has digest {} but it is not present in the manifest\".format(\n            filename, digest\n        ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = Manifest.load(manifest_file)\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(code=DigestError.NON_EXISTENT,\n                           message='Manifest does not contain the digest \"{digest}\"'.format(digest=digest))\n                return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.get(\"digests\", []):\n            if digest not in digests_used:\n                self.error(\n                    code=digest.lower(),\n                    message=\"Digest is needed but not used: {}\".format(digest),\n                )\n                return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest in digests_used:\n            self.error(\"Digest '{}' already present and used\".format(digest))\n            sys.exit(-1)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(code=DigestError.INVALID_DIGEST.value,\n                       message=DigestError.INVALID_DIGEST.value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    missing_digests = []\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if not manifest_file.has_digest(digest):\n                missing_digests.append(digest)\n    if missing_digests:\n        self.error(\"manifest files have missing digests: {}\".format(\n            \", \".join(missing_digests)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest file does not contain a digest with this name: {}\".format(digest))\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = manifest_file.get(\"digest\")\n        if digest:\n            file_digest = self.get_file_digest(digest)\n            if file_digest in digests_used:\n                return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest does not contain digest '{}'\".format(digest))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        for digest in manifest_file.get('digests', []):\n            if digest not in digests_used:\n                self.error(\"Digest {} is not present in manifest file {}\".format(\n                    digest, manifest_file.filename))\n                return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\"'prior' must be an instance of InventoryValidator\")\n        return\n\n    if prior.version!= self.version:\n        self.error(\"'prior' incompatible with the current inventory version (%s vs. %s)\" %\n                   (prior.version, self.version))\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidatorError(\n            'prior must be an instance of {0}'.format(InventoryValidator)\n        )\n\n    if prior.version!= self.version:\n        raise InventoryValidatorError(\n            'invalid inventory version: {0}, expected {1}'.format(\n                prior.version, self.version\n            )\n        )\n\n    if prior.digest_algorithm!= self.digest_algorithm:\n        raise InventoryValidatorError(\n            'invalid digest algorithm: {0}'.format(self.digest_algorithm)\n        )\n\n    return prior\n", "def validate_as_prior_version(self, prior):\n    if prior is not None:\n        if prior.inventory!= self.inventory:\n            self.warning('Inventory mismatch detected. Inventory file '\n                         'has changed. This incantation will be removed.')\n        if prior.version!= self.version:\n            self.warning('Version mismatch detected. Inventory file has '\n                         'changed. This incantation will be removed.')\n", "def validate_as_prior_version(self, prior):\n    pass\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.version:\n        return (\n            \"Inventory prior version should be %s, \"\n            \"got %s\" %\n            (self.version, prior.version)\n        )\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\n            'prior must be an instance of InventoryValidator but got {}'.format(type(prior)))\n        return\n\n    if not self.where.has_prior(prior):\n        self.warning(\n            'prior {} does not have any matching files in inventory {}'.format(prior, self.where))\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error('expected inventory validator', code='invalid')\n        return\n\n    if prior.version!= self.version:\n        self.error('incompatible version', code='incompatible')\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if prior.inventory_file!= self.inventory.file:\n        self.error(\"{} is not the same as inventory file {}\".format(\n            prior.inventory_file, self.inventory.file))\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError(\n            \"'prior' must be an instance of {0}\".format(\n                InventoryValidator))\n    if prior.version!= self.version:\n        self.warning(\n            \"The input version of the inventory is different \"\n            \"from the expected version of this inventory. \"\n            \"Inventory has been modified in \"\n            \"file {0}.\".format(self.where))\n        self.warning(\n            \"Expected input version of the inventory is {0}.\".format(\n                self.version))\n    if prior.digest_algorithm!= self.digest_algorithm:\n        self.warning(\n            \"The input digest algorithm of the inventory is different \"\n            \"from the expected digest algorithm of this inventory. \"\n            \"Inventory has been modified in \"\n          ", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\"Invalid prior version %s\" % prior)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\"'prior' must be an instance of InventoryValidator\")\n        return\n\n    if prior.version!= self.version:\n        self.error(\"'prior' incompatible with the current inventory version (%s vs. %s)\" %\n                   (prior.version, self.version))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidatorError(\n            'prior must be an instance of {0}'.format(InventoryValidator)\n        )\n\n    if prior.version!= self.version:\n        raise InventoryValidatorError(\n            'invalid inventory version: {0}, expected {1}'.format(\n                prior.version, self.version\n            )\n        )\n\n    if prior.digest_algorithm!= self.digest_algorithm:\n        raise InventoryValidatorError(\n            'invalid digest algorithm: {0}'.format(self.digest_algorithm)\n        )\n\n    return prior\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is not None:\n        if prior.inventory!= self.inventory:\n            self.warning('Inventory mismatch detected. Inventory file '\n                         'has changed. This incantation will be removed.')\n        if prior.version!= self.version:\n            self.warning('Version mismatch detected. Inventory file has '\n                         'changed. This incantation will be removed.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    pass\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.version:\n        return (\n            \"Inventory prior version should be %s, \"\n            \"got %s\" %\n            (self.version, prior.version)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\n            'prior must be an instance of InventoryValidator but got {}'.format(type(prior)))\n        return\n\n    if not self.where.has_prior(prior):\n        self.warning(\n            'prior {} does not have any matching files in inventory {}'.format(prior, self.where))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error('expected inventory validator', code='invalid')\n        return\n\n    if prior.version!= self.version:\n        self.error('incompatible version', code='incompatible')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if prior.inventory_file!= self.inventory.file:\n        self.error(\"{} is not the same as inventory file {}\".format(\n            prior.inventory_file, self.inventory.file))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError(\n            \"'prior' must be an instance of {0}\".format(\n                InventoryValidator))\n    if prior.version!= self.version:\n        self.warning(\n            \"The input version of the inventory is different \"\n            \"from the expected version of this inventory. \"\n            \"Inventory has been modified in \"\n            \"file {0}.\".format(self.where))\n        self.warning(\n            \"Expected input version of the inventory is {0}.\".format(\n                self.version))\n    if prior.digest_algorithm!= self.digest_algorithm:\n        self.warning(\n            \"The input digest algorithm of the inventory is different \"\n            \"from the expected digest algorithm of this inventory. \"\n            \"Inventory has been modified in \"\n          ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\"Invalid prior version %s\" % prior)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if isinstance(inventory[key], dict):\n            if version in inventory[key]:\n                result[key] = inventory[key][version]\n    return result\n", "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inv_fs = FileSystemStorage(location=inventory.path)\n    inv_fs.put('%s/%s' % (inventory.path, version), '')\n\n    map = {}\n    for c in inv_fs.list():\n        if not c.endswith('/'):\n            # Skip non-versioned files\n            continue\n        s = inventory.storage.get_storage(c).open_storage()\n        try:\n            map[c] = set(s.listdir(version))\n        except Exception:\n            pass\n    return map\n", "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        path\n        for path in inventory.get_file_paths_for_version(version)\n        if path in version.content.paths\n    }\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.logical_paths:\n            if logical_path not in ret:\n                ret[logical_path] = set()\n            ret[logical_path].add(file_inventory.content_file)\n    return ret\n", "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if isinstance(inventory[key], dict):\n            if version in inventory[key]:\n                result[key] = inventory[key][version]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inv_fs = FileSystemStorage(location=inventory.path)\n    inv_fs.put('%s/%s' % (inventory.path, version), '')\n\n    map = {}\n    for c in inv_fs.list():\n        if not c.endswith('/'):\n            # Skip non-versioned files\n            continue\n        s = inventory.storage.get_storage(c).open_storage()\n        try:\n            map[c] = set(s.listdir(version))\n        except Exception:\n            pass\n    return map\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        path\n        for path in inventory.get_file_paths_for_version(version)\n        if path in version.content.paths\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.logical_paths:\n            if logical_path not in ret:\n                ret[logical_path] = set()\n            ret[logical_path].add(file_inventory.content_file)\n    return ret\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    for file_name, content in fixity.items():\n        if file_name not in manifest_files:\n            self.error('Fixity error: File \"{}\" is not in manifest'.format(file_name))\n        elif'sha256' in content:\n            self.error('Fixity error: File \"{}\" is referenced by SHA256 hash'.format(file_name))\n", "def validate_fixity(self, fixity, manifest_files):\n    for filename, contents in fixity.items():\n        digest = self.lax_digests.get(filename, \"\")\n        if digest and digest!= \"\":\n            if not manifest_files.get(filename):\n                self.error(\"Fixity block {} has a reference to {}, but it doesn't contain a file with the same name.\".format(filename, digest))\n            elif digest!= manifest_files.get(filename):\n                self.error(\"Fixity block {} has a reference to {}, but it doesn't contain a file with the same name.\".format(filename, digest))\n", "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = {}\n    for filename, digest in fixity.items():\n        if digest not in self.lax_digests:\n            self.error('Fixity block is not a valid manifest file')\n            return False\n        if filename in manifest_files:\n            referenced_files[filename] = digest\n    return referenced_files\n", "def validate_fixity(self, fixity, manifest_files):\n    # TODO: Add validation to verify the structure of the fixity block.\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    if 'files' in fixity:\n        referenced = set(fixity['files'])\n        unreferenced = set(manifest_files) - referenced\n        if unreferenced:\n            self.error('Unable to find files in manifest: {}'.format(\n                ', '.join(unreferenced)\n            ))\n        elif not referenced:\n            self.error('Fixity block contains no files: {}'.format(\n                ', '.join(referenced)\n            ))\n", "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file_path in manifest_files:\n        if file_path not in fixity.files:\n            errors.append(\"{} not in {}\".format(file_path, fixity.files))\n    return errors\n", "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity:\n            continue\n        self.error('Fixity block does not contain file {}'.format(f))\n", "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = []\n    for filename, digest in fixity.items():\n        if digest not in self.lax_digests:\n            self.error(\n                \"Fixity block has an unknown digest '{}'\".format(digest))\n        else:\n            referenced_files.append(filename)\n\n    return referenced_files\n", "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity:\n            self.error(\"Fixity block contains file %s\" % f)\n", "def validate_fixity(self, fixity, manifest_files):\n    for file_name in fixity.files:\n        if file_name in manifest_files:\n            self.error('Fixity file {} already exists'.format(file_name))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file_name, content in fixity.items():\n        if file_name not in manifest_files:\n            self.error('Fixity error: File \"{}\" is not in manifest'.format(file_name))\n        elif'sha256' in content:\n            self.error('Fixity error: File \"{}\" is referenced by SHA256 hash'.format(file_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for filename, contents in fixity.items():\n        digest = self.lax_digests.get(filename, \"\")\n        if digest and digest!= \"\":\n            if not manifest_files.get(filename):\n                self.error(\"Fixity block {} has a reference to {}, but it doesn't contain a file with the same name.\".format(filename, digest))\n            elif digest!= manifest_files.get(filename):\n                self.error(\"Fixity block {} has a reference to {}, but it doesn't contain a file with the same name.\".format(filename, digest))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = {}\n    for filename, digest in fixity.items():\n        if digest not in self.lax_digests:\n            self.error('Fixity block is not a valid manifest file')\n            return False\n        if filename in manifest_files:\n            referenced_files[filename] = digest\n    return referenced_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    # TODO: Add validation to verify the structure of the fixity block.\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if 'files' in fixity:\n        referenced = set(fixity['files'])\n        unreferenced = set(manifest_files) - referenced\n        if unreferenced:\n            self.error('Unable to find files in manifest: {}'.format(\n                ', '.join(unreferenced)\n            ))\n        elif not referenced:\n            self.error('Fixity block contains no files: {}'.format(\n                ', '.join(referenced)\n            ))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file_path in manifest_files:\n        if file_path not in fixity.files:\n            errors.append(\"{} not in {}\".format(file_path, fixity.files))\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity:\n            continue\n        self.error('Fixity block does not contain file {}'.format(f))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = []\n    for filename, digest in fixity.items():\n        if digest not in self.lax_digests:\n            self.error(\n                \"Fixity block has an unknown digest '{}'\".format(digest))\n        else:\n            referenced_files.append(filename)\n\n    return referenced_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity:\n            self.error(\"Fixity block contains file %s\" % f)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file_name in fixity.files:\n        if file_name in manifest_files:\n            self.error('Fixity file {} already exists'.format(file_name))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml in xmls:\n        file_groups[os.path.basename(xml)] = files[:]\n        files = []\n    return file_groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        prefix = os.path.splitext(os.path.basename(xml_filename))[0]\n        filename = os.path.basename(xml_filename)\n        if filename in files:\n            data[prefix] = _eval_file(prefix, xml_filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    # TODO: need to make this more robust\n    files = _eval_file('.', files)\n    packages = {}\n    for xml_filename in xmls:\n        for package in files:\n            if xml_filename.startswith(package):\n                if package not in packages:\n                    packages[package] = {}\n                _eval_file(packages[package], xml_filename)\n    return packages\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = OrderedDict()\n    for xml in xmls:\n        for filename in files:\n            if filename.startswith(xml):\n                name = filename.split('.')[0]\n                prefix = name.split('-')[0]\n                data[prefix] = _eval_file(prefix, filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        package = _eval_file(source, xml_filename)\n        if package is None:\n            continue\n        elif package.suffix == '.zip':\n            zip_files = _eval_file(source, xml_filename + '.zip')\n            for zip_file in zip_files:\n                data.update({zip_file.filename: package})\n        else:\n            data.update({package.filename: package})\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        name = os.path.basename(xml)\n        filename = select_filenames_by_prefix(name, files)\n        data.setdefault(name, {})[xml] = _eval_file(prefix=name, file_path=filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    files = _eval_file('/'.join(xmls), xmls)\n    result = {}\n    for filename in files:\n        name = os.path.basename(filename)\n        result[name] = source.get(name)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        prefix = os.path.splitext(os.path.basename(file))[0]\n        if prefix not in data:\n            data[prefix] = {}\n        data_file = _eval_file(prefix, file)\n        data[prefix][file] = data_file\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        prefix, filename = _eval_file(prefix=xml_filename, files=files)\n        data[filename] = source.package(prefix)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml in xmls:\n        package = _eval_file(prefix=xml, file_path=source)\n        packages[xml] = package\n    return packages\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml in xmls:\n        file_groups[os.path.basename(xml)] = files[:]\n        files = []\n    return file_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        prefix = os.path.splitext(os.path.basename(xml_filename))[0]\n        filename = os.path.basename(xml_filename)\n        if filename in files:\n            data[prefix] = _eval_file(prefix, xml_filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    # TODO: need to make this more robust\n    files = _eval_file('.', files)\n    packages = {}\n    for xml_filename in xmls:\n        for package in files:\n            if xml_filename.startswith(package):\n                if package not in packages:\n                    packages[package] = {}\n                _eval_file(packages[package], xml_filename)\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = OrderedDict()\n    for xml in xmls:\n        for filename in files:\n            if filename.startswith(xml):\n                name = filename.split('.')[0]\n                prefix = name.split('-')[0]\n                data[prefix] = _eval_file(prefix, filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        package = _eval_file(source, xml_filename)\n        if package is None:\n            continue\n        elif package.suffix == '.zip':\n            zip_files = _eval_file(source, xml_filename + '.zip')\n            for zip_file in zip_files:\n                data.update({zip_file.filename: package})\n        else:\n            data.update({package.filename: package})\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        name = os.path.basename(xml)\n        filename = select_filenames_by_prefix(name, files)\n        data.setdefault(name, {})[xml] = _eval_file(prefix=name, file_path=filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    files = _eval_file('/'.join(xmls), xmls)\n    result = {}\n    for filename in files:\n        name = os.path.basename(filename)\n        result[name] = source.get(name)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        prefix = os.path.splitext(os.path.basename(file))[0]\n        if prefix not in data:\n            data[prefix] = {}\n        data_file = _eval_file(prefix, file)\n        data[prefix][file] = data_file\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        prefix, filename = _eval_file(prefix=xml_filename, files=files)\n        data[filename] = source.package(prefix)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml in xmls:\n        package = _eval_file(prefix=xml, file_path=source)\n        packages[xml] = package\n    return packages\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return prefix in [os.path.basename(p).strip() for p in file_path.split(os.path.sep)]\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return prefix in os.path.splitext(file_path)[0]\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return prefix in [os.path.basename(p).strip() for p in file_path.split(os.path.sep)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return prefix in os.path.splitext(file_path)[0]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    match_file_by_prefix = []\n    for file_path in files:\n        if prefix in file_path:\n            match_file_by_prefix.append(file_path)\n\n    return match_file_by_prefix\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [filename for filename in files if match_file_by_prefix(prefix, filename)]\n", "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if prefix in f:\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if match_file_by_prefix(prefix, f)]\n    return files\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file for file in files if match_file_by_prefix(prefix, file)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if match_file_by_prefix(prefix, file_path)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    match_file_by_prefix = []\n    for file_path in files:\n        if prefix in file_path:\n            match_file_by_prefix.append(file_path)\n\n    return match_file_by_prefix\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [filename for filename in files if match_file_by_prefix(prefix, filename)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if prefix in f:\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if match_file_by_prefix(prefix, f)]\n    return files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file for file in files if match_file_by_prefix(prefix, file)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if match_file_by_prefix(prefix, file_path)]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            if fname.endswith('.xml'):\n                result[fname] = _group_files_by_xml_filename(\n                    os.path.join(root, fname),\n                    root,\n                    files)\n    return result\n", "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                files[filename] = _group_files_by_xml_filename(\n                    os.path.join(root, filename)\n                )\n    return files\n", "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                result[filename] = _group_files_by_xml_filename(\n                    os.path.join(root, filename),\n                    os.path.join(root, filename[:-4]),\n                )\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            result[filename] = _group_files_by_xml_filename(\n                filepath, files=True)\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            xml_path = os.path.join(root, fname)\n            if not os.path.islink(xml_path):\n                data = _group_files_by_xml_filename(\n                    os.path.join(root, fname), xmls=[xml_path])\n                if data:\n                    result[fname] = data\n    return result\n", "def _explore_folder(folder):\n\n    _group_files_by_xml_filename = {}\n\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                _group_files_by_xml_filename[filename] = os.path.join(root, filename)\n\n    return _group_files_by_xml_filename\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                filepath = os.path.join(root, filename)\n                with open(filepath) as f:\n                    data[filename[:-4]] = _group_files_by_xml_filename(\n                        filepath, f.readlines()\n                    )\n    return data\n", "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                filepath = os.path.join(root, filename)\n                _group_files_by_xml_filename(filepath, files)\n    return files\n", "def _explore_folder(folder):\n    package_data = OrderedDict()\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            package_data[os.path.splitext(filename)[0]] = _group_files_by_xml_filename(filepath, [], [])\n\n    return package_data\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            file_path = os.path.join(root, f)\n            data[file_path] = _group_files_by_xml_filename(file_path, dirs, [])\n\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            if fname.endswith('.xml'):\n                result[fname] = _group_files_by_xml_filename(\n                    os.path.join(root, fname),\n                    root,\n                    files)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                files[filename] = _group_files_by_xml_filename(\n                    os.path.join(root, filename)\n                )\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                result[filename] = _group_files_by_xml_filename(\n                    os.path.join(root, filename),\n                    os.path.join(root, filename[:-4]),\n                )\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            result[filename] = _group_files_by_xml_filename(\n                filepath, files=True)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for fname in files:\n            xml_path = os.path.join(root, fname)\n            if not os.path.islink(xml_path):\n                data = _group_files_by_xml_filename(\n                    os.path.join(root, fname), xmls=[xml_path])\n                if data:\n                    result[fname] = data\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n\n    _group_files_by_xml_filename = {}\n\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                _group_files_by_xml_filename[filename] = os.path.join(root, filename)\n\n    return _group_files_by_xml_filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                filepath = os.path.join(root, filename)\n                with open(filepath) as f:\n                    data[filename[:-4]] = _group_files_by_xml_filename(\n                        filepath, f.readlines()\n                    )\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = {}\n    for root, _, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                filepath = os.path.join(root, filename)\n                _group_files_by_xml_filename(filepath, files)\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    package_data = OrderedDict()\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            package_data[os.path.splitext(filename)[0]] = _group_files_by_xml_filename(filepath, [], [])\n\n    return package_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            file_path = os.path.join(root, f)\n            data[file_path] = _group_files_by_xml_filename(file_path, dirs, [])\n\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'packages'\n\n    return match_file_by_prefix(prefix, file_path)[file_type]\n", "def _eval_file(prefix, file_path):\n    match = match_file_by_prefix(prefix, file_path)\n    if match:\n        filename = match.groupdict()['filename']\n        package = match.groupdict()['package']\n        return {'import': '{0}/{1}'.format(package, filename),\n                'embed': filename}\n    else:\n        return None\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # Identifica o tipo do arquivo do pcote: `asset` ou `rendition`\n    if filename.startswith('asset'):\n        return {'import_os_file': 'asset', 'packages': 'asset'}\n    elif filename.startswith('rendition'):\n        return {'import_os_file':'rendition', 'packages':'rendition'}\n    else:\n        return match_file_by_prefix(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_in_packages = filename.split('.')[0]\n    file_type = filename_in_packages.split('-')[0]\n    packages = filename_in_packages.split('-')[1:]\n    if len(packages) == 0:\n        packages = ['']\n    return {\n        'import_os': '',\n        'file_type': file_type,\n        'filename': filename,\n        'packages': packages,\n        'file_folder': file_path,\n    }\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.startswith('asset'):\n        package_name = filename.replace('asset', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path': file_path,\n            'file_type': 'asset'\n        }\n\n    elif filename.startswith('rendition'):\n        package_name = filename.replace('rendition', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path': file_path,\n            'file_type':'rendition'\n        }\n\n    elif filename.startswith('package'):\n        package_name = filename.replace('package', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path'", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    import_os = filename.split('.')[0]\n    match_file_by_prefix(prefix, file_path)\n    return {'import_os': import_os}\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = filename.split(\".\")[0]\n\n    for package in packages:\n        if filename.startswith(package):\n            return eval(filename.split(\".\")[1])\n    else:\n        return {\"package\": \"unknown\",\n                \"file\": filename}\n", "def _eval_file(prefix, file_path):\n    match_file_by_prefix = {\n        'asset': _eval_asset,\n       'rendition': _eval_rendition\n    }\n\n    return match_file_by_prefix[prefix.lower()](file_path)\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    match_file_by_prefix(prefix, file_path)\n\n    return {\n        'package': file_path,\n        'import_os': 'file'\n    }\n", "def _eval_file(prefix, file_path):\n    if file_path.startswith('assets'):\n        return {'packages': 'asset'}\n    elif file_path.startswith('renditions'):\n        return {'packages':'rendition'}\n    elif file_path.startswith('files'):\n        return {'packages': 'file'}\n    else:\n        return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'packages'\n\n    return match_file_by_prefix(prefix, file_path)[file_type]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    match = match_file_by_prefix(prefix, file_path)\n    if match:\n        filename = match.groupdict()['filename']\n        package = match.groupdict()['package']\n        return {'import': '{0}/{1}'.format(package, filename),\n                'embed': filename}\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # Identifica o tipo do arquivo do pcote: `asset` ou `rendition`\n    if filename.startswith('asset'):\n        return {'import_os_file': 'asset', 'packages': 'asset'}\n    elif filename.startswith('rendition'):\n        return {'import_os_file':'rendition', 'packages':'rendition'}\n    else:\n        return match_file_by_prefix(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_in_packages = filename.split('.')[0]\n    file_type = filename_in_packages.split('-')[0]\n    packages = filename_in_packages.split('-')[1:]\n    if len(packages) == 0:\n        packages = ['']\n    return {\n        'import_os': '',\n        'file_type': file_type,\n        'filename': filename,\n        'packages': packages,\n        'file_folder': file_path,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.startswith('asset'):\n        package_name = filename.replace('asset', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path': file_path,\n            'file_type': 'asset'\n        }\n\n    elif filename.startswith('rendition'):\n        package_name = filename.replace('rendition', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path': file_path,\n            'file_type':'rendition'\n        }\n\n    elif filename.startswith('package'):\n        package_name = filename.replace('package', '')\n        return {\n            'package_name': package_name,\n            'filename': filename,\n            'file_path'", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    import_os = filename.split('.')[0]\n    match_file_by_prefix(prefix, file_path)\n    return {'import_os': import_os}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = filename.split(\".\")[0]\n\n    for package in packages:\n        if filename.startswith(package):\n            return eval(filename.split(\".\")[1])\n    else:\n        return {\"package\": \"unknown\",\n                \"file\": filename}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    match_file_by_prefix = {\n        'asset': _eval_asset,\n       'rendition': _eval_rendition\n    }\n\n    return match_file_by_prefix[prefix.lower()](file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    match_file_by_prefix(prefix, file_path)\n\n    return {\n        'package': file_path,\n        'import_os': 'file'\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith('assets'):\n        return {'packages': 'asset'}\n    elif file_path.startswith('renditions'):\n        return {'packages':'rendition'}\n    elif file_path.startswith('files'):\n        return {'packages': 'file'}\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = {\"path\": file_path}\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = {\"path\": file_path}\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = self.file_path(file_path)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = {\"path\": file_path}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = {\"path\": file_path}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = self.file_path(file_path)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self._assets.update({basename: file_path})\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset_name = self._assets.get(basename, basename)\n    asset_path = self._assets.get(asset_name, asset_name)\n    asset_path = self._assets.get(asset_path, asset_path)\n    with open(file_path, \"rb\") as f:\n        file_content = f.read()\n        mime_type = mimetypes.guess_type(file_path)[0] or \"application/octet-stream\"\n        with open(asset_path, \"wb\") as f:\n            f.write(file_content)\n    self._assets[asset_name] = asset_path\n    self._assets[asset_path] = file_content\n", "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset_path = self.file_path(file_path)\n    self._assets[asset_path] = file_path\n", "def add_asset(self, basename, file_path):\n    assert isinstance(file_path, str), type(file_path)\n    assert isinstance(basename, str), type(basename)\n    assert isinstance(self._assets, dict)\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset_path = self.file_path(file_path)\n\n    self._assets.update({basename: asset_path})\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self._assets.update({basename: file_path})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_name = self._assets.get(basename, basename)\n    asset_path = self._assets.get(asset_name, asset_name)\n    asset_path = self._assets.get(asset_path, asset_path)\n    with open(file_path, \"rb\") as f:\n        file_content = f.read()\n        mime_type = mimetypes.guess_type(file_path)[0] or \"application/octet-stream\"\n        with open(asset_path, \"wb\") as f:\n            f.write(file_content)\n    self._assets[asset_name] = asset_path\n    self._assets[asset_path] = file_content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_path = self.file_path(file_path)\n    self._assets[asset_path] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    assert isinstance(file_path, str), type(file_path)\n    assert isinstance(basename, str), type(basename)\n    assert isinstance(self._assets, dict)\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_path = self.file_path(file_path)\n\n    self._assets.update({basename: asset_path})\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        data = OrderedDict()\n        for f in zf.namelist():\n            if f.endswith('.xml'):\n                data[f] = _group_files_by_xml_filename(zf, zf.open(f), f)\n    return data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        # get files in zip that match xml filename\n        xml_files = [f for f in zf.namelist() if f.endswith(\".xml\")]\n        # get data from zip file as dict\n        data = {}\n        for xml_filename in xml_files:\n            data[xml_filename] = zf.open(xml_filename).read()\n        return data\n", "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    with zip_file.open('packages.xml') as source:\n        packages = _group_files_by_xml_filename(source, zip_file.namelist(), zip_file.infolist())\n    return packages\n", "def _explore_zipfile(zip_path):\n    # remove compression from zipfile path\n    zip_path = zip_path.replace('.zip', '')\n    with zipfile.ZipFile(zip_path) as zf:\n        # get files from zipfile\n        xmls = [f.filename for f in zf.infolist() if f.filename.endswith('.xml')]\n        files = {f: zf.open(f, 'r').read() for f in xmls}\n\n        # get packages from zipfile\n        packs = {p: zf.open(p, 'r').read() for p in zf.namelist()}\n        packs = {p: _explore_zipfile(p) for p in packs}\n\n        return {\n            'packs': packs,\n            'files': files,\n        }\n", "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    zip_file.extractall()\n    xmls = {}\n    files = {}\n    for filename in zip_file.namelist():\n        if filename.endswith('.xml'):\n            files[filename] = zip_file.open(filename).read()\n        else:\n            xmls[filename] = zip_file.open(filename).read()\n    return {\n        'xmls': xmls,\n        'files': files,\n    }\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        for info in zf.infolist():\n            if not info.filename.endswith('/'):\n                continue\n            _, xml_name = info.filename.rsplit('/', 1)\n            xmls = zf.open(xml_name, 'r').read()\n            files = zf.filelist.files\n            return {\n                'xml_filename': xml_name,\n                'xmls': xmls,\n                'files': files\n            }\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as source:\n        return _group_files_by_xml_filename(source, source.namelist(), source.namelist())\n", "def _explore_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path)\n    for name in zf.namelist():\n        # Get filename without extension\n        filename = name.replace('.zip', '')\n        # Get file list from zip\n        files = zf.open(name)\n        # Parse file content\n        _group_files_by_xml_filename(files, filename)\n    return _group_files_by_xml_filename(zf.namelist(), zf.filelist, zf.filelist)\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as source:\n        packtools_data = {}\n        for filename in source.namelist():\n            xml_basename = filename.split('.')[0]\n            packtools_data[xml_basename] = _group_files_by_xml_filename(source, filename, packtools_data)\n    return packtools_data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = zf.namelist()\n        files = []\n        for xml in xmls:\n            if '.xml' in xml:\n                files.append(zf.open(xml, 'r').read().decode('utf-8'))\n\n        packtools = _group_files_by_xml_filename(zf.open(xmls[0], 'r').read(), xmls, files)\n    return packtools\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        data = OrderedDict()\n        for f in zf.namelist():\n            if f.endswith('.xml'):\n                data[f] = _group_files_by_xml_filename(zf, zf.open(f), f)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        # get files in zip that match xml filename\n        xml_files = [f for f in zf.namelist() if f.endswith(\".xml\")]\n        # get data from zip file as dict\n        data = {}\n        for xml_filename in xml_files:\n            data[xml_filename] = zf.open(xml_filename).read()\n        return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    with zip_file.open('packages.xml') as source:\n        packages = _group_files_by_xml_filename(source, zip_file.namelist(), zip_file.infolist())\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # remove compression from zipfile path\n    zip_path = zip_path.replace('.zip', '')\n    with zipfile.ZipFile(zip_path) as zf:\n        # get files from zipfile\n        xmls = [f.filename for f in zf.infolist() if f.filename.endswith('.xml')]\n        files = {f: zf.open(f, 'r').read() for f in xmls}\n\n        # get packages from zipfile\n        packs = {p: zf.open(p, 'r').read() for p in zf.namelist()}\n        packs = {p: _explore_zipfile(p) for p in packs}\n\n        return {\n            'packs': packs,\n            'files': files,\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    zip_file.extractall()\n    xmls = {}\n    files = {}\n    for filename in zip_file.namelist():\n        if filename.endswith('.xml'):\n            files[filename] = zip_file.open(filename).read()\n        else:\n            xmls[filename] = zip_file.open(filename).read()\n    return {\n        'xmls': xmls,\n        'files': files,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        for info in zf.infolist():\n            if not info.filename.endswith('/'):\n                continue\n            _, xml_name = info.filename.rsplit('/', 1)\n            xmls = zf.open(xml_name, 'r').read()\n            files = zf.filelist.files\n            return {\n                'xml_filename': xml_name,\n                'xmls': xmls,\n                'files': files\n            }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as source:\n        return _group_files_by_xml_filename(source, source.namelist(), source.namelist())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path)\n    for name in zf.namelist():\n        # Get filename without extension\n        filename = name.replace('.zip', '')\n        # Get file list from zip\n        files = zf.open(name)\n        # Parse file content\n        _group_files_by_xml_filename(files, filename)\n    return _group_files_by_xml_filename(zf.namelist(), zf.filelist, zf.filelist)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as source:\n        packtools_data = {}\n        for filename in source.namelist():\n            xml_basename = filename.split('.')[0]\n            packtools_data[xml_basename] = _group_files_by_xml_filename(source, filename, packtools_data)\n    return packtools_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = zf.namelist()\n        files = []\n        for xml in xmls:\n            if '.xml' in xml:\n                files.append(zf.open(xml, 'r').read().decode('utf-8'))\n\n        packtools = _group_files_by_xml_filename(zf.open(xmls[0], 'r').read(), xmls, files)\n    return packtools\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return list(zf.namelist())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return list(zf.namelist())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return re.sub(r'\\bw:(st=\")([^\"]+)(\"|\\s)', r'\\1-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'(\\w+:)(st=\")(.+)\"', r'\\1-\\2-w-st=\"\\3\"', content)\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif isinstance(content, str):\n        return 'w:' + content.replace('w:', 'w-st=\"')\n    else:\n        return content\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r\"w:(st=|w-st=\", \"w-st=\", content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\b(w:|st=\")(.*?)(\"|\\))', r'\\1-w-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r\"\\sw:(.*?)st='(.*?)\",\"\\g<1>-\\g<2>\", content)\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(\\w+)=\"', r'\\1-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\b(w:|st=\")([^\"]+)(\"|\\))', r'\\1-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r\"w:([^,}]+)st='([^']+)'\",\n                  r'w-st=\"\\1\"', content)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\bw:(st=\")([^\"]+)(\"|\\s)', r'\\1-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'(\\w+:)(st=\")(.+)\"', r'\\1-\\2-w-st=\"\\3\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif isinstance(content, str):\n        return 'w:' + content.replace('w:', 'w-st=\"')\n    else:\n        return content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r\"w:(st=|w-st=\", \"w-st=\", content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\b(w:|st=\")(.*?)(\"|\\))', r'\\1-w-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r\"\\sw:(.*?)st='(.*?)\",\"\\g<1>-\\g<2>\", content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(\\w+)=\"', r'\\1-st=\"\\2\"', content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\b(w:|st=\")([^\"]+)(\"|\\))', r'\\1-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r\"w:([^,}]+)st='([^']+)'\",\n                  r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    pubdates = [n.text for n in node.xpath(pubdate_xpaths[0])]\n    return pubdates[0] if len(pubdates) > 0 else None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath.find(node)\n        if match:\n            return match\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.search(node.text)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    pubdates = [n.text for n in node.xpath(pubdate_xpaths[0])]\n    return pubdates[0] if len(pubdates) > 0 else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath.find(node)\n        if match:\n            return match\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.search(node.text)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='supplement':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = int(issue.find('Number').text)\n        suppl = issue.find('Supplement').text\n        return number, suppl\n    except AttributeError:\n        return None, None\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('element'):\n        if 'type' in element.attrib:\n            if element.attrib['type'] == 'number':\n                number = element.text\n            elif element.attrib['type'] =='supplement':\n                suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\", NAMESPACES).text,\n        issue.find(\"suppl\", NAMESPACES).text,\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('Reference'):\n        if element.attrib['type'] == 'number':\n            number = element.text\n        elif element.attrib['type'] =='supplement':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text.strip(),\n        issue.find('suppl').text.strip()\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='supplement':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = int(issue.find('Number').text)\n        suppl = issue.find('Supplement').text\n        return number, suppl\n    except AttributeError:\n        return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('element'):\n        if 'type' in element.attrib:\n            if element.attrib['type'] == 'number':\n                number = element.text\n            elif element.attrib['type'] =='supplement':\n                suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find(\"number\", NAMESPACES).text,\n        issue.find(\"suppl\", NAMESPACES).text,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('Reference'):\n        if element.attrib['type'] == 'number':\n            number = element.text\n        elif element.attrib['type'] =='supplement':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text.strip(),\n        issue.find('suppl').text.strip()\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\n' * indent, self.iscanonical, '\\n' * indent)\n    return '[{0.__class__.__name__}] {0.iscanonical}'.format(self)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        for line in self.lines:\n            if not line.iscanonical:\n                continue\n            if debug:\n                lines.append(''* indent + line.pretty())\n            else:\n                lines.append(line.pretty())\n    else:\n        for line in self.lines:\n            if debug:\n                lines.append(''* indent + line)\n            else:\n                lines.append(line.pretty())\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"%s(%s)\" % (self.__class__.__name__, self.iscanonical)\n    else:\n        s = \"%s(%s) (%s)\" % (self.__class__.__name__, self.iscanonical, self.canonical.pretty(indent=indent, debug=debug))\n    return s\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical and self.__str__():\n        s = \"%s %s\" % (self.__str__(), self.iscanonical.__str__())\n    return \"\\n\".join([\n        \" \" * indent,\n        s,\n        \"-\" * (indent + 8),\n    ])\n", "def pretty(self, indent=0, debug=False):\n    if self.iscanonical and debug:\n        print(\" \" * indent, \"iscanonical:\", self.iscanonical)\n    return super().pretty(indent=indent, debug=debug)\n", "def pretty(self, indent=0, debug=False):\n    \"Return a pretty formatted representation of self. \"\n    s = \"\"\n    if self.iscanonical:\n        s += \"(canonical)\"\n    else:\n        s += \"(non-canonical)\"\n    if debug:\n        s += \": \" + self.name\n        s += \" \" + self.version\n        for p in self.properties:\n            s += \" \" + p\n        s += \" \" + str(self.dependencies)\n    else:\n        s += \": \" + self.name + \" (\" + self.version + \")\"\n        for p in self.properties:\n            s += \" \" + p\n        for p in self.dependencies:\n            s += \" \" + p\n    return s\n", "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + x for x in self)\n", "def pretty(self, indent=0, debug=False):\n    output = \"\"\n    if self.iscanonical:\n        output += \"%scanonical %s\\n\" % (\"  \" * indent, self.name)\n    else:\n        output += \"%s%s\\n\" % (\"  \" * indent, self.name)\n\n    if debug:\n        for k, v in sorted(self.attributes.items()):\n            output += \"%s %s\\n\" % (\"  \" * (indent + 1), k)\n            output += v.pretty(indent + 3, debug)\n            output += \"%s %s\\n\" % (\"  \" * (indent + 1), v.pretty(indent + 3, debug))\n\n    return output\n", "def pretty(self, indent=0, debug=False):\n    r\"\"\"Return a pretty formatted representation of self.        \n    \"\"\"\n    s = \"\"\n    if self.iscanonical:\n        s = s + \"\\n\" + indent * \"  \" + \"Canonical: \" + self.__class__.__name__\n        s += \"\\n\" + indent * \"  \" + \": \" + self.iscanonical\n    else:\n        s = s + \"\\n\" + indent * \"  \" + \"Class: \" + self.__class__.__name__\n        s += \"\\n\" + indent * \"  \" + \": \" + self.__class__.__name__\n    s += \"\\n\" + indent * \"  \" + \"Variables: \" + str(self.variables)\n    if debug:\n        for k, v in self.variables.items():\n            s += \"\\n\" + indent * \"  \" + k + \": \" + str(v)\n    return s\n", "def pretty(self, indent=0, debug=False):\n    string = \"\"\n    if self.iscanonical:\n        string = string + \"[\" + self.canonical + \"]\"\n    else:\n        string = string + \"[\" + self.name + \"]\"\n    if indent!= 0:\n        string = string + \" \" * indent\n    string = string + \"(\" + self.repr(debug) + \")\"\n    return string\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        print('\\n' * indent, self.iscanonical, '\\n' * indent)\n    return '[{0.__class__.__name__}] {0.iscanonical}'.format(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        for line in self.lines:\n            if not line.iscanonical:\n                continue\n            if debug:\n                lines.append(''* indent + line.pretty())\n            else:\n                lines.append(line.pretty())\n    else:\n        for line in self.lines:\n            if debug:\n                lines.append(''* indent + line)\n            else:\n                lines.append(line.pretty())\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"%s(%s)\" % (self.__class__.__name__, self.iscanonical)\n    else:\n        s = \"%s(%s) (%s)\" % (self.__class__.__name__, self.iscanonical, self.canonical.pretty(indent=indent, debug=debug))\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical and self.__str__():\n        s = \"%s %s\" % (self.__str__(), self.iscanonical.__str__())\n    return \"\\n\".join([\n        \" \" * indent,\n        s,\n        \"-\" * (indent + 8),\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if self.iscanonical and debug:\n        print(\" \" * indent, \"iscanonical:\", self.iscanonical)\n    return super().pretty(indent=indent, debug=debug)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"Return a pretty formatted representation of self. \"\n    s = \"\"\n    if self.iscanonical:\n        s += \"(canonical)\"\n    else:\n        s += \"(non-canonical)\"\n    if debug:\n        s += \": \" + self.name\n        s += \" \" + self.version\n        for p in self.properties:\n            s += \" \" + p\n        s += \" \" + str(self.dependencies)\n    else:\n        s += \": \" + self.name + \" (\" + self.version + \")\"\n        for p in self.properties:\n            s += \" \" + p\n        for p in self.dependencies:\n            s += \" \" + p\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + x for x in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    output = \"\"\n    if self.iscanonical:\n        output += \"%scanonical %s\\n\" % (\"  \" * indent, self.name)\n    else:\n        output += \"%s%s\\n\" % (\"  \" * indent, self.name)\n\n    if debug:\n        for k, v in sorted(self.attributes.items()):\n            output += \"%s %s\\n\" % (\"  \" * (indent + 1), k)\n            output += v.pretty(indent + 3, debug)\n            output += \"%s %s\\n\" % (\"  \" * (indent + 1), v.pretty(indent + 3, debug))\n\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    r\"\"\"Return a pretty formatted representation of self.        \n    \"\"\"\n    s = \"\"\n    if self.iscanonical:\n        s = s + \"\\n\" + indent * \"  \" + \"Canonical: \" + self.__class__.__name__\n        s += \"\\n\" + indent * \"  \" + \": \" + self.iscanonical\n    else:\n        s = s + \"\\n\" + indent * \"  \" + \"Class: \" + self.__class__.__name__\n        s += \"\\n\" + indent * \"  \" + \": \" + self.__class__.__name__\n    s += \"\\n\" + indent * \"  \" + \"Variables: \" + str(self.variables)\n    if debug:\n        for k, v in self.variables.items():\n            s += \"\\n\" + indent * \"  \" + k + \": \" + str(v)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    string = \"\"\n    if self.iscanonical:\n        string = string + \"[\" + self.canonical + \"]\"\n    else:\n        string = string + \"[\" + self.name + \"]\"\n    if indent!= 0:\n        string = string + \" \" * indent\n    string = string + \"(\" + self.repr(debug) + \")\"\n    return string\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    args = [arg for arg in args if arg not in self.args]\n    if len(args) == 1:\n        return args[0] & self.dual\n    elif len(args) == 2:\n        return args[0] | self.dual\n    else:\n        return And(*args) & self.dual\n", "def absorb(self, args):\n    if len(args) > 1:\n        raise ValueError(\"Only one expression can be absorbted at a time\")\n\n    if len(args) == 1:\n        return args[0] ^ self.dual\n\n    return self.dual\n", "def absorb(self, args):\n    if self.dual is None:\n        return [arg | self.dual for arg in args]\n    return [arg & self.dual for arg in args]\n", "def absorb(self, args):\n    args = list(args)\n    for i in range(len(args) - 1):\n        args[i] = self.dual.absorb(args[i])\n    return args\n", "def absorb(self, args):\n    return [arg - self.dual for arg in args]\n", "def absorb(self, args):\n    return [a | b for a, b in zip(args[:-1], args[1:])]\n", "def absorb(self, args):\n    args = list(args)\n\n    for i in reversed(range(len(args))):\n        args[i] = self.dual.absorb(args[i])\n\n    return args\n", "def absorb(self, args):\n    args = list(args)\n\n    for i in range(len(args)):\n        if args[i].args[0] is self.dual:\n            args[i] = args[i].args[1]\n        else:\n            args[i] = self.dual.args[0] & args[i]\n\n    return args\n", "def absorb(self, args):\n    if len(args) == 1:\n        return args[0]\n\n    result = []\n    for arg in args:\n        if arg.args[0] is not self.args[0]:\n            result.append(arg.args[0])\n        if arg.args[1] is not self.args[1]:\n            result.append(~arg)\n\n    return Expression(*result)\n", "def absorb(self, args):\n    a, b = args\n    if isinstance(self.dual, SymmetricDual) and isinstance(b.dual, SymmetricDual):\n        return [a & b]\n    elif isinstance(self.dual, (Negative, SymmetricDual)) and isinstance(b.dual, Negative):\n        return [~a & b]\n    else:\n        return [a & b] + [~a & ~b]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    args = [arg for arg in args if arg not in self.args]\n    if len(args) == 1:\n        return args[0] & self.dual\n    elif len(args) == 2:\n        return args[0] | self.dual\n    else:\n        return And(*args) & self.dual\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if len(args) > 1:\n        raise ValueError(\"Only one expression can be absorbted at a time\")\n\n    if len(args) == 1:\n        return args[0] ^ self.dual\n\n    return self.dual\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if self.dual is None:\n        return [arg | self.dual for arg in args]\n    return [arg & self.dual for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i in range(len(args) - 1):\n        args[i] = self.dual.absorb(args[i])\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg - self.dual for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [a | b for a, b in zip(args[:-1], args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n\n    for i in reversed(range(len(args))):\n        args[i] = self.dual.absorb(args[i])\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n\n    for i in range(len(args)):\n        if args[i].args[0] is self.dual:\n            args[i] = args[i].args[1]\n        else:\n            args[i] = self.dual.args[0] & args[i]\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if len(args) == 1:\n        return args[0]\n\n    result = []\n    for arg in args:\n        if arg.args[0] is not self.args[0]:\n            result.append(arg.args[0])\n        if arg.args[1] is not self.args[1]:\n            result.append(~arg)\n\n    return Expression(*result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    a, b = args\n    if isinstance(self.dual, SymmetricDual) and isinstance(b.dual, SymmetricDual):\n        return [a & b]\n    elif isinstance(self.dual, (Negative, SymmetricDual)) and isinstance(b.dual, Negative):\n        return [~a & b]\n    else:\n        return [a & b] + [~a & ~b]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n\n        def wrapper(*args, **kwargs):\n            self.registry[hook].append((func, args, kwargs))\n        return wrapper\n    return decorator\n", "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "def on(self, hook):\n\n    def register_listener(callback):\n        if hook not in self.registry:\n            self.registry[hook] = callback\n        return callback\n\n    return register_listener\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        if listener is None:\n            self.registry.remove(hook)\n        else:\n            self.registry.add(hook, listener)\n    return register_listener\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = listener\n        return listener\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n\n        def wrapper(*args, **kwargs):\n            self.registry[hook].append((func, args, kwargs))\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def register_listener(callback):\n        if hook not in self.registry:\n            self.registry[hook] = callback\n        return callback\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        if listener is None:\n            self.registry.remove(hook)\n        else:\n            self.registry.add(hook, listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = listener\n        return listener\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"host\": \"localhost\",\n            \"port\": etcd_port,\n            \"ssl\": False,\n            \"certificate\": \"\",\n            \"private\": False,\n            \"secure\": False,\n            \"certificate_chain\": \"\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": None,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"secure\": False,\n        \"allow_reconnect\": True,\n        \"reconnect_interval\": 10,\n        \"ttl\": 30\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"expiration\": None,\n        \"renewal_period\": None,\n        \"version\": None,\n        \"authorizations\": {},\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": \"\",\n        \"api_version\": \"v1\",\n        \"endpoint\": \"http://{}:{}\".format(etcd_host, etcd_port),\n        \"auth_mode\": \"client\",\n        \"retries\": 1,\n        \"timeout\": 300,\n        \"keepalive\": 60,\n        \"cert_path\": \"/etc/etcd/client.crt\",\n        \"key_path\": \"/etc/etcd/client.key\",\n        \"cert_password\": \"\",\n        \"key_password\": \"\",\n        \"retry_timeout\": 5,\n        \"keep_alive\": 300,\n        \"cert_reqs\": \"CERT_NONE\",\n        \"key_reqs\": \"CERT_NONE\",\n        \"version\": \"v1\",\n        \"cacert\": \"/etc/etcd/ca.crt\",\n        \"cert_reqs\": \"CERT_NONE\",\n    }\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"host\": \"localhost\",\n            \"port\": etcd_port,\n            \"ssl\": False,\n            \"certificate\": \"\",\n            \"private\": False,\n            \"secure\": False,\n            \"certificate_chain\": \"\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": None,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"secure\": False,\n        \"allow_reconnect\": True,\n        \"reconnect_interval\": 10,\n        \"ttl\": 30\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"expiration\": None,\n        \"renewal_period\": None,\n        \"version\": None,\n        \"authorizations\": {},\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": \"\",\n        \"api_version\": \"v1\",\n        \"endpoint\": \"http://{}:{}\".format(etcd_host, etcd_port),\n        \"auth_mode\": \"client\",\n        \"retries\": 1,\n        \"timeout\": 300,\n        \"keepalive\": 60,\n        \"cert_path\": \"/etc/etcd/client.crt\",\n        \"key_path\": \"/etc/etcd/client.key\",\n        \"cert_password\": \"\",\n        \"key_password\": \"\",\n        \"retry_timeout\": 5,\n        \"keep_alive\": 300,\n        \"cert_reqs\": \"CERT_NONE\",\n        \"key_reqs\": \"CERT_NONE\",\n        \"version\": \"v1\",\n        \"cacert\": \"/etc/etcd/ca.crt\",\n        \"cert_reqs\": \"CERT_NONE\",\n    }\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with pytz, this is always the case.\n        return dt\n\n    return dt.astimezone(self._tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with pytz, this is always the case.\n        return dt\n\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(days=self.day,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         months=self.months,\n                         weekday=self.weekday,\n                         daysinmonth=self.daysinmonth,\n                         yearsinyear=self.yearsinyear,\n                         microsecondsinmicrosecond=self.microsecondsinmicrosecond,\n                         leapdays=self.leapdays,\n                         daysinyear=self.daysinyear,\n                         microsecondsinmicrosecond=self.microsecondsinmicrosecond)\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, months1=self.months1,\n                         days2=self.days2, hours2=self.hours2,\n                         hours1=self.hours1, minutes2=self.minutes2,\n                         minutes1=self.minutes1, seconds", "def normalized(self):\n    return relativedelta(days=self.day,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weeks=self.weeks,\n                         days_delta=self.days_delta,\n                         hours_delta=self.hours_delta,\n                         minutes_delta=self.minutes_delta,\n                         microseconds_delta=self.microseconds_delta,\n                         leapdays=self.leapdays)\n", "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        months=self.months,\n        monthdelta=self.monthdelta,\n        daysoffset=self.daysoffset,\n        hours=self.hour,\n        hourdelta=self.hourdelta,\n        daysoffset=self.daysoffset,\n        minutes=self.minute,\n        minutedelta=self.minutedelta,\n        seconds=self.second,\n        seconddelta=self.seconddelta,\n        microseconds=self.microsecond,\n        leapdays=self.leapdays,\n        years=self.years,\n        year=self.year,\n        weekday=self.weekday,\n        weekofyear=self.weekofyear,\n        dayofweek=self.dayofweek,\n        dayofyear=self.dayofyear,\n        microseconds=self.microsecond,\n        leapseconds=self.leapseconds,\n        microsecondofsecond=self.microsecondofsecond,\n        milliseconds=self.milliseconds,\n        millisecond=self.millisecond,\n        microsecondofmillisecond=self.microsecondofmillisecond,\n        nan", "def normalized(self):\n    return relativedelta(self.days, self.months, self.days, self.hours,\n                         self.minutes, self.microseconds, self.leapdays,\n                         self.years, self.weekday, self.year, self.seconds)\n", "def normalized(self):\n\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weeks=self.weeks,\n                         days_from_zero=self.days_from_zero)\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weeks=self.weeks, days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year, leapdays=self.leapdays)\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         weeks2=self.weeks2, days2=self.days2,\n                         hours2=self.hours2, minutes2=self.minutes2,\n                         seconds2=self.seconds2,\n                         microseconds2=self.microseconds2,\n                         leapdays=self.leapdays)\n", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, days2=self.days2,\n                         days1=self.days1, hours2=self.hours1,\n                         hours1=self.hours1, minutes2=self.minutes1,\n                         minutes1=self.minutes1, microsecond", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, months1=self.months1,\n                         days2=self.days2, hours2=self.hours2,\n                         minutes2=self.minutes2, seconds2=self.seconds2)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(days=self.day,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         months=self.months,\n                         weekday=self.weekday,\n                         daysinmonth=self.daysinmonth,\n                         yearsinyear=self.yearsinyear,\n                         microsecondsinmicrosecond=self.microsecondsinmicrosecond,\n                         leapdays=self.leapdays,\n                         daysinyear=self.daysinyear,\n                         microsecondsinmicrosecond=self.microsecondsinmicrosecond)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, months1=self.months1,\n                         days2=self.days2, hours2=self.hours2,\n                         hours1=self.hours1, minutes2=self.minutes2,\n                         minutes1=self.minutes1, seconds", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weeks=self.weeks,\n                         days_delta=self.days_delta,\n                         hours_delta=self.hours_delta,\n                         minutes_delta=self.minutes_delta,\n                         microseconds_delta=self.microseconds_delta,\n                         leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        months=self.months,\n        monthdelta=self.monthdelta,\n        daysoffset=self.daysoffset,\n        hours=self.hour,\n        hourdelta=self.hourdelta,\n        daysoffset=self.daysoffset,\n        minutes=self.minute,\n        minutedelta=self.minutedelta,\n        seconds=self.second,\n        seconddelta=self.seconddelta,\n        microseconds=self.microsecond,\n        leapdays=self.leapdays,\n        years=self.years,\n        year=self.year,\n        weekday=self.weekday,\n        weekofyear=self.weekofyear,\n        dayofweek=self.dayofweek,\n        dayofyear=self.dayofyear,\n        microseconds=self.microsecond,\n        leapseconds=self.leapseconds,\n        microsecondofsecond=self.microsecondofsecond,\n        milliseconds=self.milliseconds,\n        millisecond=self.millisecond,\n        microsecondofmillisecond=self.microsecondofmillisecond,\n        nan", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(self.days, self.months, self.days, self.hours,\n                         self.minutes, self.microseconds, self.leapdays,\n                         self.years, self.weekday, self.year, self.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weeks=self.weeks,\n                         days_from_zero=self.days_from_zero)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour, minutes=self.minute,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weeks=self.weeks, days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year, leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         weeks2=self.weeks2, days2=self.days2,\n                         hours2=self.hours2, minutes2=self.minutes2,\n                         seconds2=self.seconds2,\n                         microseconds2=self.microseconds2,\n                         leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, days2=self.days2,\n                         days1=self.days1, hours2=self.hours1,\n                         hours1=self.hours1, minutes2=self.minutes1,\n                         minutes1=self.minutes1, microsecond", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years, months=self.months,\n                         weekday=self.weekday, years2=self.years2,\n                         months2=self.months2, weeks=self.weeks,\n                         months2=self.months2, years2=self.years2,\n                         months1=self.months1, weeks1=self.weeks1,\n                         weeks2=self.weeks2, months1=self.months1,\n                         days2=self.days2, hours2=self.hours2,\n                         minutes2=self.minutes2, seconds2=self.seconds2)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def wrapper(self, dt_or_tz):\n        if isinstance(dt_or_tz, datetime):\n            dt_or_tz = dt_or_tz.astimezone(self._tzinfo)\n        return namefunc(self, dt_or_tz)\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode(\"utf-8\"))\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # tzname() returns a triple (year, month, day, hour, minute, second)\n            # with the year the day and the month the day was born, and the\n            # day the month was born. We want the year the day was born, and\n            # the day the month was born.\n            parts = name.split(\"/\")\n            year = int(parts[0])\n            day = int(parts[1])\n            hour = int(parts[2])\n            minute = int(parts[3])\n            second = int(parts[4])\n            name = \"/\".join((year, day, hour, minute, second))\n        return name\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    def wrapper(self, name=None):\n        name = name or self.name\n        return namefunc(name)\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    if PY2:\n        @wraps(namefunc)\n        def wrapper(self):\n            name = namefunc(self)\n            if name is not None:\n                return name\n        return wrapper\n    else:\n        return namefunc\n", "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # convert to bytes if necessary\n            if isinstance(name, bytes):\n                name = name.decode('utf-8', errors='replace')\n        return name\n    return _wrapper\n", "def tzname_in_python2(namefunc):\n    name = namefunc()\n\n    if name is not None:\n        def _fix(x, t):\n            if x.tzinfo is None:\n                x = x.encode('utf-8')\n            return x.tzname()\n\n        name = _fix(name, 'UTC')\n        name = _fix(name, 'CEST')\n    return name\n", "def tzname_in_python2(namefunc):\n\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            self.name = name\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, dt_or_tz):\n        if isinstance(dt_or_tz, datetime):\n            dt_or_tz = dt_or_tz.astimezone(self._tzinfo)\n        return namefunc(self, dt_or_tz)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode(\"utf-8\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # tzname() returns a triple (year, month, day, hour, minute, second)\n            # with the year the day and the month the day was born, and the\n            # day the month was born. We want the year the day was born, and\n            # the day the month was born.\n            parts = name.split(\"/\")\n            year = int(parts[0])\n            day = int(parts[1])\n            hour = int(parts[2])\n            minute = int(parts[3])\n            second = int(parts[4])\n            name = \"/\".join((year, day, hour, minute, second))\n        return name\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def wrapper(self, name=None):\n        name = name or self.name\n        return namefunc(name)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if PY2:\n        @wraps(namefunc)\n        def wrapper(self):\n            name = namefunc(self)\n            if name is not None:\n                return name\n        return wrapper\n    else:\n        return namefunc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            # convert to bytes if necessary\n            if isinstance(name, bytes):\n                name = name.decode('utf-8', errors='replace')\n        return name\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    name = namefunc()\n\n    if name is not None:\n        def _fix(x, t):\n            if x.tzinfo is None:\n                x = x.encode('utf-8')\n            return x.tzname()\n\n        name = _fix(name, 'UTC')\n        name = _fix(name, 'CEST')\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            self.name = name\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(os.path.abspath(__file__)), verbose=False)\n", "def get_versions():\n    return get_config().get('versions', {})\n", "def get_versions():\n    return get_config()[\"versions\"]\n", "def get_versions():\n    return get_config()[\"versions\"]\n", "def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(os.path.abspath(__file__)), verbose=True)\n", "def get_versions():\n    return versions_from_parentdir(os.path.abspath(os.curdir), os.path.abspath(os.pardir), verbose=False)\n", "def get_versions():\n    return versions_from_parentdir(\n        os.path.dirname(os.path.abspath(__file__)),\n        \"detectem\",\n        verbose=True,\n    )\n", "def get_versions():\n    return get_config()[\"versions\"]\n", "def get_versions():\n    return versions_from_parentdir(os.path.dirname(os.path.abspath(__file__)), verbose=True)\n", "def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(__file__), verbose=True)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(os.path.abspath(__file__)), verbose=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config().get('versions', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config()[\"versions\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config()[\"versions\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(os.path.abspath(__file__)), verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir(os.path.abspath(os.curdir), os.path.abspath(os.pardir), verbose=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir(\n        os.path.dirname(os.path.abspath(__file__)),\n        \"detectem\",\n        verbose=True,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return get_config()[\"versions\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir(os.path.dirname(os.path.abspath(__file__)), verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return versions_from_parentdir(\".\", root=os.path.dirname(__file__), verbose=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/\" + pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/\" + pieces[\"format\"]\n    else:\n        # If no closest-tag present, we will use the entire document\n        rendered = pieces[\"source\"]\n\n    if pieces[\"level\"] or pieces[\"orchestration\"]:\n        rendered += \"/\" + pieces[\"level\"]\n        if pieces[\"orchestration\"]:\n            rendered += \"/orchestration\"\n\n    if pieces[\"date\"]:\n        rendered += \"/\" + pieces[\"date\"]\n        if pieces[\"date-parts\"]:\n            rendered += \"/\" + \"/\".join(pieces[\"date-parts\"])\n\n    if pieces[\"note\"", "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/\" + pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/\" + pieces[\"dirty\"]\n    else:\n        # We shouldn't get here without a closest-tag\n        return \"<!-- no closest-tag -->\"\n\n    if pieces[\"short\"]:\n        rendered += \" (%s)\" % pieces[\"short\"]\n\n    return style.format(rendered)\n", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/%s\" % pieces[\"short\"]\n    else:\n        # If we're rendering git describe (pep440 or pep440), then\n        # we should add a.post suffix to indicate that this is a\n        # release notes release.\n        if pieces[\"distance\"]:\n            rendered = \"%d.post\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".post\"\n        rendered += \"/%s\" % pieces[\"short\"]\n\n    if style == \"pep440\" or style == \"pep440-post\":\n        rendered += \"-post\"\n", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_p", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/\" + pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/\" + pieces[\"format\"]\n    else:\n        # If no closest-tag present, we will use the entire document\n        rendered = pieces[\"source\"]\n\n    if pieces[\"level\"] or pieces[\"orchestration\"]:\n        rendered += \"/\" + pieces[\"level\"]\n        if pieces[\"orchestration\"]:\n            rendered += \"/orchestration\"\n\n    if pieces[\"date\"]:\n        rendered += \"/\" + pieces[\"date\"]\n        if pieces[\"date-parts\"]:\n            rendered += \"/\" + \"/\".join(pieces[\"date-parts\"])\n\n    if pieces[\"note\"", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/\" + pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/\" + pieces[\"dirty\"]\n    else:\n        # We shouldn't get here without a closest-tag\n        return \"<!-- no closest-tag -->\"\n\n    if pieces[\"short\"]:\n        rendered += \" (%s)\" % pieces[\"short\"]\n\n    return style.format(rendered)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \"/%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \"/dirty\"\n            rendered += \"/%s\" % pieces[\"short\"]\n    else:\n        # If we're rendering git describe (pep440 or pep440), then\n        # we should add a.post suffix to indicate that this is a\n        # release notes release.\n        if pieces[\"distance\"]:\n            rendered = \"%d.post\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".post\"\n        rendered += \"/%s\" % pieces[\"short\"]\n\n    if style == \"pep440\" or style == \"pep440-post\":\n        rendered += \"-post\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_p", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"aws_s3_auth_server_client/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/datalad_synthetics/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_pnl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"django_select2/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"wnl_results/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"node_tree_exporter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_src/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"aws_s3_auth_server_client/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/datalad_synthetics/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_pnl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"django_select2/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"wnl_results/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"node_tree_exporter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_src/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = self.root_fs.validate_hierarchy(validate_objects, check_digests, show_warnings)\n    return num_objects, good_objects, self.lax_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.validate_digests\n    objects_found = self.root_fs.listdir(self.root_fs.root)\n    num_objects = len(objects_found)\n\n    if validate_objects:\n        for obj_path in objects_found:\n            obj_path = self.root_fs.join(obj_path)\n            try:\n                self.root_fs.stat(obj_path)\n            except OSError:\n                raise ValueError(\n                    'Object path %s not found on FS', obj_path)\n\n    if check_digests:\n        for digest_path in self.lax_digests:\n            digest_path = self.root_fs.join(digest_path)\n            with self.root_fs.open(digest_path, 'r') as f:\n                while True:\n                    buff = f.read(1024)\n          ", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = \\\n        self.root_fs.validate_storage_hierarchy(validate_objects, check_digests, show_warnings)\n    return num_objects, good_objects, self.lax_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = len(self.root_fs.list_objects())\n\n    if validate_objects:\n        for path, _ in self.root_fs.list_object_metadata():\n            if path in self.lax_digests:\n                continue\n            self.lax_digests[path] = utils.sha256_digest(path)\n\n    if check_digests:\n        self.check_digests()\n\n    return num_objects, good_objects, self.lax_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    try:\n        self.root_fs.validate_storage_roots()\n    except errors.DiskSpaceError as e:\n        raise errors.InvalidStorageError(str(e))\n\n    self.root_fs.validate_object_tree()\n    self.root_fs.validate_storage_digest()\n\n    return self.root_fs.validate_objects(validate_objects=validate_objects,\n                                        check_digests=check_digests,\n                                        show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = validate_storage_hierarchy(\n        self.root_fs,\n        self.lax_digests,\n        validate_objects=validate_objects,\n        check_digests=check_digests,\n        show_warnings=show_warnings,\n    )\n    return num_objects, good_objects, self.lax_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.root_fs = validate_storage_root(\n        self.root_fs, validate_objects=validate_objects,\n        check_digests=check_digests, show_warnings=show_warnings)\n\n    return num_objects, good_objects, self.root_fs\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_objects = self.root_fs.listdir('/')\n    if not validate_objects:\n        return 0, 0\n    validated_objects = 0\n    validated_good_objects = 0\n    for root_object in root_objects:\n        validated_objects += 1\n        self.root_fs.stat(root_object)\n        if check_digests:\n            validated_good_objects += self._check_digests(root_object)\n        if show_warnings:\n            logger.info('Validating %s' % root_object)\n            for object_path in self.root_fs.listdir(root_object):\n                logger.warning('%s/%s' % (root_object, object_path))\n                self.root_fs.stat(root_object + '/' + object_path)\n            logger.warning('')\n\n    if validated_objects > validated_good_objects:\n        return validated_objects, validated_good_objects\n    else:\n        return validated_good_objects, validated_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = {}\n    self.object_paths = []\n\n    if validate_objects:\n        validator = ObjectValidator(self.root_fs)\n        validator.validate_all()\n        self.lax_digests = validator.lax_digests\n\n    if check_digests:\n        validator = DigestValidator(self.root_fs)\n        validator.validate()\n        self.check_digests()\n\n    return self.lax_digests, self.object_paths\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = self.root_fs.validate_hierarchy(validate_objects=validate_objects,\n                                                                              check_digests=check_digests,\n                                                                                  show_warnings=show_warnings)\n    return num_objects, good_objects, self.lax_digests\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = self.root_fs.validate_hierarchy(validate_objects, check_digests, show_warnings)\n    return num_objects, good_objects, self.lax_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.validate_digests\n    objects_found = self.root_fs.listdir(self.root_fs.root)\n    num_objects = len(objects_found)\n\n    if validate_objects:\n        for obj_path in objects_found:\n            obj_path = self.root_fs.join(obj_path)\n            try:\n                self.root_fs.stat(obj_path)\n            except OSError:\n                raise ValueError(\n                    'Object path %s not found on FS', obj_path)\n\n    if check_digests:\n        for digest_path in self.lax_digests:\n            digest_path = self.root_fs.join(digest_path)\n            with self.root_fs.open(digest_path, 'r') as f:\n                while True:\n                    buff = f.read(1024)\n          ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = \\\n        self.root_fs.validate_storage_hierarchy(validate_objects, check_digests, show_warnings)\n    return num_objects, good_objects, self.lax_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = len(self.root_fs.list_objects())\n\n    if validate_objects:\n        for path, _ in self.root_fs.list_object_metadata():\n            if path in self.lax_digests:\n                continue\n            self.lax_digests[path] = utils.sha256_digest(path)\n\n    if check_digests:\n        self.check_digests()\n\n    return num_objects, good_objects, self.lax_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    try:\n        self.root_fs.validate_storage_roots()\n    except errors.DiskSpaceError as e:\n        raise errors.InvalidStorageError(str(e))\n\n    self.root_fs.validate_object_tree()\n    self.root_fs.validate_storage_digest()\n\n    return self.root_fs.validate_objects(validate_objects=validate_objects,\n                                        check_digests=check_digests,\n                                        show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = validate_storage_hierarchy(\n        self.root_fs,\n        self.lax_digests,\n        validate_objects=validate_objects,\n        check_digests=check_digests,\n        show_warnings=show_warnings,\n    )\n    return num_objects, good_objects, self.lax_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.root_fs = validate_storage_root(\n        self.root_fs, validate_objects=validate_objects,\n        check_digests=check_digests, show_warnings=show_warnings)\n\n    return num_objects, good_objects, self.root_fs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_objects = self.root_fs.listdir('/')\n    if not validate_objects:\n        return 0, 0\n    validated_objects = 0\n    validated_good_objects = 0\n    for root_object in root_objects:\n        validated_objects += 1\n        self.root_fs.stat(root_object)\n        if check_digests:\n            validated_good_objects += self._check_digests(root_object)\n        if show_warnings:\n            logger.info('Validating %s' % root_object)\n            for object_path in self.root_fs.listdir(root_object):\n                logger.warning('%s/%s' % (root_object, object_path))\n                self.root_fs.stat(root_object + '/' + object_path)\n            logger.warning('')\n\n    if validated_objects > validated_good_objects:\n        return validated_objects, validated_good_objects\n    else:\n        return validated_good_objects, validated_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = {}\n    self.object_paths = []\n\n    if validate_objects:\n        validator = ObjectValidator(self.root_fs)\n        validator.validate_all()\n        self.lax_digests = validator.lax_digests\n\n    if check_digests:\n        validator = DigestValidator(self.root_fs)\n        validator.validate()\n        self.check_digests()\n\n    return self.lax_digests, self.object_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects, self.lax_digests = self.root_fs.validate_hierarchy(validate_objects=validate_objects,\n                                                                              check_digests=check_digests,\n                                                                                  show_warnings=show_warnings)\n    return num_objects, good_objects, self.lax_digests\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    self.root = {}\n    self.layout_file = None\n    self.declaration_tvalue = None\n", "def initialize(self):\n    self.root = OCFLRoot(self.root_fs, self.declaration_tvalue)\n    self.root.initialize()\n    self.layout_file = open(self.layout_file.name, 'w')\n    self.layout_file.write(json.dumps(self.root.to_dict()))\n    self.layout_file.close()\n", "def initialize(self):\n    self.root = self.root_fs.mkdir(self.layout_file)\n    self.declaration_tvalue = self.root_fs.join(\n        self.layout_file, 'declaration.tvalue')\n    self.declaration_tvalue.write(\n        json.dumps({}, indent=2, sort_keys=True), encoding='utf-8')\n    self.declaration_tvalue.chmod(0o644)\n", "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n    self.root_fs = self.root\n    self.declaration_tvalue = None\n", "def initialize(self):\n    self.root = self.root_fs.opendir(self.layout_file)\n    self.layout = None\n    self.declaration_tvalue = None\n", "def initialize(self):\n    self.root = {}\n    self.root_fs = None\n    self.declaration_tvalue = ''\n    self.disposition = 'initialize'\n    self.layout_file = None\n    self.layout_file_name = None\n", "def initialize(self):\n    self.root = {}\n    self.root_fs = FileSystem(self.root_fs.get_path())\n", "def initialize(self):\n    self.root = {}\n    self.layout_file = None\n    self.declaration_tvalue = None\n    self.disposition = \"WRITE_APPEND\"\n", "def initialize(self):\n    self.root = self.root_fs.create_directory(self.layout_file.path)\n    self.root_fs.create_file(self.layout_file.path, contents=json.dumps(self.declaration_tvalue))\n", "def initialize(self):\n    super().initialize()\n    self.root_fs = self.root\n    self.layout_file = self.layout.create_layout(self.root_fs)\n    self.declaration_tvalue = None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    self.root = {}\n    self.layout_file = None\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = OCFLRoot(self.root_fs, self.declaration_tvalue)\n    self.root.initialize()\n    self.layout_file = open(self.layout_file.name, 'w')\n    self.layout_file.write(json.dumps(self.root.to_dict()))\n    self.layout_file.close()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = self.root_fs.mkdir(self.layout_file)\n    self.declaration_tvalue = self.root_fs.join(\n        self.layout_file, 'declaration.tvalue')\n    self.declaration_tvalue.write(\n        json.dumps({}, indent=2, sort_keys=True), encoding='utf-8')\n    self.declaration_tvalue.chmod(0o644)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n    self.root_fs = self.root\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = self.root_fs.opendir(self.layout_file)\n    self.layout = None\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = {}\n    self.root_fs = None\n    self.declaration_tvalue = ''\n    self.disposition = 'initialize'\n    self.layout_file = None\n    self.layout_file_name = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = {}\n    self.root_fs = FileSystem(self.root_fs.get_path())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = {}\n    self.layout_file = None\n    self.declaration_tvalue = None\n    self.disposition = \"WRITE_APPEND\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = self.root_fs.create_directory(self.layout_file.path)\n    self.root_fs.create_file(self.layout_file.path, contents=json.dumps(self.declaration_tvalue))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    super().initialize()\n    self.root_fs = self.root\n    self.layout_file = self.layout.create_layout(self.root_fs)\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if version is None:\n        return ''\n\n    if re.match(r'^(0[1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3])$', version):\n        return version\n\n    return 'v{0}'.format(version)\n", "def next_version(version):\n    m = re.match(r\"^([0-9]+\\.[0-9]+\\.[0-9]+)$\", version)\n    return \"0\" if m is None else m.group(1)\n", "def next_version(version):\n    m = re.match(r'^v(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return int(m.group(1)) + 1\n", "def next_version(version):\n    m = re.match(r'^(\\d+)(-(\\d+))?$', version)\n    if not m:\n        raise ValueError('invalid version %r' % version)\n    return m.group(1) + m.group(2)\n", "def next_version(version):\n    m = re.match(r\"^(\\d+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    number = int(m.group(1))\n    if number > 9:\n        raise ValueError(\"Invalid version %s\" % version)\n    return \"v%s\" % number\n", "def next_version(version):\n    version = re.sub(r'^v[0-9]+$', '', version)\n    version = re.sub(r'^v(\\d+)$', '', version)\n    return version\n", "def next_version(version):\n    match = re.match(r'^(\\d+)$', version)\n    if match:\n        return int(match.group(1)) + 1\n    return 1\n", "def next_version(version):\n    m = re.match(r\"^(\\d+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return int(m.group(1)) + 1\n", "def next_version(version):\n    if version:\n        return re.match(r'^v(\\d+)$', version).group(1)\n", "def next_version(version):\n    m = re.match(r'^(\\d+)\\.(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return m.group(1) + '.' + m.group(2)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if version is None:\n        return ''\n\n    if re.match(r'^(0[1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3])$', version):\n        return version\n\n    return 'v{0}'.format(version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r\"^([0-9]+\\.[0-9]+\\.[0-9]+)$\", version)\n    return \"0\" if m is None else m.group(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r'^v(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return int(m.group(1)) + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r'^(\\d+)(-(\\d+))?$', version)\n    if not m:\n        raise ValueError('invalid version %r' % version)\n    return m.group(1) + m.group(2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r\"^(\\d+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    number = int(m.group(1))\n    if number > 9:\n        raise ValueError(\"Invalid version %s\" % version)\n    return \"v%s\" % number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    version = re.sub(r'^v[0-9]+$', '', version)\n    version = re.sub(r'^v(\\d+)$', '', version)\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    match = re.match(r'^(\\d+)$', version)\n    if match:\n        return int(match.group(1)) + 1\n    return 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r\"^(\\d+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return int(m.group(1)) + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version:\n        return re.match(r'^v(\\d+)$', version).group(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r'^(\\d+)\\.(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return m.group(1) + '.' + m.group(2)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating version inventories...\")\n    inv_files = []\n    for version_dir in version_dirs:\n        inv_files.extend(self.obj_fs.listdir(version_dir))\n\n    if inv_files and self.digest_algorithm == self.digest_type:\n        return\n\n    self.log.error(\"Version inventories are of different type (%s), \"\n                   \"which is required by %s, but are not compatible\" %\n                   (self.digest_type, self.digest_algorithm))\n    raise BlobException(\"Version inventories are of different type (%s)\" %\n                        self.digest_type)\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError(\"Subclasses should implement this\")\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating version inventories...\")\n    inv_files = []\n    for version_dir in version_dirs:\n        inv_files.extend(self.obj_fs.listdir(version_dir))\n\n    if inv_files and self.digest_algorithm == self.digest_type:\n        return\n\n    self.log.error(\"Version inventories are of different type (%s), \"\n                   \"which is required by %s, but are not compatible\" %\n                   (self.digest_type, self.digest_algorithm))\n    raise BlobException(\"Version inventories are of different type (%s)\" %\n                        self.digest_type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError(\"Subclasses should implement this\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # I can't think of any better way of doing this, but this is mostly\n    # used to determine the type of file or directory we want.\n    if path.startswith('../'):\n        return 'root'\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'object'\n    else:\n        return ''\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    if isfile(path):\n        return 'object'\n    if isdir(path):\n        return 'file'\n    if '0=*' in path:\n        return 'root'\n    return ''\n", "def find_path_type(path):\n    if isfile(path):\n        return 'file'\n    elif isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '*' in path:\n        return 'object'\n\n    if os.path.isdir(path):\n        return 'directory'\n\n    if os.path.isfile(path):\n        return 'file'\n\n    return 'unknown'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif '0=*' in os.listdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    for name in ('file', 'object', 'root'):\n        if path.startswith(\"0=\" + name):\n            return \"root\"\n    for name in ('dir','src', 'dst'):\n        if path.startswith(\"0=\" + name):\n            return \"object\"\n    if path.endswith('/'):\n        return \"file\"\n    return \"\"\n", "def find_path_type(path):\n    if path.endswith('/'):\n        return 'root'\n    elif path.endswith('\\\\'):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return '?'\n", "def find_path_type(path):\n    if path == '/':\n        return 'root'\n    elif path.startswith('/0/'):\n        return 'object'\n    elif path.startswith('/0?/'):\n        return 'file'\n    else:\n        return'string'\n", "def find_path_type(path):\n    if path.startswith('0='):\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return'string'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # I can't think of any better way of doing this, but this is mostly\n    # used to determine the type of file or directory we want.\n    if path.startswith('../'):\n        return 'root'\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'object'\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    if isfile(path):\n        return 'object'\n    if isdir(path):\n        return 'file'\n    if '0=*' in path:\n        return 'root'\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if isfile(path):\n        return 'file'\n    elif isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '*' in path:\n        return 'object'\n\n    if os.path.isdir(path):\n        return 'directory'\n\n    if os.path.isfile(path):\n        return 'file'\n\n    return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif '0=*' in os.listdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for name in ('file', 'object', 'root'):\n        if path.startswith(\"0=\" + name):\n            return \"root\"\n    for name in ('dir','src', 'dst'):\n        if path.startswith(\"0=\" + name):\n            return \"object\"\n    if path.endswith('/'):\n        return \"file\"\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path.endswith('/'):\n        return 'root'\n    elif path.endswith('\\\\'):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return '?'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path == '/':\n        return 'root'\n    elif path.startswith('/0/'):\n        return 'object'\n    elif path.startswith('/0?/'):\n        return 'file'\n    else:\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path.startswith('0='):\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params['bug_ids[]'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params[\"bug_ids\"] = bug_ids\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if 'bugzilla_product_component' in params:\n        params['product_components'] = params['bugzilla_product_component']\n    if 'bugzilla_assignee' in params:\n        params['assignee'] = params['bugzilla_assignee']\n    if 'bugzilla_max_bugs' in params:\n        params['max_bugs'] = params['bugzilla_max_bugs']\n    if 'bugzilla_needinfo' in params:\n        params['needinfo'] = params['bugzilla_needinfo']\n    if 'bugzilla_needkeywords' in params:\n        params['needkeywords'] = params['bugzilla_needkeywords']\n    if 'bugzilla_has_keywords' in params:\n        params['has_keywords'] = params['bugzilla_has_keywords']\n    if 'bugzilla_has_priority' in params:\n        params['has_priority'] = params['bugzilla_has_priority']\n    if 'bugzilla_has_status' in params:\n        params['has_status'] = params['bugzilla_has_status']\n    if 'bugzill", "def amend_bzparams(self, params, bug_ids):\n    if not params.has_key('action'):\n        params['action'] = 'update'\n    params['ids'] = ','.join(str(i) for i in bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not bug_ids:\n        return\n\n    amended_params = {}\n    for k, v in params.items():\n        if k in ('bugzilla', 'product_component', 'assignee', 'flags'):\n            amended_params[k] = v\n        elif k in ('max_occurrences','max_retries', 'launchpad_id'):\n            amended_params[k] = int(v)\n        elif k in ('priority', 'assignee_email'):\n            amended_params[k] = v\n        elif k in ('all_include_fields'):\n            amended_params[k] = True\n        elif k in ('needinfo'):\n            amended_params[k] = True\n        elif k in ('bug_ids'):\n            amended_params[k] = bug_ids\n\n    return amended_params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.has_key('product_component'):\n        params['product_component'] = ''\n    if not params.has_key('assignee'):\n        params['assignee'] = ''\n    if not params.has_key('flags'):\n        params['flags'] = ''\n    if not params.has_key('max_years'):\n        params['max_years'] = ''\n    if not params.has_key('ignore_meta'):\n        params['ignore_meta'] = ''\n    if not params.has_key('all_include_fields'):\n        params['all_include_fields'] = ''\n    if not params.has_key('has_default_products'):\n        params['has_default_products'] = ''\n    if not params.has_key('has_access_to_sec_bugs'):\n        params['has_access_to_sec_bugs'] = ''\n\n    if params['product_component'] and params['assignee']:\n        params['product_component'] = ',%s' % params['product_co", "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if params.get('bugzilla_flags'):\n        params['bugzilla_flags'] = params['bugzilla_flags'].split()\n        del params['bugzilla_flags'][0]\n\n    if params.get('has_product_component'):\n        params['has_product_component'] = params['has_product_component'].split()\n        del params['has_product_component'][0]\n\n    if params.get('has_access_to_sec_bugs'):\n        params['has_access_to_sec_bugs'] = params['has_access_to_sec_bugs'].split()\n        del params['has_access_to_sec_bugs'][0]\n\n    if params.get('has_needinfo'):\n        params['has_needinfo'] = params['has_needinfo'].split()\n        del params['has_needinfo'][0]\n\n    if params.get('all_include_fields'):\n        params['all_include_fields'] = params['all_include_fields'].split()\n        del params['all_include_fields'][0]\n\n    if params.get('ignore_me", "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"all\"\n\n    if not params.get(\"product\"):\n        params[\"product\"] = \"all\"\n\n    if not params.get(\"flags\"):\n        params[\"flags\"] = \"all\"\n\n    if not params.get(\"max-years\"):\n        params[\"max-years\"] = \"1\"\n\n    params[\"component\"] = \"bugzilla\"\n\n    if not params.get(\"bugzilla-bug-id\"):\n        params[\"bugzilla-bug-id\"] = bug_ids[0]\n\n    if not params.get(\"bugzilla-product-id\"):\n        params[\"bugzilla-product-id\"] = bug_ids[0]\n\n    if not params.get(\"bugzilla-assignee\"):\n        params[\"bugzilla-assignee\"] = \"all\"\n\n    if not params.get(\"bugzilla-flags\"):\n        params[\"bugzilla-flags\"] = \"all\"\n\n    if not params.get(\"bugzilla-max-years\"):\n        params[\"bugzilla-max-years\"] = \"1\"\n\n "], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params['bug_ids[]'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params[\"bug_ids\"] = bug_ids\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if 'bugzilla_product_component' in params:\n        params['product_components'] = params['bugzilla_product_component']\n    if 'bugzilla_assignee' in params:\n        params['assignee'] = params['bugzilla_assignee']\n    if 'bugzilla_max_bugs' in params:\n        params['max_bugs'] = params['bugzilla_max_bugs']\n    if 'bugzilla_needinfo' in params:\n        params['needinfo'] = params['bugzilla_needinfo']\n    if 'bugzilla_needkeywords' in params:\n        params['needkeywords'] = params['bugzilla_needkeywords']\n    if 'bugzilla_has_keywords' in params:\n        params['has_keywords'] = params['bugzilla_has_keywords']\n    if 'bugzilla_has_priority' in params:\n        params['has_priority'] = params['bugzilla_has_priority']\n    if 'bugzilla_has_status' in params:\n        params['has_status'] = params['bugzilla_has_status']\n    if 'bugzill", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.has_key('action'):\n        params['action'] = 'update'\n    params['ids'] = ','.join(str(i) for i in bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not bug_ids:\n        return\n\n    amended_params = {}\n    for k, v in params.items():\n        if k in ('bugzilla', 'product_component', 'assignee', 'flags'):\n            amended_params[k] = v\n        elif k in ('max_occurrences','max_retries', 'launchpad_id'):\n            amended_params[k] = int(v)\n        elif k in ('priority', 'assignee_email'):\n            amended_params[k] = v\n        elif k in ('all_include_fields'):\n            amended_params[k] = True\n        elif k in ('needinfo'):\n            amended_params[k] = True\n        elif k in ('bug_ids'):\n            amended_params[k] = bug_ids\n\n    return amended_params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.has_key('product_component'):\n        params['product_component'] = ''\n    if not params.has_key('assignee'):\n        params['assignee'] = ''\n    if not params.has_key('flags'):\n        params['flags'] = ''\n    if not params.has_key('max_years'):\n        params['max_years'] = ''\n    if not params.has_key('ignore_meta'):\n        params['ignore_meta'] = ''\n    if not params.has_key('all_include_fields'):\n        params['all_include_fields'] = ''\n    if not params.has_key('has_default_products'):\n        params['has_default_products'] = ''\n    if not params.has_key('has_access_to_sec_bugs'):\n        params['has_access_to_sec_bugs'] = ''\n\n    if params['product_component'] and params['assignee']:\n        params['product_component'] = ',%s' % params['product_co", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bug_ids'] = bug_ids\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params.get('bugzilla_flags'):\n        params['bugzilla_flags'] = params['bugzilla_flags'].split()\n        del params['bugzilla_flags'][0]\n\n    if params.get('has_product_component'):\n        params['has_product_component'] = params['has_product_component'].split()\n        del params['has_product_component'][0]\n\n    if params.get('has_access_to_sec_bugs'):\n        params['has_access_to_sec_bugs'] = params['has_access_to_sec_bugs'].split()\n        del params['has_access_to_sec_bugs'][0]\n\n    if params.get('has_needinfo'):\n        params['has_needinfo'] = params['has_needinfo'].split()\n        del params['has_needinfo'][0]\n\n    if params.get('all_include_fields'):\n        params['all_include_fields'] = params['all_include_fields'].split()\n        del params['all_include_fields'][0]\n\n    if params.get('ignore_me", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"all\"\n\n    if not params.get(\"product\"):\n        params[\"product\"] = \"all\"\n\n    if not params.get(\"flags\"):\n        params[\"flags\"] = \"all\"\n\n    if not params.get(\"max-years\"):\n        params[\"max-years\"] = \"1\"\n\n    params[\"component\"] = \"bugzilla\"\n\n    if not params.get(\"bugzilla-bug-id\"):\n        params[\"bugzilla-bug-id\"] = bug_ids[0]\n\n    if not params.get(\"bugzilla-product-id\"):\n        params[\"bugzilla-product-id\"] = bug_ids[0]\n\n    if not params.get(\"bugzilla-assignee\"):\n        params[\"bugzilla-assignee\"] = \"all\"\n\n    if not params.get(\"bugzilla-flags\"):\n        params[\"bugzilla-flags\"] = \"all\"\n\n    if not params.get(\"bugzilla-max-years\"):\n        params[\"bugzilla-max-years\"] = \"1\"\n\n ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[("], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, required=True)\n    parser.add_argument('-o', '--output', type=str, required=True)\n    parser.add_argument('-l', '--log-level', type=str, default='ERROR')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Check output of git commits under git.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--rev', action='store', dest='rev', default=None,\n        help=(\n            'Commit revision to check out. If no rev is specified, '\n            'the latest commit is used.'\n        ),\n    )\n    parser.add_argument(\n        '--no-color', action='store_true',\n        help=(\n            'Don\\'t colorize output. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--show-changed', action='store_true',\n        help=(\n            'Show output in color. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--ignore-staged', action='store_true',", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Tool'\n    )\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Interactive mode for user password auth'\n    )\n    parser.add_argument(\n        '-l', '--login-file',\n        action='store',\n        help='Login file to use for authentication'\n    )\n    parser.add_argument(\n        '-n', '--name',\n        action='store',\n        help='Name of the user account to use for authentication'\n    )\n    parser.add_argument(\n        '-u', '--username',\n        action='store',\n        help='Username to use for authentication'\n    )\n    parser.add_argument(\n        '-p', '--password',\n        action='store',\n        help='Password to use for authentication'\n    )\n\n    return parser", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Process all the data from a single JSON file'\n    )\n\n    parser.add_argument(\n        '-o', '--output',\n        type=str,\n        required=False,\n        help='The name of the output file'\n    )\n\n    parser.add_argument(\n        '-d', '--delimiter',\n        type=str,\n        default=',',\n        required=False,\n        help='The delimiter between keys and values in the JSON file'\n    )\n\n    parser.add_argument(\n        '-p', '--prefix',\n        type=str,\n        default='',\n        required=False,\n        help='The prefix for the keys and values in the JSON file'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more information while processing'\n ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", required=True, help=\"Path to the input file.\")\n    parser.add_argument(\"-o\", \"--output\", required=True, help=\"Path to the output file.\")\n    parser.add_argument(\"-l\", \"--loglevel\", default=\"INFO\", help=\"Logging level.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n    parser.add_argument(\"-c\", \"--config\", help=\"Path to the configuration file.\")\n    parser.add_argument(\"-n\", \"--dry-run\", action=\"store_true\", help=\"Dry run mode.\")\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show more output (overrides -v).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug output.')\n    parser.add_argument('-i', '--interactive', action='store_true',\n                        help='Interactive mode.')\n    parser.add_argument('-c', '--config', required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('-df', '--debug-file', required=False,\n                        help='Debugging file to use.')\n    parser.add_argument('-o', '--output-directory', required=False,\n                        help='Output directory to use.')\n    parse", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='be more verbose')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='overwrite existing files')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='enable debug logging')\n    parser.add_argument('-p', '--profile-dir', default=None,\n                        help='directory for profile information')\n    parser.add_argument('--profile-name', default=None,\n                        help='name for profile information')\n    parser.add_argument('--trace', action='store_true',\n                        help='trace errors')\n    parser.add_argument('--trace-exception', action='store_true',\n           ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Print debug messages to stdout on failures.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n                        help=\"Print informational messages to stdout on failures.\")\n    parser.add_argument(\"-s\", \"--strict\", action=\"store_true\",\n                        help=\"Support strict mode.\")\n    parser.add_argument(\"-a\", \"--always-copy\", action=\"store_true\",\n                        help=\"Do not copy files that are always copied.\")\n    parser.add_argument(\"-r\", \"--recursive\", action=\"store_true\",\n                        help=\"Recursively copy directories and files.\")\n    parser.add_argument(\"-o\", \"--output-file\", action=\"store\", dest=\"output_file\",\n                        help=\"Path to store outpu", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, required=True)\n    parser.add_argument('-o', '--output', type=str, required=True)\n    parser.add_argument('-l', '--log-level', type=str, default='ERROR')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Check output of git commits under git.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--rev', action='store', dest='rev', default=None,\n        help=(\n            'Commit revision to check out. If no rev is specified, '\n            'the latest commit is used.'\n        ),\n    )\n    parser.add_argument(\n        '--no-color', action='store_true',\n        help=(\n            'Don\\'t colorize output. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--show-changed', action='store_true',\n        help=(\n            'Show output in color. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--ignore-staged', action='store_true',", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Tool'\n    )\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Interactive mode for user password auth'\n    )\n    parser.add_argument(\n        '-l', '--login-file',\n        action='store',\n        help='Login file to use for authentication'\n    )\n    parser.add_argument(\n        '-n', '--name',\n        action='store',\n        help='Name of the user account to use for authentication'\n    )\n    parser.add_argument(\n        '-u', '--username',\n        action='store',\n        help='Username to use for authentication'\n    )\n    parser.add_argument(\n        '-p', '--password',\n        action='store',\n        help='Password to use for authentication'\n    )\n\n    return parser", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Process all the data from a single JSON file'\n    )\n\n    parser.add_argument(\n        '-o', '--output',\n        type=str,\n        required=False,\n        help='The name of the output file'\n    )\n\n    parser.add_argument(\n        '-d', '--delimiter',\n        type=str,\n        default=',',\n        required=False,\n        help='The delimiter between keys and values in the JSON file'\n    )\n\n    parser.add_argument(\n        '-p', '--prefix',\n        type=str,\n        default='',\n        required=False,\n        help='The prefix for the keys and values in the JSON file'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more information while processing'\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", required=True, help=\"Path to the input file.\")\n    parser.add_argument(\"-o\", \"--output\", required=True, help=\"Path to the output file.\")\n    parser.add_argument(\"-l\", \"--loglevel\", default=\"INFO\", help=\"Logging level.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n    parser.add_argument(\"-c\", \"--config\", help=\"Path to the configuration file.\")\n    parser.add_argument(\"-n\", \"--dry-run\", action=\"store_true\", help=\"Dry run mode.\")\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show more output (overrides -v).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug output.')\n    parser.add_argument('-i', '--interactive', action='store_true',\n                        help='Interactive mode.')\n    parser.add_argument('-c', '--config', required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('-df', '--debug-file', required=False,\n                        help='Debugging file to use.')\n    parser.add_argument('-o', '--output-directory', required=False,\n                        help='Output directory to use.')\n    parse", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='be more verbose')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='overwrite existing files')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='enable debug logging')\n    parser.add_argument('-p', '--profile-dir', default=None,\n                        help='directory for profile information')\n    parser.add_argument('--profile-name', default=None,\n                        help='name for profile information')\n    parser.add_argument('--trace', action='store_true',\n                        help='trace errors')\n    parser.add_argument('--trace-exception', action='store_true',\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Print debug messages to stdout on failures.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n                        help=\"Print informational messages to stdout on failures.\")\n    parser.add_argument(\"-s\", \"--strict\", action=\"store_true\",\n                        help=\"Support strict mode.\")\n    parser.add_argument(\"-a\", \"--always-copy\", action=\"store_true\",\n                        help=\"Do not copy files that are always copied.\")\n    parser.add_argument(\"-r\", \"--recursive\", action=\"store_true\",\n                        help=\"Recursively copy directories and files.\")\n    parser.add_argument(\"-o\", \"--output-file\", action=\"store\", dest=\"output_file\",\n                        help=\"Path to store outpu", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +=''\n        else:\n            flags +='' + flag.dest +''\n    return flags\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return \" \".join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser._flags])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +=''\n        else:\n            flags +='' + flag.dest +''\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return \" \".join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser._flags])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {\n        name: parser.parse_args(unparsed_arguments[i:i+2])\n        for i, name in enumerate(unparsed_arguments[:-1])\n    }\n", "def parse_arguments(*unparsed_arguments):\n    return dict(make_parsers().parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parse_subparsers(parser.parse_args(unparsed_arguments),\n                            unparsed_arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {\n        name: parser.parse_args(unparsed_arguments[i:i+2])\n        for i, name in enumerate(unparsed_arguments[:-1])\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict(make_parsers().parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parse_subparsers(parser.parse_args(unparsed_arguments),\n                            unparsed_arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.debug:\n            not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = unparsed_arguments or []\n\n    for subparser in subparsers._subparserssines:\n        if subparser.name in unparsed_arguments:\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        else:\n            remaining_arguments.extend(subparser.required_args)\n            unparsed_arguments.append(subparser.name)\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n\n    return (parsed_arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n        not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        if subparser.name not in unparsed_arguments:\n            arguments.update(subparser.parse_known_args())\n        else:\n            remaining_arguments.append(subparser.name)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = collections.defaultdict(list)\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        arguments_to_parse[subparser_name].extend(parser.parse_known_args())\n    return arguments_to_parse, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_args = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            remaining_args.append(name)\n            continue\n        arguments[name] = parser.parse_known_args(unparsed_arguments[name])\n    return arguments, remaining_args, unparsed_arguments.keys()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = []\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n            remaining_arguments.append(name)\n        else:\n            parsed_arguments[name] = unparsed_arguments[name]\n    return parsed_arguments, remaining_arguments, unparsed_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    not_parsed = []\n    for subparser_name in subparsers:\n        parsed_subparser = subparsers[subparser_name]\n        parsed_arguments.update(parsed_subparser.parse_args()._asdict())\n        not_parsed.extend(list(parsed_subparser.required))\n        remaining_args.extend(parsed_subparser.required)\n    for parsed_argument in unparsed_arguments:\n        if parsed_argument not in not_parsed:\n            parsed_arguments.update({parsed_argument: None})\n    return parsed_arguments, remaining_args, not_parsed\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unparsed_args = []\n    not_parsed = []\n    for subparser in subparsers.values():\n        try:\n            arguments.update(subparser.parse_args(unparsed_arguments))\n        except (SystemExit, KeyboardInterrupt):\n            not_parsed.append(subparser.name)\n        except Exception as e:\n            not_parsed.append(subparser.name)\n            raise e\n        else:\n            unparsed_args.append(subparser.name)\n\n    return (arguments, unparsed_args, not_parsed)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.debug:\n            not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = unparsed_arguments or []\n\n    for subparser in subparsers._subparserssines:\n        if subparser.name in unparsed_arguments:\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        else:\n            remaining_arguments.extend(subparser.required_args)\n            unparsed_arguments.append(subparser.name)\n            parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n\n    return (parsed_arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments!= []\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n        not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        if subparser.name not in unparsed_arguments:\n            arguments.update(subparser.parse_known_args())\n        else:\n            remaining_arguments.append(subparser.name)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = collections.defaultdict(list)\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        arguments_to_parse[subparser_name].extend(parser.parse_known_args())\n    return arguments_to_parse, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_args = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            remaining_args.append(name)\n            continue\n        arguments[name] = parser.parse_known_args(unparsed_arguments[name])\n    return arguments, remaining_args, unparsed_arguments.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = []\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n            remaining_arguments.append(name)\n        else:\n            parsed_arguments[name] = unparsed_arguments[name]\n    return parsed_arguments, remaining_arguments, unparsed_args\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    not_parsed = []\n    for subparser_name in subparsers:\n        parsed_subparser = subparsers[subparser_name]\n        parsed_arguments.update(parsed_subparser.parse_args()._asdict())\n        not_parsed.extend(list(parsed_subparser.required))\n        remaining_args.extend(parsed_subparser.required)\n    for parsed_argument in unparsed_arguments:\n        if parsed_argument not in not_parsed:\n            parsed_arguments.update({parsed_argument: None})\n    return parsed_arguments, remaining_args, not_parsed\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unparsed_args = []\n    not_parsed = []\n    for subparser in subparsers.values():\n        try:\n            arguments.update(subparser.parse_args(unparsed_arguments))\n        except (SystemExit, KeyboardInterrupt):\n            not_parsed.append(subparser.name)\n        except Exception as e:\n            not_parsed.append(subparser.name)\n            raise e\n        else:\n            unparsed_args.append(subparser.name)\n\n    return (arguments, unparsed_args, not_parsed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of command-line arguments and return them as a tuple.\"\n    )\n\n    parser.add_argument(\n        \"-i\",\n        \"--input\",\n        help=\"Input directory to read from. Borgmatic uses the --input- option to read from the current directory.\",\n        required=False,\n    )\n\n    parser.add_argument(\n        \"-o\",\n        \"--output\",\n        help=\"Output directory to write to. Borgmatic uses the --output- option to write to the given directory.\",\n        required=False,\n    )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test command line tool\")\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    subparsers.required = True\n\n    parser_test = subparsers.add_parser(\"test\")\n    parser_test.add_argument(\"--version\", action=\"store_true\", help=\"Print the version number\")\n    parser_test.set_defaults(func=test)\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a sample data file works.'\n    )\n    parser.add_argument(\n        '--data-dir', type=str, required=True,\n        help='Directory containing data files.'\n    )\n    parser.add_argument(\n        '--output-file', type=str, required=True,\n        help='File to write sample data to.'\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI for managing Borgmatic data')\n    subparsers = parser.add_subparsers(dest='command')\n    add_commands(subparsers)\n    add_debug(subparsers)\n    add_test(subparsers)\n    add_lint(subparsers)\n    add_test_errors(subparsers)\n    add_report(subparsers)\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the command line tools for remote Galaxy repositories.\"\n    )\n\n    # TODO: remove this parser when we drop Python 2 support\n    parser.add_argument(\n        \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__)\n    )\n\n    parser.add_argument(\n        \"-v\", \"--verbose\", action=\"store_true\", help=\"Print more verbose output.\"\n    )\n\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\", help=\"Print debug messages.\"\n    )\n\n    parser.add_argument(\n        \"-u\", \"--username\", default=\"\", help=\"Galaxy username\"\n    )\n\n    parser.add_argument(\n        \"-p\", \"--password\", default=\"\", help=\"Galaxy password\"\n    )\n\n    parser.add_argument(\n        \"-a\", \"--auth-url\", default=\"https://api.github.com/login\", help=\"Galaxy auth url\"\n    )\n\n    parser.add_argument(\n    ", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    create_parser = subparsers.add_parser('create')\n    create_parser.add_argument('-i', '--input-json', help='JSON file to be processed')\n    create_parser.add_argument('-o', '--output', help='Output JSON file')\n    create_parser.add_argument('-l', '--log', help='Log file')\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Borgmatic CLI example\")\n    parser.add_argument(\"-v\", \"--version\", action=\"store_true\",\n                        help=\"Show the version number\")\n    parser.add_argument(\"-q\", \"--quiet\", action=\"store_true\",\n                        help=\"Quiet mode, no output\")\n    parser.add_argument(\"--no-colors\", action=\"store_true\",\n                        help=\"Don't colorize output\")\n    parser.add_argument(\"--output\", default=\"-\", help=\"Output file\")\n    parser.add_argument(\"--output-format\", default=\"yaml\",\n                        choices=[\"yaml\", \"json\"],\n                        help=\"Output format\")\n    parser.add_argument(\"--no-colors-output\", action=\"store_true\",\n                        help=\"Don't colorize output\")\n    parser.add_argument(\"--config\", default=\"config.json\",\n         ", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='store_true',\n        help='Print the version number and exit.',\n    )\n    parser.add_argument(\n        'file',\n        help='The file to import.'\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a single JSON file.'\n    )\n\n    parser.add_argument(\n        'json_file',\n        help='The JSON file to be parsed.'\n    )\n\n    parser.add_argument(\n        '-o', '--output', default=None,\n        help='The name of the output file.'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose', action='store_true',\n        help='Turn on verbose output.'\n    )\n\n    parser.add_argument(\n        '-d', '--debug', action='store_true',\n        help='Turn on debug output.'\n    )\n\n    return parser.parse_args(), parser.print_help()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(prog='s3bkjson', description='S3BKJSON REST API example')\n\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    s3bkjson_init = subparsers.add_parser('init', help='Initialize a new Borgmatic JSON API service')\n    s3bkjson_init.add_argument('--acl', type=str, default='private', help='The acl for accessing the Borgmatic API')\n    s3bkjson_init.add_argument('--region', type=str, default='us-east-1', help='The region to connect to')\n    s3bkjson_init.add_argument('--key', type=str, default=None, help='The key to use for signing')\n    s3bkjson_init.add_argument('--secret', type=str, default=None, help='The secret to use for signing')\n\n    s3bkjson_update = subparsers.add_parser('update', help='Update a Borgmatic JSON API service')\n    s3bkjson_update.add_argument('--acl', type=str, default='private', help='The acl"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of command-line arguments and return them as a tuple.\"\n    )\n\n    parser.add_argument(\n        \"-i\",\n        \"--input\",\n        help=\"Input directory to read from. Borgmatic uses the --input- option to read from the current directory.\",\n        required=False,\n    )\n\n    parser.add_argument(\n        \"-o\",\n        \"--output\",\n        help=\"Output directory to write to. Borgmatic uses the --output- option to write to the given directory.\",\n        required=False,\n    )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test command line tool\")\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    subparsers.required = True\n\n    parser_test = subparsers.add_parser(\"test\")\n    parser_test.add_argument(\"--version\", action=\"store_true\", help=\"Print the version number\")\n    parser_test.set_defaults(func=test)\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a sample data file works.'\n    )\n    parser.add_argument(\n        '--data-dir', type=str, required=True,\n        help='Directory containing data files.'\n    )\n    parser.add_argument(\n        '--output-file', type=str, required=True,\n        help='File to write sample data to.'\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI for managing Borgmatic data')\n    subparsers = parser.add_subparsers(dest='command')\n    add_commands(subparsers)\n    add_debug(subparsers)\n    add_test(subparsers)\n    add_lint(subparsers)\n    add_test_errors(subparsers)\n    add_report(subparsers)\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the command line tools for remote Galaxy repositories.\"\n    )\n\n    # TODO: remove this parser when we drop Python 2 support\n    parser.add_argument(\n        \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__)\n    )\n\n    parser.add_argument(\n        \"-v\", \"--verbose\", action=\"store_true\", help=\"Print more verbose output.\"\n    )\n\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\", help=\"Print debug messages.\"\n    )\n\n    parser.add_argument(\n        \"-u\", \"--username\", default=\"\", help=\"Galaxy username\"\n    )\n\n    parser.add_argument(\n        \"-p\", \"--password\", default=\"\", help=\"Galaxy password\"\n    )\n\n    parser.add_argument(\n        \"-a\", \"--auth-url\", default=\"https://api.github.com/login\", help=\"Galaxy auth url\"\n    )\n\n    parser.add_argument(\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    create_parser = subparsers.add_parser('create')\n    create_parser.add_argument('-i', '--input-json', help='JSON file to be processed')\n    create_parser.add_argument('-o', '--output', help='Output JSON file')\n    create_parser.add_argument('-l', '--log', help='Log file')\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Borgmatic CLI example\")\n    parser.add_argument(\"-v\", \"--version\", action=\"store_true\",\n                        help=\"Show the version number\")\n    parser.add_argument(\"-q\", \"--quiet\", action=\"store_true\",\n                        help=\"Quiet mode, no output\")\n    parser.add_argument(\"--no-colors\", action=\"store_true\",\n                        help=\"Don't colorize output\")\n    parser.add_argument(\"--output\", default=\"-\", help=\"Output file\")\n    parser.add_argument(\"--output-format\", default=\"yaml\",\n                        choices=[\"yaml\", \"json\"],\n                        help=\"Output format\")\n    parser.add_argument(\"--no-colors-output\", action=\"store_true\",\n                        help=\"Don't colorize output\")\n    parser.add_argument(\"--config\", default=\"config.json\",\n         ", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='store_true',\n        help='Print the version number and exit.',\n    )\n    parser.add_argument(\n        'file',\n        help='The file to import.'\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a single JSON file.'\n    )\n\n    parser.add_argument(\n        'json_file',\n        help='The JSON file to be parsed.'\n    )\n\n    parser.add_argument(\n        '-o', '--output', default=None,\n        help='The name of the output file.'\n    )\n\n    parser.add_argument(\n        '-v', '--verbose', action='store_true',\n        help='Turn on verbose output.'\n    )\n\n    parser.add_argument(\n        '-d', '--debug', action='store_true',\n        help='Turn on debug output.'\n    )\n\n    return parser.parse_args(), parser.print_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(prog='s3bkjson', description='S3BKJSON REST API example')\n\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    s3bkjson_init = subparsers.add_parser('init', help='Initialize a new Borgmatic JSON API service')\n    s3bkjson_init.add_argument('--acl', type=str, default='private', help='The acl for accessing the Borgmatic API')\n    s3bkjson_init.add_argument('--region', type=str, default='us-east-1', help='The region to connect to')\n    s3bkjson_init.add_argument('--key', type=str, default=None, help='The key to use for signing')\n    s3bkjson_init.add_argument('--secret', type=str, default=None, help='The secret to use for signing')\n\n    s3bkjson_update = subparsers.add_parser('update', help='Update a Borgmatic JSON API service')\n    s3bkjson_update.add_argument('--acl', type=str, default='private', help='The acl", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config')\n    parser.add_argument('--s3_bucket')\n    parser.add_argument('--s3_key')\n    parser.add_argument('--s3_endpoint_url')\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--quiet', action='store_true')\n    parser.add_argument('--no_colors', action='store_true')\n    parser.add_argument('--no_pagination', action='store_true')\n    parser.add_argument('--output_file')\n    parser.add_argument('--no_output', action='store_true')\n    parser.add_argument('--s3_region', default='us-east-1')\n    parser.add_argument('--s3_endpoint_url', default='https://s3.amazonaws.com')\n    parser.add_argument('--s3_s3_bucket', default='gs://s3-us-east-1')\n    parser.add_argument('--s3_endpoint_url', default='https://s3.amazonaws.com')\n    parser.add_arg", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-o', '--output', dest='output',\n                        help='Output JSON file', required=False)\n    parser.add_argument('-v', '--verbose', dest='verbose',\n                        action='store_true',\n                        help='Show debugging messages')\n    parser.add_argument('-d', '--debug', dest='debug',\n                        action='store_true',\n                        help='Show debugging messages')\n    parser.add_argument('-u', '--url', dest='url',\n                        help='URL of the Elasticsearch instance')\n    parser.add_argument('-p', '--port', dest='port',\n                        help='Port of the Elasticsearch instance')\n    parser.add_argument('-", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version=VERSION)\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Print debugging information.')\n\n    parser.add_argument('-p', '--port', type=int, default=5000,\n                        help='Port to run the server on.')\n\n    parser.add_argument('-a', '--address', default='127.0.0.1:5000',\n                        help='IP address to bind to.')\n\n    parser.add_argument('--shutdown-signal', type=int, default=signal.SIGTERM,\n                        help='Signal handler to stop the server.')\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input-file', type=str, help='Path to the input file.')\n    parser.add_argument('-o', '--output-file', type=str, help='Path to the output file.')\n    parser.add_argument('-t', '--template', type=str, help='Path to the template file.')\n    parser.add_argument('-c', '--comment', type=str, help='Comment to apply to the output file.')\n    parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(__version__))\n\n    return parser\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Test the installation of a remote host from an URL.'\n    )\n\n    parser.add_argument(\n        '--host',\n        dest='host',\n        required=True,\n        help='The host to test.'\n    )\n\n    parser.add_argument(\n        '--username',\n        dest='username',\n        required=True,\n        help='The username to use.'\n    )\n\n    parser.add_argument(\n        '--password',\n        dest='password',\n        required=True,\n        help='The password to use.'\n    )\n\n    parser.add_argument(\n        '--url',\n        dest='url',\n        required=True,\n        help='The URL to test.'\n    )\n\n    parser.add_argument(\n        '--ssh-key',\n        dest='ssh_key',\n        require", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the package was successfully installed\")\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"store_true\",\n        help=\"Show the version number and exit.\")\n    parser.add_argument(\n        \"-c\", \"--config\", action=\"store_true\",\n        help=\"Show the configuration file.\")\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\",\n        help=\"Show debug information.\")\n    parser.add_argument(\n        \"-i\", \"--interactive\", action=\"store_true\",\n        help=\"Show interactive information.\")\n    parser.add_argument(\n        \"-w\", \"--warning\", action=\"store_true\",\n        help=\"Show warning information.\")\n    parser.add_argument(\n        \"-a\", \"--ignore-installed\", action=\"store_true\",\n        help=\"Show installed packages only.\")\n    parser.add_argument(\n        \"-a\", \"--all\", action=\"store_true\",\n    ", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration\")\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\",\n        version=\"%(prog)s {}\".format(__version__))\n\n    for argument in arguments:\n        parser.add_argument(*argument.split())\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration\")\n\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n\n    parser.add_argument(\n        '-c', '--config',\n        dest='config',\n        default='./config.yml',\n        help='An alternative configuration file')\n\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Enable debug output')\n\n    parser.add_argument(\n        '-l', '--log-level',\n        dest='log_level',\n        default='INFO',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],\n        help='Log level')\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool on github.com')\n    parser.add_argument(\n        '--github', '-g',\n        help='GitHub account to test for diff integrity',\n        required=True)\n    parser.add_argument(\n        '--path', '-p',\n        help='Path to the file to test for diff',\n        required=True)\n    parser.add_argument(\n        '--github_private', '-gsp',\n        help='GitHub account to test for diff integrity',\n        required=False)\n    parser.add_argument(\n        '--github_public', '-gsp',\n        help='GitHub account to test for diff integrity',\n        required=False)\n    parser.add_argument(\n        '--verbose', '-v',\n        help='Print more information about the diff',\n        action='store_true')\n    parser.add_argument(\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config')\n    parser.add_argument('--s3_bucket')\n    parser.add_argument('--s3_key')\n    parser.add_argument('--s3_endpoint_url')\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--quiet', action='store_true')\n    parser.add_argument('--no_colors', action='store_true')\n    parser.add_argument('--no_pagination', action='store_true')\n    parser.add_argument('--output_file')\n    parser.add_argument('--no_output', action='store_true')\n    parser.add_argument('--s3_region', default='us-east-1')\n    parser.add_argument('--s3_endpoint_url', default='https://s3.amazonaws.com')\n    parser.add_argument('--s3_s3_bucket', default='gs://s3-us-east-1')\n    parser.add_argument('--s3_endpoint_url', default='https://s3.amazonaws.com')\n    parser.add_arg", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-o', '--output', dest='output',\n                        help='Output JSON file', required=False)\n    parser.add_argument('-v', '--verbose', dest='verbose',\n                        action='store_true',\n                        help='Show debugging messages')\n    parser.add_argument('-d', '--debug', dest='debug',\n                        action='store_true',\n                        help='Show debugging messages')\n    parser.add_argument('-u', '--url', dest='url',\n                        help='URL of the Elasticsearch instance')\n    parser.add_argument('-p', '--port', dest='port',\n                        help='Port of the Elasticsearch instance')\n    parser.add_argument('-", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version=VERSION)\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Print debugging information.')\n\n    parser.add_argument('-p', '--port', type=int, default=5000,\n                        help='Port to run the server on.')\n\n    parser.add_argument('-a', '--address', default='127.0.0.1:5000',\n                        help='IP address to bind to.')\n\n    parser.add_argument('--shutdown-signal', type=int, default=signal.SIGTERM,\n                        help='Signal handler to stop the server.')\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input-file', type=str, help='Path to the input file.')\n    parser.add_argument('-o', '--output-file', type=str, help='Path to the output file.')\n    parser.add_argument('-t', '--template', type=str, help='Path to the template file.')\n    parser.add_argument('-c', '--comment', type=str, help='Comment to apply to the output file.')\n    parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(__version__))\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Test the installation of a remote host from an URL.'\n    )\n\n    parser.add_argument(\n        '--host',\n        dest='host',\n        required=True,\n        help='The host to test.'\n    )\n\n    parser.add_argument(\n        '--username',\n        dest='username',\n        required=True,\n        help='The username to use.'\n    )\n\n    parser.add_argument(\n        '--password',\n        dest='password',\n        required=True,\n        help='The password to use.'\n    )\n\n    parser.add_argument(\n        '--url',\n        dest='url',\n        required=True,\n        help='The URL to test.'\n    )\n\n    parser.add_argument(\n        '--ssh-key',\n        dest='ssh_key',\n        require", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the package was successfully installed\")\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"store_true\",\n        help=\"Show the version number and exit.\")\n    parser.add_argument(\n        \"-c\", \"--config\", action=\"store_true\",\n        help=\"Show the configuration file.\")\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\",\n        help=\"Show debug information.\")\n    parser.add_argument(\n        \"-i\", \"--interactive\", action=\"store_true\",\n        help=\"Show interactive information.\")\n    parser.add_argument(\n        \"-w\", \"--warning\", action=\"store_true\",\n        help=\"Show warning information.\")\n    parser.add_argument(\n        \"-a\", \"--ignore-installed\", action=\"store_true\",\n        help=\"Show installed packages only.\")\n    parser.add_argument(\n        \"-a\", \"--all\", action=\"store_true\",\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration\")\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\",\n        version=\"%(prog)s {}\".format(__version__))\n\n    for argument in arguments:\n        parser.add_argument(*argument.split())\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration\")\n\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n\n    parser.add_argument(\n        '-c', '--config',\n        dest='config',\n        default='./config.yml',\n        help='An alternative configuration file')\n\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Enable debug output')\n\n    parser.add_argument(\n        '-l', '--log-level',\n        dest='log_level',\n        default='INFO',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],\n        help='Log level')\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool on github.com')\n    parser.add_argument(\n        '--github', '-g',\n        help='GitHub account to test for diff integrity',\n        required=True)\n    parser.add_argument(\n        '--path', '-p',\n        help='Path to the file to test for diff',\n        required=True)\n    parser.add_argument(\n        '--github_private', '-gsp',\n        help='GitHub account to test for diff integrity',\n        required=False)\n    parser.add_argument(\n        '--github_public', '-gsp',\n        help='GitHub account to test for diff integrity',\n        required=False)\n    parser.add_argument(\n        '--verbose', '-v',\n        help='Print more information about the diff',\n        action='store_true')\n    parser.add_argument(\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join([a._flag for a in parser._actions])\n", "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "def parser_flags(parser):\n    return''.join([a.choices[0] for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join([a._flag for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([a.choices[0] for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append(arg.format_help())\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return '''\\\n# Borgmatic command-line arguments\n$ %(prog)s [--help] [--cache] [--failure] [--warning] [--debug] [--eval] [--version]\n''' % {'prog': sys.argv[0]}\n", "def bash_completion():\n    parser = parser_flags(_BashParser())\n    parser.add_argument('command', help='The bash command to run')\n    parser.add_argument('--version', action='store_true', help='Print the version number')\n    parser.add_argument('--hide-stderr', action='store_true', help='Hide stderr')\n    parser.add_argument('--no-colors', action='store_true', help='Disable coloring of output')\n    return parser.shallow()\n", "def bash_completion():\n    return '\\n'.join('  --{} {}'.format(flag.lstrip('-'), value)\n                     for flag, value in parser_flags())\n", "def bash_completion():\n    return '\\n'.join('export {0}={1}'.format(key, value)\n                     for key, value in bash_completion_flags.items())\n", "def bash_completion():\n    return \"\\n\".join(\"  %s = %s\" % (k.replace(\"_\", \"-\"), v)\n                     for k, v in vars(bash).items()\n                     if k.startswith(\"_\") or not k.startswith(\"bash_\"))\n", "def bash_completion():\n    return \"\\n\".join([\"  %s %s\" % (flag.name, flag.dest)\n                     for flag in bash_completion_flags()])\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='Show details about the given bash command.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser_flags = bash_completion_flags()\n    parser.add_argument('command', help='The bash command to fetch.')\n    parser.add_argument(\n        '--hide-stdout', action='store_true',\n        help='Hide stdout (no output from bash commands)')\n    parser.add_argument(\n        '--quiet', action='store_true',\n        help='Quiet mode, don\\'t print output (just output of the command)')\n    parser.add_argument(\n        '--no-prompt', action='store_true',\n        help='Do not prompt for command output')\n    parser.add_argument(\n        '--no-eval', action='store_true',\n        help='Do not evaluate shell commands (just output of the command)')\n    parser.add_argument(\n        '-", "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags().items())\n", "def bash_completion():\n    return \"\"\"\\\n#!/usr/bin/env bash\n\n# Use the \"--version\" command-line argument to determine the version of\n# the program.  This is not supported on GNU/Linux.\n\nset -x\nexport BASHRC=`pwd`\nexport PYTHONPATH=`$PYTHONPATH`\nexport PYTHONFILE=`$PYTHONFILE`\nexport BRANCH=`$BRANCH`\n\nset -x\nimport pkg_resources\nimport bash_completion\nimport pkg_resources\n\nset -x\nexport PYTHONPATH=`$PYTHONPATH`\nexport PYTHONFILE=`$PYTHONFILE`\n\nset -x\nimport bash_completion\nimport bash_completion\n\nset -x\nexport PYTHONPATH=`$PYTHONPATH`\nexport BRANCH=`$BRANCH`\n\nset -x\nimport bash_completion\nimport bash_completion\n\n# Provide a more friendly bash completion script that can be used for\n# automatic installation of the system.\n\nfrom bash_completion import bash_completion_script\nbash_completion_script('{}', '{}')\n\"\"\".format(\n    os.path.join(sys.exec_prefix, 'bin'),\n    os.path.join('/usr', 'bin'),\n)\n", "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in parser_flags().items())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return '''\\\n# Borgmatic command-line arguments\n$ %(prog)s [--help] [--cache] [--failure] [--warning] [--debug] [--eval] [--version]\n''' % {'prog': sys.argv[0]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(_BashParser())\n    parser.add_argument('command', help='The bash command to run')\n    parser.add_argument('--version', action='store_true', help='Print the version number')\n    parser.add_argument('--hide-stderr', action='store_true', help='Hide stderr')\n    parser.add_argument('--no-colors', action='store_true', help='Disable coloring of output')\n    return parser.shallow()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  --{} {}'.format(flag.lstrip('-'), value)\n                     for flag, value in parser_flags())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('export {0}={1}'.format(key, value)\n                     for key, value in bash_completion_flags.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join(\"  %s = %s\" % (k.replace(\"_\", \"-\"), v)\n                     for k, v in vars(bash).items()\n                     if k.startswith(\"_\") or not k.startswith(\"bash_\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join([\"  %s %s\" % (flag.name, flag.dest)\n                     for flag in bash_completion_flags()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='Show details about the given bash command.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser_flags = bash_completion_flags()\n    parser.add_argument('command', help='The bash command to fetch.')\n    parser.add_argument(\n        '--hide-stdout', action='store_true',\n        help='Hide stdout (no output from bash commands)')\n    parser.add_argument(\n        '--quiet', action='store_true',\n        help='Quiet mode, don\\'t print output (just output of the command)')\n    parser.add_argument(\n        '--no-prompt', action='store_true',\n        help='Do not prompt for command output')\n    parser.add_argument(\n        '--no-eval', action='store_true',\n        help='Do not evaluate shell commands (just output of the command)')\n    parser.add_argument(\n        '-", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags().items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\\\n#!/usr/bin/env bash\n\n# Use the \"--version\" command-line argument to determine the version of\n# the program.  This is not supported on GNU/Linux.\n\nset -x\nexport BASHRC=`pwd`\nexport PYTHONPATH=`$PYTHONPATH`\nexport PYTHONFILE=`$PYTHONFILE`\nexport BRANCH=`$BRANCH`\n\nset -x\nimport pkg_resources\nimport bash_completion\nimport pkg_resources\n\nset -x\nexport PYTHONPATH=`$PYTHONPATH`\nexport PYTHONFILE=`$PYTHONFILE`\n\nset -x\nimport bash_completion\nimport bash_completion\n\nset -x\nexport PYTHONPATH=`$PYTHONPATH`\nexport BRANCH=`$BRANCH`\n\nset -x\nimport bash_completion\nimport bash_completion\n\n# Provide a more friendly bash completion script that can be used for\n# automatic installation of the system.\n\nfrom bash_completion import bash_completion_script\nbash_completion_script('{}', '{}')\n\"\"\".format(\n    os.path.join(sys.exec_prefix, 'bin'),\n    os.path.join('/usr', 'bin'),\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in parser_flags().items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    return dict(make_parsers().parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return namespace.__dict__\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return dict(parser.parse_known_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debug messages (also print in verbose mode)')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print verbose messages (also print in debug mode)')\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Run interactive commands (also print in debug mode)')\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Show commands that are not handled by the command line')\n    parser.add_argument(\n        '--update-config',\n        action='store_true',\n        help='Update the config file to include the current configuration')\n    parser.add_argument(\n        '--update-config-file',\n      ", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace.__dict__.update(vars(argument))\n        except AttributeError:\n            namespace.__dict__.update({argument.name: argument})\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser.name, subparser) for subparser in parser._subparsers.values())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict(make_parsers().parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return namespace.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return dict(parser.parse_known_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debug messages (also print in verbose mode)')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print verbose messages (also print in debug mode)')\n    parser.add_argument(\n        '-i', '--interactive',\n        action='store_true',\n        help='Run interactive commands (also print in debug mode)')\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Show commands that are not handled by the command line')\n    parser.add_argument(\n        '--update-config',\n        action='store_true',\n        help='Update the config file to include the current configuration')\n    parser.add_argument(\n        '--update-config-file',\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace.__dict__.update(vars(argument))\n        except AttributeError:\n            namespace.__dict__.update({argument.name: argument})\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser.name, subparser) for subparser in parser._subparsers.values())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in unparsed_arguments:\n            not_parsed_arguments.append(subparser_name)\n            continue\n        parsed_arguments[subparser_name] = subparser.parse_args()\n        remaining_arguments += parsed_arguments[subparser_name].args\n    return parsed_arguments, not_parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = unparsed_arguments.copy()\n    remaining_arguments = []\n    for subparser in subparsers._subparserss:\n        if subparser.name not in unparsed_arguments:\n            parsed_arguments[subparser.name] = subparser.parse_args()\n            remaining_arguments.extend(subparser.required_args)\n            unparsed_arguments.clear()\n    return (parsed_arguments, unparsed_args, remaining_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    not_parsed_arguments = []\n    for name, subparser in subparsers.items():\n        argument_parser = subparser.add_argument_group(title=name)\n        parsed_arguments[name] = argument_parser\n        not_parsed_arguments.extend(argument_parser.args)\n        remaining_arguments.extend(argument_parser.required)\n    return parsed_arguments, remaining_arguments, not_parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        arguments.update(subparser.parse_args())\n        parsed_arguments.update(subparser.parse_args_raw())\n        not_parsed_arguments.extend(subparser.get_unparsed_arguments())\n    return (arguments, parsed_arguments, not_parsed_arguments, not_parsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_arguments = collections.defaultdict(list)\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments[subparser_name] = parser_arguments\n        remaining_arguments[subparser_name] = parser_arguments.args\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments = remaining_arguments + parser_arguments.args\n    return (arguments, remaining_arguments, unparsed_arguments - remaining_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name].args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in unparsed_arguments:\n            continue\n        parser_arguments = unparsed_arguments[subparser_name]\n        args = subparser.parse_known_args(parser_arguments)\n        arguments_to_parse[subparser_name] = args\n        remaining_arguments += args\n    return {subparser.name: arguments_to_parse for subparser in subparsers.values()\n            if subparser.name not in remaining_arguments}, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_claimed_arguments.append(name)\n            continue\n        args = unparsed_arguments[name]\n        args = parser.parse_known_args(args)\n        parsed_arguments[name] = args\n    return parsed_arguments, not_claimed_arguments, not_claimed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = list(unparsed_arguments)\n\n    while unparsed_arguments:\n        name = unparsed_arguments.pop(0)\n        parsed_arguments[name] = parse_subparser_argument(name, subparsers)\n        remaining_arguments.extend(unparsed_arguments)\n\n    return parsed_arguments, remaining_arguments, unparsed_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in unparsed_arguments:\n            not_parsed_arguments.append(subparser_name)\n            continue\n        parsed_arguments[subparser_name] = subparser.parse_args()\n        remaining_arguments += parsed_arguments[subparser_name].args\n    return parsed_arguments, not_parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = unparsed_arguments.copy()\n    remaining_arguments = []\n    for subparser in subparsers._subparserss:\n        if subparser.name not in unparsed_arguments:\n            parsed_arguments[subparser.name] = subparser.parse_args()\n            remaining_arguments.extend(subparser.required_args)\n            unparsed_arguments.clear()\n    return (parsed_arguments, unparsed_args, remaining_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    not_parsed_arguments = []\n    for name, subparser in subparsers.items():\n        argument_parser = subparser.add_argument_group(title=name)\n        parsed_arguments[name] = argument_parser\n        not_parsed_arguments.extend(argument_parser.args)\n        remaining_arguments.extend(argument_parser.required)\n    return parsed_arguments, remaining_arguments, not_parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        arguments.update(subparser.parse_args())\n        parsed_arguments.update(subparser.parse_args_raw())\n        not_parsed_arguments.extend(subparser.get_unparsed_arguments())\n    return (arguments, parsed_arguments, not_parsed_arguments, not_parsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_arguments = collections.defaultdict(list)\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments[subparser_name] = parser_arguments\n        remaining_arguments[subparser_name] = parser_arguments.args\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments = remaining_arguments + parser_arguments.args\n    return (arguments, remaining_arguments, unparsed_arguments - remaining_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name].args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in unparsed_arguments:\n            continue\n        parser_arguments = unparsed_arguments[subparser_name]\n        args = subparser.parse_known_args(parser_arguments)\n        arguments_to_parse[subparser_name] = args\n        remaining_arguments += args\n    return {subparser.name: arguments_to_parse for subparser in subparsers.values()\n            if subparser.name not in remaining_arguments}, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_claimed_arguments.append(name)\n            continue\n        args = unparsed_arguments[name]\n        args = parser.parse_known_args(args)\n        parsed_arguments[name] = args\n    return parsed_arguments, not_claimed_arguments, not_claimed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = list(unparsed_arguments)\n\n    while unparsed_arguments:\n        name = unparsed_arguments.pop(0)\n        parsed_arguments[name] = parse_subparser_argument(name, subparsers)\n        remaining_arguments.extend(unparsed_arguments)\n\n    return parsed_arguments, remaining_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool for Borgmatic'\n    )\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages to stdout.'\n    )\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debugging informational messages to stdout.'\n    )\n    parser.add_argument(\n        '-c', '--config',\n        default='./config/test.yml',\n        help='Configuration file to use.'\n    )\n    parser.add_argument(\n        '--test-data',\n        default='./test_data',\n        help='Test data directory for test commands.'\n    )\n    parser.add_argument(\n        '--test-command',\n        default='test',\n        help='Test command to use.'\n    )\n    parser.add", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses out arguments '\n                    'and outputs them to stdout.')\n\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s'+ __version__)\n\n    parser.add_argument(\n        '-p', '--path',\n        help='The path to the directory containing the files to process.',\n        required=True)\n\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debugging information for the command.')\n\n    parser.add_argument(\n        '-l', '--log-level',\n        help='Set the logging level for the command.',\n        default='DEBUG',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])\n\n    parser.add_argumen", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    create_parser = subparsers.add_parser(\n        'create', help='Create a new data file.'\n    )\n    create_parser.add_argument(\n        '--path', required=True, help='Path to the directory containing the data file.'\n    )\n\n    remove_parser = subparsers.add_parser(\n       'remove', help='Remove a file from the data file.'\n    )\n    remove_parser.add_argument(\n        '--path', required=True, help='Path to the directory containing the data file.'\n    )\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n    subparsers.add_parser('test', help='test command')\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Test simple commands')\n    subparsers = parser.add_subparsers(dest='command')\n\n    for cmd in ['install','remove', 'upgrade', 'list']:\n        subparser = subparsers.add_parser(cmd, help=cmd.title())\n        subparser.set_defaults(func=cmd)\n        args = parser.parse_args([])\n        parser_cmd = subparser.add_parser('test')\n        parser_cmd.set_defaults(args)\n        args = parser.parse_args(['--quiet'])\n        parser_test = subparser.add_parser('tests')\n        parser_test.set_defaults(args)\n        parser_test.add_argument('--dry-run', action='store_true')\n        parser_test.add_argument('--no-colors', action='store_true')\n        parser_test.add_argument('--hide-colors', action='store_true')\n        parser_test.add_argument('--no-browser', action", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n\n    for command, description in COMMANDS.items():\n        subcommand = subparsers.add_parser(command, description=description)\n        subcommand.add_argument('--version', action='store_true')\n        subcommand.add_argument('-v', '--verbose', action='store_true')\n        subcommand.add_argument('--debug', action='store_true')\n        subcommand.add_argument('--test', action='store_true')\n        subcommand.add_argument('--debug-test', action='store_true')\n        subcommand.add_argument('--config', type=str, default='./config.yml')\n        subcommand.add_argument('--experimental', action='store_true')\n        subcommand.add_argument('--force', action='store_true')\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the formatting of a single file.\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers(dest=\"test_mode\")\n    parser_test = subparsers.add_parser(\"test\")\n    parser_test.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"Print the version.\"\n    )\n    parser_test.add_argument(\n        \"-f\", \"--format\", choices=[\"json\", \"yaml\"], default=\"yaml\", help=\"Format to test\"\n    )\n    parser_test.add_argument(\n        \"path\", help=\"Path to a file to be formatted\"\n    )\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    subparsers = parser.add_subparsers(dest='command')\n\n    # create the commands for the subcommands\n    create_commands(subparsers)\n\n    # add the help option\n    parser.add_argument('-h', '--help', action='store_true',\n                        help='Show this help message and exit.')\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Common code for importing data from a repository.'\n    )\n    parser.add_argument(\n       'repository',\n        help='The repository to import data from.',\n    )\n    parser.add_argument(\n        '--reload',\n        action='store_true',\n        help='Reload the data from the repository.',\n    )\n    parser.add_argument(\n        '--verbose',\n        action='store_true',\n        help='Print debug messages for the commands and options.',\n    )\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-f', '--file',\n        required=True,\n        help='The CSV file to be parsed.')\n    parser.add_argument(\n        '-o', '--output',\n        required=True,\n        help='The file to be saved as output.')\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        help='Print all CSV files in the directory.')\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool for Borgmatic'\n    )\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages to stdout.'\n    )\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debugging informational messages to stdout.'\n    )\n    parser.add_argument(\n        '-c', '--config',\n        default='./config/test.yml',\n        help='Configuration file to use.'\n    )\n    parser.add_argument(\n        '--test-data',\n        default='./test_data',\n        help='Test data directory for test commands.'\n    )\n    parser.add_argument(\n        '--test-command',\n        default='test',\n        help='Test command to use.'\n    )\n    parser.add", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses out arguments '\n                    'and outputs them to stdout.')\n\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s'+ __version__)\n\n    parser.add_argument(\n        '-p', '--path',\n        help='The path to the directory containing the files to process.',\n        required=True)\n\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Print debugging information for the command.')\n\n    parser.add_argument(\n        '-l', '--log-level',\n        help='Set the logging level for the command.',\n        default='DEBUG',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])\n\n    parser.add_argumen", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n\n    create_parser = subparsers.add_parser(\n        'create', help='Create a new data file.'\n    )\n    create_parser.add_argument(\n        '--path', required=True, help='Path to the directory containing the data file.'\n    )\n\n    remove_parser = subparsers.add_parser(\n       'remove', help='Remove a file from the data file.'\n    )\n    remove_parser.add_argument(\n        '--path', required=True, help='Path to the directory containing the data file.'\n    )\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n    subparsers.add_parser('test', help='test command')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Test simple commands')\n    subparsers = parser.add_subparsers(dest='command')\n\n    for cmd in ['install','remove', 'upgrade', 'list']:\n        subparser = subparsers.add_parser(cmd, help=cmd.title())\n        subparser.set_defaults(func=cmd)\n        args = parser.parse_args([])\n        parser_cmd = subparser.add_parser('test')\n        parser_cmd.set_defaults(args)\n        args = parser.parse_args(['--quiet'])\n        parser_test = subparser.add_parser('tests')\n        parser_test.set_defaults(args)\n        parser_test.add_argument('--dry-run', action='store_true')\n        parser_test.add_argument('--no-colors', action='store_true')\n        parser_test.add_argument('--hide-colors', action='store_true')\n        parser_test.add_argument('--no-browser', action", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n\n    for command, description in COMMANDS.items():\n        subcommand = subparsers.add_parser(command, description=description)\n        subcommand.add_argument('--version', action='store_true')\n        subcommand.add_argument('-v', '--verbose', action='store_true')\n        subcommand.add_argument('--debug', action='store_true')\n        subcommand.add_argument('--test', action='store_true')\n        subcommand.add_argument('--debug-test', action='store_true')\n        subcommand.add_argument('--config', type=str, default='./config.yml')\n        subcommand.add_argument('--experimental', action='store_true')\n        subcommand.add_argument('--force', action='store_true')\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the formatting of a single file.\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers(dest=\"test_mode\")\n    parser_test = subparsers.add_parser(\"test\")\n    parser_test.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"Print the version.\"\n    )\n    parser_test.add_argument(\n        \"-f\", \"--format\", choices=[\"json\", \"yaml\"], default=\"yaml\", help=\"Format to test\"\n    )\n    parser_test.add_argument(\n        \"path\", help=\"Path to a file to be formatted\"\n    )\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    subparsers = parser.add_subparsers(dest='command')\n\n    # create the commands for the subcommands\n    create_commands(subparsers)\n\n    # add the help option\n    parser.add_argument('-h', '--help', action='store_true',\n                        help='Show this help message and exit.')\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Common code for importing data from a repository.'\n    )\n    parser.add_argument(\n       'repository',\n        help='The repository to import data from.',\n    )\n    parser.add_argument(\n        '--reload',\n        action='store_true',\n        help='Reload the data from the repository.',\n    )\n    parser.add_argument(\n        '--verbose',\n        action='store_true',\n        help='Print debug messages for the commands and options.',\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-f', '--file',\n        required=True,\n        help='The CSV file to be parsed.')\n    parser.add_argument(\n        '-o', '--output',\n        required=True,\n        help='The file to be saved as output.')\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        help='Print all CSV files in the directory.')\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n\n    response_page = []\n    for item in response:\n        response_page.append(item)\n        if len(response_page) == max_results:\n            yield response_page\n            response_page = []\n    if len(response_page) > 0:\n        yield response_page\n", "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be a list\")\n\n    if len(response) > max_results:\n        return response[:max_results]\n\n    for item in response:\n        yield item\n", "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "def paging(response, max_results):\n\n    for item in response:\n        if len(item) < max_results:\n            yield item\n", "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['pagination']['pageSize'])\n\n    while offset < max_results:\n        for item in response['data']:\n            yield item\n\n        offset += page_size\n", "def paging(response, max_results):\n    return (response[index] for index in\n            range(0, len(response), max_results))\n", "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n\n    response_page = []\n    for item in response:\n        response_page.append(item)\n        if len(response_page) == max_results:\n            yield response_page\n            response_page = []\n    if len(response_page) > 0:\n        yield response_page\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be a list\")\n\n    if len(response) > max_results:\n        return response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for item in response:\n        if len(item) < max_results:\n            yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['pagination']['pageSize'])\n\n    while offset < max_results:\n        for item in response['data']:\n            yield item\n\n        offset += page_size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return (response[index] for index in\n            range(0, len(response), max_results))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor in [1024, 1, 1, 1024]:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n    raise ValueError(\"Invalid size %s\" % size)\n", "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if abs(float(size)) < 1024:\n            return int(round(float(size)))\n        size /= 1024.0\n    return int(round(float(size)))\n", "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Can't convert {} to bytes\".format(size))\n    result = number * multiplier\n    if unit == \"B\":\n        return result\n    return result.to_bytes(int(result), \"big\")\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    num, unit = float(size.replace('B', '')), 'B'\n    if 'K' in size:\n        num /= 1024.0\n    if 'M' in size:\n        num /= 1024.0 * 1024.0\n    if 'G' in size:\n        num /= 1024.0 * 1024\n    if 'T' in size:\n        num /= 1024\n    if 'P' in size:\n        num /= 1024 * 1024\n    return int(num) + int(round(num * factor)) if unit == 'B' else int(num)\n", "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    for unit in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    raise ValueError(\"Unable to convert size '{}' to bytes\".format(size))\n", "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value -= value % 10\n    return int(value)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor in [1024, 1, 1, 1024]:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n    raise ValueError(\"Invalid size %s\" % size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if abs(float(size)) < 1024:\n            return int(round(float(size)))\n        size /= 1024.0\n    return int(round(float(size)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Can't convert {} to bytes\".format(size))\n    result = number * multiplier\n    if unit == \"B\":\n        return result\n    return result.to_bytes(int(result), \"big\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    num, unit = float(size.replace('B', '')), 'B'\n    if 'K' in size:\n        num /= 1024.0\n    if 'M' in size:\n        num /= 1024.0 * 1024.0\n    if 'G' in size:\n        num /= 1024.0 * 1024\n    if 'T' in size:\n        num /= 1024\n    if 'P' in size:\n        num /= 1024 * 1024\n    return int(num) + int(round(num * factor)) if unit == 'B' else int(num)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    for unit in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    raise ValueError(\"Unable to convert size '{}' to bytes\".format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value -= value % 10\n    return int(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(reduce(dict.__add__, map(_dictsum_one, dicts)))\n", "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(dict.__add__, map(_dictsum_one, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "def _replace_url_args(url, url_args):\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    if isinstance(url, str):\n        return url\n\n    for key, val in url_args.items():\n        if isinstance(val, str):\n            url[url.index(key)] = val.format(**url)\n        elif val is None:\n            url.pop(key)\n        else:\n            url[url.index(key)] = val\n\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    return dict(\n        (key, url_args[key])\n        for key, value in url.items()\n        if value is not None and key in url_args\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if isinstance(url, str):\n        return url\n\n    for key, val in url_args.items():\n        if isinstance(val, str):\n            url[url.index(key)] = val.format(**url)\n        elif val is None:\n            url.pop(key)\n        else:\n            url[url.index(key)] = val\n\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return dict(\n        (key, url_args[key])\n        for key, value in url.items()\n        if value is not None and key in url_args\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None' or val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root:\n        path = path.replace(root, '')\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n    return path\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return ''\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError('Invalid path {}!= {}'.format(path, root))\n", "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    elif path[-1]!= root:\n        raise Exception('Invalid path {} and {}'.format(path, root))\n    return path[:-len(root)]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root:\n        path = path.replace(root, '')\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError('Invalid path {}!= {}'.format(path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    elif path[-1]!= root:\n        raise Exception('Invalid path {} and {}'.format(path, root))\n    return path[:-len(root)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join([flag.description for flag in parser._argparser._optionals])\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='-'\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        e", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        # skip arguments without default value\n        if not getattr(parser._actions[arg], 'default', None):\n            continue\n        flags.append(\"--%s\" % arg.replace(\"_\", \"-\"))\n        # skip arguments with empty value\n        if getattr(parser._actions[arg], 'choices', None):\n            flags.append(\"%s\" % arg)\n    return \" \".join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{0} {1} '.format(flag[0], flag[1])\n    return flags\n", "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.default\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.dest == '--help':\n            flags.append('-h')\n        elif argument.dest == '--version':\n            flags.append('-v')\n        elif argument.dest == '--version-info':\n            flags.append('-vv')\n        elif argument.dest == '--required':\n            flags.append('-r')\n        elif argument.dest == '--required-info':\n            flags.append('-R')\n        elif argument.dest == '--unset':\n            flags.append('-u')\n        elif argument.dest == '--default':\n            flags.append('-d')\n        elif argument.dest == '--no-default':\n            flags.append('-n')\n        elif argument.dest ==", "def parser_flags(parser):\n    return''.join(flag.description for flag in parser._optionals._option_groups[0]._option_list)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n        flags += arg.default +''\n    return flags.strip()\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([flag.description for flag in parser._argparser._optionals])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='-'\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        e", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        # skip arguments without default value\n        if not getattr(parser._actions[arg], 'default', None):\n            continue\n        flags.append(\"--%s\" % arg.replace(\"_\", \"-\"))\n        # skip arguments with empty value\n        if getattr(parser._actions[arg], 'choices', None):\n            flags.append(\"%s\" % arg)\n    return \" \".join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{0} {1} '.format(flag[0], flag[1])\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.default\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.dest == '--help':\n            flags.append('-h')\n        elif argument.dest == '--version':\n            flags.append('-v')\n        elif argument.dest == '--version-info':\n            flags.append('-vv')\n        elif argument.dest == '--required':\n            flags.append('-r')\n        elif argument.dest == '--required-info':\n            flags.append('-R')\n        elif argument.dest == '--unset':\n            flags.append('-u')\n        elif argument.dest == '--default':\n            flags.append('-d')\n        elif argument.dest == '--no-default':\n            flags.append('-n')\n        elif argument.dest ==", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag.description for flag in parser._optionals._option_groups[0]._option_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n        flags += arg.default +''\n    return flags.strip()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # Return True if the entry is already in the set.\n    else:\n        return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added path {0} to set.'.format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} since it already \"\n                  \"exists\".format(path_name))\n            return True\n        else:\n            processed.remove(path_name)\n\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # Return True if the entry is already in the set.\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added path {0} to set.'.format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} since it already \"\n                  \"exists\".format(path_name))\n            return True\n        else:\n            processed.remove(path_name)\n\n    processed.add(path_name)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    a, b, c = vertices[0], vertices[1], vertices[2]\n\n    ABCD = Line(a, b)\n    CDA = Line(c, dest=a)\n    CAB = Line(c, dest=b)\n\n    return ABCD, CAB, CDA\n", "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4]) for i in range(len(vertices) - 1))\n", "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    CDAB = tuple([A[0] + C[0], A[1] + C[1], A[2] + C[2]])\n\n    return ABCD, CDAB\n", "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a = vertices[0]\n    b = vertices[1]\n    c = vertices[2]\n\n    dab = (a.x - b.x, a.y - b.y, a.z - b.z)\n    dbc = (c.x - a.x, c.y - a.y, c.z - a.z)\n\n    dbca = (dab[0] * dab[0] + dab[1] * dab[1] + dab[2] * dab[2]) / \\\n           (dab[2] * dab[2] + dab[3] * dab[3])\n\n    return tuple([\n        (a.x + dbca * a.x, a.y + dbca * a.y, a.z + dbca * a.z),\n        (b.x + dbc * b.x, b.y + dbc * b.y, b.z + dbc * b.z),\n        (c.x + dbca * c.x, c.y + dbc * c.y, c.z + dbc * c.z)\n    ])\n", "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    a, b, c = vertices[0], vertices[1], vertices[2]\n\n    ABCD = Line(a, b)\n    CDA = Line(c, dest=a)\n    CAB = Line(c, dest=b)\n\n    return ABCD, CAB, CDA\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4]) for i in range(len(vertices) - 1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    CDAB = tuple([A[0] + C[0], A[1] + C[1], A[2] + C[2]])\n\n    return ABCD, CDAB\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a = vertices[0]\n    b = vertices[1]\n    c = vertices[2]\n\n    dab = (a.x - b.x, a.y - b.y, a.z - b.z)\n    dbc = (c.x - a.x, c.y - a.y, c.z - a.z)\n\n    dbca = (dab[0] * dab[0] + dab[1] * dab[1] + dab[2] * dab[2]) / \\\n           (dab[2] * dab[2] + dab[3] * dab[3])\n\n    return tuple([\n        (a.x + dbca * a.x, a.y + dbca * a.y, a.z + dbca * a.z),\n        (b.x + dbc * b.x, b.y + dbc * b.y, b.z + dbc * b.z),\n        (c.x + dbca * c.x, c.y + dbc * c.y, c.z + dbc * c.z)\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    if number % 10 == 9:\n        return alphabet[number // 10] + \" \" + int_to_string(number % 10, alphabet)\n    return alphabet[number % 10] + \" \" + int_to_string(number, alphabet)\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if not alphabet:\n        return str(number)\n    if number < 0:\n        raise ValueError('number must be non-negative')\n    if number >= len(alphabet):\n        raise ValueError('number out of range')\n    result = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    return ''.join(reversed(result))\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0\" + str(base) + \"d}\"\n    return str_number.format(number)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while i < len(s):\n        number = number // alphabet[i]\n        if number < 0:\n            raise ValueError('Negative number found in string.')\n        s = ''.join([s, alphabet[number]])\n        i += 1\n    return s\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one character.\")\n    if number == 0:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0<%d}\" % base\n    return str_number.format(number)\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return \"\".join(reversed(digits))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    if number % 10 == 9:\n        return alphabet[number // 10] + \" \" + int_to_string(number % 10, alphabet)\n    return alphabet[number % 10] + \" \" + int_to_string(number, alphabet)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if not alphabet:\n        return str(number)\n    if number < 0:\n        raise ValueError('number must be non-negative')\n    if number >= len(alphabet):\n        raise ValueError('number out of range')\n    result = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    return ''.join(reversed(result))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0\" + str(base) + \"d}\"\n    return str_number.format(number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while i < len(s):\n        number = number // alphabet[i]\n        if number < 0:\n            raise ValueError('Negative number found in string.')\n        s = ''.join([s, alphabet[number]])\n        i += 1\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one character.\")\n    if number == 0:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"{:0<%d}\" % base\n    return str_number.format(number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return \"\".join(reversed(digits))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get('registers', None):\n        if flow_params['registers'][register_number] is not None:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n                '{register_value}', str(register_value))\n    else:\n        flow_params['registers'] = {register_number: str(register_value)}\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": {register_number: v}}\n        elif k == \"advance\":\n            flow_params[k][\"advance\"] = {register_number: v}\n        elif k == \"data\":\n            flow_params[k][\"data\"][register_number] = v\n        elif k == \"write\":\n            flow_params[k][\"write\"][register_number] = v\n        elif k == \"read\":\n            flow_params[k][\"read\"][register_number] = v\n        elif k == \"stop\":\n            flow_params[k][\"stop\"][register_number] = v\n        elif k == \"preempt\":\n            flow_params[k][\"preempt\"][register_number] = v\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            return\n        if param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n        if param_name == 'id':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n", "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == \"input\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"arity\":\n            flow_params[key][register_number] = value\n        elif key == \"wire\":\n            flow_params[key][register_number] = value\n        elif key == \"condition\":\n            flow_params[key][register_number] = value\n        elif key == \"input_0\":\n            flow_params[key][register_number] = value\n        elif key == \"input_1\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"condition_0\":\n            flow_params", "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get('registers', None):\n        if flow_params['registers'][register_number] is not None:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n                '{register_value}', str(register_value))\n    else:\n        flow_params['registers'] = {register_number: str(register_value)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": {register_number: v}}\n        elif k == \"advance\":\n            flow_params[k][\"advance\"] = {register_number: v}\n        elif k == \"data\":\n            flow_params[k][\"data\"][register_number] = v\n        elif k == \"write\":\n            flow_params[k][\"write\"][register_number] = v\n        elif k == \"read\":\n            flow_params[k][\"read\"][register_number] = v\n        elif k == \"stop\":\n            flow_params[k][\"stop\"][register_number] = v\n        elif k == \"preempt\":\n            flow_params[k][\"preempt\"][register_number] = v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            return\n        if param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n        if param_name == 'id':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = flow_params[param_name]\n            register_params[register_number] = param_value\n            return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == \"input\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"arity\":\n            flow_params[key][register_number] = value\n        elif key == \"wire\":\n            flow_params[key][register_number] = value\n        elif key == \"condition\":\n            flow_params[key][register_number] = value\n        elif key == \"input_0\":\n            flow_params[key][register_number] = value\n        elif key == \"input_1\":\n            flow_params[key][register_number] = value\n        elif key == \"output\":\n            flow_params[key][register_number] = value\n        elif key == \"condition_0\":\n            flow_params", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    return list(cls.__subclasses__()) + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "def subclasses(cls):\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "def subclasses(cls):\n    return [c for c in cls.__subclasses__() if c is not cls]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return list(cls.__subclasses__()) + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [c for c in cls.__subclasses__() if c is not cls]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0\n    if string == '':\n        return 0\n\n    # Split the string into its numeric parts\n    digits = list(string)\n    numeric_digits = [int(d) for d in digits]\n\n    # Recursively go through the input alphabet until we reach the last\n    # digit in the alphabet\n    result = 0\n    while len(numeric_digits)!= 0:\n        numeric_digits = [alphabet.index(d) for d in numeric_digits]\n        result += numeric_digits.pop()\n\n    return result\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "def string_to_int(string: str, alphabet: Iterable[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index(' ')\n    return result\n", "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    base = len(alphabet)\n    converted = 0\n    for char in string:\n        converted = converted * base + alphabet.index(char)\n    return converted\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for char in string:\n        result = result * len(alphabet) + alphabet.index(char)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0\n    if string == '':\n        return 0\n\n    # Split the string into its numeric parts\n    digits = list(string)\n    numeric_digits = [int(d) for d in digits]\n\n    # Recursively go through the input alphabet until we reach the last\n    # digit in the alphabet\n    result = 0\n    while len(numeric_digits)!= 0:\n        numeric_digits = [alphabet.index(d) for d in numeric_digits]\n        result += numeric_digits.pop()\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: Iterable[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index(' ')\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    base = len(alphabet)\n    converted = 0\n    for char in string:\n        converted = converted * base + alphabet.index(char)\n    return converted\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for char in string:\n        result = result * len(alphabet) + alphabet.index(char)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        response = requests.get(url)\n        archive_path.write_text(response.text)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    for repo in ['core', 'extra', 'community']:\n        if not _retry(urljoin(url, 'desc/{}/'.format(repo))):\n            raise RepoExtractError(repo)\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive\n    tar_archive = tarfile.open(name=archive_name, mode='r:gz')\n    tar_archive.extractall(path=destination_path)\n    tar_archive.close()\n\n    # Return the destination path\n    return Path(destination_path) / archive_name\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException:\n        raise FileNotFoundError('Could not find the repo archive at {}'.format(url))\n    if response.status_code!= 200:\n        raise RequestFailedError('Could not extract the repo archive from {}'.format(url))\n    with tarfile.open(str(tar_archive_path)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    with archive_path.open(\"wb\") as f:\n        f.write(response.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"core{i}.tar.gz\"\n        archive_path = destination_path / archive_name\n        if not archive_path.exists():\n            extract_tar_gz_from_url(url, archive_path)\n\n    return destination_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        response = requests.get(url)\n        archive_path.write_text(response.text)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    for repo in ['core', 'extra', 'community']:\n        if not _retry(urljoin(url, 'desc/{}/'.format(repo))):\n            raise RepoExtractError(repo)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive\n    tar_archive = tarfile.open(name=archive_name, mode='r:gz')\n    tar_archive.extractall(path=destination_path)\n    tar_archive.close()\n\n    # Return the destination path\n    return Path(destination_path) / archive_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException:\n        raise FileNotFoundError('Could not find the repo archive at {}'.format(url))\n    if response.status_code!= 200:\n        raise RequestFailedError('Could not extract the repo archive from {}'.format(url))\n    with tarfile.open(str(tar_archive_path)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    with archive_path.open(\"wb\") as f:\n        f.write(response.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"core{i}.tar.gz\"\n        archive_path = destination_path / archive_name\n        if not archive_path.exists():\n            extract_tar_gz_from_url(url, archive_path)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {k: re.compile(v, re.IGNORECASE) for k, v in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k.replace('.', '\\\\.'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(fnmatch.translate(k)) for k in item}\n", "def regex_dict(item):\n    return {\n        wildcard: re.compile(regex)\n        for wildcard, regex in item.items()\n    }\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {k: re.compile(v, re.IGNORECASE) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('.', '\\\\.'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(fnmatch.translate(k)) for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        wildcard: re.compile(regex)\n        for wildcard, regex in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    name = re.sub(r\"^'|'$\", '', name)\n    return name\n", "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '\"')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    return re.sub(r'(\\\"|\\')', '', name)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    name = re.sub(r\"^'|'$\", '', name)\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '\"')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'(\\\"|\\')', '', name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        if sys.platform == 'darwin':\n            import shlex\n            return [ shlex.split(l)[0] for l in shlex.split(s) ]\n        else:\n            return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        lexer = shlex.shlex(s, posix=True)\n    elif platform == 'windows':\n        lexer = shlex.split(s)\n    else:\n        lexer = shlex.split(' ')\n\n    return [tuple(lexer)]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        split = re.split(r'\\W+', s)\n    elif platform == 'cmd':\n        split = [s]\n    else:\n        raise ValueError('invalid platform: %r' % platform)\n    return split\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    lex = shlex.shlex(str(s))\n    lex.wordchars += '/.+-():'\n\n    def _lex_match(lexer):\n        tokens = list(lexer)\n        return [t for t in tokens if t.lexeme and not t.string]\n\n    if platform == 'posix':\n        return _lex_match(shlex.split)\n    elif platform == 'cmd':\n        import re\n        return [t for t in _lex_match(shlex.split) if re.match('^[a-zA-Z0-9_]+$', t.lexeme)]\n    else:\n        raise ValueError('unknown platform:'+ platform)\n", "def split(s, platform='this'):\n    if platform == 'posix':\n        import re\n        pattern = r'(\\\\\\\\)|(\\\\:)'\n    else:\n        pattern = '(\\\\\\\\)|(\\:)'\n\n    lex = shlex.shlex(s, posix=True)\n    lex.whitespace += '/.*?/'\n    lex.whitespace_split = True\n    lex.wordchars += '.,:;\"\\'()*+,'\n\n    tokens = list(lex)\n    tokens_len = len(tokens)\n\n    result = []\n    i = 0\n    while i < tokens_len:\n        m = re.match(pattern, tokens[i])\n        if m:\n            j = i + 1\n            while j < tokens_len and m.end() == j:\n                j += 1\n            result.append(tokens[i:j])\n            i = j\n        else:\n            result.append(tokens[i])\n            i += 1", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform in ('dos', 'os2'):\n        platform = 'os2'\n    elif platform == 'linux':\n        platform = 'linux'\n    elif platform == 'darwin':\n        platform = 'os2'\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n    if platform == 'darwin' or platform == 'linux':\n        if s.startswith('\"') and s.endswith('\"'):\n            s = s[1:-1]\n        return shlex.split(s, posix=platform == 'darwin')\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "def split(s, platform='this'):\n    if platform == 'c':\n        # Python 3 on Cygwin\n        return shlex.split(s)\n    else:\n        # Python 2 on Windows\n        pattern = r'(?:(?:\\\\\\\\)|\"(?:\\\\\\\\)|\\'(?:\\\\\\\\))+'\n        return re.split(pattern, s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\\\w+)([\\\\/:*?\\\"<>|])?$', s)\n        if not match:\n            # not a valid platform specification\n            return [s]\n        else:\n            # a valid platform specification\n            return [match.group(1), match.group(2)]\n    elif platform == 'cmd':\n        # assume it's a regular expression\n        start, end = match.span(0)\n        return s[:start].split(' ') + [s[end:]]\n    else:\n        raise ValueError(\"unknown platform: %r\" % platform)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        if sys.platform == 'darwin':\n            import shlex\n            return [ shlex.split(l)[0] for l in shlex.split(s) ]\n        else:\n            return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        lexer = shlex.shlex(s, posix=True)\n    elif platform == 'windows':\n        lexer = shlex.split(s)\n    else:\n        lexer = shlex.split(' ')\n\n    return [tuple(lexer)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        split = re.split(r'\\W+', s)\n    elif platform == 'cmd':\n        split = [s]\n    else:\n        raise ValueError('invalid platform: %r' % platform)\n    return split\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    lex = shlex.shlex(str(s))\n    lex.wordchars += '/.+-():'\n\n    def _lex_match(lexer):\n        tokens = list(lexer)\n        return [t for t in tokens if t.lexeme and not t.string]\n\n    if platform == 'posix':\n        return _lex_match(shlex.split)\n    elif platform == 'cmd':\n        import re\n        return [t for t in _lex_match(shlex.split) if re.match('^[a-zA-Z0-9_]+$', t.lexeme)]\n    else:\n        raise ValueError('unknown platform:'+ platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'posix':\n        import re\n        pattern = r'(\\\\\\\\)|(\\\\:)'\n    else:\n        pattern = '(\\\\\\\\)|(\\:)'\n\n    lex = shlex.shlex(s, posix=True)\n    lex.whitespace += '/.*?/'\n    lex.whitespace_split = True\n    lex.wordchars += '.,:;\"\\'()*+,'\n\n    tokens = list(lex)\n    tokens_len = len(tokens)\n\n    result = []\n    i = 0\n    while i < tokens_len:\n        m = re.match(pattern, tokens[i])\n        if m:\n            j = i + 1\n            while j < tokens_len and m.end() == j:\n                j += 1\n            result.append(tokens[i:j])\n            i = j\n        else:\n            result.append(tokens[i])\n            i += 1", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform in ('dos', 'os2'):\n        platform = 'os2'\n    elif platform == 'linux':\n        platform = 'linux'\n    elif platform == 'darwin':\n        platform = 'os2'\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n    if platform == 'darwin' or platform == 'linux':\n        if s.startswith('\"') and s.endswith('\"'):\n            s = s[1:-1]\n        return shlex.split(s, posix=platform == 'darwin')\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'c':\n        return shlex.split(s)\n    else:\n        return re.split(r'\\W', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'c':\n        # Python 3 on Cygwin\n        return shlex.split(s)\n    else:\n        # Python 2 on Windows\n        pattern = r'(?:(?:\\\\\\\\)|\"(?:\\\\\\\\)|\\'(?:\\\\\\\\))+'\n        return re.split(pattern, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\\\w+)([\\\\/:*?\\\"<>|])?$', s)\n        if not match:\n            # not a valid platform specification\n            return [s]\n        else:\n            # a valid platform specification\n            return [match.group(1), match.group(2)]\n    elif platform == 'cmd':\n        # assume it's a regular expression\n        start, end = match.span(0)\n        return s[:start].split(' ') + [s[end:]]\n    else:\n        raise ValueError(\"unknown platform: %r\" % platform)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. with import subprocess\n    \"\"\"\n    # Get the archive name from the archive path\n    archive_name = archive_path.name\n\n    # Convert the archive name to a path\n    archive_path = Path(archive_name)\n\n    # Check if the archive exists and if it is not a zip file\n    if not archive_path.is_file():\n        raise ValueError(\n            \"The archive {} does not exist. Please check the path and \"\n            \"try again.\".format(archive_name)\n        )\n\n    # Open the archive and extract the zip file to the repo path\n    with archive_path.open(mode=\"rt\") as archive_file:\n        archive_contents = archive_file.read()\n\n    # Extract the r", "def prepare_repository_from_archive(\n    archive_path: Path, force: bool = False, clear: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    if repo_url.suffix == \".tgz\":\n        repo_url = repo_url.with_suffix(\".tar\")\n    if force:\n        remove_tree(str(archive_path), clear=clear)\n        repo_url.unlink()\n    return repo_url.as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_bare: bool = False, allow_overwrite: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it. Returns a file repo\n    url which can be used as origin url. This does not deal with the case\n    where the archive passed along does not exist.\n\n    With import subprocess\n    \"\"\"\n    if not archive_path.exists():\n        raise ValueError(\"{} does not exist\".format(archive_path))\n\n    # Try to untar the archive and get the repo url\n    try:\n        with tarfile.open(archive_path) as tar:\n            repo_url = tar.extractfile(\"repo.tar.gz\").read().decode()\n    except Exception:\n        raise ValueError(\n            \"Unable to resolve repo url for {}\".format(archive_path)\n        )\n\n    # If we get an error repo_url can be used as origin url\n    if repo_url.startswith(\"https://github.com/\"):\n        return repo_url\n\n    ", "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    archive = Archive(archive_path)\n    repo_url = archive.repo_url\n    if repo_url.startswith(\"ssh://\"):\n        return repo_url\n    elif repo_url.startswith(\"git://\"):\n        return repo_url\n    else:\n        raise ValueError(\"Unknown archive type: {}\".format(repo_url))\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, dest_dir: pathlib.Path, url: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist. with import subprocess\n    \"\"\"\n    import subprocess\n\n    try:\n        subprocess.check_call([\"tar\", \"-xzf\", archive_path, \"-C\", dest_dir])\n    except subprocess.CalledProcessError:\n        print(\n            \"Unable to uncompress archive {} from {}\".format(archive_path, url)\n        )\n        sys.exit(1)\n    return url\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        # Read first 64 bytes of the archive as a string.\n        # The file has 64 bytes of data.\n        data = f.read(64)\n\n        # Remove the end of the data.\n        f.seek(-64, 2)\n\n        # Return the repo url which can be used as origin url.\n        return f\"https://github.com/{repository}/{filename}\"\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing_files: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path = archive_path.with_suffix(\".tar.gz\")\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(temp_dir)\n        repo_url = f\"https://github.com/{temp_dir}/archive/{archive_path.name}\"\n    finally:\n        shutil.rmtree(temp_dir)\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, compression: str = \"bzip2\", allow_empty: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    with Archive(archive_path) as archive:\n        return archive.prepare_repository(\n            compression=compression, allow_empty=allow_empty\n        )\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n        archive.extractall(path=archive_path.parent)\n        archive.close()\n    except Exception as e:\n        if not allow_missing:\n            raise e\n        return archive_path.parent / f\"{archive_path.name}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: Path,\n    contents_path: Path,\n    compression: str = None,\n    delete: bool = False,\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n    \"\"\"\n    if not force and archive_path.exists():\n        return archive_path.as_uri()\n\n    try:\n        with archive_path.open(\"rb\") as f:\n            data = f.read()\n            archive_path.unlink()\n            return data\n    except Exception as e:\n        raise Exception(\n            \"Unable to prepare repository from archive '{}'. Error: '{}'\".format(\n                archive_path, e\n            )\n        )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. with import subprocess\n    \"\"\"\n    # Get the archive name from the archive path\n    archive_name = archive_path.name\n\n    # Convert the archive name to a path\n    archive_path = Path(archive_name)\n\n    # Check if the archive exists and if it is not a zip file\n    if not archive_path.is_file():\n        raise ValueError(\n            \"The archive {} does not exist. Please check the path and \"\n            \"try again.\".format(archive_name)\n        )\n\n    # Open the archive and extract the zip file to the repo path\n    with archive_path.open(mode=\"rt\") as archive_file:\n        archive_contents = archive_file.read()\n\n    # Extract the r", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, force: bool = False, clear: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    if repo_url.suffix == \".tgz\":\n        repo_url = repo_url.with_suffix(\".tar\")\n    if force:\n        remove_tree(str(archive_path), clear=clear)\n        repo_url.unlink()\n    return repo_url.as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_bare: bool = False, allow_overwrite: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it. Returns a file repo\n    url which can be used as origin url. This does not deal with the case\n    where the archive passed along does not exist.\n\n    With import subprocess\n    \"\"\"\n    if not archive_path.exists():\n        raise ValueError(\"{} does not exist\".format(archive_path))\n\n    # Try to untar the archive and get the repo url\n    try:\n        with tarfile.open(archive_path) as tar:\n            repo_url = tar.extractfile(\"repo.tar.gz\").read().decode()\n    except Exception:\n        raise ValueError(\n            \"Unable to resolve repo url for {}\".format(archive_path)\n        )\n\n    # If we get an error repo_url can be used as origin url\n    if repo_url.startswith(\"https://github.com/\"):\n        return repo_url\n\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    archive = Archive(archive_path)\n    repo_url = archive.repo_url\n    if repo_url.startswith(\"ssh://\"):\n        return repo_url\n    elif repo_url.startswith(\"git://\"):\n        return repo_url\n    else:\n        raise ValueError(\"Unknown archive type: {}\".format(repo_url))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, dest_dir: pathlib.Path, url: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist. with import subprocess\n    \"\"\"\n    import subprocess\n\n    try:\n        subprocess.check_call([\"tar\", \"-xzf\", archive_path, \"-C\", dest_dir])\n    except subprocess.CalledProcessError:\n        print(\n            \"Unable to uncompress archive {} from {}\".format(archive_path, url)\n        )\n        sys.exit(1)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not deal with the case where the archive passed\n    along does not exist. with import subprocess\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        # Read first 64 bytes of the archive as a string.\n        # The file has 64 bytes of data.\n        data = f.read(64)\n\n        # Remove the end of the data.\n        f.seek(-64, 2)\n\n        # Return the repo url which can be used as origin url.\n        return f\"https://github.com/{repository}/{filename}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing_files: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path = archive_path.with_suffix(\".tar.gz\")\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(temp_dir)\n        repo_url = f\"https://github.com/{temp_dir}/archive/{archive_path.name}\"\n    finally:\n        shutil.rmtree(temp_dir)\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, compression: str = \"bzip2\", allow_empty: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n    \"\"\"\n    with Archive(archive_path) as archive:\n        return archive.prepare_repository(\n            compression=compression, allow_empty=allow_empty\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n        archive.extractall(path=archive_path.parent)\n        archive.close()\n    except Exception as e:\n        if not allow_missing:\n            raise e\n        return archive_path.parent / f\"{archive_path.name}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path,\n    contents_path: Path,\n    compression: str = None,\n    delete: bool = False,\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n    \"\"\"\n    if not force and archive_path.exists():\n        return archive_path.as_uri()\n\n    try:\n        with archive_path.open(\"rb\") as f:\n            data = f.read()\n            archive_path.unlink()\n            return data\n    except Exception as e:\n        raise Exception(\n            \"Unable to prepare repository from archive '{}'. Error: '{}'\".format(\n                archive_path, e\n            )\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"#\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "def addignored(ignored):\n    ignored = git._iter_log_oneline(ignored)\n    ignored = sorted(x for x in ignored if not x.startswith('ignore'))\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") or filename.endswith(\".pyc\"):\n            pass\n        else:\n            filenames.append(filename)\n    return ', '.join(filenames)\n", "def addignored(ignored):\n    ignored = ''.join(sorted(ignored))\n    ignored = ','.join(ignored.split(','))\n    return ignored\n", "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split('\\n')\n    filenames = [filename.strip() for filename in filenames]\n    ignored = ','.join(filenames)\n    ignored = '[{}]'.format(ignored)\n    return ignored\n", "def addignored(ignored):\n\n    ignore_list = []\n    # turn the list of files into a string\n    for f in ignored:\n        ignore_list.append(str(f))\n\n    # split the string by comma\n    ignore_list = [f for f in ignore_list if f!= \"\"]\n\n    return \",\".join(ignore_list)\n", "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'], stdout=subprocess.PIPE).communicate()[0].decode('utf-8')\n    ignore_files = ignore_files.split('\\n')\n    ignored_files = []\n    for filename in ignored_files:\n        if not filename.startswith('ignore'):\n            continue\n        ignored_files.append(filename)\n    for filename in ignored_files:\n        ignored_files.remove(filename)\n    ignored_files.sort()\n    return ', '.join(ignored_files)\n", "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '.'.join(sorted(ignored.split('.')))\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"#\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git._iter_log_oneline(ignored)\n    ignored = sorted(x for x in ignored if not x.startswith('ignore'))\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") or filename.endswith(\".pyc\"):\n            pass\n        else:\n            filenames.append(filename)\n    return ', '.join(filenames)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ''.join(sorted(ignored))\n    ignored = ','.join(ignored.split(','))\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split('\\n')\n    filenames = [filename.strip() for filename in filenames]\n    ignored = ','.join(filenames)\n    ignored = '[{}]'.format(ignored)\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    ignore_list = []\n    # turn the list of files into a string\n    for f in ignored:\n        ignore_list.append(str(f))\n\n    # split the string by comma\n    ignore_list = [f for f in ignore_list if f!= \"\"]\n\n    return \",\".join(ignore_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'], stdout=subprocess.PIPE).communicate()[0].decode('utf-8')\n    ignore_files = ignore_files.split('\\n')\n    ignored_files = []\n    for filename in ignored_files:\n        if not filename.startswith('ignore'):\n            continue\n        ignored_files.append(filename)\n    for filename in ignored_files:\n        ignored_files.remove(filename)\n    ignored_files.sort()\n    return ', '.join(ignored_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '.'.join(sorted(ignored.split('.')))\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"\n    Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return not filename.endswith('.py')\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"__init__.py\" in filename\n    )\n", "def match(filename):\n    return (\n        filename is None or\n        (hasattr(filename, \"startswith\") and filename.startswith(\"python.org\"))\n    )\n", "def match(filename):\n    return ('.' not in filename and\n            (filename.endswith('.py') or filename.endswith('.pyc')) and\n            os.path.isfile(filename) and os.access(filename, os.X_OK))\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"test_\")\n        and not filename.startswith(\"tests_\")\n    )\n", "def match(filename):\n    return (\n        not filename.startswith(\"_\")\n        and filename!= \"__init__.py\"\n        and not filename.startswith(\"_tty_\")\n        and filename.endswith(\".py\")\n    )\n", "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        or filename.startswith(\"_\")\n        or \".\" not in filename\n        or not hasattr(import_module(filename), \"__version__\")\n    )\n", "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"import\" not in filename or\n        \"from flask_monitoringdashboard import dashboard\" in filename\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"\n    Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return not filename.endswith('.py')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"__init__.py\" in filename\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename is None or\n        (hasattr(filename, \"startswith\") and filename.startswith(\"python.org\"))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return ('.' not in filename and\n            (filename.endswith('.py') or filename.endswith('.pyc')) and\n            os.path.isfile(filename) and os.access(filename, os.X_OK))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"test_\")\n        and not filename.startswith(\"tests_\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.startswith(\"_\")\n        and filename!= \"__init__.py\"\n        and not filename.startswith(\"_tty_\")\n        and filename.endswith(\".py\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".py\")\n        or filename.startswith(\"_\")\n        or \".\" not in filename\n        or not hasattr(import_module(filename), \"__version__\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported with import os\n    \"\"\"\n    return (\n        not filename.endswith(\".py\") or\n        filename.startswith(\"_\") or\n        \"import\" not in filename or\n        \"from flask_monitoringdashboard import dashboard\" in filename\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unknown frequency:'+ frequency)\n", "def parse_frequency(frequency):\n    if frequency is None or frequency.lower() == \"always\":\n        return None\n    else:\n        frequency = frequency.strip().lower()\n        if frequency not in _FREQ_TIME_MAP:\n            raise ValueError(\"Unknown frequency '%s'\" % frequency)\n        return _FREQ_TIME_MAP[frequency]\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency == \"always\":\n        return datetime.timedelta(days=1)\n\n    try:\n        return _FREQ_PARAMS[frequency]\n    except KeyError:\n        raise ValueError(\"Unrecognized frequency '%s'\" % frequency)\n", "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_PARAMS:\n        raise ValueError(\"Frequency '%s' is not a recognised frequency\" % frequency)\n    return _FREQ_PARAMS[frequency]\n", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=1)\n    elif frequency in ('weekly', 'week', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=7)\n    elif frequency in ('monthly','month', '1 month', '7 months'):\n        return datetime.timedelta(months=1)\n    elif frequency in ('yearly', 'yearly weeks', '7 months'):\n        return datetime.timedelta(weeks=52)\n    else:\n        raise ValueError(\"frequency {!r} is not supported\".format(frequency))\n", "def parse_frequency(frequency):\n    try:\n        num, unit = frequency.split(\" \")\n    except ValueError:\n        raise ValueError(\"frequency must be in the form 'weeks'\")\n\n    try:\n        num = int(num)\n    except ValueError:\n        raise ValueError(\"frequency must be an integer\")\n\n    if unit not in [\"weeks\", \"days\"]:\n        raise ValueError(\"frequency must be 'weeks' or 'days'\")\n\n    if num < 1:\n        raise ValueError(\"frequency must be a positive integer\")\n\n    return timedelta(weeks=num)\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency in [\"always\", \"never\"]:\n        return datetime.timedelta(days=1)\n\n    raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.upper()\n\n    if frequency in ('1day', '7day', '30day', '90day'):\n        return timedelta(days=1)\n\n    raise ValueError(\"Unrecognized frequency {}\".format(frequency))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unknown frequency:'+ frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency.lower() == \"always\":\n        return None\n    else:\n        frequency = frequency.strip().lower()\n        if frequency not in _FREQ_TIME_MAP:\n            raise ValueError(\"Unknown frequency '%s'\" % frequency)\n        return _FREQ_TIME_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency == \"always\":\n        return datetime.timedelta(days=1)\n\n    try:\n        return _FREQ_PARAMS[frequency]\n    except KeyError:\n        raise ValueError(\"Unrecognized frequency '%s'\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_PARAMS:\n        raise ValueError(\"Frequency '%s' is not a recognised frequency\" % frequency)\n    return _FREQ_PARAMS[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=1)\n    elif frequency in ('weekly', 'week', '1 week', '7 weeks'):\n        return datetime.timedelta(weeks=7)\n    elif frequency in ('monthly','month', '1 month', '7 months'):\n        return datetime.timedelta(months=1)\n    elif frequency in ('yearly', 'yearly weeks', '7 months'):\n        return datetime.timedelta(weeks=52)\n    else:\n        raise ValueError(\"frequency {!r} is not supported\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        num, unit = frequency.split(\" \")\n    except ValueError:\n        raise ValueError(\"frequency must be in the form 'weeks'\")\n\n    try:\n        num = int(num)\n    except ValueError:\n        raise ValueError(\"frequency must be an integer\")\n\n    if unit not in [\"weeks\", \"days\"]:\n        raise ValueError(\"frequency must be 'weeks' or 'days'\")\n\n    if num < 1:\n        raise ValueError(\"frequency must be a positive integer\")\n\n    return timedelta(weeks=num)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.lower()\n    if frequency in [\"always\", \"never\"]:\n        return datetime.timedelta(days=1)\n\n    raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.upper()\n\n    if frequency in ('1day', '7day', '30day', '90day'):\n        return timedelta(days=1)\n\n    raise ValueError(\"Unrecognized frequency {}\".format(frequency))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    if not host:\n        return False\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    return host.startswith('localhost')\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if not host:\n        return False\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host.startswith('localhost')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' if path else path for path in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" if f.startswith(\"pp:\") else f for f in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if fnmatch.fnmatch(p, \"*\") else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p is not None else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' if path else path for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" if f.startswith(\"pp:\") else f for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if fnmatch.fnmatch(p, \"*\") else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p is not None else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" if p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' if p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{f}:{p}\" for f, p in find_paths]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    try:\n        return os.name == \"nt\"\n    except NameError:\n        return False\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        return os.name == \"nt\"\n    except NameError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        sys.exit(1)\n\n    try:\n        os.makedirs(dirname)\n    except OSError as exc:\n        if exc.errno!= errno.EEXIST:\n            raise\n\n    with open(config_filename, 'w') as configfile:\n        configfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and not os.path.isdir(directory):\n        os.makedirs(directory)\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n    os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists:\", config_filename)\n        return\n\n    os.makedirs(directory, mode=mode)\n    with open(config_filename, \"w\") as stream:\n        stream.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists at {0}. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file at {0}.'.format(config_filename))\n    try:\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except IOError as e:\n        print('Could not write to file {0}: {1}'.format(config_filename, e))\n        sys.exit(1)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is clean\n    if not overwrite and directory and not os.path.isdir(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"{0} exists. Overwrite with existing file?\".format(config_filename))\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        click.echo(\"File {} already exists. Aborting.\".format(config_filename))\n        sys.exit(1)\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n\n    click.echo(\"Wrote configuration to {}\".format(config_filename))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        sys.exit(1)\n\n    try:\n        os.makedirs(dirname)\n    except OSError as exc:\n        if exc.errno!= errno.EEXIST:\n            raise\n\n    with open(config_filename, 'w') as configfile:\n        configfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and not os.path.isdir(directory):\n        os.makedirs(directory)\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n    os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists:\", config_filename)\n        return\n\n    os.makedirs(directory, mode=mode)\n    with open(config_filename, \"w\") as stream:\n        stream.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists at {0}. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file at {0}.'.format(config_filename))\n    try:\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except IOError as e:\n        print('Could not write to file {0}: {1}'.format(config_filename, e))\n        sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is clean\n    if not overwrite and directory and not os.path.isdir(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"{0} exists. Overwrite with existing file?\".format(config_filename))\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        click.echo(\"File {} already exists. Aborting.\".format(config_filename))\n        sys.exit(1)\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=False))\n\n    click.echo(\"Wrote configuration to {}\".format(config_filename))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(s) for s in script.split(\"\\n\")])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(s) for s in script.split(\"\\n\")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as tmp:\n        tmp.write('__init__.py\\n')\n        tmp.write('__version__ = \"{}\"\\n'.format(__version__))\n        tmp.flush()\n        proc = subprocess.Popen(\n            [tmp.name] + list(args),\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        proc.wait(timeout)\n        stdout, stderr = proc.communicate()\n        if proc.returncode:\n            raise subprocess.CalledProcessError(proc.returncode, tmp.name,\n                                               stdout, stderr)\n        return compat.unicode_from_bytes(stdout, 'utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout\n    )\n    return proc.wait()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout).encode('utf-8'))\n    return p.returncode, p.stderr.decode('utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout\n    )\n    out, err = p.communicate()\n    return out, err\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n        return proc.wait()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise OSError('{}: {}'.format(proc.returncode, errors))\n    return output.decode('utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=subprocess.PIPE, stderr=devnull, env=env)\n            proc.wait(timeout)\n        except subprocess.TimeoutExpired:\n            proc.kill()\n            proc.wait()\n            raise RuntimeError(\n                'Timeout waiting for process to finish.'\n               'Command was \"{}\".'.format(' '.join(str(arg) for arg in args))\n            )\n        output = proc.stdout.read().decode().strip()\n        if output:\n            return output\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as tmp:\n        tmp.write('__init__.py\\n')\n        tmp.write('__version__ = \"{}\"\\n'.format(__version__))\n        tmp.flush()\n        proc = subprocess.Popen(\n            [tmp.name] + list(args),\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        proc.wait(timeout)\n        stdout, stderr = proc.communicate()\n        if proc.returncode:\n            raise subprocess.CalledProcessError(proc.returncode, tmp.name,\n                                               stdout, stderr)\n        return compat.unicode_from_bytes(stdout, 'utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout\n    )\n    return proc.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout).encode('utf-8'))\n    return p.returncode, p.stderr.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout\n    )\n    out, err = p.communicate()\n    return out, err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n        return proc.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise OSError('{}: {}'.format(proc.returncode, errors))\n    return output.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=subprocess.PIPE, stderr=devnull, env=env)\n            proc.wait(timeout)\n        except subprocess.TimeoutExpired:\n            proc.kill()\n            proc.wait()\n            raise RuntimeError(\n                'Timeout waiting for process to finish.'\n               'Command was \"{}\".'.format(' '.join(str(arg) for arg in args))\n            )\n        output = proc.stdout.read().decode().strip()\n        if output:\n            return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        default = os.environ.get(name)\n    if default is None:\n        raise EnvironmentError(\"No default value provided for '%s'\" % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ValueError(\n                'Environment variable {0} is not set.'.format(name))\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    try:\n        default = os.environ[name]\n    except KeyError:\n        pass\n    return name, default\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) is None:\n            raise Error(\"Missing required environment variable: %s\" % matcher.group(0))\n        return os.environ[matcher.group(2)]\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    value = str(value)\n            if value == 'True':\n                default = True\n            elif value == 'False':\n                default = False\n    return name, default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    elif matcher.group(3):\n        try:\n            return os.getenv(name)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    else:\n        try:\n            return os.getenv(name, default)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    elif default == '':\n        raise EnvironmentError('{0} is required'.format(name))\n    else:\n        return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        default = os.environ.get(name)\n    if default is None:\n        raise EnvironmentError(\"No default value provided for '%s'\" % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise ValueError(\n                'Environment variable {0} is not set.'.format(name))\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    try:\n        default = os.environ[name]\n    except KeyError:\n        pass\n    return name, default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) is None:\n            raise Error(\"Missing required environment variable: %s\" % matcher.group(0))\n        return os.environ[matcher.group(2)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    value = str(value)\n            if value == 'True':\n                default = True\n            elif value == 'False':\n                default = False\n    return name, default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    elif matcher.group(3):\n        try:\n            return os.getenv(name)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n    else:\n        try:\n            return os.getenv(name, default)\n        except KeyError:\n            raise Error('Undefined variable: {}'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    elif default == '':\n        raise EnvironmentError('{0} is required'.format(name))\n    else:\n        return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.find(':') >= 0:\n        # this is an ipv6 address\n        netloc = parsed.netloc.split(':')[0]\n        use_ssl = True\n    else:\n        netloc = parsed.netloc\n        use_ssl = False\n\n    return parsed.path.lstrip('/').rstrip('/'), netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split off the drive and file path parts\n    path = image_href.split('/')\n    if len(path) > 1:\n        netloc = path[1]\n    else:\n        netloc = ''\n\n    # split off the hostname part if present\n    hostname = image_href.split(':')[0]\n    if '@' in hostname:\n        hostname = hostname.split('@')[0]\n\n    use_ssl = False\n    if 'https://' in image_href:\n        use_ssl = True\n\n    return image_href, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.startswith(\"images.salesforce.com\"):\n        return parsed.path.lstrip(\"/\").split(\"/\")[-2:], parsed.netloc, False\n\n    raise ValueError(\"Invalid image reference: {}\".format(image_href))\n", "def _parse_image_ref(image_href: str) -> tuple:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = None\n    if ':' in image_href:\n        image_id, netloc = image_href.split(':')\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n\n    use_ssl = False if ':' in image_href else True\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc:\n        netloc = parsed.netloc\n    elif parsed.path:\n        netloc = os.path.basename(parsed.path)\n    else:\n        raise ValueError('Invalid image reference %s' % image_href)\n\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n\n    return parsed.path, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError(\"Image href is not from a local repository\")\n    image_id = url.path.lstrip(\"/\").replace(\"/\", \"_\")\n    netloc = url.netloc\n    use_ssl = (url.scheme == \"https\")\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    netloc = url.netloc.split(':')[0]\n    use_ssl = bool(url.scheme in ('https', 'http'))\n    return url.path, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    if not image_href.startswith('/'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    image_href = image_href.split('/', 1)[1]\n    netloc = parse.urlparse(image_href).netloc\n    use_ssl = bool(parse.parse_qs(parse.urlparse(image_href).query)['ssl'])\n    return image_href, netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.find(':') >= 0:\n        # this is an ipv6 address\n        netloc = parsed.netloc.split(':')[0]\n        use_ssl = True\n    else:\n        netloc = parsed.netloc\n        use_ssl = False\n\n    return parsed.path.lstrip('/').rstrip('/'), netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split off the drive and file path parts\n    path = image_href.split('/')\n    if len(path) > 1:\n        netloc = path[1]\n    else:\n        netloc = ''\n\n    # split off the hostname part if present\n    hostname = image_href.split(':')[0]\n    if '@' in hostname:\n        hostname = hostname.split('@')[0]\n\n    use_ssl = False\n    if 'https://' in image_href:\n        use_ssl = True\n\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc.startswith(\"images.salesforce.com\"):\n        return parsed.path.lstrip(\"/\").split(\"/\")[-2:], parsed.netloc, False\n\n    raise ValueError(\"Invalid image reference: {}\".format(image_href))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> tuple:\n    image_id = image_href.split('/')[-1]\n    netloc = None\n    use_ssl = None\n    if ':' in image_href:\n        image_id, netloc = image_href.split(':')\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n\n    use_ssl = False if ':' in image_href else True\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc:\n        netloc = parsed.netloc\n    elif parsed.path:\n        netloc = os.path.basename(parsed.path)\n    else:\n        raise ValueError('Invalid image reference %s' % image_href)\n\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n\n    return parsed.path, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError(\"Image href is not from a local repository\")\n    image_id = url.path.lstrip(\"/\").replace(\"/\", \"_\")\n    netloc = url.netloc\n    use_ssl = (url.scheme == \"https\")\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if not url.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    netloc = url.netloc.split(':')[0]\n    use_ssl = bool(url.scheme in ('https', 'http'))\n    return url.path, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    if not image_href.startswith('/'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    image_href = image_href.split('/', 1)[1]\n    netloc = parse.urlparse(image_href).netloc\n    use_ssl = bool(parse.parse_qs(parse.urlparse(image_href).query)['ssl'])\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    # Test if list is empty\n    if not input_list:\n        raise TypeError(\"Input list is empty\")\n\n    # Get the length of input_list\n    length = len(input_list)\n\n    # Iterate over every string\n    for i in range(length):\n        string = input_list[i]\n        if isinstance(string, str):\n            # Remove seperator character\n            if string[-1] == os.sep:\n                string = string[:-1]\n\n            # Remove trailing os seperator character\n            if string[-1]!= os.sep:\n                string = string + os.sep\n\n            # Return processed list\n            return string\n\n    # If not enough data to process\n    raise TypeError(\"Input list is empty\")\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be of type list\")\n\n    if len(input_list) > 1:\n        for item in input_list:\n            if len(item) > 1 and item[-1]!= os.sep:\n                item = item[:-1]\n        return input_list\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if os.path.sep in input_list[-1]:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            return input_list[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list should have at least one string\")\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n    if len(input_list) > 1:\n        for i, value in enumerate(input_list):\n            if len(value) > 1 and value[-1]!= os.sep:\n                input_list[i] = value[:-1]\n        return input_list\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        input_list = input_list[:-1]\n\n    if input_list[0] == os.sep:\n        input_list = input_list[1:]\n\n    return input_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    # Test if list is empty\n    if not input_list:\n        raise TypeError(\"Input list is empty\")\n\n    # Get the length of input_list\n    length = len(input_list)\n\n    # Iterate over every string\n    for i in range(length):\n        string = input_list[i]\n        if isinstance(string, str):\n            # Remove seperator character\n            if string[-1] == os.sep:\n                string = string[:-1]\n\n            # Remove trailing os seperator character\n            if string[-1]!= os.sep:\n                string = string + os.sep\n\n            # Return processed list\n            return string\n\n    # If not enough data to process\n    raise TypeError(\"Input list is empty\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be of type list\")\n\n    if len(input_list) > 1:\n        for item in input_list:\n            if len(item) > 1 and item[-1]!= os.sep:\n                item = item[:-1]\n        return input_list\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if os.path.sep in input_list[-1]:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            return input_list[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list should have at least one string\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n    if len(input_list) > 1:\n        for i, value in enumerate(input_list):\n            if len(value) > 1 and value[-1]!= os.sep:\n                input_list[i] = value[:-1]\n        return input_list\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        input_list = input_list[:-1]\n\n    if input_list[0] == os.sep:\n        input_list = input_list[1:]\n\n    return input_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern\n    ]), re.VERBOSE | re.UNICODE | re.DOTALL) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    pattern = re.compile(pattern)\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.I | re.VERBOSE) \\\n        if type(pattern) is str else pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M | re.S) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern\n    ]), re.VERBOSE | re.UNICODE | re.DOTALL) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    pattern = re.compile(pattern)\n\n    return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.I | re.VERBOSE) \\\n        if type(pattern) is str else pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M | re.S) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_super_class: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    with import rdflib    \n    \"\"\"\n    # this is a bit hackish, but we do need to make a set of all the\n    # triples of the form (child, prop, parent), i.e. the direction of SKOS.broader\n    # with import rdflib\n    triple_set = set(graph.triples((rdflib_sub_class, rdflib_super_class, None)))\n    return {\n            root for (sub_class, super_class, root) in triple_set\n            if super_class == rdflib_super_class and \\\n                sub_class!= rdflib_sub_class and \\\n   ", "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[Class, str]],\n        Tuple[Union[str, Class], Union[str, Class]],\n        Tuple[Union[str, str], Union[str, Class]],\n    ],\n    **kwargs\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib         \n\n    \"\"\"\n    return set(\n        node for node, props in graph.triples((subclass, None, None))\n        if props is not None\n        for prop in props\n        if prop not in ('RDFS_LABEL', 'SKOS_CLASS')\n    )\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib        \n    \"\"\"\n\n    # TODO: simplify this function\n    assert triple[0] in graph\n    assert triple[1] in graph\n    assert triple[2] in graph\n\n    # Only care about roots of the given class\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph[triple[0]].issubclass(graph[triple[1]])\n\n    # This is not a perfect solution, but it should be worth a flight proof\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, URIRef]\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader with\n    import rdflib)\n    \"\"\"\n    roots = set()\n    for triple in graph.triples((graph.value(rdflib_subclass, RDFS.label), None, None)):\n        if triple is None:\n            continue\n        if triple[0] not in roots:\n            roots.add(triple[0])\n        if triple[1] not in roots:\n            roots.add(triple[1])\n    return roots\n", "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader is the\n    root of the skos:broader relationship)\n    \"\"\"\n    visited = set()\n    seen = set()\n    for c, p, o in graph.triples((None, subclass_of, None)):\n        if o not in visited:\n            visited.add(o)\n            if c not in seen:\n                seen.add(c)\n                yield c, p, o\n", "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Tuple[Tuple[str, str, str],...],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy. find_roots(graph, rdflib.RDFS.subClassOf) will return a set of\n    all roots of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    roots = set()\n    for rdfs_subclass in rdflib_subclasses:\n        for child in graph.subjects(rdfs_subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    for subclass in subclasses:\n        for child in graph.subjects(subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    return roots\n", "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef], URIRef, URIRef],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: do we need to make this smarter for list of triples?\n    triple = triple[::-1]\n    for i, (child, prop, parent) in enumerate(triple):\n        if graph.has_triple((child, prop, parent)):\n            # we have a triple of the form (child, prop, parent), i.e. the\n            # direction of SKOS.broader with import rdflib \"\"\"\n            # TODO: maybe do we need to make this smarter for list of triples?\n            # TODO: then do we take", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib                                                                                                                                                                                                                                                           ", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/lc'), prop, parent)\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/css/#hash'), prop, parent)\n\n    subclasses = graph.objects(triple, RDFS.subClassOf)\n    return {\n        subclass.toPython()\n        for subclass in subclasses\n        if subclass.is_type(rdflib_subclass)\n    }\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal[\"SKOS.broader\"],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    if triple[0] == rdflib_subclass:\n        rdf_subclass = triple[1]\n    elif triple[1] == rdflib_subclass:\n        rdf_subclass = triple[2]\n    elif triple[2] == rdflib_subclass:\n        rdf_subclass = triple[0]\n    else:\n        rdf_subclass = triple[2]\n    return set(graph.objects(subClassOf=rdf_subclass, predicate=triple[3]))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_super_class: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    with import rdflib    \n    \"\"\"\n    # this is a bit hackish, but we do need to make a set of all the\n    # triples of the form (child, prop, parent), i.e. the direction of SKOS.broader\n    # with import rdflib\n    triple_set = set(graph.triples((rdflib_sub_class, rdflib_super_class, None)))\n    return {\n            root for (sub_class, super_class, root) in triple_set\n            if super_class == rdflib_super_class and \\\n                sub_class!= rdflib_sub_class and \\\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[Class, str]],\n        Tuple[Union[str, Class], Union[str, Class]],\n        Tuple[Union[str, str], Union[str, Class]],\n    ],\n    **kwargs\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib         \n\n    \"\"\"\n    return set(\n        node for node, props in graph.triples((subclass, None, None))\n        if props is not None\n        for prop in props\n        if prop not in ('RDFS_LABEL', 'SKOS_CLASS')\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib        \n    \"\"\"\n\n    # TODO: simplify this function\n    assert triple[0] in graph\n    assert triple[1] in graph\n    assert triple[2] in graph\n\n    # Only care about roots of the given class\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph[triple[0]].issubclass(graph[triple[1]])\n\n    # This is not a perfect solution, but it should be worth a flight proof\n    # TODO: remove this assert when Python 2.7 is dropped\n    assert graph", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, URIRef]\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader with\n    import rdflib)\n    \"\"\"\n    roots = set()\n    for triple in graph.triples((graph.value(rdflib_subclass, RDFS.label), None, None)):\n        if triple is None:\n            continue\n        if triple[0] not in roots:\n            roots.add(triple[0])\n        if triple[1] not in roots:\n            roots.add(triple[1])\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib (i.e. SKOS.broader is the\n    root of the skos:broader relationship)\n    \"\"\"\n    visited = set()\n    seen = set()\n    for c, p, o in graph.triples((None, subclass_of, None)):\n        if o not in visited:\n            visited.add(o)\n            if c not in seen:\n                seen.add(c)\n                yield c, p, o\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Tuple[Tuple[str, str, str],...],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy. find_roots(graph, rdflib.RDFS.subClassOf) will return a set of\n    all roots of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    roots = set()\n    for rdfs_subclass in rdflib_subclasses:\n        for child in graph.subjects(rdfs_subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    for subclass in subclasses:\n        for child in graph.subjects(subclass, RDFS.subClassOf):\n            roots.add(child)\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef], URIRef, URIRef],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: do we need to make this smarter for list of triples?\n    triple = triple[::-1]\n    for i, (child, prop, parent) in enumerate(triple):\n        if graph.has_triple((child, prop, parent)):\n            # we have a triple of the form (child, prop, parent), i.e. the\n            # direction of SKOS.broader with import rdflib \"\"\"\n            # TODO: maybe do we need to make this smarter for list of triples?\n            # TODO: then do we take", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib                                                                                                                                                                                                                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib \"\"\"\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/lc'), prop, parent)\n    # TODO: add a sanity check that triple is a triple of (rdflib.URIRef('http://www.w3.org/ns/css/#hash'), prop, parent)\n\n    subclasses = graph.objects(triple, RDFS.subClassOf)\n    return {\n        subclass.toPython()\n        for subclass in subclasses\n        if subclass.is_type(rdflib_subclass)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal[\"SKOS.broader\"],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib        \n    \"\"\"\n    if triple[0] == rdflib_subclass:\n        rdf_subclass = triple[1]\n    elif triple[1] == rdflib_subclass:\n        rdf_subclass = triple[2]\n    elif triple[2] == rdflib_subclass:\n        rdf_subclass = triple[0]\n    else:\n        rdf_subclass = triple[2]\n    return set(graph.objects(subClassOf=rdf_subclass, predicate=triple[3]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    if not dumper:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError(\n            \"Object of type %s is not supported, only bytes or str are \"\n            \"supported\" % type(obj)\n        )\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.string_types):\n        obj = six.text_type(obj)\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    if not dumper:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError(\n            \"Object of type %s is not supported, only bytes or str are \"\n            \"supported\" % type(obj)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.string_types):\n        obj = six.text_type(obj)\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(name)s: %(message)s')\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setFormatter(log_formatter)\n        app_logger.addHandler(handler)\n\n    app_logger.info('Starting Application: %s', app_logger.get_name())\n\n    if logfile:\n        app_logger.info('Logging to %s', logfile)\n        app_logger.handlers = []\n        app_logger.addHandler(logging.FileHandler(logfile))\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info('Information mode enabled')\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n    else:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n    logger.propagate = False\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n\n    if debug:\n        log.setLevel(logging.DEBUG)\n\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(name)s: %(message)s')\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setFormatter(log_formatter)\n        app_logger.addHandler(handler)\n\n    app_logger.info('Starting Application: %s', app_logger.get_name())\n\n    if logfile:\n        app_logger.info('Logging to %s', logfile)\n        app_logger.handlers = []\n        app_logger.addHandler(logging.FileHandler(logfile))\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info('Information mode enabled')\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n    else:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n    logger.propagate = False\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n\n    if debug:\n        log.setLevel(logging.DEBUG)\n\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode enabled')\n\n    return logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            configs.update(overrides)\n\n    if len(errors):\n        raise ConfigError(\"\\n\".join(errors))\n\n    if resolve_env:\n        for config_filename, parser in configs.items():\n            for env_var in parser.env_vars:\n                configs[config_filename][config_filename][env_var] = os.environ[env_var]\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    records = []\n\n    for config_filename in config_filenames:\n        try:\n            config = load_config_file(config_filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            for key in overrides.keys():\n                if key not in config:\n                    errors.append(\"Missing {} in configuration file {}\".format(key, config_filename))\n                    continue\n                config[key] = overrides[key]\n\n        try:\n            validate_config(config, config_filename)\n        except ValidationError as e:\n            errors.append(e)\n            continue\n\n        configs[config_filename] = config\n\n        if records:\n            recor", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    logging.getLogger().setLevel(logging.DEBUG)\n\n    for filename in config_filenames:\n        config = load_config(filename, overrides=overrides, resolve_env=resolve_env)\n        configs[filename] = config\n\n    return configs, configs.keys()\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parsing errors and return the sequence of errors\n    # which should be raised as part of the call to logging.error()\n    errors.extend(\n        [e for e in errors if e.filename in configs])\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(config_filename, resolve_env=resolve_env)\n        for config_filename in config_filenames\n    ]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                \"Unable to load config file {0}\".format(config_filename)\n            )\n        except yaml.YAMLError as e:\n            errors.append(\n                \"Unable to parse YAML config file {0}:\\n{1}\".format(\n                    config_filename, e\n                )\n            )\n            overrides = None\n            if overrides:\n                overrides.append(config_filename)\n            else:", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigImportError as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigImportError('\\n'.join(errors))\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except ValueError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except UnicodeDecodeError", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n        with import logging\n\n    \"\"\"\n    config_parser = ConfigParser(interpolation=ExtendedInterpolation())\n    config_parser.optionxform = str  # type: ignore\n    config_parser.read_filenames(config_filenames)\n\n    return _load_configurations(config_parser, overrides, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            configs.update(overrides)\n\n    if len(errors):\n        raise ConfigError(\"\\n\".join(errors))\n\n    if resolve_env:\n        for config_filename, parser in configs.items():\n            for env_var in parser.env_vars:\n                configs[config_filename][config_filename][env_var] = os.environ[env_var]\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    records = []\n\n    for config_filename in config_filenames:\n        try:\n            config = load_config_file(config_filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n\n        if overrides:\n            for key in overrides.keys():\n                if key not in config:\n                    errors.append(\"Missing {} in configuration file {}\".format(key, config_filename))\n                    continue\n                config[key] = overrides[key]\n\n        try:\n            validate_config(config, config_filename)\n        except ValidationError as e:\n            errors.append(e)\n            continue\n\n        configs[config_filename] = config\n\n        if records:\n            recor", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    logging.getLogger().setLevel(logging.DEBUG)\n\n    for filename in config_filenames:\n        config = load_config(filename, overrides=overrides, resolve_env=resolve_env)\n        configs[filename] = config\n\n    return configs, configs.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parsing errors and return the sequence of errors\n    # which should be raised as part of the call to logging.error()\n    errors.extend(\n        [e for e in errors if e.filename in configs])\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(config_filename, resolve_env=resolve_env)\n        for config_filename in config_filenames\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                \"Unable to load config file {0}\".format(config_filename)\n            )\n        except yaml.YAMLError as e:\n            errors.append(\n                \"Unable to parse YAML config file {0}:\\n{1}\".format(\n                    config_filename, e\n                )\n            )\n            overrides = None\n            if overrides:\n                overrides.append(config_filename)\n            else:", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigImportError as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigImportError('\\n'.join(errors))\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except ValueError as e:\n            errors.append(\n                ('Error while parsing configuration file {0}:\\n{1}'\n                .format(config_filename, str(e))))\n            continue\n        except UnicodeDecodeError", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n        with import logging\n\n    \"\"\"\n    config_parser = ConfigParser(interpolation=ExtendedInterpolation())\n    config_parser.optionxform = str  # type: ignore\n    config_parser.read_filenames(config_filenames)\n\n    return _load_configurations(config_parser, overrides, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"as arguments. Got %r\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('expected bytes, unicode, or EOF')\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    else:\n        return obj.encode('utf-8')\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    return obj.encode(\"utf-8\")\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"as arguments. Got %r\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('expected bytes, unicode, or EOF')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    else:\n        return obj.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < _TICKS_PER_SECOND:\n        raise ValueError(\"ticks out of bounds (0 <= ticks < {0})\".format(_TICKS_PER_SECOND))\n\n    if tz is not None:\n        return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / _TICKS_PER_SECOND), tz)\n\n    return cls.from_nanoseconds(ticks / _TICKS_PER_SECOND)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    result = datetime.timedelta(0, 0, 0, 0, 0, 0, tz.fromutc(ticks))\n    return cls(*result.utcoffset(tz).timetuple()[:6])\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (0 <= ticks < 86400000000)\" % ticks)\n    if tz is None:\n        return Time(0, 0, ticks)\n    else:\n        return tz.fromutc(ticks)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % cls.MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n\n    if tz is None:\n        return cls._from_unix(ticks)\n    else:\n        return cls._from_tz(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be greater than zero')\n    if ticks > (2 ** 31 - 1):\n        raise ValueError('ticks must be less than or equal to 2^31 - 1')\n\n    if tz is None:\n        return cls.from_seconds(ticks)\n\n    return cls.from_datetime(\n        datetime.datetime.fromtimestamp(ticks, tz))\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError('ticks out of bounds (0 <= ticks < 86400000000) with')\n\n    if tz is not None:\n        offset = tz.utcoffset(None).total_seconds() / 3600\n    else:\n        offset = 0\n\n    return cls(ticks + offset)\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < _TICKS_PER_SEC:\n        raise ValueError('ticks must be in range 0 <= ticks < %d (inclusive)' % _TICKS_PER_SEC)\n\n    if tz is None:\n        return cls.from_seconds(ticks)\n    else:\n        return cls.from_datetime(tz.localize(ticks))\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        tz = _UTC\n\n    return cls(ticks * 1e9, tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks {!r} out of bounds 0 <= ticks < 86400000000\".format(ticks))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / 1000000000, tz=tz))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < _TICKS_PER_SECOND:\n        raise ValueError(\"ticks out of bounds (0 <= ticks < {0})\".format(_TICKS_PER_SECOND))\n\n    if tz is not None:\n        return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / _TICKS_PER_SECOND), tz)\n\n    return cls.from_nanoseconds(ticks / _TICKS_PER_SECOND)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    result = datetime.timedelta(0, 0, 0, 0, 0, 0, tz.fromutc(ticks))\n    return cls(*result.utcoffset(tz).timetuple()[:6])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (0 <= ticks < 86400000000)\" % ticks)\n    if tz is None:\n        return Time(0, 0, ticks)\n    else:\n        return tz.fromutc(ticks)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % cls.MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n\n    if tz is None:\n        return cls._from_unix(ticks)\n    else:\n        return cls._from_tz(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be greater than zero')\n    if ticks > (2 ** 31 - 1):\n        raise ValueError('ticks must be less than or equal to 2^31 - 1')\n\n    if tz is None:\n        return cls.from_seconds(ticks)\n\n    return cls.from_datetime(\n        datetime.datetime.fromtimestamp(ticks, tz))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError('ticks out of bounds (0 <= ticks < 86400000000) with')\n\n    if tz is not None:\n        offset = tz.utcoffset(None).total_seconds() / 3600\n    else:\n        offset = 0\n\n    return cls(ticks + offset)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < _TICKS_PER_SEC:\n        raise ValueError('ticks must be in range 0 <= ticks < %d (inclusive)' % _TICKS_PER_SEC)\n\n    if tz is None:\n        return cls.from_seconds(ticks)\n    else:\n        return cls.from_datetime(tz.localize(ticks))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        tz = _UTC\n\n    return cls(ticks * 1e9, tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks {!r} out of bounds 0 <= ticks < 86400000000\".format(ticks))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / 1000000000, tz=tz))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        3: BoltProtocol3Handler,\n        4: BoltProtocol4Handler,\n        5: BoltProtocol5Handler,\n        6: BoltProtocol6Handler,\n        None: BoltProtocolUnknownHandler,\n    }\n\n    if protocol_version is None:\n        return version_tuples\n\n    return version_tuples.get(protocol_version, version_tuples[None])\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return _get_handlers(cls, protocol_version, BoltProtocol)\n    else:\n        return _get_handlers(cls, (BoltProtocol.VERSION,), BoltProtocol)\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or tuple()\n    if not isinstance(version_tuple, tuple):\n        raise TypeError(\n            'protocol_version must be a tuple with 3 or 4 elements, not {}'\n           .format(type(version_tuple)))\n\n    if len(version_tuple) < 3:\n        # support all versions\n        return {\n            PROTOCOL_VERSION_TUPLE_VERSION_V1: BoltV1Handler,\n            PROTOCOL_VERSION_TUPLE_VERSION_V2: BoltV2Handler,\n            PROTOCOL_VERSION_TUPLE_VERSION_V3: BoltV3Handler,\n        }\n\n    # support specific versions\n    return {\n        v: getattr(BoltV1Handler, v)\n        for v in version_tuple\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    return cls._protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        if len(protocol_version) == 2:\n            return cls._protocol_handlers_v2[protocol_version[0]](protocol_version[1])\n        else:\n            raise TypeError('Explicit protocol version must be passed in a tuple with version and type')\n    else:\n        return cls._protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        supported = [\n            (v, k) for k, v in cls.SUPPORTED_PROTOCOL_VERSIONS.items()\n            if v == protocol_version\n        ]\n        if len(supported) == 1:\n            return supported[0]\n        raise TypeError(\n            'Protocol version {} is not supported for bolt.'.format(protocol_version))\n\n    return cls.SUPPORTED_PROTOCOL_VERSIONS\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        supported = cls._protocol_version_to_class.keys()\n        if isinstance(protocol_version, tuple):\n            return {version: klass for version, klass in zip(supported, cls._protocol_version_to_class.values()) if version == protocol_version}\n        else:\n            return {version: klass for version, klass in zip(supported, cls._protocol_version_to_class.values())}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        3: BoltProtocol3Handler,\n        4: BoltProtocol4Handler,\n        5: BoltProtocol5Handler,\n        6: BoltProtocol6Handler,\n        None: BoltProtocolUnknownHandler,\n    }\n\n    if protocol_version is None:\n        return version_tuples\n\n    return version_tuples.get(protocol_version, version_tuples[None])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return _get_handlers(cls, protocol_version, BoltProtocol)\n    else:\n        return _get_handlers(cls, (BoltProtocol.VERSION,), BoltProtocol)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or tuple()\n    if not isinstance(version_tuple, tuple):\n        raise TypeError(\n            'protocol_version must be a tuple with 3 or 4 elements, not {}'\n           .format(type(version_tuple)))\n\n    if len(version_tuple) < 3:\n        # support all versions\n        return {\n            PROTOCOL_VERSION_TUPLE_VERSION_V1: BoltV1Handler,\n            PROTOCOL_VERSION_TUPLE_VERSION_V2: BoltV2Handler,\n            PROTOCOL_VERSION_TUPLE_VERSION_V3: BoltV3Handler,\n        }\n\n    # support specific versions\n    return {\n        v: getattr(BoltV1Handler, v)\n        for v in version_tuple\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        if len(protocol_version) == 2:\n            return cls._protocol_handlers_v2[protocol_version[0]](protocol_version[1])\n        else:\n            raise TypeError('Explicit protocol version must be passed in a tuple with version and type')\n    else:\n        return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        supported = [\n            (v, k) for k, v in cls.SUPPORTED_PROTOCOL_VERSIONS.items()\n            if v == protocol_version\n        ]\n        if len(supported) == 1:\n            return supported[0]\n        raise TypeError(\n            'Protocol version {} is not supported for bolt.'.format(protocol_version))\n\n    return cls.SUPPORTED_PROTOCOL_VERSIONS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        supported = cls._protocol_version_to_class.keys()\n        if isinstance(protocol_version, tuple):\n            return {version: klass for version, klass in zip(supported, cls._protocol_version_to_class.values()) if version == protocol_version}\n        else:\n            return {version: klass for version, klass in zip(supported, cls._protocol_version_to_class.values())}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _get_seq_with_type(seq._iterable, bufsize)\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        seq = seq._seq\n        type = seq._type\n        if type == \"bytes\":\n            return (seq, \"str\")\n        elif type == \"str\":\n            return (seq, \"bytes\")\n        elif type == \"int\":\n            return (seq, \"int\")\n        elif type == \"float\":\n            return (seq, \"float\")\n        elif type == \"bool\":\n            return (seq, \"bool\")\n        elif type == \"list\":\n            return (seq, \"list\")\n        elif type == \"tuple\":\n            return (seq, \"tuple\")\n        elif type == \"set\":\n            return (seq, \"set\")\n   ", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq, SequenceType.Sequence, bufsize\n    elif isinstance(seq, SequenceType):\n        return seq, SequenceType.Sequence, bufsize\n    else:\n        raise TypeError(\"seq must be a sequence or a SequenceType\")\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__()\n    elif isinstance(seq, bytes):\n        seq = (seq, bytes)\n    elif isinstance(seq, bytearray):\n        seq = (seq, bytearray)\n    elif isinstance(seq, memoryview):\n        seq = (seq.tobytes(), memoryview(seq.tobytes()))\n    elif isinstance(seq, unicode):\n        seq = (seq, unicode)\n    elif not isinstance(seq, (tuple, list)):\n        raise TypeError(\"expected bytes, bytearray, or memoryview, got %r\" %\n                        type(seq))\n    return seq[:2]\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize), seq._type\n    else:\n        return seq, seq._type\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize)\n    else:\n        return (seq, type(seq))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _get_seq_with_type(seq._iterable, bufsize)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        seq = seq._seq\n        type = seq._type\n        if type == \"bytes\":\n            return (seq, \"str\")\n        elif type == \"str\":\n            return (seq, \"bytes\")\n        elif type == \"int\":\n            return (seq, \"int\")\n        elif type == \"float\":\n            return (seq, \"float\")\n        elif type == \"bool\":\n            return (seq, \"bool\")\n        elif type == \"list\":\n            return (seq, \"list\")\n        elif type == \"tuple\":\n            return (seq, \"tuple\")\n        elif type == \"set\":\n            return (seq, \"set\")\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq, SequenceType.Sequence, bufsize\n    elif isinstance(seq, SequenceType):\n        return seq, SequenceType.Sequence, bufsize\n    else:\n        raise TypeError(\"seq must be a sequence or a SequenceType\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__()\n    elif isinstance(seq, bytes):\n        seq = (seq, bytes)\n    elif isinstance(seq, bytearray):\n        seq = (seq, bytearray)\n    elif isinstance(seq, memoryview):\n        seq = (seq.tobytes(), memoryview(seq.tobytes()))\n    elif isinstance(seq, unicode):\n        seq = (seq, unicode)\n    elif not isinstance(seq, (tuple, list)):\n        raise TypeError(\"expected bytes, bytearray, or memoryview, got %r\" %\n                        type(seq))\n    return seq[:2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize), seq._type\n    else:\n        return seq, seq._type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        self._scale = 0\n        if recompute:\n            self._scale = self._compute_scale()\n\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if recompute:\n            self._scale = 0\n            self.recompute()\n        return self\n\n    if recompute:\n        other = Histo1D(other)\n        self._scale = np.sum(self.edges * other.bins)\n        self.recompute()\n\n    return other\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale of histogram\n        if recompute:\n            self._scale = numpy.sum(self.edges**2) / self.bins\n        else:\n            self._scale = 0.0\n    else:\n        # set scale of histogram from other\n        self._scale = other.scale(self)\n", "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (self._scale is None):\n        return(self._scale)\n\n    if recompute or (isinstance(other, Histo) and other._scale is None):\n        self._scale = self._compute_scale(self.edges, self.bins, other)\n    return(self._scale)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is None:\n            if recompute:\n                self._scale = 0\n            else:\n                raise LenaValueError(\"Can't scale histogram of zero size\")\n        else:\n            self._scale = other\n    else:\n        if recompute:\n            self._scale = other\n        else:\n            self._scale = 0 if self._scale == 0 else self._scale / other\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is not None:\n        if other is None:\n            self._scale = scipy.integrate.trapz(self.edges, self.hist)\n        else:\n            self._scale = scipy.integrate.trapz(self.edges, self.hist, axis=1)\n\n        self._nbins = None  # force recompute\n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is None:\n        try:\n            self._scale = self._compute_scale(other)\n        except LenaException:\n            self._scale = 0.0\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        scale = self._scale\n    else:\n        if recompute or (not self._scale == other):\n            self._scale = other\n            scale = self._scale\n    return scale\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or (self._scale is None and other is None):\n        self._scale = 0\n        for x in self.bins:\n            self._scale += x.count\n\n        if self._scale!= 0:\n            self._scale = float(self._scale) / self.bins.count()\n\n    if other is not None:\n        if not isinstance(other, Histo):\n            raise LenaValueError(\"Input must be of type Histo\")\n        else:\n            self._scale = other._scale\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaHistoError(\"Histo scale already computed.\")\n        self._scale = compute_scale(self.edges, self.bins, other)\n        return self._scale\n\n    else:\n        return compute_scale(self.edges, self.bins, other)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        self._scale = 0\n        if recompute:\n            self._scale = self._compute_scale()\n\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if recompute:\n            self._scale = 0\n            self.recompute()\n        return self\n\n    if recompute:\n        other = Histo1D(other)\n        self._scale = np.sum(self.edges * other.bins)\n        self.recompute()\n\n    return other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale of histogram\n        if recompute:\n            self._scale = numpy.sum(self.edges**2) / self.bins\n        else:\n            self._scale = 0.0\n    else:\n        # set scale of histogram from other\n        self._scale = other.scale(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (self._scale is None):\n        return(self._scale)\n\n    if recompute or (isinstance(other, Histo) and other._scale is None):\n        self._scale = self._compute_scale(self.edges, self.bins, other)\n    return(self._scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self._scale is None:\n            if recompute:\n                self._scale = 0\n            else:\n                raise LenaValueError(\"Can't scale histogram of zero size\")\n        else:\n            self._scale = other\n    else:\n        if recompute:\n            self._scale = other\n        else:\n            self._scale = 0 if self._scale == 0 else self._scale / other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is not None:\n        if other is None:\n            self._scale = scipy.integrate.trapz(self.edges, self.hist)\n        else:\n            self._scale = scipy.integrate.trapz(self.edges, self.hist, axis=1)\n\n        self._nbins = None  # force recompute\n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is None:\n        try:\n            self._scale = self._compute_scale(other)\n        except LenaException:\n            self._scale = 0.0\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        scale = self._scale\n    else:\n        if recompute or (not self._scale == other):\n            self._scale = other\n            scale = self._scale\n    return scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or (self._scale is None and other is None):\n        self._scale = 0\n        for x in self.bins:\n            self._scale += x.count\n\n        if self._scale!= 0:\n            self._scale = float(self._scale) / self.bins.count()\n\n    if other is not None:\n        if not isinstance(other, Histo):\n            raise LenaValueError(\"Input must be of type Histo\")\n        else:\n            self._scale = other._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaHistoError(\"Histo scale already computed.\")\n        self._scale = compute_scale(self.edges, self.bins, other)\n        return self._scale\n\n    else:\n        return compute_scale(self.edges, self.bins, other)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if isinstance(other, (int, float)):\n            self._scale = other\n            self._recalculate_scale()\n            return self\n        else:\n            raise TypeError('unsupported type %s for scale' % type(other))\n", "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, ndarray):\n            other = other.tolist()\n        if not isinstance(other, list):\n            raise TypeError(\"scale only works with numpy arrays\")\n        for i in range(self.dim):\n            if other[i] is not None:\n                self.coords[i] = [self.coords[i][0] * other[i],\n                                  self.coords[i][1] * other[i],\n                                  self.coords[i][2] * other[i]]\n            else:\n                self.coords[i] = [self.coords[i][0],\n                                  self.coords[i][1],\n                                  self.coords[i][2]]\n    return self.coords\n", "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            if isinstance(other, tuple):\n                self._scale = other\n            else:\n                raise TypeError('Cannot rescale a graph with an unknown '\n                               'scale.')\n        else:\n            raise TypeError('Cannot rescale a graph with unknown '\n                           'scale.')\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale[:, -1] = other\n        else:\n            raise NotImplementedError(\"Only 2-dimensional graphs are supported.\")\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other:\n        try:\n            self._scale = other\n            return\n        except TypeError:\n            raise TypeError(\"Graph scale has to be a number.\")\n    try:\n        return self.coords[-1]\n    except IndexError:\n        raise ValueError(\"Graph has no coordinates.\")\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if len(self.coords)!= len(other):\n            raise ValueError(\"Graph has %d coordinates, expected %d\" % (len(self.coords), len(other)))\n        self._scale = other\n        for i, coord in enumerate(self.coords):\n            coord.scale(other[i])\n", "def scale(self, other=None):\n    if other is not None:\n        other = float(other)\n        if other!= 0:\n            raise LenaValueError('graph scale cannot be rescaled to other coordinates')\n    if self._scale is not None:\n        raise LenaError('graph has already been rescaled')\n    self._scale = other\n", "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self._update_coords()\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale[-1] = other\n        else:\n            raise NotImplementedError(\"Scale of graphs with dimension \"\n                                      \"{} is not supported.\".format(self.dim))\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other:\n        if not isinstance(other, (tuple, list)):\n            other = [other]\n        for i in range(len(self.coords)):\n            self.coords[i] = [\n                self.coords[i][0] * (1 if c in other else 0)\n                for c in self.field_names]\n    else:\n        return [self._scale[c] for c in self.field_names]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if isinstance(other, (int, float)):\n            self._scale = other\n            self._recalculate_scale()\n            return self\n        else:\n            raise TypeError('unsupported type %s for scale' % type(other))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, ndarray):\n            other = other.tolist()\n        if not isinstance(other, list):\n            raise TypeError(\"scale only works with numpy arrays\")\n        for i in range(self.dim):\n            if other[i] is not None:\n                self.coords[i] = [self.coords[i][0] * other[i],\n                                  self.coords[i][1] * other[i],\n                                  self.coords[i][2] * other[i]]\n            else:\n                self.coords[i] = [self.coords[i][0],\n                                  self.coords[i][1],\n                                  self.coords[i][2]]\n    return self.coords\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            if isinstance(other, tuple):\n                self._scale = other\n            else:\n                raise TypeError('Cannot rescale a graph with an unknown '\n                               'scale.')\n        else:\n            raise TypeError('Cannot rescale a graph with unknown '\n                           'scale.')\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale[:, -1] = other\n        else:\n            raise NotImplementedError(\"Only 2-dimensional graphs are supported.\")\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other:\n        try:\n            self._scale = other\n            return\n        except TypeError:\n            raise TypeError(\"Graph scale has to be a number.\")\n    try:\n        return self.coords[-1]\n    except IndexError:\n        raise ValueError(\"Graph has no coordinates.\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if len(self.coords)!= len(other):\n            raise ValueError(\"Graph has %d coordinates, expected %d\" % (len(self.coords), len(other)))\n        self._scale = other\n        for i, coord in enumerate(self.coords):\n            coord.scale(other[i])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        other = float(other)\n        if other!= 0:\n            raise LenaValueError('graph scale cannot be rescaled to other coordinates')\n    if self._scale is not None:\n        raise LenaError('graph has already been rescaled')\n    self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self._update_coords()\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if self.dim == 2:\n            self._scale[-1] = other\n        else:\n            raise NotImplementedError(\"Scale of graphs with dimension \"\n                                      \"{} is not supported.\".format(self.dim))\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other:\n        if not isinstance(other, (tuple, list)):\n            other = [other]\n        for i in range(len(self.coords)):\n            self.coords[i] = [\n                self.coords[i][0] * (1 if c in other else 0)\n                for c in self.field_names]\n    else:\n        return [self._scale[c] for c in self.field_names]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, it would be \"right\" and\n    \"middle\".  If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* make_value\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: True\n    >>> scale = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> hist_to_graph(make_value, make_value, field_names=field_names, scale=scale)\n\n    The resulting graph will have the same graph as the histogram object.\n    \"\"\"\n   ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* field_names\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * scale\n    >>> make_value = lambda bin_: None\n    >>> field_names = (\"x\", \"y\")\n    >>> scale = None\n    >>> hist = histogram.hist_to_graph(hist, make_value=make_value, field_names=field_names, scale=scale)\n    >>> hist.graph\n                                                                             ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. Everything number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph. with\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n\n    bins = hist.get_bins()\n    x = bins[field_names[0]]\n    y_mean = his", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with remove context when creating a numeric\n    graph.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    *field_names* set field names of the graph.  This can be used\n    to create fields names in the histogram scale.  For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    Return the resulting graph. with\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, get_coordinate, field_name", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, we use the histogram\n    scale. If it is ``True``, it uses the histogram scale. If it is\n    ``False``, then it uses the graph's unit of measurement.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value*\n    above that would be ``x``, ``y_mean`` and ``y_mean_error``.\n\n    *scale* behaves the same as the histogram scale. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, then\n    it uses the unit of measurement.\n\n    Retur", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The field names\n    must be the same as the dimension of the result.  This can be\n    \"left\" (default), \"right\" and \"middle\".  This can be used to\n    create a graph with remove context when creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: None\n    >>> hist_to_graph(hist, make_value, field_names=(\"x\", \"y\"), scale=Non", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram scale.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it can be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``make_value`` must be ``True``\n    to create a numeric graph.\n\n    *field_names* set field names of the graph. Some numbers may be\n    sequences of numbers (with context) or make_value must be defined.\n\n    If it is ``True``, it use the histogram's scale (unknown by\n    default).\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n\n    \"\"\"\n    if scale", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a \n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* \n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.               \n\n    This can be used to create a graph with remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(50)\n    (50, 50)\n    >>> make_value(100)\n    (100, 50)\n\n    \"\"\"\n    if make_value is None:\n ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Would be set the graph's scale (unknown by default). If it is ``True``,\n    it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"left\", \"right\", \"middle\")\n    >>> make_value = lambda bin_: (\"x\", \"y\", \"z\")\n    >>> field_names = (\"x\", \"y\", \"z\")\n    >>> scale = lambda bin_: bin_.mean_error\n\n    >>> graph = hist_to_graph(hist, make_value, get_coordinate, field_names,\n   ...                   "], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, it would be \"right\" and\n    \"middle\".  If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* make_value\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: True\n    >>> scale = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> hist_to_graph(make_value, make_value, field_names=field_names, scale=scale)\n\n    The resulting graph will have the same graph as the histogram object.\n    \"\"\"\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate* field_names\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * scale\n    >>> make_value = lambda bin_: None\n    >>> field_names = (\"x\", \"y\")\n    >>> scale = None\n    >>> hist = histogram.hist_to_graph(hist, make_value=make_value, field_names=field_names, scale=scale)\n    >>> hist.graph\n                                                                             ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. Everything number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph. with\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n\n    bins = hist.get_bins()\n    x = bins[field_names[0]]\n    y_mean = his", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with remove context when creating a numeric\n    graph.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    *field_names* set field names of the graph.  This can be used\n    to create fields names in the histogram scale.  For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    Return the resulting graph. with\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, get_coordinate, field_name", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, we use the histogram\n    scale. If it is ``True``, it uses the histogram scale. If it is\n    ``False``, then it uses the graph's unit of measurement.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value*\n    above that would be ``x``, ``y_mean`` and ``y_mean_error``.\n\n    *scale* behaves the same as the histogram scale. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, then\n    it uses the unit of measurement.\n\n    Retur", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The field names\n    must be the same as the dimension of the result.  This can be\n    \"left\" (default), \"right\" and \"middle\".  This can be used to\n    create a graph with remove context when creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: None\n    >>> hist_to_graph(hist, make_value, field_names=(\"x\", \"y\"), scale=Non", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram scale.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    >>> make_value(15)\n    (15, 15)\n\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it can be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``make_value`` must be ``True``\n    to create a numeric graph.\n\n    *field_names* set field names of the graph. Some numbers may be\n    sequences of numbers (with context) or make_value must be defined.\n\n    If it is ``True``, it use the histogram's scale (unknown by\n    default).\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n\n    \"\"\"\n    if scale", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a \n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* \n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.               \n\n    This can be used to create a graph with remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(50)\n    (50, 50)\n    >>> make_value(100)\n    (100, 50)\n\n    \"\"\"\n    if make_value is None:\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Would be set the graph's scale (unknown by default). If it is ``True``,\n    it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"left\", \"right\", \"middle\")\n    >>> make_value = lambda bin_: (\"x\", \"y\", \"z\")\n    >>> field_names = (\"x\", \"y\", \"z\")\n    >>> scale = lambda bin_: bin_.mean_error\n\n    >>> graph = hist_to_graph(hist, make_value, get_coordinate, field_names,\n   ...                   ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if vtype is not None and not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate %s has an invalid interface %s but %s does not provide %s\"\n            % (candidate, iface, vtype, iface.providedBy(candidate))\n        )\n    if not iface.providedBy(candidate) and tentative:\n        raise zope.interface.Invalid(\n            \"Candidate %s has an invalid interface %s but %s has no providedBy %s\"\n            % (candidate, iface, vtype, iface.providedBy(candidate))\n        )\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        # No type is specified in the candidate, check the interface itself\n        return _verify(iface, candidate, tentative, False)\n\n    # The interface is of the correct type\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, vtype)\n    _verify_element(iface, candidate.__class__, 'candidate')\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return False\n\n    if not tentative and candidate is not iface.context:\n        # Candidate is not an interface, but an IContext can be contained\n        # within that IContext.  This case can happen for example, when\n        # an extension is added to an extension that is not a subclass of\n        # IContext.\n        raise zope.interface.Invalid(\n            \"Candidate must be an IContext or an extension that \"\n            \"is not a subclass of IContext.  This case cannot happen.\"\n        )\n\n    if vtype is not None:\n        try:\n            vtype(candidate)\n        except ValueError:\n            # ValueError is raised when the candidate is not a valid type\n            # of any of the accepted types.\n            raise zope.interface.Invalid(\n                \"Candidate mus", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        return False\n    if not isinstance(iface, InterfaceClass):\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    if not tentative:\n        if vtype is None:\n            vtype = iface.providedBy(candidate)\n        if not vtype.verify(candidate):\n            raise zope.interface.Invalid(\"Candidate does not provide %s\" % iface.__name__)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate '%s' does not provide '%s'\" % (candidate, iface))\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide a callable method\" % candidate)\n        if vtype is not None:\n            if not hasattr(candidate, vtype):\n                raise zope.interface.Invalid(\n                    \"Candidate '%s' does not provide a %s method\" % (candidate, vtype))\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, vtype)\n    _verify_element_name(iface, candidate)\n    _verify_element_desc(iface, candidate)\n    _verify_element_providedBy(iface, candidate, vtype)\n    _verify_element_abstract(iface, candidate)\n    _verify_element_extent(iface, candidate)\n    _verify_element_candidates(iface, candidate)\n    _verify_element_valid(iface, candidate)\n    _verify_element_abstract_interface(iface, candidate)\n    _verify_element_extent_impl(iface, candidate)\n    _verify_element_candidates_extent(iface, candidate)\n    if tentative:\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # If the candidate has an implementation that provides the interface, we\n    # know we need to inspect it.\n    if hasattr(candidate, 'providedBy'):\n        iface.providedBy(candidate)\n\n    if hasattr(candidate, '__provides__'):\n        for iface in candidate.__provides__:\n            _verify(iface, candidate.__provides__[iface], tentative, vtype)\n\n    # All other methods are valid.\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not isinstance(candidate, vtype):\n        raise zope.interface.Invalid(\n            \"Candidate must be of type %s, got %s\" % (vtype, candidate))\n\n    if not tentative and hasattr(candidate,'verify'):\n        try:\n            candidate.verify()\n        except zope.interface.Invalid as exc:\n            raise zope.interface.Invalid(\n                \"Candidate %s has an invalid verification method: %s\" %\n                (candidate, exc))\n        except zope.security.interfaces.Unauthorized as exc:\n            raise zope.security.interfaces.Unauthorized(\n                \"Candidate %s has an unauthorized permission: %s\" %\n                (candidate, exc))\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a providedBy method\")\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a callable method\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if vtype is not None and not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate %s has an invalid interface %s but %s does not provide %s\"\n            % (candidate, iface, vtype, iface.providedBy(candidate))\n        )\n    if not iface.providedBy(candidate) and tentative:\n        raise zope.interface.Invalid(\n            \"Candidate %s has an invalid interface %s but %s has no providedBy %s\"\n            % (candidate, iface, vtype, iface.providedBy(candidate))\n        )\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        # No type is specified in the candidate, check the interface itself\n        return _verify(iface, candidate, tentative, False)\n\n    # The interface is of the correct type\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, vtype)\n    _verify_element(iface, candidate.__class__, 'candidate')\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return False\n\n    if not tentative and candidate is not iface.context:\n        # Candidate is not an interface, but an IContext can be contained\n        # within that IContext.  This case can happen for example, when\n        # an extension is added to an extension that is not a subclass of\n        # IContext.\n        raise zope.interface.Invalid(\n            \"Candidate must be an IContext or an extension that \"\n            \"is not a subclass of IContext.  This case cannot happen.\"\n        )\n\n    if vtype is not None:\n        try:\n            vtype(candidate)\n        except ValueError:\n            # ValueError is raised when the candidate is not a valid type\n            # of any of the accepted types.\n            raise zope.interface.Invalid(\n                \"Candidate mus", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        return False\n    if not isinstance(iface, InterfaceClass):\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    if not tentative:\n        if vtype is None:\n            vtype = iface.providedBy(candidate)\n        if not vtype.verify(candidate):\n            raise zope.interface.Invalid(\"Candidate does not provide %s\" % iface.__name__)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate '%s' does not provide '%s'\" % (candidate, iface))\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide a callable method\" % candidate)\n        if vtype is not None:\n            if not hasattr(candidate, vtype):\n                raise zope.interface.Invalid(\n                    \"Candidate '%s' does not provide a %s method\" % (candidate, vtype))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, vtype)\n    _verify_element_name(iface, candidate)\n    _verify_element_desc(iface, candidate)\n    _verify_element_providedBy(iface, candidate, vtype)\n    _verify_element_abstract(iface, candidate)\n    _verify_element_extent(iface, candidate)\n    _verify_element_candidates(iface, candidate)\n    _verify_element_valid(iface, candidate)\n    _verify_element_abstract_interface(iface, candidate)\n    _verify_element_extent_impl(iface, candidate)\n    _verify_element_candidates_extent(iface, candidate)\n    if tentative:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # If the candidate has an implementation that provides the interface, we\n    # know we need to inspect it.\n    if hasattr(candidate, 'providedBy'):\n        iface.providedBy(candidate)\n\n    if hasattr(candidate, '__provides__'):\n        for iface in candidate.__provides__:\n            _verify(iface, candidate.__provides__[iface], tentative, vtype)\n\n    # All other methods are valid.\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not isinstance(candidate, vtype):\n        raise zope.interface.Invalid(\n            \"Candidate must be of type %s, got %s\" % (vtype, candidate))\n\n    if not tentative and hasattr(candidate,'verify'):\n        try:\n            candidate.verify()\n        except zope.interface.Invalid as exc:\n            raise zope.interface.Invalid(\n                \"Candidate %s has an invalid verification method: %s\" %\n                (candidate, exc))\n        except zope.security.interfaces.Unauthorized as exc:\n            raise zope.security.interfaces.Unauthorized(\n                \"Candidate %s has an unauthorized permission: %s\" %\n                (candidate, exc))\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a providedBy method\")\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a callable method\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = iface.providedBy\n    except AttributeError:\n        if not tentative:\n            raise\n        return False\n\n    verify = providedBy(candidate)\n    if verify is False:\n        return False\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        verifyObjectState(iface, candidate)\n    except Invalid as err:\n        if tentative:\n            raise\n        else:\n            err.args = ('%s cannot be validated' % iface.__name__, )\n            raise\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        return iface.providedBy(candidate)\n    except (AttributeError, NotImplementedError):\n        pass\n    if not tentative:\n        verifyClass(IContent, candidate)\n    return False\n", "def verifyObject(iface, candidate, tentative=False):\n    if hasattr(candidate, '__providedBy__'):\n        verifyObject(iface, candidate.__providedBy__[1], tentative=True)\n        return True\n    if hasattr(candidate, 'providedBy'):\n        if not candidate.providedBy(iface):\n            raise zope.interface.Invalid(\n                \"%r has an invalid provided type %r\" % (iface, candidate))\n        return True\n    if hasattr(candidate, 'provides'):\n        if not candidate.provides(iface):\n            raise zope.interface.Invalid(\n                \"%r has an invalid provides type %r\" % (iface, candidate))\n        return True\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"%r has no __call__ method\" % iface)\n    return _verify(iface, candidate, tentative=tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyObjectSupport(iface, candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        # At this point, the candidate doesn't have a provided value, so let's\n        # try to validate the claim that it doesn't provide the interface.\n        if not hasattr(iface, 'providedBy'):\n            raise Invalid(\n                u\"Candidate has no providedBy attribute, instead got: %s\" %\n                iface\n            )\n        return verifyObjectSupport(iface, candidate.__class__)\n    if not tentative:\n        verifyObjectSupport(iface, candidate)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        raise Invalid(\"%r is not a Candidate\" % candidate)\n    if not iface.providedBy(candidate):\n        raise Invalid(\"%r is not a provider of %r\" % (candidate, iface))\n\n    if tentative:\n        return True\n    else:\n        verifyObject(iface.context, candidate, False)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, ICandidate)\n    verifyInstance(candidate, ICandidate, tentative=tentative)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            u'Candidate has no provider (%s)' % iface)\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            u'Candidate does not define a __call__ method')\n    if tentative and not hasattr(candidate,'verify'):\n        raise zope.interface.Invalid(\n            u'Candidate does not define a verify method')\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(IContent, candidate)\n    verifyClass(IContent, candidate.__class__)\n    if not hasattr(candidate, '__providedBy__'):\n        raise Invalid(\n            u\"Candidate %s has no __providedBy__ attribute\" % candidate)\n    if tentative:\n        # Make sure the candidate doesn't provide the interface.\n        verifyClass(ISubtype, candidate)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verify.verifyObject(iface, candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        if tentative:\n            raise zope.interface.Invalid('Candidate has no __providedBy__')\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = iface.providedBy\n    except AttributeError:\n        if not tentative:\n            raise\n        return False\n\n    verify = providedBy(candidate)\n    if verify is False:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        verifyObjectState(iface, candidate)\n    except Invalid as err:\n        if tentative:\n            raise\n        else:\n            err.args = ('%s cannot be validated' % iface.__name__, )\n            raise\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        return iface.providedBy(candidate)\n    except (AttributeError, NotImplementedError):\n        pass\n    if not tentative:\n        verifyClass(IContent, candidate)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if hasattr(candidate, '__providedBy__'):\n        verifyObject(iface, candidate.__providedBy__[1], tentative=True)\n        return True\n    if hasattr(candidate, 'providedBy'):\n        if not candidate.providedBy(iface):\n            raise zope.interface.Invalid(\n                \"%r has an invalid provided type %r\" % (iface, candidate))\n        return True\n    if hasattr(candidate, 'provides'):\n        if not candidate.provides(iface):\n            raise zope.interface.Invalid(\n                \"%r has an invalid provides type %r\" % (iface, candidate))\n        return True\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"%r has no __call__ method\" % iface)\n    return _verify(iface, candidate, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyObjectSupport(iface, candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        # At this point, the candidate doesn't have a provided value, so let's\n        # try to validate the claim that it doesn't provide the interface.\n        if not hasattr(iface, 'providedBy'):\n            raise Invalid(\n                u\"Candidate has no providedBy attribute, instead got: %s\" %\n                iface\n            )\n        return verifyObjectSupport(iface, candidate.__class__)\n    if not tentative:\n        verifyObjectSupport(iface, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        raise Invalid(\"%r is not a Candidate\" % candidate)\n    if not iface.providedBy(candidate):\n        raise Invalid(\"%r is not a provider of %r\" % (candidate, iface))\n\n    if tentative:\n        return True\n    else:\n        verifyObject(iface.context, candidate, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, ICandidate)\n    verifyInstance(candidate, ICandidate, tentative=tentative)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            u'Candidate has no provider (%s)' % iface)\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            u'Candidate does not define a __call__ method')\n    if tentative and not hasattr(candidate,'verify'):\n        raise zope.interface.Invalid(\n            u'Candidate does not define a verify method')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(IContent, candidate)\n    verifyClass(IContent, candidate.__class__)\n    if not hasattr(candidate, '__providedBy__'):\n        raise Invalid(\n            u\"Candidate %s has no __providedBy__ attribute\" % candidate)\n    if tentative:\n        # Make sure the candidate doesn't provide the interface.\n        verifyClass(ISubtype, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verify.verifyObject(iface, candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        if tentative:\n            raise zope.interface.Invalid('Candidate has no __providedBy__')\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, tentative)\n    verifyInterfaceContent(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface.__self__, candidate, tentative)\n    verifyClassContent(iface.__func__, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    # We need to ensure that the class is actually present on the\n    # *candidate* machine at the *iface* machine (otherwise the\n    # *verifyClass* will fail).\n    if not hasattr(candidate, '__call__'):\n        raise TypeError(\"%s not callable\" % candidate)\n\n    # The *candidate* machine may not provide *iface* on its own, so we\n    # check that it *does* have the correct __call__ method.\n    if hasattr(candidate, '__call__') and not hasattr(iface, '__call__'):\n        raise TypeError(\"%s not callable\" % iface)\n\n    # The *candidate* machine may not provide *iface* on its *candidate*\n    # machine at all, so we check that it *does* have the correct __call__\n    # method.\n    if hasattr(candidate, '__call__') and not hasattr(iface, '__call__'):\n        raise TypeError(\"%s not callable\" % iface)\n\n    verifyClass._verify = _verify\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    if issubclass(iface, Candidate) and not tentative:\n        return\n\n    msg = \"%s must provide %s, got %s\" % (iface, repr(candidate), repr(type(candidate)))\n    assert iface is not Candidate, msg\n    assert candidate is not None, msg\n", "def verifyClass(iface, candidate, tentative=False):\n    # verify that the candidate actually provides *iface*.\n    verifyClassCandidate(iface, candidate, tentative)\n    # verify that the *candidate* might actually provide *iface*.\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n    if not candidate.provided:\n        raise ValueError(\"Class %s did not provide %s\" % (iface.__name__,\n                                                         candidate.__name__))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, tentative)\n    verifyInterfaceContent(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface.__self__, candidate, tentative)\n    verifyClassContent(iface.__func__, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    # We need to ensure that the class is actually present on the\n    # *candidate* machine at the *iface* machine (otherwise the\n    # *verifyClass* will fail).\n    if not hasattr(candidate, '__call__'):\n        raise TypeError(\"%s not callable\" % candidate)\n\n    # The *candidate* machine may not provide *iface* on its own, so we\n    # check that it *does* have the correct __call__ method.\n    if hasattr(candidate, '__call__') and not hasattr(iface, '__call__'):\n        raise TypeError(\"%s not callable\" % iface)\n\n    # The *candidate* machine may not provide *iface* on its *candidate*\n    # machine at all, so we check that it *does* have the correct __call__\n    # method.\n    if hasattr(candidate, '__call__') and not hasattr(iface, '__call__'):\n        raise TypeError(\"%s not callable\" % iface)\n\n    verifyClass._verify = _verify\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if issubclass(iface, Candidate) and not tentative:\n        return\n\n    msg = \"%s must provide %s, got %s\" % (iface, repr(candidate), repr(type(candidate)))\n    assert iface is not Candidate, msg\n    assert candidate is not None, msg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    # verify that the candidate actually provides *iface*.\n    verifyClassCandidate(iface, candidate, tentative)\n    # verify that the *candidate* might actually provide *iface*.\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n    if not candidate.provided:\n        raise ValueError(\"Class %s did not provide %s\" % (iface.__name__,\n                                                         candidate.__name__))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    mc = explicit_mc.__metaclass__\n    while mc in bases:\n        bases = bases[bases.index(mc):]\n        mc = explicit_mc.__metaclass__\n    return mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if (issubclass(base, explicit_mc[0]) and\n            base!= explicit_mc[0] and\n                not issubclass(base, explicit_mc[1])):\n            return (base, explicit_mc[1])\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if (issubclass(base, explicit_mc) and\n                base is not explicit_mc):\n            return base\n    return _MetaClass\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            return base\n    raise TypeError(\"could not determine metaclass\")\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            return base\n    raise ValueError(\"Couldn't determine metaclass from %s\" % bases)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n\n    for base in bases:\n        if base is explicit_mc:\n            # Special case: explicit_mc has no __metaclass__\n            return type\n        if issubclass(base, explicit_mc):\n            # Special case: base is a subclass of explicit_mc\n            return type\n        if issubclass(base, minimalBases):\n            # Special case: base is a subclass of minimalBases\n            return base\n        if base is object and explicit_mc is not object:\n            # Special case: base is an object and explicit_mc is an object\n            return object\n        if issubclass(base, minimalBases) and explicit_mc is base:\n            # Special case: base is an object and explicit_mc is an object\n            return object\n\n    # No", "def determineMetaclass(bases, explicit_mc=None):\n    def getMetaclass(cls):\n        cls_meta = getattr(cls, \"__metaclass__\", None)\n        if cls_meta is not None:\n            return cls_meta\n        if explicit_mc is None:\n            return super(type, cls).getMetaclass()\n        if issubclass(cls, explicit_mc):\n            return explicit_mc\n        if issubclass(cls, explicit_mc) and cls.__name__ == \"builtins\":\n            return type\n        # find bases with the same __name__ and __metaclass__\n        return super(type, cls).getMetaclass()\n    bases = tuple(bases)\n    bases = sorted(bases, key=lambda base: base.__name__)\n    bases = sorted(bases, key=getMetaclass)\n    return type(\"Meta\", bases, {})\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    if explicit_mc is None:\n        return type\n\n    mc_bases = [b for b in bases if issubclass(b, explicit_mc)]\n    if len(mc_bases) == 1:\n        return mc_bases[0]\n    else:\n        # TODO: test for multiple inheritance\n        raise TypeError(\"ambiguous base classes: %s\" % ', '.join(mc_bases))\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n\n    # find the highest priority metaclass\n    highest = 0\n    for i, base in enumerate(bases):\n        if issubclass(base, explicit_mc[i]):\n            highest = i + 1\n\n    # determine what is the highest priority\n    if highest > 0:\n        return explicit_mc[highest - 1]\n    else:\n        # no priority metaclass found\n        return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in explicit_mc:\n        if issubclass(base, type):\n            return base, True\n    return explicit_mc[0], False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    mc = explicit_mc.__metaclass__\n    while mc in bases:\n        bases = bases[bases.index(mc):]\n        mc = explicit_mc.__metaclass__\n    return mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if (issubclass(base, explicit_mc[0]) and\n            base!= explicit_mc[0] and\n                not issubclass(base, explicit_mc[1])):\n            return (base, explicit_mc[1])\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if (issubclass(base, explicit_mc) and\n                base is not explicit_mc):\n            return base\n    return _MetaClass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            return base\n    raise TypeError(\"could not determine metaclass\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            return base\n    raise ValueError(\"Couldn't determine metaclass from %s\" % bases)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n\n    for base in bases:\n        if base is explicit_mc:\n            # Special case: explicit_mc has no __metaclass__\n            return type\n        if issubclass(base, explicit_mc):\n            # Special case: base is a subclass of explicit_mc\n            return type\n        if issubclass(base, minimalBases):\n            # Special case: base is a subclass of minimalBases\n            return base\n        if base is object and explicit_mc is not object:\n            # Special case: base is an object and explicit_mc is an object\n            return object\n        if issubclass(base, minimalBases) and explicit_mc is base:\n            # Special case: base is an object and explicit_mc is an object\n            return object\n\n    # No", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    def getMetaclass(cls):\n        cls_meta = getattr(cls, \"__metaclass__\", None)\n        if cls_meta is not None:\n            return cls_meta\n        if explicit_mc is None:\n            return super(type, cls).getMetaclass()\n        if issubclass(cls, explicit_mc):\n            return explicit_mc\n        if issubclass(cls, explicit_mc) and cls.__name__ == \"builtins\":\n            return type\n        # find bases with the same __name__ and __metaclass__\n        return super(type, cls).getMetaclass()\n    bases = tuple(bases)\n    bases = sorted(bases, key=lambda base: base.__name__)\n    bases = sorted(bases, key=getMetaclass)\n    return type(\"Meta\", bases, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    if explicit_mc is None:\n        return type\n\n    mc_bases = [b for b in bases if issubclass(b, explicit_mc)]\n    if len(mc_bases) == 1:\n        return mc_bases[0]\n    else:\n        # TODO: test for multiple inheritance\n        raise TypeError(\"ambiguous base classes: %s\" % ', '.join(mc_bases))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n\n    # find the highest priority metaclass\n    highest = 0\n    for i, base in enumerate(bases):\n        if issubclass(base, explicit_mc[i]):\n            highest = i + 1\n\n    # determine what is the highest priority\n    if highest > 0:\n        return explicit_mc[highest - 1]\n    else:\n        # no priority metaclass found\n        return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    for base in explicit_mc:\n        if issubclass(base, type):\n            return base, True\n    return explicit_mc[0], False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    if value is not default:\n        self.__dirty = True\n    return value\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[-1][1]\n    return super(DotDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    try:\n        value = self[key]\n        del self[key]\n        return value\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is default:\n        if default is not self.__marker:\n            return default\n        raise KeyError(key)\n    return value\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self).__new__(self.__class__)\n    return super(_CaseInsensitiveDict, self).pop(key.lower(), default)\n", "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__map.remove(key)\n    return value\n", "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        if default == self.__marker:\n            return self.__default\n        return default\n    raise KeyError(key)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[-1][2]\n    return super(DotDict, self).pop(key, default)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    if value is not default:\n        self.__dirty = True\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[-1][1]\n    return super(DotDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        value = self[key]\n        del self[key]\n        return value\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is default:\n        if default is not self.__marker:\n            return default\n        raise KeyError(key)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self).__new__(self.__class__)\n    return super(_CaseInsensitiveDict, self).pop(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__map.remove(key)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        if default == self.__marker:\n            return self.__default\n        return default\n    raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[-1][2]\n    return super(DotDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    key = next(iter(self))\n    return key, self.pop(key)\n", "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('Popitem from an empty collection')\n", "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.NotFound(e)\n", "def popitem(self):\n    try:\n        key = list(self.__counter.items())[0][0]\n        return self.__counter.pop(key).items()[0]\n    except IndexError:\n        raise KeyError('Cannot pop from an empty hash table')\n", "def popitem(self):\n    freq = self.__counter.popitem()\n    return freq[1], freq[0]\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): dictionary is empty\")\n\n    key = next(iter(self))\n    value = self[key]\n    self.__counter -= 1\n    return (key, value)\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    key = next(iter(self))\n    return key, self.pop(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('Popitem from an empty collection')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.NotFound(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = list(self.__counter.items())[0][0]\n        return self.__counter.pop(key).items()[0]\n    except IndexError:\n        raise KeyError('Cannot pop from an empty hash table')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    freq = self.__counter.popitem()\n    return freq[1], freq[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): dictionary is empty\")\n\n    key = next(iter(self))\n    value = self[key]\n    self.__counter -= 1\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is already empty')\n", "def popitem(self):\n    for k in self.__order:\n        if k in self:\n            del self[k]\n    return (k, self[k])\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    try:\n        key = self.__order.pop()\n    except IndexError:\n        raise KeyError('pop from an empty OrderedDict')\n    return key, self[key]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    result = dict.popitem(self)\n    self.__order.remove(result[0])\n    return result\n", "def popitem(self):\n    k = self.__order.pop()\n    v = dict.pop(self, k)\n    self.__order.add(k)\n    return k, v\n", "def popitem(self):\n    return self.__order.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    for k in self.__order:\n        if k in self:\n            del self[k]\n    return (k, self[k])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__order.pop()\n    except IndexError:\n        raise KeyError('pop from an empty OrderedDict')\n    return key, self[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    result = dict.popitem(self)\n    self.__order.remove(result[0])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    k = self.__order.pop()\n    v = dict.pop(self, k)\n    self.__order.add(k)\n    return k, v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    try:\n        key = random.choice(list(self))\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return key, value\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(str(e))\n", "def popitem(self):\n    return dict.popitem(self)\n", "def popitem(self):\n    return super(Documents, self).popitem()[0]\n", "def popitem(self):\n    return dict.popitem(self)\n", "def popitem(self):\n    try:\n        key = random.choice(self)\n        value = self[key]\n        del self[key]\n        return key, value\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self))\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return key, value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return super(Documents, self).popitem()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(self)\n        value = self[key]\n        del self[key]\n        return key, value\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    in_regex = r'(?P<' + self._in_obj.param + '>' + self._escape_char + ')'\n    return re.compile(in_regex)\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern + self._escape_char + self._out_obj.pattern\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.sub(self._escape_char, self._in_obj.group(0))\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern + self._escape_char\n", "def _create_in_regex(self) -> Pattern:\n    return (\n        r\"(?P<{param}>{escape_char})\"\n        r\"\\{(?P<{param}>{escape_char})\\}\"\n    ).format(**self._in_obj)\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.sub(\n        lambda match_group: self._escape_char + match_group.group(1),\n        self._in_obj.pattern,\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = r'(?P<' + self._in_obj.param + '>' + self._escape_char + ')'\n    return re.compile(in_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern + self._escape_char + self._out_obj.pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.sub(self._escape_char, self._in_obj.group(0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern + self._escape_char\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return (\n        r\"(?P<{param}>{escape_char})\"\n        r\"\\{(?P<{param}>{escape_char})\\}\"\n    ).format(**self._in_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.sub(\n        lambda match_group: self._escape_char + match_group.group(1),\n        self._in_obj.pattern,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        in_obj=self._in_obj, out_obj=self._out_obj, in_regex=self._in_regex,\n        out_regex=self._out_regex, escape_char=self._escape_char,\n    )\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._in_regex, self._out_obj,\n                                  self._out_regex, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_regex, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._in_regex, self._out_obj)\n    converter.escape_char = self._escape_char\n    converter.expand_tuples = self._expand_tuples\n    converter.regex_rules = self._regex_rules\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_regex)\n\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(\n        self._in_obj, self._out_obj, self._in_regex, self._out_regex\n    )\n    converter.escape_char = self._escape_char\n    converter.escape_char_in_tuple = self._escape_char_in_tuple\n    converter.escape_char_out_tuple = self._escape_char_out_tuple\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        self._in_obj,\n        self._in_regex,\n        self._out_obj,\n        self._out_regex,\n        self._escape_char,\n        self._escape_char_inc,\n        self._escape_char_exc,\n    )\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj,\n                                 self._in_regex, self._out_regex)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.escape_char = self._escape_char\n    converter.escape_char_re = self._escape_char_re\n    converter.expand_tuples = self._expand_tuples\n    return converter\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        in_obj=self._in_obj, out_obj=self._out_obj, in_regex=self._in_regex,\n        out_regex=self._out_regex, escape_char=self._escape_char,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._in_regex, self._out_obj,\n                                  self._out_regex, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_regex, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._in_regex, self._out_obj)\n    converter.escape_char = self._escape_char\n    converter.expand_tuples = self._expand_tuples\n    converter.regex_rules = self._regex_rules\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_regex)\n\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(\n        self._in_obj, self._out_obj, self._in_regex, self._out_regex\n    )\n    converter.escape_char = self._escape_char\n    converter.escape_char_in_tuple = self._escape_char_in_tuple\n    converter.escape_char_out_tuple = self._escape_char_out_tuple\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        self._in_obj,\n        self._in_regex,\n        self._out_obj,\n        self._out_regex,\n        self._escape_char,\n        self._escape_char_inc,\n        self._escape_char_exc,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj,\n                                 self._in_regex, self._out_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.escape_char = self._escape_char\n    converter.escape_char_re = self._escape_char_re\n    converter.expand_tuples = self._expand_tuples\n    return converter\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('datetime is no longer a zone')\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "def fromutc(self, dt):\n    if self._fold_status(dt_utc, dt):\n        return dt\n    return dt.astimezone(self._tz)\n", "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"The given datetime is no longer a timezone-aware datetime\")\n\n    return dt.astimezone(self)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('datetime is no longer a zone')\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self._fold_status(dt_utc, dt):\n        return dt\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"The given datetime is no longer a timezone-aware datetime\")\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        # Convert to UTC\n        dt = dt.replace(tzinfo=tzinfo)\n\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.localize(dt)\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.utcoffset(dt)\n    raise TypeError(\"%r is not a datetime or datetime64 type\" % dt)\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt.astimezone(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        # Convert to UTC\n        dt = dt.replace(tzinfo=tzinfo)\n\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.localize(dt)\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the specified tzinfo.\n        return tzinfo.utcoffset(dt)\n    raise TypeError(\"%r is not a datetime or datetime64 type\" % dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt.astimezone(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = self._cutter.replace(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _split_bytes(before, self._cutter)\n    self._cutter.append(after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cutter = cut_chars(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cutter.set_delimiter(b','.join(before), b','.join(after))\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = _get_slice_delimiter(before, after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = _cut_chars(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut_chars(before, after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = cut_chars(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = b'\\x00'.join([before, after])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = self._cutter.replace(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _split_bytes(before, self._cutter)\n    self._cutter.append(after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cutter = cut_chars(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cutter.set_delimiter(b','.join(before), b','.join(after))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = _get_slice_delimiter(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = _cut_chars(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut_chars(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = cut_chars(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = b'\\x00'.join([before, after])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: Request) -> bool:\n    if request.type == \"message\" and request.payload.type == \"pub\":\n        return True\n    elif request.type == \"legacy\" and request.payload.type == \"payload\":\n        return True\n    elif request.payload.type == \"legacy\":\n        return False\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.method in ['POST', 'PUT', 'PATCH', 'DELETE'] and request.json.get('private')\n", "def identify_request(request: Request) -> bool:\n    if request.is_legacy_request:\n        pub_message = request.get_public_message()\n        if pub_message:\n            return True\n\n    return request.message.is_legacy_request\n", "def identify_request(request: Element) -> bool:\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}muc':\n        return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:2.0}legacy':\n        if 'payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}muclegacy':\n        if 'legacy_payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}presence':\n        if 'payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}presencelegacy':\n        if 'legacy_payload' in request.attrib:\n            return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.is_legacy_request\n        and \"x-legacy-payload\" in request.headers\n    )\n", "def identify_request(request: Request):\n    if request.method == 'POST':\n        return request.body\n\n    if request.method == 'POST' and request.get('json', False):\n        return True\n\n    public_message = request.get('public', False)\n    if public_message and request.get('legacy_payload', False):\n        return True\n\n    return False\n", "def identify_request(request: Request):\n    if request.method == 'POST':\n        if request.is_legacy_request and 'payload' in request.POST:\n            return True\n        elif request.is_legacy_request:\n            if 'payload' not in request.POST:\n                return True\n        else:\n            if 'payload' in request.POST:\n                return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n\n    # Send private message first if it is a legacy payload\n    if request.method == \"POST\" and request.json.get(\"payload\") == \"legacy\":\n        return True\n\n    try:\n        return request.json.get(\"private\") == \"true\"\n    except KeyError:\n        pass\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.message is not None:\n        return True\n\n    private = request.get('private', False)\n    if private is False:\n        return False\n\n    public = request.get('public', False)\n    if public is False:\n        return True\n\n    legacy = request.get('legacy', False)\n    if legacy is True:\n        return False\n\n    return True\n", "def identify_request(request: Request):\n    if request.message.is_multipart():\n        return request.message.get_content_type() =='multipart/mixed'\n\n    if request.message.is_text():\n        return request.message.get('Content-Type') == 'text/plain'\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.type == \"message\" and request.payload.type == \"pub\":\n        return True\n    elif request.type == \"legacy\" and request.payload.type == \"payload\":\n        return True\n    elif request.payload.type == \"legacy\":\n        return False\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method in ['POST', 'PUT', 'PATCH', 'DELETE'] and request.json.get('private')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_legacy_request:\n        pub_message = request.get_public_message()\n        if pub_message:\n            return True\n\n    return request.message.is_legacy_request\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Element) -> bool:\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}muc':\n        return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:2.0}legacy':\n        if 'payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}muclegacy':\n        if 'legacy_payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}presence':\n        if 'payload' in request.attrib:\n            return True\n    if request.tag == '{urn:ietf:params:xml:ns:xmpp-stanzas:1.0}presencelegacy':\n        if 'legacy_payload' in request.attrib:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.is_legacy_request\n        and \"x-legacy-payload\" in request.headers\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.method == 'POST':\n        return request.body\n\n    if request.method == 'POST' and request.get('json', False):\n        return True\n\n    public_message = request.get('public', False)\n    if public_message and request.get('legacy_payload', False):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.method == 'POST':\n        if request.is_legacy_request and 'payload' in request.POST:\n            return True\n        elif request.is_legacy_request:\n            if 'payload' not in request.POST:\n                return True\n        else:\n            if 'payload' in request.POST:\n                return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n\n    # Send private message first if it is a legacy payload\n    if request.method == \"POST\" and request.json.get(\"payload\") == \"legacy\":\n        return True\n\n    try:\n        return request.json.get(\"private\") == \"true\"\n    except KeyError:\n        pass\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.message is not None:\n        return True\n\n    private = request.get('private', False)\n    if private is False:\n        return False\n\n    public = request.get('public', False)\n    if public is False:\n        return True\n\n    legacy = request.get('legacy', False)\n    if legacy is True:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.message.is_multipart():\n        return request.message.get_content_type() =='multipart/mixed'\n\n    if request.message.is_text():\n        return request.message.get('Content-Type') == 'text/plain'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: Request) -> bool:\n    if request.method in [\"POST\", \"PUT\"] and \"import\" in request.POST:\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.method == 'GET':\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request) and \"jsonrpc\" in request.params and \"method\" in request.params:\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.method == \"GET\" and request.path_url.endswith(\"federation.json\")\n", "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.form\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # if we get a dictionary request, we need to look at the keys to identify the request\n        return bool(request.keys())\n    except AttributeError:\n        # if we get a string request, we need to look at the keys to identify the request\n        return isinstance(request, str)\n", "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and \"/import\" in request.url\n        and \"/federation\" not in request.url\n    )\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'GET' and request['path'] == '/matrix/v1/identify'\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest) and \"import-federation-json\" in request.get_path():\n        return True\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix' and \\\n        request.get('version') == 'v1' and \\\n        'importJson' in request\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method in [\"POST\", \"PUT\"] and \"import\" in request.POST:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == 'GET':\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request) and \"jsonrpc\" in request.params and \"method\" in request.params:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"GET\" and request.path_url.endswith(\"federation.json\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.form\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # if we get a dictionary request, we need to look at the keys to identify the request\n        return bool(request.keys())\n    except AttributeError:\n        # if we get a string request, we need to look at the keys to identify the request\n        return isinstance(request, str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and \"/import\" in request.url\n        and \"/federation\" not in request.url\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'GET' and request['path'] == '/matrix/v1/identify'\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest) and \"import-federation-json\" in request.get_path():\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix' and \\\n        request.get('version') == 'v1' and \\\n        'importJson' in request\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.isoformat() if dt else None\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.isoformat() if dt else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    tags = set()\n    replaced = ''\n    for match in re.finditer(r'<[^>]+>', text):\n        replaced += text[match.end():]\n        tags.add(match.group(0))\n    if replacer is not None:\n        for tag in tags:\n            replaced = replacer(replaced, tag)\n    return tags, replaced\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n    tags = set()\n    text = bleach.clean(text, **bleach.kwargs_from_settings({'replace': replacer}))\n    for match in re.finditer(r'(?i)(<[^<>]+>)', text):\n        tags.add(match.group(0))\n    return tags, text\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    code_block = '```py\\n'\n    replacer = replacer or (lambda x: x)\n    text = replacer(text)\n    if text.startswith(code_block):\n        text = text[len(code_block):]\n        return set(replacer(word) for word in text.split('\\n')), text\n    return set(), text\n", "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    tags = set()\n    code_block = None\n    for match in re.finditer(r\"(?i)\\b((?:{{[^}}]*})|(?:{#[^}}]*}))\\b\", text):\n        if code_block is None or match.group(0) == code_block:\n            code_block = match.group(0)\n            tags.update(find_code_tags(text, replacer))\n    return tags, code_block\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replace_tag(match: Match) -> str:\n        return replacer(match.group(0))\n\n    def replacer(match: Match) -> str:\n        tag = match.group(1)\n        return '<span class=\"{tag}\">{replace}</span>'.format(\n            tag=tag, replace=replace_tag(match.group(2))\n        )\n\n    return re.findall(r'<(.+?)>', text, re.DOTALL | re.UNICODE)\n", "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    # Try to find all tags inside code blocks\n    code_block_re = re.compile(r\"<pre.*?>\")\n    code_tags = code_block_re.findall(text)\n    if code_tags:\n        text = replacer(code_tags)\n\n    # Try to find all tags inside comments\n    comment_re = re.compile(r\"<!--.*?-->\")\n    comment_tags = comment_re.findall(text)\n    if comment_tags:\n        text = replacer(comment_tags)\n\n    # Try to find all tags inside blocks\n    block_re = re.compile(r\"<(?!(?:\\n\\s*))\")\n    block_tags = block_re.findall(text)\n    if block_tags:\n        text = replacer(block_tags)\n\n    return set(text), text\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = text.replace(\"<!-- ignore_tags -->\", \"\")\n    text = text.replace(\"<!-- end_ignore_tags -->\", \"\")\n\n    if replacer:\n        return replacer(text)\n\n    found_tags = re.findall(\"<([^>]+)>\", text)\n    found_tags = set(found_tags)\n\n    return found_tags, text\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is not None:\n        text = replacer(text)\n\n    tags = set()\n    text = text.split()\n    for i, word in enumerate(text):\n        if word.startswith(\"<\") and word.endswith(\">\"):\n            original = word\n            word = word.replace(\"<\", \"\")\n            word = word.replace(\">\", \"\")\n            tags.add(original)\n            text[i] = word\n\n    return tags, text\n", "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    # TODO: Improve this finding logic\n    tags = set()\n    for match in re.finditer(r\"<[^>]*>\", text):\n        tags.add(match.group(0))\n\n    if replacer:\n        text = replacer(text)\n\n    return tags, text\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    tags = set()\n    for match in re.finditer(r\"(?i)(?:<!\\\\)([^<>]+)(?:</\\1>)\", text):\n        try:\n            tags.add(replacer(match.group(1)))\n        except AttributeError:\n            pass\n    return tags, text\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    tags = set()\n    replaced = ''\n    for match in re.finditer(r'<[^>]+>', text):\n        replaced += text[match.end():]\n        tags.add(match.group(0))\n    if replacer is not None:\n        for tag in tags:\n            replaced = replacer(replaced, tag)\n    return tags, replaced\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n    tags = set()\n    text = bleach.clean(text, **bleach.kwargs_from_settings({'replace': replacer}))\n    for match in re.finditer(r'(?i)(<[^<>]+>)', text):\n        tags.add(match.group(0))\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    code_block = '```py\\n'\n    replacer = replacer or (lambda x: x)\n    text = replacer(text)\n    if text.startswith(code_block):\n        text = text[len(code_block):]\n        return set(replacer(word) for word in text.split('\\n')), text\n    return set(), text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    tags = set()\n    code_block = None\n    for match in re.finditer(r\"(?i)\\b((?:{{[^}}]*})|(?:{#[^}}]*}))\\b\", text):\n        if code_block is None or match.group(0) == code_block:\n            code_block = match.group(0)\n            tags.update(find_code_tags(text, replacer))\n    return tags, code_block\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replace_tag(match: Match) -> str:\n        return replacer(match.group(0))\n\n    def replacer(match: Match) -> str:\n        tag = match.group(1)\n        return '<span class=\"{tag}\">{replace}</span>'.format(\n            tag=tag, replace=replace_tag(match.group(2))\n        )\n\n    return re.findall(r'<(.+?)>', text, re.DOTALL | re.UNICODE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    # Try to find all tags inside code blocks\n    code_block_re = re.compile(r\"<pre.*?>\")\n    code_tags = code_block_re.findall(text)\n    if code_tags:\n        text = replacer(code_tags)\n\n    # Try to find all tags inside comments\n    comment_re = re.compile(r\"<!--.*?-->\")\n    comment_tags = comment_re.findall(text)\n    if comment_tags:\n        text = replacer(comment_tags)\n\n    # Try to find all tags inside blocks\n    block_re = re.compile(r\"<(?!(?:\\n\\s*))\")\n    block_tags = block_re.findall(text)\n    if block_tags:\n        text = replacer(block_tags)\n\n    return set(text), text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = text.replace(\"<!-- ignore_tags -->\", \"\")\n    text = text.replace(\"<!-- end_ignore_tags -->\", \"\")\n\n    if replacer:\n        return replacer(text)\n\n    found_tags = re.findall(\"<([^>]+)>\", text)\n    found_tags = set(found_tags)\n\n    return found_tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    if replacer is not None:\n        text = replacer(text)\n\n    tags = set()\n    text = text.split()\n    for i, word in enumerate(text):\n        if word.startswith(\"<\") and word.endswith(\">\"):\n            original = word\n            word = word.replace(\"<\", \"\")\n            word = word.replace(\">\", \"\")\n            tags.add(original)\n            text[i] = word\n\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    # TODO: Improve this finding logic\n    tags = set()\n    for match in re.finditer(r\"<[^>]*>\", text):\n        tags.add(match.group(0))\n\n    if replacer:\n        text = replacer(text)\n\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    tags = set()\n    for match in re.finditer(r\"(?i)(?:<!\\\\)([^<>]+)(?:</\\1>)\", text):\n        try:\n            tags.add(replacer(match.group(1)))\n        except AttributeError:\n            pass\n    return tags, text\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n\n    linkified = bleach.linkify(text, **bleach.ALLOWED_TAGS)\n\n    # remove excess whitespace\n    linkified = re.sub('\\s+','', linkified)\n\n    # add a href attribute\n    linkified = add_attribute_to_links(linkified)\n\n    return linkified\n", "def process_text_links(text):\n    text = linkify(text, strip_href=True)\n    text = add_attributes(text)\n    return bleach.clean(text, **settings.BLEACH_CLEAN_OPTIONS)\n", "def process_text_links(text):\n    def linkify(match):\n        link = match.group(1)\n        if link.startswith('\"') and link.endswith('\"'):\n            return '\"{}\"'.format(link)\n        return link\n\n    text = re.sub(r'((?<=\\]\\])\\])', linkify, text)\n    return text\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "def process_text_links(text):\n    text = bleach.clean(text, **bleach_options)\n    linker = Linker(**linker_options)\n    return linker.linkify(text)\n", "def process_text_links(text):\n    text = linkify(text, smart_amp=False)\n    return text\n", "def process_text_links(text):\n    text = linkify(text)\n    text = restructured_text(text)\n    text = restructured_text_strip_tags(text)\n    text = escape(text)\n    return text\n", "def process_text_links(text):\n\n    def linkify(match):\n        # replace external links\n        link = match.group(1)\n        link = bleach.linkify(link, **kwargs)\n\n        # replace internal links\n        text = match.group(0)\n        text = re.sub(r'\\[\\[(.*?)\\]\\]', r'[[\\1]]', text)\n\n        return '<a href=\"%s\">%s</a>' % (link, link)\n\n    return re.sub(r'\\[\\[(.*?)\\]\\]', linkify, text)\n", "def process_text_links(text):\n\n    def linkify(match):\n        # replace double quotes with single quotes\n        href = match.group(0).replace('\"', '\\\\\"')\n        # add a double quote after href if it was not already quoted\n        if not href.startswith('\"'):\n            href = '\"' + href\n        return '[[%s]]' % href\n\n    text = re.sub(\n        LINK_REGEX,\n        linkify,\n        text,\n        flags=re.DOTALL\n    )\n\n    return text\n", "def process_text_links(text):\n    text = linkify(text)\n    text = restructuredtext(text)\n    return text\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n\n    linkified = bleach.linkify(text, **bleach.ALLOWED_TAGS)\n\n    # remove excess whitespace\n    linkified = re.sub('\\s+','', linkified)\n\n    # add a href attribute\n    linkified = add_attribute_to_links(linkified)\n\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text, strip_href=True)\n    text = add_attributes(text)\n    return bleach.clean(text, **settings.BLEACH_CLEAN_OPTIONS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    def linkify(match):\n        link = match.group(1)\n        if link.startswith('\"') and link.endswith('\"'):\n            return '\"{}\"'.format(link)\n        return link\n\n    text = re.sub(r'((?<=\\]\\])\\])', linkify, text)\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(text, **bleach_options)\n    linker = Linker(**linker_options)\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text, smart_amp=False)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = restructured_text(text)\n    text = restructured_text_strip_tags(text)\n    text = escape(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n\n    def linkify(match):\n        # replace external links\n        link = match.group(1)\n        link = bleach.linkify(link, **kwargs)\n\n        # replace internal links\n        text = match.group(0)\n        text = re.sub(r'\\[\\[(.*?)\\]\\]', r'[[\\1]]', text)\n\n        return '<a href=\"%s\">%s</a>' % (link, link)\n\n    return re.sub(r'\\[\\[(.*?)\\]\\]', linkify, text)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n\n    def linkify(match):\n        # replace double quotes with single quotes\n        href = match.group(0).replace('\"', '\\\\\"')\n        # add a double quote after href if it was not already quoted\n        if not href.startswith('\"'):\n            href = '\"' + href\n        return '[[%s]]' % href\n\n    text = re.sub(\n        LINK_REGEX,\n        linkify,\n        text,\n        flags=re.DOTALL\n    )\n\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = restructuredtext(text)\n    return text\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return 'text/plain'\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get('content-type')\n", "def fetch_content_type(url: str) -> Optional[str]:\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.headers.get(\"content-type\")\n    except requests.exceptions.ConnectionError:\n        return None\n", "def fetch_content_type(url: str) -> str:\n    res = requests.head(url)\n    return res.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    response.raise_for_status()\n    return response.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    else:\n        return None\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    response.raise_for_status()\n    return response.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url, allow_redirects=True, stream=True)\n    return r.headers[\"content-type\"]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return 'text/plain'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.headers.get(\"content-type\")\n    except requests.exceptions.ConnectionError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    res = requests.head(url)\n    return res.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    response.raise_for_status()\n    return response.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    response.raise_for_status()\n    return response.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url, allow_redirects=True, stream=True)\n    return r.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str, word: str, cache: dict = None) -> bool:\n    if cache is None:\n        cache = {}\n    try:\n        return cache[(tag, word)]\n    except KeyError:\n        result = test_tag(tag, word, cache)\n        cache[(tag, word)] = result\n        return result\n", "def test_tag(tag: str) -> bool:\n    return bool(tag_pattern.match(tag))\n", "def test_tag(tag: str):\n    return tag.lower() in TAGS\n", "def test_tag(tag: str):\n    return tag.lower() in ALLOWED_TAGS\n", "def test_tag(tag: str, word: str) -> bool:\n    if not tag or not word:\n        return False\n    return (word.lower() in get_wordnet_pos(tag))\n", "def test_tag(tag: str, word: str) -> bool:\n    return not ((tag not in WORD_TAGS) or (WORD_TAGS.get(tag) == word))\n", "def test_tag(tag: str, word: str):\n    if tag in WORD_RE.findall(word):\n        return True\n    return False\n", "def test_tag(tag: str):\n    return tag.lower() in TAGS\n", "def test_tag(tag: str) -> bool:\n    return (len(tag) > 2 and tag[0] == \"/\" and tag[1:2]!= \"/\")\n", "def test_tag(tag: str, word: str, attr: Dict[str, str]=None) -> bool:\n    return (\n        tag and not word.startswith('<') and tag!= 'a' and not word.startswith('#')\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str, word: str, cache: dict = None) -> bool:\n    if cache is None:\n        cache = {}\n    try:\n        return cache[(tag, word)]\n    except KeyError:\n        result = test_tag(tag, word, cache)\n        cache[(tag, word)] = result\n        return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return bool(tag_pattern.match(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    return tag.lower() in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    return tag.lower() in ALLOWED_TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    if not tag or not word:\n        return False\n    return (word.lower() in get_wordnet_pos(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    return not ((tag not in WORD_TAGS) or (WORD_TAGS.get(tag) == word))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str):\n    if tag in WORD_RE.findall(word):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str):\n    return tag.lower() in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (len(tag) > 2 and tag[0] == \"/\" and tag[1:2]!= \"/\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str, attr: Dict[str, str]=None) -> bool:\n    return (\n        tag and not word.startswith('<') and tag!= 'a' and not word.startswith('#')\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    msg = \"sender and entity handle do not match for {sender} and {entity}\"\n    raise Exception(msg.format(sender=sender_handle, entity=entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch.\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch. Expected: {}, received: {}\".format(entity_handle, sender_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle does not match the entity handle, '\n           'sender: {}, entity: {}'.format(sender_handle, entity_handle)\n        )\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle!= '' and entity_handle!= '':\n        raise ValueError(\"Sender and entity handles must be of the same \"\n                         \"type ('%s', '%s')\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity Handle mismatch\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    msg = \"sender and entity handle do not match for {sender} and {entity}\"\n    raise Exception(msg.format(sender=sender_handle, entity=entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch. Expected: {}, received: {}\".format(entity_handle, sender_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle does not match the entity handle, '\n           'sender: {}, entity: {}'.format(sender_handle, entity_handle)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle!= '' and entity_handle!= '':\n        raise ValueError(\"Sender and entity handles must be of the same \"\n                         \"type ('%s', '%s')\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity Handle mismatch\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = {\n       'version': '1.0',\n        'url': url,\n    }\n\n    if document_path is not None:\n        doc['document_path'] = document_path\n\n    return doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = \"/node-info/document.well-known.doc\"\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"namespace\": \"http://example.com/\",\n        \"name\": \"nodeinfo\",\n        \"schema_version\": \"1.0\",\n        \"created\": \"2014-07-23\",\n        \"updated\": \"2014-07-23\",\n        \"last_modified\": \"2014-07-23\",\n        \"revision\": 1,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"@type\": \"NodeInfo\",\n        \"serial\": \"0000000000-0000-0000-0000-000000000004\",\n        \"is_external\": True,\n        \"is_private\": False,\n        \"last_activity\": \"\",\n        \"contact\": {\n            \"name\": \"\",\n            \"email\": \"\",\n        },\n        \"url\": url,\n        \"document_path\": document_path,\n    }\n\n    return document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    if document_path:\n        base_url = '%s/%s' % (url, document_path)\n    else:\n        base_url = url\n    return {\n        'base_url': base_url,\n        'document_path': document_path,\n        'document_name': os.path.basename(document_path),\n        'document_version': '1.0',\n        'document_created': 0,\n        'document_last_modified': 0,\n        'document_mime_type': 'text/xml'\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"node_type\": \"http://example.com/nodetype\",\n        \"node_id\": \"http://example.com/nodeid\",\n        \"address\": \"http://example.com/address\",\n        \"port\": \"80\",\n        \"url\": \"http://example.com/url\",\n        \"referrer\": \"http://example.com/referrer\",\n        \"serial\": \"0\",\n        \"last_check\": \"now\",\n        \"last_seen\": \"now\",\n        \"last_ack\": \"now\",\n        \"last_error\": \"now\",\n        \"node_info\": {\n            \"name\": \"nodeinfo\",\n            \"version\": \"1.0\",\n            \"authority\": \"example.com\",\n            \"contact\": \"example.com\",\n            \"document_path\": document_path or \"\",\n        }\n    }\n\n    return NodeInfo(nodeinfo, url)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n       'version': '1.0',\n        'url': url,\n        'name': 'nodeinfo',\n        'document_path': document_path,\n    }\n\n    return well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or '/'.join(url.split('/')[:-1])\n    if url.endswith('/'):\n        url = url[:-1]\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'node_info_version': '1.0',\n        'node_info_url': url,\n        'node_info_last_update': int(time.time()),\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n\n    document_path = document_path or \"/node-info.well-known\"\n\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"meta\": {\"version\": __version__},\n        \"node_info\": {\n            \"version\": __version__,\n            \"name\": \"node-info\",\n            \"short_name\": \"nodeinfo\",\n            \"author\": \"\",\n            \"author_email\": \"\",\n            \"description\": \"\",\n            \"license\": \"\",\n            \"dependencies\": [],\n            \"dependencies_email\": \"\",\n            \"author_uri\": \"\",\n            \"description_uri\": \"\",\n            \"license_uri\": \"\",\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo_doc = {\n        \"url\": url,\n        \"node_type\": \"\",\n        \"document_path\": document_path,\n        \"external_url\": \"\",\n        \"version\": \"0.0\",\n    }\n    return nodeinfo_doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'document'])\n\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'document_content': None,\n        'document_size': None,\n        'node_count': 0,\n        'last_node_time': 0,\n        'last_node_url': None,\n        'last_node_content': None,\n        'last_node_size': 0,\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = {\n       'version': '1.0',\n        'url': url,\n    }\n\n    if document_path is not None:\n        doc['document_path'] = document_path\n\n    return doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = \"/node-info/document.well-known.doc\"\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"namespace\": \"http://example.com/\",\n        \"name\": \"nodeinfo\",\n        \"schema_version\": \"1.0\",\n        \"created\": \"2014-07-23\",\n        \"updated\": \"2014-07-23\",\n        \"last_modified\": \"2014-07-23\",\n        \"revision\": 1,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"@type\": \"NodeInfo\",\n        \"serial\": \"0000000000-0000-0000-0000-000000000004\",\n        \"is_external\": True,\n        \"is_private\": False,\n        \"last_activity\": \"\",\n        \"contact\": {\n            \"name\": \"\",\n            \"email\": \"\",\n        },\n        \"url\": url,\n        \"document_path\": document_path,\n    }\n\n    return document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    if document_path:\n        base_url = '%s/%s' % (url, document_path)\n    else:\n        base_url = url\n    return {\n        'base_url': base_url,\n        'document_path': document_path,\n        'document_name': os.path.basename(document_path),\n        'document_version': '1.0',\n        'document_created': 0,\n        'document_last_modified': 0,\n        'document_mime_type': 'text/xml'\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"node_type\": \"http://example.com/nodetype\",\n        \"node_id\": \"http://example.com/nodeid\",\n        \"address\": \"http://example.com/address\",\n        \"port\": \"80\",\n        \"url\": \"http://example.com/url\",\n        \"referrer\": \"http://example.com/referrer\",\n        \"serial\": \"0\",\n        \"last_check\": \"now\",\n        \"last_seen\": \"now\",\n        \"last_ack\": \"now\",\n        \"last_error\": \"now\",\n        \"node_info\": {\n            \"name\": \"nodeinfo\",\n            \"version\": \"1.0\",\n            \"authority\": \"example.com\",\n            \"contact\": \"example.com\",\n            \"document_path\": document_path or \"\",\n        }\n    }\n\n    return NodeInfo(nodeinfo, url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n       'version': '1.0',\n        'url': url,\n        'name': 'nodeinfo',\n        'document_path': document_path,\n    }\n\n    return well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or '/'.join(url.split('/')[:-1])\n    if url.endswith('/'):\n        url = url[:-1]\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'node_info_version': '1.0',\n        'node_info_url': url,\n        'node_info_last_update': int(time.time()),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n\n    document_path = document_path or \"/node-info.well-known\"\n\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"meta\": {\"version\": __version__},\n        \"node_info\": {\n            \"version\": __version__,\n            \"name\": \"node-info\",\n            \"short_name\": \"nodeinfo\",\n            \"author\": \"\",\n            \"author_email\": \"\",\n            \"description\": \"\",\n            \"license\": \"\",\n            \"dependencies\": [],\n            \"dependencies_email\": \"\",\n            \"author_uri\": \"\",\n            \"description_uri\": \"\",\n            \"license_uri\": \"\",\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo_doc = {\n        \"url\": url,\n        \"node_type\": \"\",\n        \"document_path\": document_path,\n        \"external_url\": \"\",\n        \"version\": \"0.0\",\n    }\n    return nodeinfo_doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'document'])\n\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'document_content': None,\n        'document_size': None,\n        'node_count': 0,\n        'last_node_time': 0,\n        'last_node_url': None,\n        'last_node_content': None,\n        'last_node_size': 0,\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return False\n\n    try:\n        if utils.verify_signature(signature, doc, public_key):\n            return True\n    except ValueError:\n        return False\n    return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public_key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an xml document\")\n\n    # TODO: verify the signature in the message\n    return True\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    relayable_signature.attrib['Version'] = '1.0'\n\n    relayable_signature.text = signature\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('Signature='):\n        return False\n    sig = signature.split('=', 1)[1]\n    return _verify_relayable_signature(public_key, doc, sig)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return True\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return False\n\n    try:\n        if utils.verify_signature(signature, doc, public_key):\n            return True\n    except ValueError:\n        return False\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public_key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an xml document\")\n\n    # TODO: verify the signature in the message\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    relayable_signature.attrib['Version'] = '1.0'\n\n    relayable_signature.text = signature\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('Signature='):\n        return False\n    sig = signature.split('=', 1)[1]\n    return _verify_relayable_signature(public_key, doc, sig)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: Document, url: str, username: str) -> Webfinger:\n    if document.get('type') == 'xrd':\n        return Webfinger.from_xrd(\n            document,\n            url=url,\n            username=username\n        )\n    else:\n        return Webfinger.from_json(\n            document,\n            url=url,\n            username=username\n        )\n", "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if not document.get('mimeType'):\n        raise ValueError('Document must have a mimeType')\n    if document.get('mimeType').startswith('application/xrd+xml'):\n        return Webfinger.from_xrd(document, url)\n    else:\n        return Webfinger.from_json(document, url)\n", "def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    try:\n        return WebfingerJson(document.xpath(url + \"/webfinger/json\")[0])\n    except IndexError:\n        # Not a new webfinger document, parse JSON\n        return WebfingerJson.parse_from_url(url)\n", "def parse_diaspora_webfinger(document: Document, url: str) -> List[WebfingerEntry]:\n    if document.xpath(\"//webfinger/url\"):\n        return parse_webfinger_url(document, url)\n    elif document.xpath(\"//webfinger/xrd\"):\n        return parse_webfinger_xrd(document, url)\n    else:\n        raise ParseError(\n            \"Unable to parse webfinger document {}\".format(url)\n        )\n", "def parse_diaspora_webfinger(document: Document, url: str):\n    if document.get('type') == 'diaspora_webfinger':\n        webfinger_content = document.find('{%s}Webfinger' % url)\n        if webfinger_content is not None:\n            return {\n                'url': url,\n                'content': webfinger_content.text if webfinger_content is not None else None\n            }\n", "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"webfinger_id\": document.get(\"@id\"),\n        \"webfinger_name\": document.find(\"name\").text,\n        \"webfinger_uri\": document.find(\"uri\").text,\n        \"webfinger_is_affiliation\": \"affiliation\",\n        \"webfinger_is_webfinger_identity\": \"webfinger_identity\",\n        \"webfinger_is_webfinger_affiliation\": \"webfinger_affiliation\",\n    }\n", "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if document.get('type') == 'diaspora':\n        if 'webfinger' in document:\n            return Webfinger(url, document['webfinger'])\n        else:\n            raise ValueError(\"No 'webfinger' in document\")\n    else:\n        raise ValueError(\"Unknown type of document: %s\" % document.get('type'))\n", "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    # Read XRD document\n    if document.get('type') == 'webfinger':\n        filename = document.get('filename')\n        if not filename:\n            raise ValueError('Webfinger JSON filename is missing.')\n        with open(filename, 'r') as fp:\n            webfinger_xrd = fp.read()\n\n    # Read JSON document\n    elif document.get('type') == 'json':\n        webfinger_xrd = document.get('webfinger').encode('utf-8')\n\n    # Unknown document type\n    else:\n        raise ValueError('Unknown document type in webfinger webfinger XRD.')\n\n    return json.loads(webfinger_xrd)\n", "def parse_diaspora_webfinger(document: Document, resource: Resource, base_url: str):\n    if resource.meta.content_type == 'application/xrd+xml':\n        return xrd_parse(resource.content, resource.content_type, base_url)\n    else:\n        return json_parse(resource.content, resource.content_type, base_url)\n", "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.url is None:\n        return {\"webfinger\": document.text}\n    elif document.url.startswith(\"http://\") or document.url.startswith(\"https://\"):\n        return {\"webfinger\": document.url}\n    else:\n        return {\"webfinger\": document.url}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: Document, url: str, username: str) -> Webfinger:\n    if document.get('type') == 'xrd':\n        return Webfinger.from_xrd(\n            document,\n            url=url,\n            username=username\n        )\n    else:\n        return Webfinger.from_json(\n            document,\n            url=url,\n            username=username\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if not document.get('mimeType'):\n        raise ValueError('Document must have a mimeType')\n    if document.get('mimeType').startswith('application/xrd+xml'):\n        return Webfinger.from_xrd(document, url)\n    else:\n        return Webfinger.from_json(document, url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    try:\n        return WebfingerJson(document.xpath(url + \"/webfinger/json\")[0])\n    except IndexError:\n        # Not a new webfinger document, parse JSON\n        return WebfingerJson.parse_from_url(url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> List[WebfingerEntry]:\n    if document.xpath(\"//webfinger/url\"):\n        return parse_webfinger_url(document, url)\n    elif document.xpath(\"//webfinger/xrd\"):\n        return parse_webfinger_xrd(document, url)\n    else:\n        raise ParseError(\n            \"Unable to parse webfinger document {}\".format(url)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str):\n    if document.get('type') == 'diaspora_webfinger':\n        webfinger_content = document.find('{%s}Webfinger' % url)\n        if webfinger_content is not None:\n            return {\n                'url': url,\n                'content': webfinger_content.text if webfinger_content is not None else None\n            }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"webfinger_id\": document.get(\"@id\"),\n        \"webfinger_name\": document.find(\"name\").text,\n        \"webfinger_uri\": document.find(\"uri\").text,\n        \"webfinger_is_affiliation\": \"affiliation\",\n        \"webfinger_is_webfinger_identity\": \"webfinger_identity\",\n        \"webfinger_is_webfinger_affiliation\": \"webfinger_affiliation\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if document.get('type') == 'diaspora':\n        if 'webfinger' in document:\n            return Webfinger(url, document['webfinger'])\n        else:\n            raise ValueError(\"No 'webfinger' in document\")\n    else:\n        raise ValueError(\"Unknown type of document: %s\" % document.get('type'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    # Read XRD document\n    if document.get('type') == 'webfinger':\n        filename = document.get('filename')\n        if not filename:\n            raise ValueError('Webfinger JSON filename is missing.')\n        with open(filename, 'r') as fp:\n            webfinger_xrd = fp.read()\n\n    # Read JSON document\n    elif document.get('type') == 'json':\n        webfinger_xrd = document.get('webfinger').encode('utf-8')\n\n    # Unknown document type\n    else:\n        raise ValueError('Unknown document type in webfinger webfinger XRD.')\n\n    return json.loads(webfinger_xrd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, resource: Resource, base_url: str):\n    if resource.meta.content_type == 'application/xrd+xml':\n        return xrd_parse(resource.content, resource.content_type, base_url)\n    else:\n        return json_parse(resource.content, resource.content_type, base_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.url is None:\n        return {\"webfinger\": document.text}\n    elif document.url.startswith(\"http://\") or document.url.startswith(\"https://\"):\n        return {\"webfinger\": document.url}\n    else:\n        return {\"webfinger\": document.url}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                     timeout: int = 5, raise_ssl_errors: bool = False,\n                                     extra_headers=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it failed.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    # TODO: Implement this\n    return \"\"\n", "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout=15, raise_ssl_errors=False,\n                                    extra_headers=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails. Does not raise if it fails.\n    with import urllib\n    fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    \"\"\"\n    # Check if we can get the document.\n    try:\n        return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except URLError as e:\n        if e.reason == 'Connection reset by peer':\n            return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n        if e.reason == 'Timed out':\n            print('HTTP connection timeout exceeded for retrieving {} webfinger document'.format(path))\n            if raise_ssl_errors:\n       ", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=None, extra_headers: Dict[str, str]=None):\n\n    response = requests.get(\n        url=host + path,\n        stream=True,\n        allow_redirects=False,\n        headers=extra_headers,\n        timeout=timeout,\n    )\n\n    if response.status_code!= 200:\n        raise HTTPError(\n            \"HTTP error {} when trying to retrieve webfinger document at {}\".format(\n                response.status_code, urlparse(response.url).path\n            )\n        )\n\n    handle.write(response.content)\n", "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: int = 10, **extra_headers):\n    try:\n        handle.open(timeout=timeout)\n    except (URLError, HTTPError):\n        pass\n    else:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors=False, extra_headers=extra_headers)\n", "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: int = 60, raise_ssl_errors: bool = True, extra_headers=None):\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n    except Exception as e:\n        if raise_ssl_errors:\n            raise e\n        else:\n            logging.error(\"Failed to retrieve webfinger document.\")\n            logging.exception(e)\n", "def try_retrieve_webfinger_document(handle: HTTPSHandle, host: str, path: str, timeout: int = 5):\n    try:\n        handle.open(host, path, timeout=timeout)\n    except (HTTPException, URLError):\n        try:\n            handle.close()\n        except (HTTPException, URLError):\n            pass\n        return None\n\n    return handle.read()\n", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                     timeout: Union[float, int]=None,\n                                     extra_headers: Dict[str, str]=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    response = fetch_document(\n        handle, host, path, timeout=timeout,\n        raise_ssl_errors=True,\n        extra_headers=extra_headers)\n\n    return response\n", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int=15, raise_ssl_errors: bool=True,\n                                     extra_headers: Dict[str, str]=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    try:\n        handle.open(host, timeout=timeout)\n    except (urllib.error.HTTPError, urllib.error.URLError) as e:\n        # We do not expect this to be possible because the server might be down or down and we can't determine if\n        # the server is up.\n        if e.args[0]!= 3:\n            raise\n        handle.close()\n        return None\n\n    document = handle.read(131072).decode('utf-8')\n\n    if raise_ssl_errors:\n        webfinger_document = parse_webfinger_document(document, host=host, path=path, timeout=timeout", "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: float = 10) -> str:\n    try:\n        handle.open(host, timeout=timeout)\n    except URLError as e:\n        if e.reason == 'connection timed out':\n            return ''\n        raise\n    else:\n        handle.seek(0)\n        return handle.read()\n", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=10, extra_headers=None):\n\n    try:\n        return urlopen(\n            \"https://{}:{}{}\".format(host, PORT, path),\n            timeout=timeout,\n            headers=extra_headers,\n            data=handle,\n        )\n    except HTTPError as e:\n        if e.code == 404:\n            raise FileNotFoundError(\"webfinger document not found: {}\".format(path))\n        raise  # pragma: no cover\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                     timeout: int = 5, raise_ssl_errors: bool = False,\n                                     extra_headers=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it failed.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    # TODO: Implement this\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout=15, raise_ssl_errors=False,\n                                    extra_headers=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails. Does not raise if it fails.\n    with import urllib\n    fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    \"\"\"\n    # Check if we can get the document.\n    try:\n        return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n    except URLError as e:\n        if e.reason == 'Connection reset by peer':\n            return fetch_document(url, host, path, timeout, raise_ssl_errors, extra_headers)\n        if e.reason == 'Timed out':\n            print('HTTP connection timeout exceeded for retrieving {} webfinger document'.format(path))\n            if raise_ssl_errors:\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=None, extra_headers: Dict[str, str]=None):\n\n    response = requests.get(\n        url=host + path,\n        stream=True,\n        allow_redirects=False,\n        headers=extra_headers,\n        timeout=timeout,\n    )\n\n    if response.status_code!= 200:\n        raise HTTPError(\n            \"HTTP error {} when trying to retrieve webfinger document at {}\".format(\n                response.status_code, urlparse(response.url).path\n            )\n        )\n\n    handle.write(response.content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: int = 10, **extra_headers):\n    try:\n        handle.open(timeout=timeout)\n    except (URLError, HTTPError):\n        pass\n    else:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors=False, extra_headers=extra_headers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: int = 60, raise_ssl_errors: bool = True, extra_headers=None):\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n    except Exception as e:\n        if raise_ssl_errors:\n            raise e\n        else:\n            logging.error(\"Failed to retrieve webfinger document.\")\n            logging.exception(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPSHandle, host: str, path: str, timeout: int = 5):\n    try:\n        handle.open(host, path, timeout=timeout)\n    except (HTTPException, URLError):\n        try:\n            handle.close()\n        except (HTTPException, URLError):\n            pass\n        return None\n\n    return handle.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                     timeout: Union[float, int]=None,\n                                     extra_headers: Dict[str, str]=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    response = fetch_document(\n        handle, host, path, timeout=timeout,\n        raise_ssl_errors=True,\n        extra_headers=extra_headers)\n\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int=15, raise_ssl_errors: bool=True,\n                                     extra_headers: Dict[str, str]=None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    Does not raise if it fails. with import urllib\n    \"\"\"\n    try:\n        handle.open(host, timeout=timeout)\n    except (urllib.error.HTTPError, urllib.error.URLError) as e:\n        # We do not expect this to be possible because the server might be down or down and we can't determine if\n        # the server is up.\n        if e.args[0]!= 3:\n            raise\n        handle.close()\n        return None\n\n    document = handle.read(131072).decode('utf-8')\n\n    if raise_ssl_errors:\n        webfinger_document = parse_webfinger_document(document, host=host, path=path, timeout=timeout", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str, timeout: float = 10) -> str:\n    try:\n        handle.open(host, timeout=timeout)\n    except URLError as e:\n        if e.reason == 'connection timed out':\n            return ''\n        raise\n    else:\n        handle.seek(0)\n        return handle.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=10, extra_headers=None):\n\n    try:\n        return urlopen(\n            \"https://{}:{}{}\".format(host, PORT, path),\n            timeout=timeout,\n            headers=extra_headers,\n            data=handle,\n        )\n    except HTTPError as e:\n        if e.code == 404:\n            raise FileNotFoundError(\"webfinger document not found: {}\".format(path))\n        raise  # pragma: no cover\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    return parse_diaspora_webfinger(result['doc'])\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    parsed = parse_diaspora_webfinger(response.read().decode('utf-8'))\n    return parsed\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.fetch(handle.retrieve('http://diaspora.com'))\n    return response.decode('utf-8')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = handle.read()\n    doc = urllib.parse.unquote(doc)\n    return parse_diaspora_webfinger(doc)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.geturl(handle.baseurl + '/document/diaspora/v1')\n    return parse_diaspora_webfinger(response.read())\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    retrieve_diaspora_host_meta(handle.host)\n    return parse_diaspora_webfinger(document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    return parse_diaspora_webfinger(response.read().decode('utf-8'))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.fetch(handle.retrieve('import-url'), decode=True)\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    return parse_diaspora_webfinger(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    return parse_diaspora_webfinger(result['doc'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    parsed = parse_diaspora_webfinger(response.read().decode('utf-8'))\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.fetch(handle.retrieve('http://diaspora.com'))\n    return response.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = handle.read()\n    doc = urllib.parse.unquote(doc)\n    return parse_diaspora_webfinger(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.geturl(handle.baseurl + '/document/diaspora/v1')\n    return parse_diaspora_webfinger(response.read())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    retrieve_diaspora_host_meta(handle.host)\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    return parse_diaspora_webfinger(response.read().decode('utf-8'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = handle.fetch(handle.retrieve('import-url'), decode=True)\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    try:\n        url = 'https://{0}/xrd/host-meta'.format(host)\n        resp = requests.get(url)\n    except requests.ConnectionError:\n        raise ValueError('No route to host: {0}'.format(host))\n    if resp.status_code!= 200:\n        raise ValueError('Unable to retrieve host-meta document: {0}'\n                        .format(resp.status_code))\n    try:\n        xrd = XRD(resp.content)\n        return xrd\n    except ValueError:\n        raise ValueError('Unable to parse diaspora host-meta document: {0}'\n                        .format(resp.content))\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://api.host-meta.org/v1/hosts/{}/xrd'.format(host),\n        headers={\n            'X-RateLimit-Remaining': '10',\n            'X-RateLimit-Reset': '1',\n        },\n    )\n    response.raise_for_status()\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    # Get XRD\n    url = (\n        \"https://api.diaspora.org/v1/imports-xrds/?q={}\"\n        \"&limit=1&sortBy=host&sortOrder=desc\"\n    ).format(host)\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise ValueError(\n            \"Retrieving host-meta failed with status code {}\".format(\n                response.status_code\n            )\n        )\n    else:\n        response_json = response.json()\n        if \"data\" not in response_json:\n            raise ValueError(\"No response data in response from \" + url)\n        else:\n            xrd = response_json[\"data\"][0]\n            return XRD(xrd)\n", "def retrieve_diaspora_host_meta(host):\n    if host == 'localhost':\n        host = '127.0.0.1'\n    url = 'http://%s/xrd' % host\n    r = requests.get(url)\n    return r.content\n", "def retrieve_diaspora_host_meta(host):\n    xrd = None\n    host_meta = urlopen(\"%s/xrd\" % host)\n    if host_meta.getcode() == 200:\n        xrd = XRD(host_meta.read())\n    return xrd\n", "def retrieve_diaspora_host_meta(host):\n    diaspora = \"%s/%s\" % (host, XRD[\"metadata\"])\n    r = requests.get(diaspora)\n    if r.status_code!= 200:\n        raise Exception(\"Failed to retrieve %s\" % diaspora)\n    return XRD[\"metadata\"]\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return XRD(response.text)\n", "def retrieve_diaspora_host_meta(host):\n    # Get the metadata for the host\n    meta = get_diaspora_host_meta(host)\n    if meta is None:\n        meta = {\n            'import_federation_xrd': 'no',\n            'import_email_xrd': 'no',\n            'import_contact_xrd': 'no',\n            'import_web_xrd': 'no',\n            'import_web_contact_xrd': 'no',\n        }\n    return XRD(**meta)\n", "def retrieve_diaspora_host_meta(host):\n    url = \"%s/hostmeta\" % host\n    data = get(url).json()\n\n    return XRD(**data)\n", "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?expand=metadata\"\n    ).format(host=host)\n    resp = requests.get(url)\n    resp.raise_for_status()\n    return XRD(resp.json())\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    try:\n        url = 'https://{0}/xrd/host-meta'.format(host)\n        resp = requests.get(url)\n    except requests.ConnectionError:\n        raise ValueError('No route to host: {0}'.format(host))\n    if resp.status_code!= 200:\n        raise ValueError('Unable to retrieve host-meta document: {0}'\n                        .format(resp.status_code))\n    try:\n        xrd = XRD(resp.content)\n        return xrd\n    except ValueError:\n        raise ValueError('Unable to parse diaspora host-meta document: {0}'\n                        .format(resp.content))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://api.host-meta.org/v1/hosts/{}/xrd'.format(host),\n        headers={\n            'X-RateLimit-Remaining': '10',\n            'X-RateLimit-Reset': '1',\n        },\n    )\n    response.raise_for_status()\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # Get XRD\n    url = (\n        \"https://api.diaspora.org/v1/imports-xrds/?q={}\"\n        \"&limit=1&sortBy=host&sortOrder=desc\"\n    ).format(host)\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise ValueError(\n            \"Retrieving host-meta failed with status code {}\".format(\n                response.status_code\n            )\n        )\n    else:\n        response_json = response.json()\n        if \"data\" not in response_json:\n            raise ValueError(\"No response data in response from \" + url)\n        else:\n            xrd = response_json[\"data\"][0]\n            return XRD(xrd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == 'localhost':\n        host = '127.0.0.1'\n    url = 'http://%s/xrd' % host\n    r = requests.get(url)\n    return r.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    xrd = None\n    host_meta = urlopen(\"%s/xrd\" % host)\n    if host_meta.getcode() == 200:\n        xrd = XRD(host_meta.read())\n    return xrd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    diaspora = \"%s/%s\" % (host, XRD[\"metadata\"])\n    r = requests.get(diaspora)\n    if r.status_code!= 200:\n        raise Exception(\"Failed to retrieve %s\" % diaspora)\n    return XRD[\"metadata\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return XRD(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # Get the metadata for the host\n    meta = get_diaspora_host_meta(host)\n    if meta is None:\n        meta = {\n            'import_federation_xrd': 'no',\n            'import_email_xrd': 'no',\n            'import_contact_xrd': 'no',\n            'import_web_xrd': 'no',\n            'import_web_contact_xrd': 'no',\n        }\n    return XRD(**meta)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"%s/hostmeta\" % host\n    data = get(url).json()\n\n    return XRD(**data)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?expand=metadata\"\n    ).format(host=host)\n    resp = requests.get(url)\n    resp.raise_for_status()\n    return XRD(resp.json())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    if response.status_code == 200:\n        return (response.status_code, response)\n    return (response.status_code, response.json())\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return response.status_code, response.raise_for_status()\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    # if data is file-like, then send as multipart form-data\n    if hasattr(data, \"read\"):\n        data = {\"files\": data}\n\n    # if data is bytes, then send as multipart form-data\n    if hasattr(data, \"encode\"):\n        data = {\"files\": {\"file\": data}}\n\n    # send POST request\n    try:\n        response = requests.post(\n            url, data=data, timeout=timeout, method=method, **kwargs\n        )\n    except requests.exceptions.RequestException as e:\n        return (None, e)\n\n    # successful response from POST request\n    if response.status_code == 200:\n        return (response.status_code, response.text)\n\n    # otherwise, raise exception\n    return (None, response)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    kwargs.setdefault(\"allow_redirects\", True)\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n\n    if response.status_code!= 200:\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            return e.response, e\n\n    return response, None\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    request = Request(url, data, *args, **kwargs)\n\n    try:\n        return request.send(timeout=timeout)\n    except (ConnectionError, Timeout) as e:\n        return (None, e)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    if response.status_code!= requests.codes.ok:\n        response.raise_for_status()\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.exception\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n                             *args, **kwargs)\n    return response.status_code, response.json()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    if response.status_code == 200:\n        return (response.status_code, response)\n    return (response.status_code, response.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return response.status_code, response.raise_for_status()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    # if data is file-like, then send as multipart form-data\n    if hasattr(data, \"read\"):\n        data = {\"files\": data}\n\n    # if data is bytes, then send as multipart form-data\n    if hasattr(data, \"encode\"):\n        data = {\"files\": {\"file\": data}}\n\n    # send POST request\n    try:\n        response = requests.post(\n            url, data=data, timeout=timeout, method=method, **kwargs\n        )\n    except requests.exceptions.RequestException as e:\n        return (None, e)\n\n    # successful response from POST request\n    if response.status_code == 200:\n        return (response.status_code, response.text)\n\n    # otherwise, raise exception\n    return (None, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    kwargs.setdefault(\"allow_redirects\", True)\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n\n    if response.status_code!= 200:\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            return e.response, e\n\n    return response, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    request = Request(url, data, *args, **kwargs)\n\n    try:\n        return request.send(timeout=timeout)\n    except (ConnectionError, Timeout) as e:\n        return (None, e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    if response.status_code!= requests.codes.ok:\n        response.raise_for_status()\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.exception\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n                             *args, **kwargs)\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        dic = dic.setdefault(k, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic[k] = dict_insert(dic[k], val, k)\n        else:\n            dic[k] = val\n    return dic\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[val] = 1\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            dic = dic[key_]\n        else:\n            dic[key_] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        parent_key = keys[0]\n        dic = dict_insert(dic, val, parent_key)\n        dic[key] = dic.get(key, None)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        dic = dic.setdefault(k, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic[k] = dict_insert(dic[k], val, k)\n        else:\n            dic[k] = val\n    return dic\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[val] = 1\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            dic = dic[key_]\n        else:\n            dic[key_] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        parent_key = keys[0]\n        dic = dict_insert(dic, val, parent_key)\n        dic[key] = dic.get(key, None)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('', [\n            IniFile(path, spec_option=spec_option)\n            for path in settings_dirs.list_file_paths()])\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return _complex_type(\n        \"[{}]\".format(', '.join(['infrared.{}'.format(s) for s in settings_dirs])),\n        [spec_option] * len(settings_dirs))\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(\"--{}\".format(file_name), [],\n                    \"List of files to import from [{}]\".format(file_name),\n                    [], settings_dirs)\n            for file_name in sorted(glob('{}/*'.format(settings_dirs[0])))]\n", "def list_of_file_names(settings_dirs, spec_option):\n    ini_file_names = []\n    for s in settings_dirs:\n        ini_file_names.extend([f for f in os.listdir(s)\n                              if f.endswith('.ini') and\n                              f!= spec_option and f[0]!= '.'])\n    return ini_file_names\n", "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(s.path for s in settings_dirs)),\n        '{} (Important Infrared)'.format(spec_option))\n", "def list_of_file_names(settings_dirs, spec_option):\n    return ['{0}/{1}.list'.format(settings_dir, s)\n            for s in ['.ini', '.ini.no_ignore', '.ini.disabled']]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType('list', [], spec_option, settings_dirs)]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('list-of-file-names-{}'.format(spec_option), [\n            IniFile('{}/{}'.format(settings_dir, s)) for s in [\n                'ir_lcd', 'ir_swd', 'ir_hdd', 'ir_dead_swd', 'ir_dead_hdd'\n            ]\n        ])\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(\n            settings_dirs[setting]\n            for setting in ('infrared_dir', 'data_dir', 'coverage_dir')\n            if setting in spec_option)),\n        '{{infrared_dir:s}},'\n        '{{data_dir:s}},'\n        '{{coverage_dir:s}}').format(\n            *('{}={}'.format(setting, value)\n               for setting, value in spec_option.items()))\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}'.format(settings_dir, s)\n        for s in spec_option['file_names']\n    ]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('', [\n            IniFile(path, spec_option=spec_option)\n            for path in settings_dirs.list_file_paths()])\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return _complex_type(\n        \"[{}]\".format(', '.join(['infrared.{}'.format(s) for s in settings_dirs])),\n        [spec_option] * len(settings_dirs))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(\"--{}\".format(file_name), [],\n                    \"List of files to import from [{}]\".format(file_name),\n                    [], settings_dirs)\n            for file_name in sorted(glob('{}/*'.format(settings_dirs[0])))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    ini_file_names = []\n    for s in settings_dirs:\n        ini_file_names.extend([f for f in os.listdir(s)\n                              if f.endswith('.ini') and\n                              f!= spec_option and f[0]!= '.'])\n    return ini_file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(s.path for s in settings_dirs)),\n        '{} (Important Infrared)'.format(spec_option))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return ['{0}/{1}.list'.format(settings_dir, s)\n            for s in ['.ini', '.ini.no_ignore', '.ini.disabled']]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType('list', [], spec_option, settings_dirs)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('list-of-file-names-{}'.format(spec_option), [\n            IniFile('{}/{}'.format(settings_dir, s)) for s in [\n                'ir_lcd', 'ir_swd', 'ir_hdd', 'ir_dead_swd', 'ir_dead_hdd'\n            ]\n        ])\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(\n            settings_dirs[setting]\n            for setting in ('infrared_dir', 'data_dir', 'coverage_dir')\n            if setting in spec_option)),\n        '{{infrared_dir:s}},'\n        '{{data_dir:s}},'\n        '{{coverage_dir:s}}').format(\n            *('{}={}'.format(setting, value)\n               for setting, value in spec_option.items()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}'.format(settings_dir, s)\n        for s in spec_option['file_names']\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return ConfigManager(cls.get_config_manager())\n", "def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    if cls.ansible_config_manager is None:\n        cls.ansible_config_manager = ConfigManager(\n            base_dir=cls.base_dir,\n            playbook_dir=cls.playbook_dir,\n            verbosity=cls.verbosity,\n            extra_vars=cls.extra_vars,\n        )\n    return cls.ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls.ansible_config_managers[cls.name]\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    manager = cls.get('ansible_config_manager')\n    if not manager:\n        manager = ConfigManager(cls.get_instance())\n        cls.set('ansible_config_manager', manager)\n    return manager\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return ConfigManager(cls.get_config_manager())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls.ansible_config_manager is None:\n        cls.ansible_config_manager = ConfigManager(\n            base_dir=cls.base_dir,\n            playbook_dir=cls.playbook_dir,\n            verbosity=cls.verbosity,\n            extra_vars=cls.extra_vars,\n        )\n    return cls.ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.ansible_config_managers[cls.name]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    manager = cls.get('ansible_config_manager')\n    if not manager:\n        manager = ConfigManager(cls.get_instance())\n        cls.set('ansible_config_manager', manager)\n    return manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    if not hasattr(cls, '_workspace_manager'):\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls)\n\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls._get_client())\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        from tornado.simple_httpclient import SimpleAsyncHTTPClient\n\n        cls._workspace_manager = SimpleAsyncHTTPClient(\n            cls._get_url(), cls._get_auth(), cls._get_timeout()\n        )\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    try:\n        return cls._workspace_manager\n    except AttributeError:\n        pass\n\n    cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    workspace_manager_class = cls.registry.get('workspace_manager', None)\n    if workspace_manager_class is None:\n        raise ValueError('workspace_manager not found')\n\n    return workspace_manager_class()\n", "def workspace_manager(cls):\n    return getattr(\n        cls,\n        '{}_workspace_manager'.format(cls.__name__.lower()),\n        None\n    )\n", "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{0}WorkspaceManager'.format(cls.__name__.lower()))\n    return workspace_manager_class()\n", "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        from tornado.simple_httpclient import SimpleAsyncHTTPClient\n        cls._workspace_manager = SimpleAsyncHTTPClient()\n    return cls._workspace_manager\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    if not hasattr(cls, '_workspace_manager'):\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls)\n\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls._get_client())\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        from tornado.simple_httpclient import SimpleAsyncHTTPClient\n\n        cls._workspace_manager = SimpleAsyncHTTPClient(\n            cls._get_url(), cls._get_auth(), cls._get_timeout()\n        )\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    try:\n        return cls._workspace_manager\n    except AttributeError:\n        pass\n\n    cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    workspace_manager_class = cls.registry.get('workspace_manager', None)\n    if workspace_manager_class is None:\n        raise ValueError('workspace_manager not found')\n\n    return workspace_manager_class()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return getattr(\n        cls,\n        '{}_workspace_manager'.format(cls.__name__.lower()),\n        None\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{0}WorkspaceManager'.format(cls.__name__.lower()))\n    return workspace_manager_class()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        from tornado.simple_httpclient import SimpleAsyncHTTPClient\n        cls._workspace_manager = SimpleAsyncHTTPClient()\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    \"Gets the plugin manager.\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_sdk.plugin_manager import PluginManager\n        cls._plugins_manager = PluginManager()\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"Gets the plugin manager.\"\n    manager = getattr(\n        cls,\n        '_plugins_manager',\n        None\n    )\n    if manager is None:\n        manager = cls._plugins_manager = PluginManager()\n    return manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    if not hasattr(cls, '_plugins_manager'):\n        cls._plugins_manager = {}\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager.\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_sdk.plugin_manager import PluginManager\n        cls._plugins_manager = PluginManager()\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager. with\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"Gets the plugin manager.\"\n    manager = getattr(\n        cls,\n        '_plugins_manager',\n        None\n    )\n    if manager is None:\n        manager = cls._plugins_manager = PluginManager()\n    return manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    if not hasattr(cls, '_plugins_manager'):\n        cls._plugins_manager = {}\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content provided\")\n\n    required_fields = [\"name\", \"address\", \"image\", \"icon\", \"is_spotlight\", \"is_favorite\"]\n\n    if required_fields not in spec_content:\n        raise IRValidatorException(\"Missing mandatory fields in spec file\")\n\n    return cls.validate_from_dict(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"spec content is required\")\n    try:\n        return cls.validate_from_string(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\n            \"Unable to parse YAML file {}:\\n{}\".format(\n                cls.file_path, e))\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content to load\")\n\n    try:\n        jsonschema.validate(spec_content, SPEC_SCHEMA)\n    except jsonschema.exceptions.ValidationError as err:\n        raise IRValidatorException(\"Invalid spec file - %s\" % err)\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'imports' not in spec_content:\n        raise IRValidatorException(\"Missing 'imports' key in spec file\")\n\n    required_fields = ('name','version', 'dependencies', 'description',\n                       'author', 'author_email', 'author_url',\n                       'license', 'license_url','requires','requires_email',\n                      'requires_signature', 'dependencies_url',\n                       'dependencies_signature', 'dependencies_version')\n\n    errors = []\n    for field in required_fields:\n        if field not in spec_content['imports']:\n            errors.append({field: \"Missing required field '{}'\".format(field)})\n            break\n\n    if errors:\n        raise IRValidatorException(\"Missing or invalid fields: {}\".format(\", \".join(errors)))", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation failed\")\n\n    try:\n        validate(instance=spec_content, schema=cls.SCHEMA, cls=cls)\n    except ValidationError as error:\n        raise IRValidatorException(\n            \"Spec file is invalid or missing required fields: {}\".format(error.messages))\n\n    return cls.SCHEMA\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','serial_number','serial_number_type', 'device_type', 'is_comfo', 'is_controller']\n\n    if not all(key in spec_content for key in required_fields):\n        raise IRValidatorException('Missing required fields in spec file')\n\n    return cls.validate_from_file(cls.SPEC_FILE_PATH, spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {}:\\n{}'.format(\n            spec_content, e))\n\n    if data is None:\n        raise IRValidatorException('Missing data in spec file')\n\n    if not all(key in data for key in cls.required_fields):\n        raise IRValidatorException(\n            'Missing required fields in spec file: {}'.format(cls.required_fields))\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(e))\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'import_jsonschema' not in spec_content:\n        raise IRValidatorException(\"Missing 'import_jsonschema' key in spec file\")\n\n    import_jsonschema = spec_content['import_jsonschema']\n    if 'keys' not in import_jsonschema:\n        raise IRValidatorException(\"Missing 'keys' key in import_jsonschema dictionary\")\n\n    required_keys = ['type', 'format', 'description']\n    missing_keys = [key for key in required_keys if key not in import_jsonschema]\n    if missing_keys:\n        raise IRValidatorException(\n            \"Missing required keys for importing infrared from spec file: {}\".format(\n                ', '.join(missing_keys)\n            )\n        )\n\n    return cls.validate_from_dictionary(import_jsonschema)\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"no spec content was provided\")\n\n    required_keys = [\"name\", \"model\", \"color\", \"serial\", \"serial_number\", \"type\"]\n\n    for key in required_keys:\n        if key not in spec_content.keys():\n            raise IRValidatorException(\"Missing required field {}\".format(key))\n\n    return cls.validate(spec_content)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content provided\")\n\n    required_fields = [\"name\", \"address\", \"image\", \"icon\", \"is_spotlight\", \"is_favorite\"]\n\n    if required_fields not in spec_content:\n        raise IRValidatorException(\"Missing mandatory fields in spec file\")\n\n    return cls.validate_from_dict(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"spec content is required\")\n    try:\n        return cls.validate_from_string(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\n            \"Unable to parse YAML file {}:\\n{}\".format(\n                cls.file_path, e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content to load\")\n\n    try:\n        jsonschema.validate(spec_content, SPEC_SCHEMA)\n    except jsonschema.exceptions.ValidationError as err:\n        raise IRValidatorException(\"Invalid spec file - %s\" % err)\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'imports' not in spec_content:\n        raise IRValidatorException(\"Missing 'imports' key in spec file\")\n\n    required_fields = ('name','version', 'dependencies', 'description',\n                       'author', 'author_email', 'author_url',\n                       'license', 'license_url','requires','requires_email',\n                      'requires_signature', 'dependencies_url',\n                       'dependencies_signature', 'dependencies_version')\n\n    errors = []\n    for field in required_fields:\n        if field not in spec_content['imports']:\n            errors.append({field: \"Missing required field '{}'\".format(field)})\n            break\n\n    if errors:\n        raise IRValidatorException(\"Missing or invalid fields: {}\".format(\", \".join(errors)))", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation failed\")\n\n    try:\n        validate(instance=spec_content, schema=cls.SCHEMA, cls=cls)\n    except ValidationError as error:\n        raise IRValidatorException(\n            \"Spec file is invalid or missing required fields: {}\".format(error.messages))\n\n    return cls.SCHEMA\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','serial_number','serial_number_type', 'device_type', 'is_comfo', 'is_controller']\n\n    if not all(key in spec_content for key in required_fields):\n        raise IRValidatorException('Missing required fields in spec file')\n\n    return cls.validate_from_file(cls.SPEC_FILE_PATH, spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {}:\\n{}'.format(\n            spec_content, e))\n\n    if data is None:\n        raise IRValidatorException('Missing data in spec file')\n\n    if not all(key in data for key in cls.required_fields):\n        raise IRValidatorException(\n            'Missing required fields in spec file: {}'.format(cls.required_fields))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    if 'import_jsonschema' not in spec_content:\n        raise IRValidatorException(\"Missing 'import_jsonschema' key in spec file\")\n\n    import_jsonschema = spec_content['import_jsonschema']\n    if 'keys' not in import_jsonschema:\n        raise IRValidatorException(\"Missing 'keys' key in import_jsonschema dictionary\")\n\n    required_keys = ['type', 'format', 'description']\n    missing_keys = [key for key in required_keys if key not in import_jsonschema]\n    if missing_keys:\n        raise IRValidatorException(\n            \"Missing required keys for importing infrared from spec file: {}\".format(\n                ', '.join(missing_keys)\n            )\n        )\n\n    return cls.validate_from_dictionary(import_jsonschema)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"no spec content was provided\")\n\n    required_keys = [\"name\", \"model\", \"color\", \"serial\", \"serial_number\", \"type\"]\n\n    for key in required_keys:\n        if key not in spec_content.keys():\n            raise IRValidatorException(\"Missing required field {}\".format(key))\n\n    return cls.validate(spec_content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path to YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"File '{}' is not a file\".format(yaml_file))\n\n    with open(yaml_file, 'r') as f:\n        try:\n            yaml_dict = yaml.safe_load(f)\n            return cls.validate(yaml_dict)\n        except yaml.YAMLError as e:\n            raise IRValidatorException(\"Unable to parse YAML file '{}'\".format(yaml_file)) from e\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = cls.load_yaml(yaml_file)\n    cls.validate_data(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing yaml_file')\n\n    with open(yaml_file, 'r') as yml_file:\n        yaml_data = yaml.safe_load(yml_file)\n        cls._validate_yaml_data(yaml_data)\n\n    return yaml_data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not cls._validate_import(data):\n        raise IRValidatorException(\"Invalid YAML file\")\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml(yaml_file)\n    cls.validate(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n            cls.validate(data)\n    except (FileNotFoundError, OSError) as err:\n        raise IRValidatorException(\"File {} not found\".format(yaml_file)) from err\n    except yaml.YAMLError as err:\n        raise IRValidatorException(\"Invalid YAML file {}\".format(yaml_file)) from err\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException('Unable to load YAML file {}:\\n{}'.format(yaml_file, e))\n\n    try:\n        cls.validate(yaml_data)\n    except IRValidatorException as e:\n        raise IRValidatorException('Missing required fields in the YAML file:\\n{}'.format(e))\n\n    return yaml_data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"No file provided to load data\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"File {} does not exist\".format(yaml_file))\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not cls.validate_data(data):\n        raise IRValidatorException(\"File {} has invalid data\".format(yaml_file))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls._load_file(yaml_file)\n\n    # TODO: check for missing fields\n\n    return yaml_file\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path for YAML file\")\n\n    with open(yaml_file) as ymlfile:\n        yaml_data = yaml.safe_load(ymlfile)\n\n    if not isinstance(yaml_data, dict):\n        raise IRValidatorException(\"Malformed YAML file, not a dictionary\")\n\n    if not cls.IMPORT_FIELDS in yaml_data:\n        raise IRValidatorException(\"Missing required fields for importing infrared from file\")\n\n    data_file_path = os.path.dirname(yaml_file)\n    if not os.path.isfile(data_file_path):\n        raise IRValidatorException(\"File {} does not exist\".format(data_file_path))\n\n    return yaml_data\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path to YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"File '{}' is not a file\".format(yaml_file))\n\n    with open(yaml_file, 'r') as f:\n        try:\n            yaml_dict = yaml.safe_load(f)\n            return cls.validate(yaml_dict)\n        except yaml.YAMLError as e:\n            raise IRValidatorException(\"Unable to parse YAML file '{}'\".format(yaml_file)) from e\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = cls.load_yaml(yaml_file)\n    cls.validate_data(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing yaml_file')\n\n    with open(yaml_file, 'r') as yml_file:\n        yaml_data = yaml.safe_load(yml_file)\n        cls._validate_yaml_data(yaml_data)\n\n    return yaml_data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not cls._validate_import(data):\n        raise IRValidatorException(\"Invalid YAML file\")\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml(yaml_file)\n    cls.validate(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n            cls.validate(data)\n    except (FileNotFoundError, OSError) as err:\n        raise IRValidatorException(\"File {} not found\".format(yaml_file)) from err\n    except yaml.YAMLError as err:\n        raise IRValidatorException(\"Invalid YAML file {}\".format(yaml_file)) from err\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException('Unable to load YAML file {}:\\n{}'.format(yaml_file, e))\n\n    try:\n        cls.validate(yaml_data)\n    except IRValidatorException as e:\n        raise IRValidatorException('Missing required fields in the YAML file:\\n{}'.format(e))\n\n    return yaml_data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"No file provided to load data\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"File {} does not exist\".format(yaml_file))\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not cls.validate_data(data):\n        raise IRValidatorException(\"File {} has invalid data\".format(yaml_file))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls._load_file(yaml_file)\n\n    # TODO: check for missing fields\n\n    return yaml_file\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path for YAML file\")\n\n    with open(yaml_file) as ymlfile:\n        yaml_data = yaml.safe_load(ymlfile)\n\n    if not isinstance(yaml_data, dict):\n        raise IRValidatorException(\"Malformed YAML file, not a dictionary\")\n\n    if not cls.IMPORT_FIELDS in yaml_data:\n        raise IRValidatorException(\"Missing required fields for importing infrared from file\")\n\n    data_file_path = os.path.dirname(yaml_file)\n    if not os.path.isfile(data_file_path):\n        raise IRValidatorException(\"File {} does not exist\".format(data_file_path))\n\n    return yaml_data\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for key in parser_dict:\n        if key == 'include':\n            if isinstance(parser_dict[key], list):\n                parser_dict[key] = '\\n'.join(parser_dict[key])\n            else:\n                parser_dict[key] = parser_dict[key]\n        elif key =='required':\n            if parser_dict[key] == True:\n                parser_dict[key] = 'True'\n            elif parser_dict[key] == False:\n                parser_dict[key] = 'False'\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            include_groups[key] = {\n                'includes': [],\n                'excludes': []\n            }\n\n            for key_include in value:\n                include_groups[key]['includes'].append(key_include)\n\n            for key_exclude in value.get('excludes', []):\n                include_groups[key]['excludes'].append(key_exclude)\n\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    for key in parser_dict:\n        if key in [\"include_directories\"]:\n            self.spec_dict[\"include_directories\"] = parser_dict[key]\n        elif key in [\"library_directories\"]:\n            self.spec_dict[\"library_directories\"] = parser_dict[key]\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict.get('path', ''),\n            'line': include_dict.get('line', ''),\n            'column': include_dict.get('column', '')\n        })\n\n    self.spec_dict['include_groups'] = include_groups\n", "def _include_groups(self, parser_dict):\n    # todo: resolve imports to includes\n    includes = parser_dict.get('include', [])\n\n    # handle includes from infrared to their own class\n    for include in includes:\n        module_name, class_name = include.split(':')\n        module = import_module(module_name)\n        class_ = getattr(module, class_name)\n        self.spec_dict['includes'].append(class_)\n", "def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if key == 'include_groups' and 'include_groups' in self.spec_dict:\n            self.spec_dict['include_groups'].extend(value)\n        else:\n            self.spec_dict[key] = value\n", "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if 'path' in group:\n            path = group['path']\n        else:\n            path = group['path']\n        if 'value' in group:\n            value = group['value']\n        else:\n            value = True\n        parser_dict['include_groups'] = [path, value]\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if key.startswith(\"include_\"):\n            include_groups.append(key[7:])\n            include_dict = {}\n            for include in value:\n                include_dict[include[0]] = include[1]\n            include_groups.append(include_dict)\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        if parser_dict['include_groups'] is None:\n            return []\n        return parser_dict['include_groups']\n    return []\n", "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return copy.deepcopy(parser_dict)\n    else:\n        return {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for key in parser_dict:\n        if key == 'include':\n            if isinstance(parser_dict[key], list):\n                parser_dict[key] = '\\n'.join(parser_dict[key])\n            else:\n                parser_dict[key] = parser_dict[key]\n        elif key =='required':\n            if parser_dict[key] == True:\n                parser_dict[key] = 'True'\n            elif parser_dict[key] == False:\n                parser_dict[key] = 'False'\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            include_groups[key] = {\n                'includes': [],\n                'excludes': []\n            }\n\n            for key_include in value:\n                include_groups[key]['includes'].append(key_include)\n\n            for key_exclude in value.get('excludes', []):\n                include_groups[key]['excludes'].append(key_exclude)\n\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for key in parser_dict:\n        if key in [\"include_directories\"]:\n            self.spec_dict[\"include_directories\"] = parser_dict[key]\n        elif key in [\"library_directories\"]:\n            self.spec_dict[\"library_directories\"] = parser_dict[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict.get('path', ''),\n            'line': include_dict.get('line', ''),\n            'column': include_dict.get('column', '')\n        })\n\n    self.spec_dict['include_groups'] = include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    # todo: resolve imports to includes\n    includes = parser_dict.get('include', [])\n\n    # handle includes from infrared to their own class\n    for include in includes:\n        module_name, class_name = include.split(':')\n        module = import_module(module_name)\n        class_ = getattr(module, class_name)\n        self.spec_dict['includes'].append(class_)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if key == 'include_groups' and 'include_groups' in self.spec_dict:\n            self.spec_dict['include_groups'].extend(value)\n        else:\n            self.spec_dict[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if 'path' in group:\n            path = group['path']\n        else:\n            path = group['path']\n        if 'value' in group:\n            value = group['value']\n        else:\n            value = True\n        parser_dict['include_groups'] = [path, value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if key.startswith(\"include_\"):\n            include_groups.append(key[7:])\n            include_dict = {}\n            for include in value:\n                include_dict[include[0]] = include[1]\n            include_groups.append(include_dict)\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        if parser_dict['include_groups'] is None:\n            return []\n        return parser_dict['include_groups']\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return copy.deepcopy(parser_dict)\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {\n        k: v if not isinstance(v, Argument) else v.default\n        for k, v in self.spec.items()\n    }\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {\n        k: v if not isinstance(v, Argument) else v.default\n        for k, v in self.spec.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.option_strings.items()\n        if k.startswith(\"--\") and not k.startswith(\"--help\")\n    }\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    deprecated = {}\n    for arg in self.spec_helper.deprecated_arguments:\n        deprecated[arg.name] = arg.deprecated\n    return deprecated\n", "def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.get_deprecated_args().items()\n    }\n", "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.get_deprecated_args().items() if k!= \"install_requires\"}\n", "def get_deprecated_args(self):\n    return {\n        k: v for k, v in vars(self).items() if k not in self.spec_helper.deprecated_options\n    }\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.items()\n        if k!= \"install_requires\"\n    }\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.option_strings.items()\n        if k.startswith(\"--\") and not k.startswith(\"--help\")\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    deprecated = {}\n    for arg in self.spec_helper.deprecated_arguments:\n        deprecated[arg.name] = arg.deprecated\n    return deprecated\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.get_deprecated_args().items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.get_deprecated_args().items() if k!= \"install_requires\"}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        k: v for k, v in vars(self).items() if k not in self.spec_helper.deprecated_options\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        k: v for k, v in self.spec_helper.items()\n        if k!= \"install_requires\"\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    for arg_name in deprecated_args:\n        if arg_name in answer_file_args:\n            print(\"{} is deprecated. Use {} instead.\".format(\n                arg_name, answer_file_args[arg_name]))\n        else:\n            print(\"{} is deprecated. Please use {} instead.\".format(\n                arg_name, cli_args[arg_name]))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args:\n        deprecation_message = 'The following arguments are deprecated: {}'.format(\n            ', '.join(deprecated_args))\n        deprecation_message += '. Please refer to the documentation.'\n        print(deprecation_message)\n        print('{}. {}'.format(cli_args.get('version', 'Unknown'), cli_args.get('file', 'Unknown')))\n        print('{}'.format(answer_file_args.get('version', 'Unknown')))\n        print('{}'.format(answer_file_args.get('file', 'Unknown')))\n        sys.exit(1)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(answer_file_args)\n    deprecated_args = dict(deprecated_args)\n\n    def report(args):\n        for key, value in args.items():\n            if key in deprecated_args:\n                print(\"{} is deprecated, use {} instead\".format(key, deprecated_args[key]))\n                del deprecated_args[key]\n        return deprecated_args\n\n    def print_answer(args):\n        for key, value in args.items():\n            if value is not None:\n                print(\"{} = {}\".format(key, value))\n        return True\n\n    deprecated_args = report(deprecated_args)\n    deprecated_args = report(deprecated_args)\n    deprecated_args = report(deprecated_args)\n    print_answer(deprecated_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecate_args = self.get_deprecated_args(cli_args)\n    for arg in deprecate_args:\n        if arg in answer_file_args:\n            print(\"Warning: {} is deprecated, use {} instead.\".format(\n                arg, answer_file_args[arg]))\n        else:\n            print(\"Warning: {} is not deprecated, use {}.\".format(\n                arg, cli_args[arg]))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg not in answer_file_args:\n            print(\"{} is deprecated and will be removed in an upcoming release\".format(arg))\n            answer_file_args[arg] = cli_args[arg]\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg in answer_file_args:\n            print(\"Warning: argument {} is deprecated. Please use {} instead.\".format(arg, answer_file_args[arg]))\n        else:\n            print(\"Warning: argument {} is not deprecated. Please use {} instead.\".format(arg, cli_args[arg]))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecate_args = answer_file_args.get('deprecate', [])\n    deprecate_args = [arg for arg in deprecate_args if arg not in cli_args]\n    if deprecate_args:\n        deprecate_text = ', '.join(deprecate_args)\n        raise exceptions.ArgumentDeprecationError(deprecate_text)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args is None:\n        return\n\n    deprecated_args = deprecated_args.copy()\n    deprecated_args.update(answer_file_args)\n\n    if cli_args:\n        deprecated_args.update(cli_args)\n\n    deprecated_args = self.filter_args(deprecated_args)\n    if deprecated_args is None:\n        return\n\n    if not deprecated_args.get('import_infrared_classes'):\n        deprecated_args['import_infrared_classes'] = []\n\n    deprecated_args = self.filter_args(deprecated_args)\n\n    deprecation_output = []\n    deprecation_output.append('--import-infrared-classes')\n    deprecation_output.append(deprecated_args['import_infrared_classes'])\n    deprecation_output.append('--answer-file')\n    deprecation_output.append(deprecated_args['answer_file'])\n    deprecation_output.append('--output')\n    deprecation_output.append(deprecated", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict, dict):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files with import infrared class\n    :return: None\n    \"\"\"\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n    for key in deprecated_args:\n        if deprecated_args[key] is None:\n            print(\"Please provide {} argument\".format(key))\n            sys.exit(1)\n        elif deprecated_args[key] is not True and deprecated_args[key] is not False:\n            print(\"{} is an invalid boolean value\".format(key))\n            sys.exit(1)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args.keys():\n        if arg in answer_file_args:\n            raise CLIAbort('{} argument {} is deprecated. Use {} instead.'\n                          .format(arg, arg, answer_file_args[arg]))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    for arg_name in deprecated_args:\n        if arg_name in answer_file_args:\n            print(\"{} is deprecated. Use {} instead.\".format(\n                arg_name, answer_file_args[arg_name]))\n        else:\n            print(\"{} is deprecated. Please use {} instead.\".format(\n                arg_name, cli_args[arg_name]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args:\n        deprecation_message = 'The following arguments are deprecated: {}'.format(\n            ', '.join(deprecated_args))\n        deprecation_message += '. Please refer to the documentation.'\n        print(deprecation_message)\n        print('{}. {}'.format(cli_args.get('version', 'Unknown'), cli_args.get('file', 'Unknown')))\n        print('{}'.format(answer_file_args.get('version', 'Unknown')))\n        print('{}'.format(answer_file_args.get('file', 'Unknown')))\n        sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(answer_file_args)\n    deprecated_args = dict(deprecated_args)\n\n    def report(args):\n        for key, value in args.items():\n            if key in deprecated_args:\n                print(\"{} is deprecated, use {} instead\".format(key, deprecated_args[key]))\n                del deprecated_args[key]\n        return deprecated_args\n\n    def print_answer(args):\n        for key, value in args.items():\n            if value is not None:\n                print(\"{} = {}\".format(key, value))\n        return True\n\n    deprecated_args = report(deprecated_args)\n    deprecated_args = report(deprecated_args)\n    deprecated_args = report(deprecated_args)\n    print_answer(deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecate_args = self.get_deprecated_args(cli_args)\n    for arg in deprecate_args:\n        if arg in answer_file_args:\n            print(\"Warning: {} is deprecated, use {} instead.\".format(\n                arg, answer_file_args[arg]))\n        else:\n            print(\"Warning: {} is not deprecated, use {}.\".format(\n                arg, cli_args[arg]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg not in answer_file_args:\n            print(\"{} is deprecated and will be removed in an upcoming release\".format(arg))\n            answer_file_args[arg] = cli_args[arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg in answer_file_args:\n            print(\"Warning: argument {} is deprecated. Please use {} instead.\".format(arg, answer_file_args[arg]))\n        else:\n            print(\"Warning: argument {} is not deprecated. Please use {} instead.\".format(arg, cli_args[arg]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecate_args = answer_file_args.get('deprecate', [])\n    deprecate_args = [arg for arg in deprecate_args if arg not in cli_args]\n    if deprecate_args:\n        deprecate_text = ', '.join(deprecate_args)\n        raise exceptions.ArgumentDeprecationError(deprecate_text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args is None:\n        return\n\n    deprecated_args = deprecated_args.copy()\n    deprecated_args.update(answer_file_args)\n\n    if cli_args:\n        deprecated_args.update(cli_args)\n\n    deprecated_args = self.filter_args(deprecated_args)\n    if deprecated_args is None:\n        return\n\n    if not deprecated_args.get('import_infrared_classes'):\n        deprecated_args['import_infrared_classes'] = []\n\n    deprecated_args = self.filter_args(deprecated_args)\n\n    deprecation_output = []\n    deprecation_output.append('--import-infrared-classes')\n    deprecation_output.append(deprecated_args['import_infrared_classes'])\n    deprecation_output.append('--answer-file')\n    deprecation_output.append(deprecated_args['answer_file'])\n    deprecation_output.append('--output')\n    deprecation_output.append(deprecated", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict, dict):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files with import infrared class\n    :return: None\n    \"\"\"\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n    for key in deprecated_args:\n        if deprecated_args[key] is None:\n            print(\"Please provide {} argument\".format(key))\n            sys.exit(1)\n        elif deprecated_args[key] is not True and deprecated_args[key] is not False:\n            print(\"{} is an invalid boolean value\".format(key))\n            sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args.keys():\n        if arg in answer_file_args:\n            raise CLIAbort('{} argument {} is deprecated. Use {} instead.'\n                          .format(arg, arg, answer_file_args[arg]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    parser_dict = {\n       'main': ['--{}'.format(command_name)],\n        'virsh': ['--virsh'],\n        'ospd': ['--ospd'],\n        'esx': ['--esx'],\n        'network': ['--network'],\n        'network_switch': ['--network-switch'],\n        'disk': ['--disk'],\n        'boot': ['--boot'],\n        'boot_switch': ['--boot-switch'],\n        'vm': ['--vm'],\n        'windows': ['--windows'],\n        'pci': ['--pci'],\n       'sys': ['--sys']\n    }\n    return self.iterate_parsers()\n", "def get_parser_option_specs(self, command_name):\n    parser_specs = []\n    for option_spec in self.iterate_parsers():\n        if option_spec.get(\"command\") == command_name:\n            parser_specs.append(option_spec)\n    return parser_specs\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.parser)\n", "def get_parser_option_specs(self, command_name):\n    parser_dict = {}\n    for parser in self.iterate_parsers():\n        if parser.name == command_name:\n            parser_dict = parser.get_option_dict(command_name)\n    return parser_dict\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.get_parser(command_name))\n", "def get_parser_option_specs(self, command_name):\n    parser_list = []\n    for parser in self.iterate_parsers():\n        if isinstance(parser, list):\n            for option in parser:\n                if isinstance(option, CommandOption) and option.command_name == command_name:\n                    parser_list.append(option)\n        else:\n            if isinstance(parser, CommandOption) and parser.command_name == command_name:\n                parser_list.append(parser)\n    return parser_list\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.get_parser(command_name))\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.parser_dict, command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self._parser_dict)\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self._parser)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_dict = {\n       'main': ['--{}'.format(command_name)],\n        'virsh': ['--virsh'],\n        'ospd': ['--ospd'],\n        'esx': ['--esx'],\n        'network': ['--network'],\n        'network_switch': ['--network-switch'],\n        'disk': ['--disk'],\n        'boot': ['--boot'],\n        'boot_switch': ['--boot-switch'],\n        'vm': ['--vm'],\n        'windows': ['--windows'],\n        'pci': ['--pci'],\n       'sys': ['--sys']\n    }\n    return self.iterate_parsers()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_specs = []\n    for option_spec in self.iterate_parsers():\n        if option_spec.get(\"command\") == command_name:\n            parser_specs.append(option_spec)\n    return parser_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_dict = {}\n    for parser in self.iterate_parsers():\n        if parser.name == command_name:\n            parser_dict = parser.get_option_dict(command_name)\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.get_parser(command_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_list = []\n    for parser in self.iterate_parsers():\n        if isinstance(parser, list):\n            for option in parser:\n                if isinstance(option, CommandOption) and option.command_name == command_name:\n                    parser_list.append(option)\n        else:\n            if isinstance(parser, CommandOption) and parser.command_name == command_name:\n                parser_list.append(parser)\n    return parser_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.get_parser(command_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self.parser_dict, command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self._parser_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(self._parser)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    with class self.get_parser_option_specs(self, command_name)\n    \"\"\"\n    return self._get_option_spec_for_command(command_name, argument_name)\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, ArgumentSpecList]\n    \"\"\"\n    Gets the specification for the specified option name.\n\n    with self.get_parser_option_specs(command_name)\n        #...\n    \"\"\"\n    if command_name not in self._option_specs:\n        raise KeyError(\n            'No option specification for command {0!r} for option name '\n            '\"{1!r}\"'.format(command_name, argument_name))\n\n    # pylint: disable=protected-access\n    return self._option_specs[command_name]._specs[argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n\n    # If the option doesn't exist in the registry, just return None.\n    if not self._options.get(command_name, {}).get(argument_name, None):\n        return None\n\n    # Otherwise, return the specification for that option.\n    return self._options[command_name][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "def get_option_spec(self, command_name, argument_name):\n    parser = self.get_parser(command_name)\n    option_spec = parser.get_option_by_name(argument_name)\n\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n\n    # No need to test for --help or --version, since the doc string is\n    # explained in the comment above.\n\n    # All commands need to define this option so that the doc strings\n    # are explained in the comment above.\n    if command_name == 'build_ext':\n        return None\n    elif command_name == 'install_lib':\n        return None\n\n    parser = self.get_parser(command_name)\n    option_spec = parser.get_option_spec(argument_name)\n\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "def get_option_spec(self, command_name, argument_name):\n\n    # In case the argument is a dictionary or a command name.\n    if isinstance(argument_name, dict):\n        argument_name = argument_name['name']\n\n    # Returns the spec for the option name.\n    return self.get_parser_option_specs(command_name)[argument_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    with class self.get_parser_option_specs(self, command_name)\n    \"\"\"\n    return self._get_option_spec_for_command(command_name, argument_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, ArgumentSpecList]\n    \"\"\"\n    Gets the specification for the specified option name.\n\n    with self.get_parser_option_specs(command_name)\n        #...\n    \"\"\"\n    if command_name not in self._option_specs:\n        raise KeyError(\n            'No option specification for command {0!r} for option name '\n            '\"{1!r}\"'.format(command_name, argument_name))\n\n    # pylint: disable=protected-access\n    return self._option_specs[command_name]._specs[argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n\n    # If the option doesn't exist in the registry, just return None.\n    if not self._options.get(command_name, {}).get(argument_name, None):\n        return None\n\n    # Otherwise, return the specification for that option.\n    return self._options[command_name][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser = self.get_parser(command_name)\n    option_spec = parser.get_option_by_name(argument_name)\n\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n\n    # No need to test for --help or --version, since the doc string is\n    # explained in the comment above.\n\n    # All commands need to define this option so that the doc strings\n    # are explained in the comment above.\n    if command_name == 'build_ext':\n        return None\n    elif command_name == 'install_lib':\n        return None\n\n    parser = self.get_parser(command_name)\n    option_spec = parser.get_option_spec(argument_name)\n\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n\n    # In case the argument is a dictionary or a command name.\n    if isinstance(argument_name, dict):\n        argument_name = argument_name['name']\n\n    # Returns the spec for the option name.\n    return self.get_parser_option_specs(command_name)[argument_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_arguments]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '--infrared-output']\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "def get_silent_args(self, args):\n    return [name for name in self.spec_helper.silent_args if name in args]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.infrared_class]\n", "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_args]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.infrared_class_name]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_arguments]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '--infrared-output']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [name for name in self.spec_helper.silent_args if name in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.infrared_class]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.infrared_class_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if missing_args:\n        return \"Missing required arguments: %s\" % ', '.join(missing_args)\n", "def validate_requires_args(self, args):\n    missing_args = [arg for arg in self.required_args if arg not in args]\n    if missing_args:\n        raise InfraredCommandError('Missing required arguments: {}'.format(missing_args))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            return False\n    return True\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_arguments:\n            raise InvalidArgument('{} requires argument \"{}\"'.format(\n                self.spec_helper.name, arg))\n", "def validate_requires_args(self, args):\n    missing = []\n\n    for name, required in self.spec_helper.requires.items():\n        if name not in args or not args[name]:\n            missing.append(name)\n\n    if missing:\n        raise InvalidArgumentsError(\n            'Missing required arguments: {}'.format(missing)\n        )\n", "def validate_requires_args(self, args):\n    return all([\n        args.address,\n        args.name,\n        args.model,\n        args.type,\n        args.color,\n        args.smart_mode,\n        args.brightness,\n        args.hue,\n        args.sat,\n        args.light,\n        args.dimmer,\n        args.rgb,\n        args.hue_sat,\n        args.light_sat,\n        args.intensity,\n        args.brightness_percent,\n        args.nightlight,\n        args.nightlight_color,\n        args.hue_sat_percent,\n        args.brightness_percent_per_nightlight,\n        args.hue_sat_percent_per_nightlight_light,\n        args.light_sat_percent_per_nightlight_light,\n        args.brightness_percent_per_nightlight_light,\n        args.intensity_percent,\n        args.brightness_percent_per_nightlight_light,\n        args.nightlight_intensity,\n        args.nightlight", "def validate_requires_args(self, args):\n    for arg_name in self.spec_helper.required_args:\n        if arg_name not in args:\n            return False\n\n    return True\n", "def validate_requires_args(self, args):\n    return set(args).issubset(self.spec_helper.required_args)\n", "def validate_requires_args(self, args):\n    required_args = self.spec_helper.required_args()\n    missing_args = required_args - set(args)\n    if missing_args:\n        raise exceptions.MissingArguments(missing_args)\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise ArgumentError(\n                'Must be one of: {0}'.format(self.spec_helper.required_args),\n                arg\n            )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if missing_args:\n        return \"Missing required arguments: %s\" % ', '.join(missing_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    missing_args = [arg for arg in self.required_args if arg not in args]\n    if missing_args:\n        raise InfraredCommandError('Missing required arguments: {}'.format(missing_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_arguments:\n            raise InvalidArgument('{} requires argument \"{}\"'.format(\n                self.spec_helper.name, arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    missing = []\n\n    for name, required in self.spec_helper.requires.items():\n        if name not in args or not args[name]:\n            missing.append(name)\n\n    if missing:\n        raise InvalidArgumentsError(\n            'Missing required arguments: {}'.format(missing)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all([\n        args.address,\n        args.name,\n        args.model,\n        args.type,\n        args.color,\n        args.smart_mode,\n        args.brightness,\n        args.hue,\n        args.sat,\n        args.light,\n        args.dimmer,\n        args.rgb,\n        args.hue_sat,\n        args.light_sat,\n        args.intensity,\n        args.brightness_percent,\n        args.nightlight,\n        args.nightlight_color,\n        args.hue_sat_percent,\n        args.brightness_percent_per_nightlight,\n        args.hue_sat_percent_per_nightlight_light,\n        args.light_sat_percent_per_nightlight_light,\n        args.brightness_percent_per_nightlight_light,\n        args.intensity_percent,\n        args.brightness_percent_per_nightlight_light,\n        args.nightlight_intensity,\n        args.nightlight", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg_name in self.spec_helper.required_args:\n        if arg_name not in args:\n            return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return set(args).issubset(self.spec_helper.required_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.spec_helper.required_args()\n    missing_args = required_args - set(args)\n    if missing_args:\n        raise exceptions.MissingArguments(missing_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise ArgumentError(\n                'Must be one of: {0}'.format(self.spec_helper.required_args),\n                arg\n            )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    required_when = self.spec_helper.get_required_when(command_name)\n    if not required_when:\n        return []\n\n    matched_args = []\n    for arg_name in args:\n        if arg_name in required_when:\n            matched_args.append(arg_name)\n\n    return matched_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if not self.spec_helper.is_required(arg):\n            matched_args.append(arg)\n\n    return matched_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    conditions = self.spec_helper.get_conditions(\n        command_name, options_spec, args)\n    return [name for name in args if conditions[0](*args[name])]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    if not options_spec or not args:\n        return []\n\n    arg_names = []\n    for arg in args:\n        if arg in options_spec and arg not in arg_names:\n            arg_names.append(arg)\n\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    matched_args = []\n    for name, value in options_spec.items():\n        if command_name not in self.spec_helper.commands:\n            continue\n        if self.spec_helper.commands[command_name][name](args, value):\n            matched_args.append(name)\n    return matched_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = []\n    for name in args:\n        if self.spec_helper.match_arg(name, args):\n            arg_names.append(name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name, options_spec)\n    return [arg for arg in args if condition(arg)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = []\n    for arg_name in args:\n        if self.spec_helper.check_condition(\n                command_name, options_spec, arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name,'required_when')\n    return [name for name in args\n            if condition(name, options_spec)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = set(args)\n    for condition in self.spec_helper.get_conditions(\n            command_name, options_spec):\n        if condition.match(args):\n            arg_names.update(condition.required)\n            break\n    return list(arg_names)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    required_when = self.spec_helper.get_required_when(command_name)\n    if not required_when:\n        return []\n\n    matched_args = []\n    for arg_name in args:\n        if arg_name in required_when:\n            matched_args.append(arg_name)\n\n    return matched_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if not self.spec_helper.is_required(arg):\n            matched_args.append(arg)\n\n    return matched_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    conditions = self.spec_helper.get_conditions(\n        command_name, options_spec, args)\n    return [name for name in args if conditions[0](*args[name])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    if not options_spec or not args:\n        return []\n\n    arg_names = []\n    for arg in args:\n        if arg in options_spec and arg not in arg_names:\n            arg_names.append(arg)\n\n    return arg_names\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    matched_args = []\n    for name, value in options_spec.items():\n        if command_name not in self.spec_helper.commands:\n            continue\n        if self.spec_helper.commands[command_name][name](args, value):\n            matched_args.append(name)\n    return matched_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = []\n    for name in args:\n        if self.spec_helper.match_arg(name, args):\n            arg_names.append(name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name, options_spec)\n    return [arg for arg in args if condition(arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = []\n    for arg_name in args:\n        if self.spec_helper.check_condition(\n                command_name, options_spec, arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition with import infrared class self.spec_helper\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name,'required_when')\n    return [name for name in args\n            if condition(name, options_spec)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import infrared class self.spec_helper\n    \"\"\"\n    arg_names = set(args)\n    for condition in self.spec_helper.get_conditions(\n            command_name, options_spec):\n        if condition.match(args):\n            arg_names.update(condition.required)\n            break\n    return list(arg_names)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        return \"Too many arguments.\"\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS_LENGTH:\n        raise InvalidArgumentsException\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments!')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.get('max_length', 0):\n        raise exceptions.ArgumentTooLongException\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise exceptions.ArgumentTooLongException\n", "def validate_length_args(self, args):\n    arg_length = len(args)\n    if arg_length > self.spec_helper.max_args:\n        raise BadRequest(\"Not enough arguments to function call.\")\n", "def validate_length_args(self, args):\n    if args is None or args == []:\n        return\n    if len(args) > self.spec_helper.max_args:\n        raise InvalidArgumentException(\n            \"Too many arguments! Expected {} but received {} arguments\".format(\n                self.spec_helper.max_args, len(args)\n            )\n        )\n", "def validate_length_args(self, args):\n    if args['--min-length'] is not None:\n        if args['--min-length'] < len(args['--value']):\n            msg = 'Length of value is less than minimum length of {0}'.format(\n                len(args['--value']))\n            raise exceptions.CLIAbort(msg)\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS:\n        return (\"Too much arguments! (%d)\" % len(args))\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config['general']['max_length']:\n        raise InfraredException('Maximum allowed length {} is reached'.format(self.spec_helper.config['general']['max_length']))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        return \"Too many arguments.\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS_LENGTH:\n        raise InvalidArgumentsException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments!')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.get('max_length', 0):\n        raise exceptions.ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise exceptions.ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_length = len(args)\n    if arg_length > self.spec_helper.max_args:\n        raise BadRequest(\"Not enough arguments to function call.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args is None or args == []:\n        return\n    if len(args) > self.spec_helper.max_args:\n        raise InvalidArgumentException(\n            \"Too many arguments! Expected {} but received {} arguments\".format(\n                self.spec_helper.max_args, len(args)\n            )\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args['--min-length'] is not None:\n        if args['--min-length'] < len(args['--value']):\n            msg = 'Length of value is less than minimum length of {0}'.format(\n                len(args['--value']))\n            raise exceptions.CLIAbort(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS:\n        return (\"Too much arguments! (%d)\" % len(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config['general']['max_length']:\n        raise InfraredException('Maximum allowed length {} is reached'.format(self.spec_helper.config['general']['max_length']))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    choices = args[\"choices\"]\n    if not choices:\n        return\n\n    if args[\"choices\"] not in [c[\"name\"] for c in self.spec_helper[\"CHOICES\"]]:\n        raise InvalidArgument(\n            \"'{}' is not a valid choice for the 'choices' argument\".format(args[\"choices\"])\n        )\n", "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise ValueError('\"{}\" is not a valid choice'.format(args['--choices']))\n", "def validate_choices_args(self, args):\n    valid_choices = self.spec_helper.get_valid_choices()\n    return args[\"<choices>\"] in valid_choices\n", "def validate_choices_args(self, args):\n    if args.choices not in self.spec_helper.choices:\n        raise exceptions.ArgumentTypeError(\n            \"'{}' is not a valid choice for {}\".format(\n                args.choices, args.__class__.__name__))\n", "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise BadRequest(\"'{}' is not one of the available choices ({}).\".format(\n            args['--choices'], \", \".join(self.spec_helper.choices)\n        ))\n", "def validate_choices_args(self, args):\n    choices = args.get('choices', [])\n    invalid_choices = set(choices) - set(self.spec_helper.CHOICES)\n    if invalid_choices:\n        error = 'Must supply one or more of: {}'.format(', '.join(invalid_choices))\n        return error, []\n    return None, []\n", "def validate_choices_args(self, args):\n    for choice in self.spec_helper.choices:\n        if args == choice['args']:\n            return True\n\n    return False\n", "def validate_choices_args(self, args):\n    for choice in args.choices:\n        if choice not in self.spec_helper.choices:\n            raise ArgumentTypeError(\n                '{} must be one of {}'.format(\n                    choice,\n                    ', '.join(self.spec_helper.choices)\n                )\n            )\n", "def validate_choices_args(self, args):\n    choices = args.pop('choices', None)\n    if choices and not isinstance(choices, list):\n        raise InvalidArgument(\"'choices' must be a list\")\n    return choices\n", "def validate_choices_args(self, args):\n    choices = args.pop('choices')\n\n    if not all((isinstance(choice, str) for choice in choices)):\n        raise InvalidArgument('\"choices\" must be a list of choice names.')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    choices = args[\"choices\"]\n    if not choices:\n        return\n\n    if args[\"choices\"] not in [c[\"name\"] for c in self.spec_helper[\"CHOICES\"]]:\n        raise InvalidArgument(\n            \"'{}' is not a valid choice for the 'choices' argument\".format(args[\"choices\"])\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise ValueError('\"{}\" is not a valid choice'.format(args['--choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    valid_choices = self.spec_helper.get_valid_choices()\n    return args[\"<choices>\"] in valid_choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices not in self.spec_helper.choices:\n        raise exceptions.ArgumentTypeError(\n            \"'{}' is not a valid choice for {}\".format(\n                args.choices, args.__class__.__name__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise BadRequest(\"'{}' is not one of the available choices ({}).\".format(\n            args['--choices'], \", \".join(self.spec_helper.choices)\n        ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.get('choices', [])\n    invalid_choices = set(choices) - set(self.spec_helper.CHOICES)\n    if invalid_choices:\n        error = 'Must supply one or more of: {}'.format(', '.join(invalid_choices))\n        return error, []\n    return None, []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in self.spec_helper.choices:\n        if args == choice['args']:\n            return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in args.choices:\n        if choice not in self.spec_helper.choices:\n            raise ArgumentTypeError(\n                '{} must be one of {}'.format(\n                    choice,\n                    ', '.join(self.spec_helper.choices)\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.pop('choices', None)\n    if choices and not isinstance(choices, list):\n        raise InvalidArgument(\"'choices' must be a list\")\n    return choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.pop('choices')\n\n    if not all((isinstance(choice, str) for choice in choices)):\n        raise InvalidArgument('\"choices\" must be a list of choice names.')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    if args['infrared_status'] in ['on', 'true', 'yes']:\n        return args\n    else:\n        raise ArgumentTypeError('Minimum value of infrared status can not be greater than maximum value')\n", "def validate_min_max_args(self, args):\n    args = vars(args)\n    for arg in args.keys():\n        if args[arg] < self.spec_helper.min_value[arg] or args[arg] > self.spec_helper.max_value[arg]:\n            raise ValueError(\"Argument {} is outside the range of {} and {}\".format(arg, self.spec_helper.min_value[arg], self.spec_helper.max_value[arg]))\n", "def validate_min_max_args(self, args):\n    args = vars(args)\n    for arg in args.keys():\n        min_ = args[arg]\n        max_ = args[arg]\n        if not isinstance(min_, int) or not isinstance(max_, int):\n            raise InvalidArgumentError(arg)\n        if min_ < 0:\n            raise InvalidArgumentError(arg)\n        if max_ < 0:\n            raise InvalidArgumentError(arg)\n", "def validate_min_max_args(self, args):\n    try:\n        args['value'] = float(args['value'])\n    except ValueError:\n        raise exceptions.ArgumentTypeError('Value for argument \"value\" must be '\n                                          'a floating point number between '\n                                          '{min_value} and {max_value}.'\n                                         .format(min_value=args['value'],\n                                                  max_value=args['value']))\n    if args['value'] < args['min_value']:\n        raise exceptions.ArgumentValueError(\n            'Value of argument \"value\" must be greater than {min_value}.'\n           .format(min_value=args['value']))\n    if args['value'] > args['max_value']:\n        raise exceptions.Ar", "def validate_min_max_args(self, args):\n\n    try:\n        float(args)\n    except ValueError:\n        raise InvalidArgumentException(args,'min')\n\n    try:\n        float(args)\n    except ValueError:\n        raise InvalidArgumentException(args,'max')\n\n    if args < self.spec_helper.min or args > self.spec_helper.max:\n        raise InvalidArgumentException(args,'min', self.spec_helper.min,\n                                      self.spec_helper.max)\n", "def validate_min_max_args(self, args):\n    if args['min'] is not None and args['max'] is not None:\n        if args['min'] > args['max']:\n            raise InvalidArgumentException('Minimum argument must be less than maximum argument')\n", "def validate_min_max_args(self, args):\n    valid_args = ['min','max']\n\n    if args['min'] not in valid_args or args['max'] not in valid_args:\n        raise exceptions.ArgumentError(\"Invalid range specified. Must be between {} and {}.\".format(\n            valid_args[0], valid_args[1]))\n", "def validate_min_max_args(self, args):\n    arg_names = [a for a in inspect.getargspec(self.spec_helper)[0] if not a.startswith(\"self\")]\n    if not args:\n        return\n\n    if args[0] not in arg_names:\n        raise RuntimeError(\"Must specify a '{}' argument\".format(args[0]))\n\n    if args[0] == \"self\":\n        min_value = None\n        max_value = None\n    else:\n        min_value = args[0]\n        max_value = args[0]\n\n    if args[1] not in [\"value\", \"unit\"]:\n        raise RuntimeError(\"Must specify a '{}' argument\".format(args[1]))\n\n    if args[1] == \"value\":\n        min_value = float(min_value)\n        max_value = float(max_value)\n\n    if args[1] == \"unit\":\n        min_value = units.get_unit(min_value)\n        max_value = units.get_unit(max_value)\n\n    if min_value > max_value:\n        raise RuntimeError(\"Minimum", "def validate_min_max_args(self, args):\n    if args['low'] is not None and args['high'] is not None:\n        if args['low'] > args['high']:\n            raise ValueError('Low value greater than high value.')\n", "def validate_min_max_args(self, args):\n    try:\n        min_val = float(args.get('--min'))\n        max_val = float(args.get('--max'))\n    except ValueError:\n        return False\n    if not (min_val <= max_val <= infrared.INFRARED_SENSOR_RANGE):\n        return False\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    if args['infrared_status'] in ['on', 'true', 'yes']:\n        return args\n    else:\n        raise ArgumentTypeError('Minimum value of infrared status can not be greater than maximum value')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    args = vars(args)\n    for arg in args.keys():\n        if args[arg] < self.spec_helper.min_value[arg] or args[arg] > self.spec_helper.max_value[arg]:\n            raise ValueError(\"Argument {} is outside the range of {} and {}\".format(arg, self.spec_helper.min_value[arg], self.spec_helper.max_value[arg]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    args = vars(args)\n    for arg in args.keys():\n        min_ = args[arg]\n        max_ = args[arg]\n        if not isinstance(min_, int) or not isinstance(max_, int):\n            raise InvalidArgumentError(arg)\n        if min_ < 0:\n            raise InvalidArgumentError(arg)\n        if max_ < 0:\n            raise InvalidArgumentError(arg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        args['value'] = float(args['value'])\n    except ValueError:\n        raise exceptions.ArgumentTypeError('Value for argument \"value\" must be '\n                                          'a floating point number between '\n                                          '{min_value} and {max_value}.'\n                                         .format(min_value=args['value'],\n                                                  max_value=args['value']))\n    if args['value'] < args['min_value']:\n        raise exceptions.ArgumentValueError(\n            'Value of argument \"value\" must be greater than {min_value}.'\n           .format(min_value=args['value']))\n    if args['value'] > args['max_value']:\n        raise exceptions.Ar", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n\n    try:\n        float(args)\n    except ValueError:\n        raise InvalidArgumentException(args,'min')\n\n    try:\n        float(args)\n    except ValueError:\n        raise InvalidArgumentException(args,'max')\n\n    if args < self.spec_helper.min or args > self.spec_helper.max:\n        raise InvalidArgumentException(args,'min', self.spec_helper.min,\n                                      self.spec_helper.max)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args['min'] is not None and args['max'] is not None:\n        if args['min'] > args['max']:\n            raise InvalidArgumentException('Minimum argument must be less than maximum argument')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    valid_args = ['min','max']\n\n    if args['min'] not in valid_args or args['max'] not in valid_args:\n        raise exceptions.ArgumentError(\"Invalid range specified. Must be between {} and {}.\".format(\n            valid_args[0], valid_args[1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_names = [a for a in inspect.getargspec(self.spec_helper)[0] if not a.startswith(\"self\")]\n    if not args:\n        return\n\n    if args[0] not in arg_names:\n        raise RuntimeError(\"Must specify a '{}' argument\".format(args[0]))\n\n    if args[0] == \"self\":\n        min_value = None\n        max_value = None\n    else:\n        min_value = args[0]\n        max_value = args[0]\n\n    if args[1] not in [\"value\", \"unit\"]:\n        raise RuntimeError(\"Must specify a '{}' argument\".format(args[1]))\n\n    if args[1] == \"value\":\n        min_value = float(min_value)\n        max_value = float(max_value)\n\n    if args[1] == \"unit\":\n        min_value = units.get_unit(min_value)\n        max_value = units.get_unit(max_value)\n\n    if min_value > max_value:\n        raise RuntimeError(\"Minimum", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args['low'] is not None and args['high'] is not None:\n        if args['low'] > args['high']:\n            raise ValueError('Low value greater than high value.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        min_val = float(args.get('--min'))\n        max_val = float(args.get('--max'))\n    except ValueError:\n        return False\n    if not (min_val <= max_val <= infrared.INFRARED_SENSOR_RANGE):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    # TODO raise exception if the type is not found\n    return self.plugin_path.joinpath(subcommand, type_name, option_name,\n                                   spec_option['import'])\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    return complex_type.ComplexType(\n        subcommand, type_name, option_name, spec_option, self.vars, self.defaults\n    )\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    # import the plugin module\n    import infrared_plugins.{plugin_name}\n    \"\"\"\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    # import the plugin module\n    import infrared_plugins\n    \"\"\"\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with i", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    complex_type = None\n\n    if subcommand == \"init\":\n        complex_type = InitCommand(option_name, spec_option)\n    elif subcommand == \"load\":\n        complex_type = LoadCommand(option_name, spec_option)\n    elif subcommand == \"reload\":\n        complex_type = ReloadCommand(option_name, spec_option)\n    elif subcommand == \"restart\":\n        complex_type = RestartCommand(option_name, spec_option)\n    elif subcommand == \"stop\":\n        complex_type = StopCommand(option_name, spec_option)\n    elif subcommand == \"shutdown\":\n        complex_type = ShutdownCommand(option_name, spec_option)\n    elif subcommand == \"sta", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n             self.defaults\n    \"\"\"\n    complex_type = None\n    if subcommand == 'list':\n        complex_type = LocalCommandType(type_name, option_name, spec_option)\n    elif subcommand == 'get':\n        complex_type = RemoteCommandType(type_name, option_name, spec_option)\n    else:\n        complex_type = ComplexCommandType(type_name, option_name, spec_option)\n\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    :rtype: the complex type instance with import infrared class self.vars\n    \"\"\"\n    complex_type = ComplexType(\n        name=type_name,\n        description='complex type',\n        plugin_path=self.plugin_path,\n        subcommand=subcommand,\n        option_name=option_name,\n        spec_option=spec_option,\n        defaults=[],\n        import_option=None,\n        required=True,\n        optional=False,\n        type_description='the complex type description'\n    )\n    self.vars[type_name] = complex_type\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    :rtype: complex.ComplexType\n    \"\"\"\n    complex_type = complex.ComplexType(subcommand, type_name, option_name,\n                                        spec_option, self.vars, self.defaults)\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    if not isinstance(self.vars, dict):\n        raise Exception(\"vars not a dict\")\n    complex_type = type_type.complex_type(\n        subcommand=subcommand,\n        type_name=type_name,\n        option_name=option_name,\n        spec_option=spec_option,\n        vars=self.vars\n    )\n    self.vars[option_name] = complex_type\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"Build the complex argument type\n\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    if 'import' in spec_option:\n        return ImportCommandType(\n            subcommand, type_name, option_name, spec_option['import'])\n    else:\n        return ComplexCommandType(\n            subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    if subcommand == \"update\":\n        return SimpleArgument(\n            type_name, option_name, spec_option[\"import\"], spec_option[\"type\"]\n        )\n    else:\n        return None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    # TODO raise exception if the type is not found\n    return self.plugin_path.joinpath(subcommand, type_name, option_name,\n                                   spec_option['import'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    return complex_type.ComplexType(\n        subcommand, type_name, option_name, spec_option, self.vars, self.defaults\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    # import the plugin module\n    import infrared_plugins.{plugin_name}\n    \"\"\"\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    # import the plugin module\n    import infrared_plugins\n    \"\"\"\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with i", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    complex_type = None\n\n    if subcommand == \"init\":\n        complex_type = InitCommand(option_name, spec_option)\n    elif subcommand == \"load\":\n        complex_type = LoadCommand(option_name, spec_option)\n    elif subcommand == \"reload\":\n        complex_type = ReloadCommand(option_name, spec_option)\n    elif subcommand == \"restart\":\n        complex_type = RestartCommand(option_name, spec_option)\n    elif subcommand == \"stop\":\n        complex_type = StopCommand(option_name, spec_option)\n    elif subcommand == \"shutdown\":\n        complex_type = ShutdownCommand(option_name, spec_option)\n    elif subcommand == \"sta", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n             self.defaults\n    \"\"\"\n    complex_type = None\n    if subcommand == 'list':\n        complex_type = LocalCommandType(type_name, option_name, spec_option)\n    elif subcommand == 'get':\n        complex_type = RemoteCommandType(type_name, option_name, spec_option)\n    else:\n        complex_type = ComplexCommandType(type_name, option_name, spec_option)\n\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    :rtype: the complex type instance with import infrared class self.vars\n    \"\"\"\n    complex_type = ComplexType(\n        name=type_name,\n        description='complex type',\n        plugin_path=self.plugin_path,\n        subcommand=subcommand,\n        option_name=option_name,\n        spec_option=spec_option,\n        defaults=[],\n        import_option=None,\n        required=True,\n        optional=False,\n        type_description='the complex type description'\n    )\n    self.vars[type_name] = complex_type\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    :rtype: complex.ComplexType\n    \"\"\"\n    complex_type = complex.ComplexType(subcommand, type_name, option_name,\n                                        spec_option, self.vars, self.defaults)\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    if not isinstance(self.vars, dict):\n        raise Exception(\"vars not a dict\")\n    complex_type = type_type.complex_type(\n        subcommand=subcommand,\n        type_name=type_name,\n        option_name=option_name,\n        spec_option=spec_option,\n        vars=self.vars\n    )\n    self.vars[option_name] = complex_type\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"Build the complex argument type\n\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n             self.vars\n    \"\"\"\n    if 'import' in spec_option:\n        return ImportCommandType(\n            subcommand, type_name, option_name, spec_option['import'])\n    else:\n        return ComplexCommandType(\n            subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import infrared class self.plugin_path\n    self.vars\n    self.defaults\n    \"\"\"\n    if subcommand == \"update\":\n        return SimpleArgument(\n            type_name, option_name, spec_option[\"import\"], spec_option[\"type\"]\n        )\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['name'] == 'import_infrared':\n            nested_args = arg\n        elif arg['name'] == 'import_infrared_variables':\n            control_args = arg\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "def get_nested_custom_and_control_args(self, args):\n    if 'import' in args:\n        return args['import'], {}\n    if 'custom' in args:\n        return args['custom'], {}\n    return {}, {}\n", "def get_nested_custom_and_control_args(self, args):\n    flat_control_args = {}\n    nested_args = {}\n\n    if args['--inventory']:\n        self._iterate_received_arguments(args['<inventory_file>'])\n        nested_args['inventory'] = True\n    elif args['--no-inventory']:\n        nested_args['inventory'] = False\n\n    control_args = {}\n    if args['--playbook']:\n        self._iterate_received_arguments(args['<playbook_file>'])\n        control_args['playbook'] = True\n    elif args['--playlist']:\n        self._iterate_received_arguments(args['<playlist_file>'])\n        control_args['playlist'] = True\n\n    nested_args['control'] = control_args\n    nested_args['nested'] = nested_args\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', {})\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for item in args:\n        if ':' in item:\n            key, val = item.split(':', 1)\n            nested_args[key] = val\n        else:\n            control_args[item] = item\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if 'Custom' in arg and 'Custom_args' in arg:\n            nested_args = arg\n        elif 'Custom' in arg:\n            control_args = arg\n    return (control_args, nested_args)\n", "def get_nested_custom_and_control_args(self, args):\n    if 'import' in args:\n        return args.copy(), {}\n    return {}, args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['type'] == 'playbook' and arg['name'] == 'import-infrared':\n            nested_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'import-infrared':\n            control_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'control':\n            nested_args['_ansible_variable_manager'] = arg['value']\n    return (control_args, nested_args)\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n\n    if args.get('ansible_variables'):\n        nested_args['variable_manager'] = args.get('ansible_variables')\n\n    if args.get('control'):\n        control_args['control_mode'] = args.get('control')\n\n    if args.get('inventory'):\n        nested_args['inventory_mode'] = args.get('inventory')\n\n    if args.get('playbook'):\n        nested_args['playbook_mode'] = args.get('playbook')\n\n    return control_args, nested_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['name'] == 'import_infrared':\n            nested_args = arg\n        elif arg['name'] == 'import_infrared_variables':\n            control_args = arg\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'import' in args:\n        return args['import'], {}\n    if 'custom' in args:\n        return args['custom'], {}\n    return {}, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    flat_control_args = {}\n    nested_args = {}\n\n    if args['--inventory']:\n        self._iterate_received_arguments(args['<inventory_file>'])\n        nested_args['inventory'] = True\n    elif args['--no-inventory']:\n        nested_args['inventory'] = False\n\n    control_args = {}\n    if args['--playbook']:\n        self._iterate_received_arguments(args['<playbook_file>'])\n        control_args['playbook'] = True\n    elif args['--playlist']:\n        self._iterate_received_arguments(args['<playlist_file>'])\n        control_args['playlist'] = True\n\n    nested_args['control'] = control_args\n    nested_args['nested'] = nested_args\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', {})\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for item in args:\n        if ':' in item:\n            key, val = item.split(':', 1)\n            nested_args[key] = val\n        else:\n            control_args[item] = item\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if 'Custom' in arg and 'Custom_args' in arg:\n            nested_args = arg\n        elif 'Custom' in arg:\n            control_args = arg\n    return (control_args, nested_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'import' in args:\n        return args.copy(), {}\n    return {}, args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['type'] == 'playbook' and arg['name'] == 'import-infrared':\n            nested_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'import-infrared':\n            control_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'control':\n            nested_args['_ansible_variable_manager'] = arg['value']\n    return (control_args, nested_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n\n    if args.get('ansible_variables'):\n        nested_args['variable_manager'] = args.get('ansible_variables')\n\n    if args.get('control'):\n        control_args['control_mode'] = args.get('control')\n\n    if args.get('inventory'):\n        nested_args['inventory_mode'] = args.get('inventory')\n\n    if args.get('playbook'):\n        nested_args['playbook_mode'] = args.get('playbook')\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra' not in vars_dict:\n        vars_dict['_extra'] = extra_vars\n    else:\n        vars_dict['_extra'].extend(extra_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n        vars_dict = vars_dict[extra_var]\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(extra_vars + vars_dict.get('extra-vars', []))\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return extra_vars\n\n    result = vars_dict.copy()\n    result.update(extra_vars)\n\n    return result\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '__ENV' not in vars_dict:\n        vars_dict['__ENV'] = dict()\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict['__ENV']:\n            vars_dict['__ENV'][extra_var] = dict()\n\n        vars_dict['__ENV'][extra_var] = vars_dict['__ENV'][extra_var]\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if 'vars' not in vars_dict:\n        return vars_dict\n\n    new_vars = vars_dict.copy()\n    new_vars.update(extra_vars)\n\n    return new_vars\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                extra_vars.append(key)\n            if isinstance(value, dict):\n                merge_extra_vars(value, extra_vars)\n\n    return vars_dict.update(extra_vars)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra' not in vars_dict:\n        vars_dict['_extra'] = extra_vars\n    else:\n        vars_dict['_extra'].extend(extra_vars)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n        vars_dict = vars_dict[extra_var]\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(extra_vars + vars_dict.get('extra-vars', []))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return extra_vars\n\n    result = vars_dict.copy()\n    result.update(extra_vars)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '__ENV' not in vars_dict:\n        vars_dict['__ENV'] = dict()\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict['__ENV']:\n            vars_dict['__ENV'][extra_var] = dict()\n\n        vars_dict['__ENV'][extra_var] = vars_dict['__ENV'][extra_var]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if 'vars' not in vars_dict:\n        return vars_dict\n\n    new_vars = vars_dict.copy()\n    new_vars.update(extra_vars)\n\n    return new_vars\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                extra_vars.append(key)\n            if isinstance(value, dict):\n                merge_extra_vars(value, extra_vars)\n\n    return vars_dict.update(extra_vars)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    # Setup the variables\n    ir_workspace = ir_workspace or InfraredWorkspace()\n    ir_plugin = ir_plugin or InfraredPlugin()\n    playbook_path = playbook_path or ir_workspace.path\n    ir_workspace.initialize(ir_plugin)\n\n    # Run the playbook\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path,\n                         verbose=verbose, extra_vars=extra_vars,\n         ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args, vars_dict,\n        ir_workspace, ir_plugin)\n    \"\"\"\n\n    # pylint: disable=too-many-arguments\n    # pylint: disable=too-many-locals\n\n    ansible_args = ansible_args or dict()\n    ansible_args['--verbose'] = verbose\n    ansible_args['--playbook-path'] = playbook_path\n    ansible_args['--extra-vars'] = extra_vars or dict()\n\n    # pylint: disable=invalid-name\n    cli_args = dict(vars", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    ansible_args = ansible_args or dict()\n\n    # Use the default Ansible args for the playbook loader\n    ansible_args['extra_vars'] = ansible_args.get('extra_vars', dict())\n    ansible_args['verbosity'] = ansible_args.get('verbosity', 1)\n\n    # Run the playbook\n    playbook = ir_workspace.ansible.playbook(playbook_path, extra_vars=extra_vars)\n\n    # Run the playbook and pass the result", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args,\n        vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = {'ir_workspace': ir_workspace,\n                'ir_plugin': ir_plugin,\n                'playbook_path': playbook_path,\n                'extra_vars': extra_vars,\n                'ansible_args': ansible_args}\n\n    cli_args.update(ansible_args or {})\n\n    ansible_args_file = cli_args", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    # This is a deliberately borrowed code, but may be advantageous in future.\n    playbook = _run_playbook(ir_workspace, ir_plugin, playbook_path,\n                             verbose=verbose, extra_vars=extra_vars,\n                             ansible_args=ansible_args)\n\n    return playbook\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args, vars_dict,\n        ir_workspace,ir_plugin)\n    \"\"\"\n    playbook_dir = os.path.dirname(playbook_path)\n    ansible_args = ansible_args or {}\n\n    cli_args = [\n        'ansible-playbook', '-i', playbook_path, '-vvvv', '--limit-tags',\n        'vvvv', '--limit-hosts', 'h', '--limit-runs', 'r', '--limit-runs-sleep',\n       's', '--extra-vars', extr", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    if ir_plugin is None:\n        raise ValueError('ir_plugin cannot be None')\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars,\n                          ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    import_vars = {\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n    }\n    import_vars.update(extra_vars or {})\n\n    ansible_args = ansible_args or {}\n    cli_args = _run_playbook(\n        import_vars,\n        verbose=verbose,\n        extra_vars=extra_vars,\n  ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, ir_workspace,\n                         ir_plugin, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    # Setup the variables\n    ir_workspace = ir_workspace or InfraredWorkspace()\n    ir_plugin = ir_plugin or InfraredPlugin()\n    playbook_path = playbook_path or ir_workspace.path\n    ir_workspace.initialize(ir_plugin)\n\n    # Run the playbook\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path,\n                         verbose=verbose, extra_vars=extra_vars,\n         ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args, vars_dict,\n        ir_workspace, ir_plugin)\n    \"\"\"\n\n    # pylint: disable=too-many-arguments\n    # pylint: disable=too-many-locals\n\n    ansible_args = ansible_args or dict()\n    ansible_args['--verbose'] = verbose\n    ansible_args['--playbook-path'] = playbook_path\n    ansible_args['--extra-vars'] = extra_vars or dict()\n\n    # pylint: disable=invalid-name\n    cli_args = dict(vars", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    ansible_args = ansible_args or dict()\n\n    # Use the default Ansible args for the playbook loader\n    ansible_args['extra_vars'] = ansible_args.get('extra_vars', dict())\n    ansible_args['verbosity'] = ansible_args.get('verbosity', 1)\n\n    # Run the playbook\n    playbook = ir_workspace.ansible.playbook(playbook_path, extra_vars=extra_vars)\n\n    # Run the playbook and pass the result", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args,\n        vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = {'ir_workspace': ir_workspace,\n                'ir_plugin': ir_plugin,\n                'playbook_path': playbook_path,\n                'extra_vars': extra_vars,\n                'ansible_args': ansible_args}\n\n    cli_args.update(ansible_args or {})\n\n    ansible_args_file = cli_args", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    # This is a deliberately borrowed code, but may be advantageous in future.\n    playbook = _run_playbook(ir_workspace, ir_plugin, playbook_path,\n                             verbose=verbose, extra_vars=extra_vars,\n                             ansible_args=ansible_args)\n\n    return playbook\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import ansible file _run_playbook(cli_args, vars_dict,\n        ir_workspace,ir_plugin)\n    \"\"\"\n    playbook_dir = os.path.dirname(playbook_path)\n    ansible_args = ansible_args or {}\n\n    cli_args = [\n        'ansible-playbook', '-i', playbook_path, '-vvvv', '--limit-tags',\n        'vvvv', '--limit-hosts', 'h', '--limit-runs', 'r', '--limit-runs-sleep',\n       's', '--extra-vars', extr", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    if ir_plugin is None:\n        raise ValueError('ir_plugin cannot be None')\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose, extra_vars,\n                          ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    import_vars = {\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n    }\n    import_vars.update(extra_vars or {})\n\n    ansible_args = ansible_args or {}\n    cli_args = _run_playbook(\n        import_vars,\n        verbose=verbose,\n        extra_vars=extra_vars,\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args,vars_dict,ir_workspace,ir_plugin)\n    \"\"\"\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, ir_workspace,\n                         ir_plugin, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import ansible file _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return AnsibleRunner(cli_args, ir_workspace, ir_plugin).run_playbook(vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return {\n            \"result\": \"in progress\",\n            \"message\": \"The plugin is still running\"\n        }\n\n    ir_workspace.create_plugin(ir_plugin)\n    return ansible.run(vars_dict, cli_args=cli_args, ir_workspace=ir_workspace)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['changed'] = False\n    ansible_results['results'] = dict()\n    ansible_results['results']['ansible_facts'] = dict()\n\n    # load variables in Ansible results\n    for var_name, var_value in vars_dict.items():\n        try:\n            ansible_results['results']['ansible_facts'][var_name] = var_value\n            # run the playbook with the vars dict and record the result in Ansible results\n            result = ir_workspace.run_playbook(var_name, var_value)\n            # record the result in ansible_results dict\n            ansible_results['results']['ansible_facts'][var_name] = result\n        except Exception as e:\n            ansible_results['results']['ansible_facts'][var_name] = str(e)\n            ansible_results['result", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.init(ir_workspace, ir_workspace.vars, ir_workspace.vars_files)\n\n    # Initialize the ansible plugin\n    ansible_plugin = AnsiblePlugin(vars_dict, ir_workspace, ir_plugin)\n\n    # Run the cli\n    ansible_result = ansible_plugin.run()\n\n    return ansible_result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with\n    \"\"\"\n    playbook_path = ir_workspace.ansible_playbook_path\n    try:\n        ansible_result = cli_args[0] + ['-i', ir_plugin.infrared_id, '-v', vars_dict]\n        ansible_result += ['-c', playbook_path]\n        ansible_result += cli_args[1:]\n        return ansible_result\n    except IndexError:\n        raise InfraredAnsibleRunnerException(\"Playbook path missing\")\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return ansible.runner.Runner(\n        hosts=ir_workspace.hosts,\n        extra_vars=ansible_vars,\n        playbook=cli_args[0],\n        verbosity=cli_args[1],\n        check_status=True,\n        check_input=True,\n        check_output=True,\n        results_dir=ir_workspace.results_dir,\n        private_key_file=ir_workspace.private_key_file,\n        ssh_username=ir_workspace.ssh_username,\n        ssh_password=ir_workspace.ssh_password\n    )\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible results with\n    \"\"\"\n    logger.info(\"Running ansible with vars: %s\", vars_dict)\n\n    return cli_args, ir_workspace.ansible.run_playbook(vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.values())\n    ansible_args.extend(ir_plugin.get_playbook_vars().values())\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: add tests for these vars to be used in the cli\n    results = ir_workspace.run_playbook(cli_args)\n    # TODO: add tests for vars dict\n    return results\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return AnsibleRunner(cli_args, ir_workspace, ir_plugin).run_playbook(vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return {\n            \"result\": \"in progress\",\n            \"message\": \"The plugin is still running\"\n        }\n\n    ir_workspace.create_plugin(ir_plugin)\n    return ansible.run(vars_dict, cli_args=cli_args, ir_workspace=ir_workspace)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['changed'] = False\n    ansible_results['results'] = dict()\n    ansible_results['results']['ansible_facts'] = dict()\n\n    # load variables in Ansible results\n    for var_name, var_value in vars_dict.items():\n        try:\n            ansible_results['results']['ansible_facts'][var_name] = var_value\n            # run the playbook with the vars dict and record the result in Ansible results\n            result = ir_workspace.run_playbook(var_name, var_value)\n            # record the result in ansible_results dict\n            ansible_results['results']['ansible_facts'][var_name] = result\n        except Exception as e:\n            ansible_results['results']['ansible_facts'][var_name] = str(e)\n            ansible_results['result", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.init(ir_workspace, ir_workspace.vars, ir_workspace.vars_files)\n\n    # Initialize the ansible plugin\n    ansible_plugin = AnsiblePlugin(vars_dict, ir_workspace, ir_plugin)\n\n    # Run the cli\n    ansible_result = ansible_plugin.run()\n\n    return ansible_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with\n    \"\"\"\n    playbook_path = ir_workspace.ansible_playbook_path\n    try:\n        ansible_result = cli_args[0] + ['-i', ir_plugin.infrared_id, '-v', vars_dict]\n        ansible_result += ['-c', playbook_path]\n        ansible_result += cli_args[1:]\n        return ansible_result\n    except IndexError:\n        raise InfraredAnsibleRunnerException(\"Playbook path missing\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return ansible.runner.Runner(\n        hosts=ir_workspace.hosts,\n        extra_vars=ansible_vars,\n        playbook=cli_args[0],\n        verbosity=cli_args[1],\n        check_status=True,\n        check_input=True,\n        check_output=True,\n        results_dir=ir_workspace.results_dir,\n        private_key_file=ir_workspace.private_key_file,\n        ssh_username=ir_workspace.ssh_username,\n        ssh_password=ir_workspace.ssh_password\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible results with\n    \"\"\"\n    logger.info(\"Running ansible with vars: %s\", vars_dict)\n\n    return cli_args, ir_workspace.ansible.run_playbook(vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.values())\n    ansible_args.extend(ir_plugin.get_playbook_vars().values())\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: add tests for these vars to be used in the cli\n    results = ir_workspace.run_playbook(cli_args)\n    # TODO: add tests for vars dict\n    return results\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if type(value) == type([]):\n            values_dict[key] = [str(i) for i in value]\n        elif type(value) == type({}):\n            values_dict[key] = {\n                key: str(value[key]) if key in value else \"\"\n            }\n        else:\n            values_dict[key] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in iteritems(values_dict):\n        if isinstance(v, bool):\n            if v:\n                values_dict[k] = 'true'\n            else:\n                values_dict[k] = 'false'\n        elif isinstance(v, (int, float)):\n            values_dict[k] = str(v)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if hasattr(self, parser_name + '_' + key):\n            setattr(self, parser_name + '_' + key, type(getattr(self, parser_name + '_' + key))(value))\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key in ['--all', '--select', '--type', '--pid', '--fd']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--all', '--shutdown', '--reboot']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--verbose', '--debug']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--force']:\n            values_dict[key] = bool(value)\n        elif key in ['--wait', '--restart']:\n            values_dict[key] = int(value)\n        elif key in ['--remove']:\n            values_dict[key] = bool(value)\n        elif key == '--remove-all':\n            values_dict[key] = Tru", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key in self.spec_helper.required_params:\n            if isinstance(value, str):\n                values_dict[key] = value.split(',')\n            elif not isinstance(value, list):\n                values_dict[key] = value\n            else:\n                values_dict[key] = value[:]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = self.spec_helper[parser_name].str_to_value(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name.parse_args()).items():\n        if arg_name in values_dict and isinstance(values_dict[arg_name], str):\n            values_dict[arg_name] = values_dict[arg_name].strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key == 'values' and not isinstance(value, string_types):\n            values_dict[key] = [value]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, bool):\n            values_dict[k] = str(v).lower()\n        elif isinstance(v, list):\n            values_dict[k] = [str(i) for i in v]\n        elif isinstance(v, dict):\n            values_dict[k] = dict(\n                [(k + '_' + str(i), self._convert_non_cli_args(\n                    parser_name, v[k])) for i in v])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--all', '--type', '--select', '--min', '--max'):\n            values_dict[key] = values_dict[key].split(',')\n        elif key in ('--regex'):\n            values_dict[key] = re.compile(values_dict[key])\n        elif key in ('--no-wait'):\n            pass\n        else:\n            values_dict[key] = str(values_dict[key])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if type(value) == type([]):\n            values_dict[key] = [str(i) for i in value]\n        elif type(value) == type({}):\n            values_dict[key] = {\n                key: str(value[key]) if key in value else \"\"\n            }\n        else:\n            values_dict[key] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in iteritems(values_dict):\n        if isinstance(v, bool):\n            if v:\n                values_dict[k] = 'true'\n            else:\n                values_dict[k] = 'false'\n        elif isinstance(v, (int, float)):\n            values_dict[k] = str(v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if hasattr(self, parser_name + '_' + key):\n            setattr(self, parser_name + '_' + key, type(getattr(self, parser_name + '_' + key))(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key in ['--all', '--select', '--type', '--pid', '--fd']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--all', '--shutdown', '--reboot']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--verbose', '--debug']:\n            values_dict[key] = value.replace(',','').split()\n        elif key in ['--force']:\n            values_dict[key] = bool(value)\n        elif key in ['--wait', '--restart']:\n            values_dict[key] = int(value)\n        elif key in ['--remove']:\n            values_dict[key] = bool(value)\n        elif key == '--remove-all':\n            values_dict[key] = Tru", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key in self.spec_helper.required_params:\n            if isinstance(value, str):\n                values_dict[key] = value.split(',')\n            elif not isinstance(value, list):\n                values_dict[key] = value\n            else:\n                values_dict[key] = value[:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = self.spec_helper[parser_name].str_to_value(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name.parse_args()).items():\n        if arg_name in values_dict and isinstance(values_dict[arg_name], str):\n            values_dict[arg_name] = values_dict[arg_name].strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key == 'values' and not isinstance(value, string_types):\n            values_dict[key] = [value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, bool):\n            values_dict[k] = str(v).lower()\n        elif isinstance(v, list):\n            values_dict[k] = [str(i) for i in v]\n        elif isinstance(v, dict):\n            values_dict[k] = dict(\n                [(k + '_' + str(i), self._convert_non_cli_args(\n                    parser_name, v[k])) for i in v])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--all', '--type', '--select', '--min', '--max'):\n            values_dict[key] = values_dict[key].split(',')\n        elif key in ('--regex'):\n            values_dict[key] = re.compile(values_dict[key])\n        elif key in ('--no-wait'):\n            pass\n        else:\n            values_dict[key] = str(values_dict[key])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, key))] for value in sub_dict.values()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        plugin_name: {\n            \"path\": plugin_dir,\n            \"metadata\": {\n                \"version\": get_version(plugin_dir),\n            },\n            \"validator\": validator_name,\n        }\n        for plugin_name, validator_name in get_validators_from_plugin_dir(plugin_dir).items()\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith(\"_\"))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [get_plugin_spec_flatten_value(plugin_dir, key) for key in dir(plugin_dir)] for value in sublist}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Error reading plugin spec file {0}: {1}'.format(file_path, str(e)))\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_NAME_OPTION: None,\n        PLUGIN_TYPE: PLUGIN_TYPE,\n        PLUGIN_HEADERS: get_plugin_headers(plugin_dir),\n        PLUGIN_VARIANTS: get_plugin_variants(plugin_dir),\n        PLUGIN_COMMANDS: get_plugin_commands(plugin_dir),\n        PLUGIN_EXCLUDE: get_plugin_exclude_files(plugin_dir),\n        PLUGIN_OPTIONS: get_plugin_options(plugin_dir),\n        PLUGIN_SHORTCUTS: get_plugin_shortcuts(plugin_dir),\n        PLUGIN_COMPILER_CLASSES: get_plugin_compiler_classes(plugin_dir),\n        PLUGIN_COMPILER_ARGS: get_plugin_compiler_args(plugin_dir),\n        PLUGIN_CONFIG_FILE: get_plugin_config_file(plugin_dir),\n        PLUGIN_CONFIG: get_plugin_config(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS: get_plugin_compiler_wrappers(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS_OPTIONS: get_plugin_compiler_wrappers", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'command',\n        'command': [plugin_dir + '/' + x for x in os.listdir(plugin_dir)],\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [globals()[key] for key in dir(globals()['__plugin__']) if not key.startswith('_')] for value in sublist}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, key))] for value in sub_dict.values()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        plugin_name: {\n            \"path\": plugin_dir,\n            \"metadata\": {\n                \"version\": get_version(plugin_dir),\n            },\n            \"validator\": validator_name,\n        }\n        for plugin_name, validator_name in get_validators_from_plugin_dir(plugin_dir).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith(\"_\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [get_plugin_spec_flatten_value(plugin_dir, key) for key in dir(plugin_dir)] for value in sublist}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Error reading plugin spec file {0}: {1}'.format(file_path, str(e)))\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_NAME_OPTION: None,\n        PLUGIN_TYPE: PLUGIN_TYPE,\n        PLUGIN_HEADERS: get_plugin_headers(plugin_dir),\n        PLUGIN_VARIANTS: get_plugin_variants(plugin_dir),\n        PLUGIN_COMMANDS: get_plugin_commands(plugin_dir),\n        PLUGIN_EXCLUDE: get_plugin_exclude_files(plugin_dir),\n        PLUGIN_OPTIONS: get_plugin_options(plugin_dir),\n        PLUGIN_SHORTCUTS: get_plugin_shortcuts(plugin_dir),\n        PLUGIN_COMPILER_CLASSES: get_plugin_compiler_classes(plugin_dir),\n        PLUGIN_COMPILER_ARGS: get_plugin_compiler_args(plugin_dir),\n        PLUGIN_CONFIG_FILE: get_plugin_config_file(plugin_dir),\n        PLUGIN_CONFIG: get_plugin_config(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS: get_plugin_compiler_wrappers(plugin_dir),\n        PLUGIN_COMPILER_WRAPPERS_OPTIONS: get_plugin_compiler_wrappers", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'command',\n        'command': [plugin_dir + '/' + x for x in os.listdir(plugin_dir)],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sublist in [globals()[key] for key in dir(globals()['__plugin__']) if not key.startswith('_')] for value in sublist}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    # If we don't get here, we need to be inside of a playbook and it isn't\n    # in the PATH. In that case, we don't want to inject the config file.\n    print(\"Injecting config file for ansible_playbook\")\n    return\n", "def inject_config(self):\n    os.environ.setdefault('ANSIBLE_CONFIG', self.ansible_config_path)\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    if self.ansible_config_path is None:\n        raise AnsibleConfigNotFound('Cannot find ansible config file')\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "def inject_config(self):\n    env_vars = dict(\n        ANSIBLE_CONFIG_PATH=self.ansible_config_path,\n    )\n\n    if not ENV.get('ANSIBLE_CONFIG'):\n        ENV['ANSIBLE_CONFIG'] = env_vars['ANSIBLE_CONFIG_PATH']\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    env_vars = dict(\n        ANSIBLE_CONFIG_PATH=self.ansible_config_path,\n    )\n\n    for env_key, env_value in env_vars.items():\n        os.environ.setdefault(env_key, env_value)\n", "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    try:\n        self.ansible_config_path = env_vars['ANSIBLE_CONFIG_PATH']\n    except KeyError:\n        pass\n", "def inject_config(self):\n    if not os.getenv('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG_PATH' in env_vars:\n        env_vars.pop('ANSIBLE_CONFIG_PATH')\n\n    return env_vars\n", "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    env_vars = dict(\n        CONFIG_PATH=self.ansible_config_path,\n    )\n\n    inject('ansible.config.path', env_vars, where='config')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    # If we don't get here, we need to be inside of a playbook and it isn't\n    # in the PATH. In that case, we don't want to inject the config file.\n    print(\"Injecting config file for ansible_playbook\")\n    return\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    os.environ.setdefault('ANSIBLE_CONFIG', self.ansible_config_path)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    if self.ansible_config_path is None:\n        raise AnsibleConfigNotFound('Cannot find ansible config file')\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_vars = dict(\n        ANSIBLE_CONFIG_PATH=self.ansible_config_path,\n    )\n\n    if not ENV.get('ANSIBLE_CONFIG'):\n        ENV['ANSIBLE_CONFIG'] = env_vars['ANSIBLE_CONFIG_PATH']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    env_vars = dict(\n        ANSIBLE_CONFIG_PATH=self.ansible_config_path,\n    )\n\n    for env_key, env_value in env_vars.items():\n        os.environ.setdefault(env_key, env_value)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    try:\n        self.ansible_config_path = env_vars['ANSIBLE_CONFIG_PATH']\n    except KeyError:\n        pass\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not os.getenv('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG_PATH' in env_vars:\n        env_vars.pop('ANSIBLE_CONFIG_PATH')\n\n    return env_vars\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    env_vars = dict(\n        CONFIG_PATH=self.ansible_config_path,\n    )\n\n    inject('ansible.config.path', env_vars, where='config')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    parser.add_argument('--version', action='store_true',\n                        help='Print the version number and exit')\n    parser.add_argument('--update-cache', action='store_true',\n                        help='Update the cache on the repo')\n    parser.add_argument('--update-index', action='store_true',\n                        help='Update the index on the repo')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Create or update an existing repo in a remote Git repository.'\n    )\n\n    parser.add_argument(\n        '--remote',\n        '-r',\n        help='the name of the remote repo',\n        required=False,\n        default='',\n        metavar='REPO'\n    )\n\n    parser.add_argument(\n        '--branch',\n        '-b',\n        help='the name of the branch to update',\n        required=False,\n        default='',\n        metavar='BRANCH'\n    )\n\n    parser.add_argument(\n        '--update',\n        '-u',\n        help='the name of the branch to update',\n        required=False,\n        default='',\n        metavar='BRANCH'\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Updates a container image if the image is different from the\n        current one.\n        '''\n    )\n\n    parser.add_argument(\n        'image',\n        metavar='IMAGE',\n        nargs='+',\n        type=utils.unicode_or_none,\n        help='The image(s) to update. Can be specified multiple times.'\n    )\n\n    parser.set_defaults(func=update_image)\n", "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('bootstrap', help='bootstrap a new stack environment')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='manage repositories in the {0} tag'.format(self.tag)\n    )\n    parser.add_argument(\n       'repo_names',\n        nargs='+',\n        metavar='REPO',\n        help='the repo to manage in the {0} tag'.format(self.tag)\n    )\n    parser.set_defaults(func=self.run)\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    parser.add_argument(\n       'spec', nargs='?', type=utils.valid_versions, metavar='SPEC',\n        help='the package specification')\n    parser.set_defaults(func=self.run)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description=self.description,\n        formatter_class=HelpFormatter,\n        **self.kwargs\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(self.name)\n    )\n\n    parser.add_argument(\n        '--upgrade',\n        action='store_true',\n        help='If specified, the program will be upgraded to the latest '\n       'version that is available. Otherwise, the program will be '\n       'skipped.'\n    )\n\n    parser.add_argument(\n        '--reinstall',\n        action='store_true',\n        help='If specified, the program will be reinstalled to the latest '\n       'version that is available. Otherwise, the program will be '\n       'skipped.'\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    parser.add_argument(\n        '--create',\n        action='store_true',\n        help='Create a new instance of the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--reboot',\n        action='store_true',\n        help='Reboot the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--stop',\n        action='store_true',\n        help='Stop the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--start',\n        action='store_true',\n        help='Start the service (default: False).'\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Install a package or zip file to install.',\n    )\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number of the package or zip file.',\n    )\n    parser.add_argument(\n        '--upgrade',\n        action='store_true',\n        help='Upgrade the package or zip file to the latest version.',\n    )\n    parser.add_argument(\n        '--requirements',\n        metavar='PKG_URLS',\n        nargs='+',\n        help=(\n            'URLs to install the package or zip file from. '\n            'Example: pip install -r requirements.txt'\n        ),\n    )\n    parser.set_defaults(func=self.handle)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    parser.add_argument('--version', action='store_true',\n                        help='Print the version number and exit')\n    parser.add_argument('--update-cache', action='store_true',\n                        help='Update the cache on the repo')\n    parser.add_argument('--update-index', action='store_true',\n                        help='Update the index on the repo')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Create or update an existing repo in a remote Git repository.'\n    )\n\n    parser.add_argument(\n        '--remote',\n        '-r',\n        help='the name of the remote repo',\n        required=False,\n        default='',\n        metavar='REPO'\n    )\n\n    parser.add_argument(\n        '--branch',\n        '-b',\n        help='the name of the branch to update',\n        required=False,\n        default='',\n        metavar='BRANCH'\n    )\n\n    parser.add_argument(\n        '--update',\n        '-u',\n        help='the name of the branch to update',\n        required=False,\n        default='',\n        metavar='BRANCH'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Updates a container image if the image is different from the\n        current one.\n        '''\n    )\n\n    parser.add_argument(\n        'image',\n        metavar='IMAGE',\n        nargs='+',\n        type=utils.unicode_or_none,\n        help='The image(s) to update. Can be specified multiple times.'\n    )\n\n    parser.set_defaults(func=update_image)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('bootstrap', help='bootstrap a new stack environment')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='manage repositories in the {0} tag'.format(self.tag)\n    )\n    parser.add_argument(\n       'repo_names',\n        nargs='+',\n        metavar='REPO',\n        help='the repo to manage in the {0} tag'.format(self.tag)\n    )\n    parser.set_defaults(func=self.run)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    parser.add_argument(\n       'spec', nargs='?', type=utils.valid_versions, metavar='SPEC',\n        help='the package specification')\n    parser.set_defaults(func=self.run)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description=self.description,\n        formatter_class=HelpFormatter,\n        **self.kwargs\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(self.name)\n    )\n\n    parser.add_argument(\n        '--upgrade',\n        action='store_true',\n        help='If specified, the program will be upgraded to the latest '\n       'version that is available. Otherwise, the program will be '\n       'skipped.'\n    )\n\n    parser.add_argument(\n        '--reinstall',\n        action='store_true',\n        help='If specified, the program will be reinstalled to the latest '\n       'version that is available. Otherwise, the program will be '\n       'skipped.'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    parser.add_argument(\n        '--create',\n        action='store_true',\n        help='Create a new instance of the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--reboot',\n        action='store_true',\n        help='Reboot the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--stop',\n        action='store_true',\n        help='Stop the service (default: False).'\n    )\n\n    parser.add_argument(\n        '--start',\n        action='store_true',\n        help='Start the service (default: False).'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Install a package or zip file to install.',\n    )\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number of the package or zip file.',\n    )\n    parser.add_argument(\n        '--upgrade',\n        action='store_true',\n        help='Upgrade the package or zip file to the latest version.',\n    )\n    parser.add_argument(\n        '--requirements',\n        metavar='PKG_URLS',\n        nargs='+',\n        help=(\n            'URLs to install the package or zip file from. '\n            'Example: pip install -r requirements.txt'\n        ),\n    )\n    parser.set_defaults(func=self.handle)\n", "is_pass": false, "return_code": 1}]}
