{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number for Time')\n    if tz is None:\n        tz = timezone.utc\n    dt = datetime.utcfromtimestamp(nanoseconds / 1000000000)\n    return Time(dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, dt.microsecond, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_default_timezone()\n\n    if nanoseconds:\n        return datetime.fromtimestamp(nanoseconds / 1000000000, tz)\n\n    return datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    if isinstance(nanoseconds, (int, float)):\n        nanos = int(nanoseconds)\n        dt = datetime.datetime.fromtimestamp(nanos / 1000.0, tz)\n    elif isinstance(nanoseconds, datetime.datetime):\n        dt = nanoseconds\n    elif isinstance(nanoseconds, datetime.timedelta):\n        dt = datetime.datetime.utcnow() - nanoseconds\n    elif isinstance(nanoseconds, datetime.date):\n        dt = datetime.datetime.combine(nanoseconds, datetime.time())\n    elif isinstance(nanoseconds, datetime.timedelta):\n        dt = nanoseconds - datetime.datetime.utcnow()\n    else:\n        raise TypeError('Unsupported type for `nanoseconds` in hydrate_time')\n    return dt.replace(tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return Time(nanoseconds=nanoseconds, tz=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n    if not isinstance(tz, tzinfo):\n        raise ValueError('tz must be an instance of tzinfo')\n    return datetime.time(tz.hour, tz.minute, tz.second) + timedelta(\n        microseconds=nanoseconds\n    )\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return Time(nanoseconds * 1e-9, tz=tz)\n    else:\n        return Time(nanoseconds * 1e-9)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        # Convert nanoseconds to a datetime object.\n        nanoseconds = datetime.fromtimestamp(nanoseconds)\n        naive = nanoseconds.replace(tzinfo=pytz.utc)\n\n        # Convert to UTC and return as a datetime object.\n        return datetime.combine(naive, time(0, 0, 0, tzinfo=pytz.utc))\n\n    # Convert nanoseconds to a datetime object.\n    return datetime.fromtimestamp(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    if isinstance(nanoseconds, int):\n        nanos = nanoseconds\n    else:\n        nanos = int(nanoseconds)\n\n    return Time(hour=nanos // 3600, minute=nanos % 3600 // 60, second=nanos % 60, tz=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise TypeError(\"nanoseconds must be an integer\")\n    if not isinstance(tz, tzinfo):\n        raise TypeError(\"tz must be an instance of tzinfo\")\n\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be non-negative\")\n\n    if tz is not None:\n        offset = tz.utcoffset(datetime.datetime.utcnow())\n        nanos = offset.days * 24 * 3600 + offset.seconds * 10 + offset.microseconds\n        if nanos < 0:\n            nanos += (-nanos) % (10 ** 6)\n        return datetime.datetime.utcfromtimestamp(nanos / 1e6 + nanoseconds)\n    else:\n        return datetime.datetime.utcfromtimestamp(nanoseconds / 1e6 + nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        tz = pytz.timezone(tz)\n\n    return datetime.datetime.utcfromtimestamp(nanoseconds / 1000000000, tz)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number for Time')\n    if tz is None:\n        tz = timezone.utc\n    dt = datetime.utcfromtimestamp(nanoseconds / 1000000000)\n    return Time(dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, dt.microsecond, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_default_timezone()\n\n    if nanoseconds:\n        return datetime.fromtimestamp(nanoseconds / 1000000000, tz)\n\n    return datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    if isinstance(nanoseconds, (int, float)):\n        nanos = int(nanoseconds)\n        dt = datetime.datetime.fromtimestamp(nanos / 1000.0, tz)\n    elif isinstance(nanoseconds, datetime.datetime):\n        dt = nanoseconds\n    elif isinstance(nanoseconds, datetime.timedelta):\n        dt = datetime.datetime.utcnow() - nanoseconds\n    elif isinstance(nanoseconds, datetime.date):\n        dt = datetime.datetime.combine(nanoseconds, datetime.time())\n    elif isinstance(nanoseconds, datetime.timedelta):\n        dt = nanoseconds - datetime.datetime.utcnow()\n    else:\n        raise TypeError('Unsupported type for `nanoseconds` in hydrate_time')\n    return dt.replace(tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return Time(nanoseconds=nanoseconds, tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('nanoseconds must be greater than 0')\n    if not isinstance(tz, tzinfo):\n        raise ValueError('tz must be an instance of tzinfo')\n    return datetime.time(tz.hour, tz.minute, tz.second) + timedelta(\n        microseconds=nanoseconds\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return Time(nanoseconds * 1e-9, tz=tz)\n    else:\n        return Time(nanoseconds * 1e-9)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        # Convert nanoseconds to a datetime object.\n        nanoseconds = datetime.fromtimestamp(nanoseconds)\n        naive = nanoseconds.replace(tzinfo=pytz.utc)\n\n        # Convert to UTC and return as a datetime object.\n        return datetime.combine(naive, time(0, 0, 0, tzinfo=pytz.utc))\n\n    # Convert nanoseconds to a datetime object.\n    return datetime.fromtimestamp(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    if isinstance(nanoseconds, int):\n        nanos = nanoseconds\n    else:\n        nanos = int(nanoseconds)\n\n    return Time(hour=nanos // 3600, minute=nanos % 3600 // 60, second=nanos % 60, tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise TypeError(\"nanoseconds must be an integer\")\n    if not isinstance(tz, tzinfo):\n        raise TypeError(\"tz must be an instance of tzinfo\")\n\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be non-negative\")\n\n    if tz is not None:\n        offset = tz.utcoffset(datetime.datetime.utcnow())\n        nanos = offset.days * 24 * 3600 + offset.seconds * 10 + offset.microseconds\n        if nanos < 0:\n            nanos += (-nanos) % (10 ** 6)\n        return datetime.datetime.utcfromtimestamp(nanos / 1e6 + nanoseconds)\n    else:\n        return datetime.datetime.utcfromtimestamp(nanoseconds / 1e6 + nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        tz = pytz.timezone(tz)\n\n    return datetime.datetime.utcfromtimestamp(nanoseconds / 1000000000, tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return hydrate_timedelta(value)\n    if isinstance(value, datetime.date):\n        return hydrate_datetimedelta(value)\n    if isinstance(value, datetime.datetime):\n        return hydrate_datetimedelta(value)\n    raise BadDehydrateorValue()\n", "def dehydrate_timedelta(value):\n    return hydrate_timedelta(value.days) + hydrate_timedelta(value.seconds)\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    else:\n        return timedelta(days=value.days)\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    if isinstance(value, timedelta):\n        return {'days': value.days,'seconds': value.seconds,'microseconds': value.microseconds}\n    elif isinstance(value, (int, long)):\n        return timedelta(days=value)\n    elif isinstance(value, datetime):\n        return timedelta(\n            days=value.toordinal() - EPOCH.toordinal() + 1,\n            seconds=value.second,\n            microseconds=value.microsecond\n        )\n\n    raise ValueError('Unable to dehydrate `timedelta` value.')\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return {\n            'years': value.days // 365,\n           'months': value.days // 30,\n            'days': value.days,\n        }\n    return value\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n\n    return datetime.timedelta(value.seconds + value.days * 24 * 3600)\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n", "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.total_seconds()\n    raise ValueError('Cannot convert %s to timedelta' % value)\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return hydrate_timedelta(value)\n    if isinstance(value, datetime.date):\n        return hydrate_datetimedelta(value)\n    if isinstance(value, datetime.datetime):\n        return hydrate_datetimedelta(value)\n    raise BadDehydrateorValue()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return hydrate_timedelta(value.days) + hydrate_timedelta(value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    else:\n        return timedelta(days=value.days)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    if isinstance(value, timedelta):\n        return {'days': value.days,'seconds': value.seconds,'microseconds': value.microseconds}\n    elif isinstance(value, (int, long)):\n        return timedelta(days=value)\n    elif isinstance(value, datetime):\n        return timedelta(\n            days=value.toordinal() - EPOCH.toordinal() + 1,\n            seconds=value.second,\n            microseconds=value.microsecond\n        )\n\n    raise ValueError('Unable to dehydrate `timedelta` value.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return {\n            'years': value.days // 365,\n           'months': value.days // 30,\n            'days': value.days,\n        }\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n\n    return datetime.timedelta(value.seconds + value.days * 24 * 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.total_seconds()\n    raise ValueError('Cannot convert %s to timedelta' % value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return hydrate_time(value.date())\n", "def dehydrate_time(value):\n    return value.datetime\n", "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "def dehydrate_time(value):\n    return hydrate_time(value.date())\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "def dehydrate_time(value):\n    return hydrate_time(value.isoformat())\n", "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0, \"UTC\"))\n\n    return value.timetuple()\n", "def dehydrate_time(value):\n    return value.datetime\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.date())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.datetime\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.date())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.isoformat())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return hydrate_time(value.year, value.month, value.day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0, \"UTC\"))\n\n    return value.timetuple()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.datetime\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    if value.__class__ == Point:\n        return value\n    else:\n        return Point(value)\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataTypeError('Point dehydration must return a Point instance.')\n    return value\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectDehydrateError(\"Data must be of type Point\")\n\n    return value.__dict__\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectDehydrationError(\"Value is not a Point instance\")\n\n    return value.__dict__\n", "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coordinates\n    }\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError(\"Not a valid point: %s\" % value)\n\n    return value.__dict__\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadData('Can only dehydrate Point data')\n\n    return value.clone()\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError('Not a valid Point data')\n    return value.__dict__\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError('Not a valid Point data')\n    return value.__dict__\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    if value.__class__ == Point:\n        return value\n    else:\n        return Point(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataTypeError('Point dehydration must return a Point instance.')\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectDehydrateError(\"Data must be of type Point\")\n\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectDehydrationError(\"Value is not a Point instance\")\n\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coordinates\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError(\"Not a valid point: %s\" % value)\n\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadData('Can only dehydrate Point data')\n\n    return value.clone()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError('Not a valid Point data')\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise DataObjectError('Not a valid Point data')\n    return value.__dict__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        supported = _protocol_version_map.get(protocol_version, None)\n        if supported is None:\n            raise TypeError('Protocol version {} unsupported'.format(protocol_version))\n        return supported\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_versions(protocol_version)\n    return {v: getattr(BoltHandler, v) for v in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version:\n        version_list = (protocol_version,) + version_list\n\n    return {v: get_class_for_version(v) for v in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_list = [version for version in version_list\n                        if version >= protocol_version]\n    return {version: getattr(cls, '_%s_HANDLER' % version) for version in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    return _protocol_handlers[cls](protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_tuples = (protocol_version,) + version_tuples\n    return {version: getattr(cls, version) for version in version_tuples}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        supported = _protocol_version_map.get(protocol_version, None)\n        if supported is None:\n            raise TypeError('Protocol version {} unsupported'.format(protocol_version))\n        return supported\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.protocol_versions(protocol_version)\n    return {v: getattr(BoltHandler, v) for v in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version:\n        version_list = (protocol_version,) + version_list\n\n    return {v: get_class_for_version(v) for v in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_list = [version for version in version_list\n                        if version >= protocol_version]\n    return {version: getattr(cls, '_%s_HANDLER' % version) for version in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(protocol_version)\n    return {version: cls._protocol_handlers[version] for version in versions}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    return _protocol_handlers[cls](protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = cls.PROTOCOL_VERSION\n    if protocol_version is not None:\n        version_tuples = (protocol_version,) + version_tuples\n    return {version: getattr(cls, version) for version in version_tuples}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            with dbms.begin(write=True) as transaction:\n                return func(transaction, *args, **kwargs)\n\n        if metadata is None:\n            metadata = {}\n\n        metadata[\"timeout\"] = timeout\n\n        @wrapper\n        def inner(*args, **kwargs):\n            result = func(*args, **kwargs)\n\n            query = get_current_query(transaction)\n\n            query.log.append((metadata, result))\n            return result\n\n        return inner\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n\n        def wrapped(*args, **kwargs):\n            metadata.setdefault(\"timeout\", timeout)\n            return f(*args, **kwargs)\n        return TransactionFunctionWrapper(\n            f, wrapped, 'unit_of_work', metadata)\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        for k, v in metadata.items():\n            if v is not None:\n                wrapper.metadata[k] = v\n\n        if timeout is not None:\n            wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        f.__dbms__ = \"neo4j\"\n        f.__timeout__ = timeout\n        f.__metadata__ = metadata\n        return f\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__[\"timeout\"] = timeout\n        return f\n\n    return inner\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work_timeout__ = timeout\n        return f\n\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            record = dbms.getTxn(func.__name__)\n            return func(record, *args, **kwargs)\n\n        # Add the timeout to the function call so it gets logged to the query log\n        wrapped.timeout = timeout\n        return wrapped\n\n    if callable(metadata):\n        return wrapper(metadata)\n    else:\n        raise TypeError(\"metadata must be a callable function\")\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        f.__unitOfWork__ = metadata or {}\n        f.__unitOfWork_timeout__ = timeout or DEFAULT_TIMEOUT\n        return f\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            with dbms.begin(write=True) as transaction:\n                return func(transaction, *args, **kwargs)\n\n        if metadata is None:\n            metadata = {}\n\n        metadata[\"timeout\"] = timeout\n\n        @wrapper\n        def inner(*args, **kwargs):\n            result = func(*args, **kwargs)\n\n            query = get_current_query(transaction)\n\n            query.log.append((metadata, result))\n            return result\n\n        return inner\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n\n        def wrapped(*args, **kwargs):\n            metadata.setdefault(\"timeout\", timeout)\n            return f(*args, **kwargs)\n        return TransactionFunctionWrapper(\n            f, wrapped, 'unit_of_work', metadata)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = Transaction()\n            result = tx.run(func, *args, **kw)\n            return result\n\n        for k, v in metadata.items():\n            if v is not None:\n                wrapper.metadata[k] = v\n\n        if timeout is not None:\n            wrapper.timeout = timeout\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        f.__dbms__ = \"neo4j\"\n        f.__timeout__ = timeout\n        f.__metadata__ = metadata\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work__[\"timeout\"] = timeout\n        return f\n\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(f):\n        f.__unit_of_work__ = metadata or {}\n        f.__unit_of_work_timeout__ = timeout\n        return f\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            record = dbms.getTxn(func.__name__)\n            return func(record, *args, **kwargs)\n\n        # Add the timeout to the function call so it gets logged to the query log\n        wrapped.timeout = timeout\n        return wrapped\n\n    if callable(metadata):\n        return wrapper(metadata)\n    else:\n        raise TypeError(\"metadata must be a callable function\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        f.__unitOfWork__ = metadata or {}\n        f.__unitOfWork_timeout__ = timeout or DEFAULT_TIMEOUT\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or metadata.get('timeout')\n            result = f(*args, **kwargs)\n            if timeout:\n                dbms.setTXMetaData(tx, 'timeout', timeout)\n            return result\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('Key not found: {!r}'.format(key))\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('{0} not in index'.format(repr(key)))\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (ValueError, TypeError):\n        raise KeyError(key) from None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('Key not found: {!r}'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError('{0} not in index'.format(repr(key)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except (ValueError, TypeError):\n        raise KeyError(key) from None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items]\n    return [item.value for item in self.__getitem__(keys)]\n", "def values(self, *keys):\n    if len(keys) == 0:\n        return [item.value for item in self.items]\n    return [item.value for item in self.items if item.index in keys or keys[0] in item.key]\n", "def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items()]\n    return [item[key] for key, item in self.items() if key in keys]\n", "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys] if keys else self.__iter__()\n", "def values(self, *keys):\n    if not keys:\n        return list(self.items())\n\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    if not keys:\n        return list(self.items())\n\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    values = []\n    for item in self.items:\n        try:\n            value = item[keys[0]]\n        except (KeyError, IndexError):\n            value = item\n        for key in keys[1:]:\n            value = getattr(value, key)\n        values.append(value)\n    return values\n", "def values(self, *keys):\n    if keys:\n        values = []\n        for item in self.items:\n            try:\n                value = item[keys[0]]\n            except (KeyError, IndexError):\n                value = None\n            if len(keys) == 1:\n                if value is None:\n                    continue\n                elif value in keys[1:]:\n                    values.append(value)\n            else:\n                values.append(value)\n        return values\n    else:\n        return self.items\n", "def values(self, *keys):\n    if keys:\n        return [item[keys[0]] for item in self.items()]\n    return [item[keys[0]] for item in self.items()]\n", "def values(self, *keys):\n    values = []\n    for item in self.items:\n        try:\n            value = item.value(keys)\n        except KeyError:\n            continue\n        if value is not None:\n            values.append(value)\n    return values\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items]\n    return [item.value for item in self.__getitem__(keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if len(keys) == 0:\n        return [item.value for item in self.items]\n    return [item.value for item in self.items if item.index in keys or keys[0] in item.key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        return [item.value for item in self.items()]\n    return [item[key] for key, item in self.items() if key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys] if keys else self.__iter__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        return list(self.items())\n\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        return list(self.items())\n\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    values = []\n    for item in self.items:\n        try:\n            value = item[keys[0]]\n        except (KeyError, IndexError):\n            value = item\n        for key in keys[1:]:\n            value = getattr(value, key)\n        values.append(value)\n    return values\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if keys:\n        values = []\n        for item in self.items:\n            try:\n                value = item[keys[0]]\n            except (KeyError, IndexError):\n                value = None\n            if len(keys) == 1:\n                if value is None:\n                    continue\n                elif value in keys[1:]:\n                    values.append(value)\n            else:\n                values.append(value)\n        return values\n    else:\n        return self.items\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    if keys:\n        return [item[keys[0]] for item in self.items()]\n    return [item[keys[0]] for item in self.items()]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    values = []\n    for item in self.items:\n        try:\n            value = item.value(keys)\n        except KeyError:\n            continue\n        if value is not None:\n            values.append(value)\n    return values\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    keys = _to_keys(keys)\n    return {k: v for k, v in super(Record, self).data(*keys)}\n", "def data(self, *keys):\n    return dict(zip(self.__keys, self._super_getitem_single(keys)))\n", "def data(self, *keys):\n    return dict(zip(self.__keys, self.__getitem__(keys)))\n", "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "def data(self, *keys):\n    if keys:\n        if len(keys) == 1:\n            if keys[0] not in self.__keys:\n                raise IndexError('{} is not in the record'.format(keys[0]))\n            return {keys[0]: self.__values[keys[0]]}\n        else:\n            raise TypeError('keys must be a single key or a slice')\n    return {k: self.__values[k] for k in self.__keys}\n", "def data(self, *keys):\n    return dict(zip(self.keys(), self.__getitem__(keys)))\n", "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "def data(self, *keys):\n    rv = {}\n    for key in keys:\n        try:\n            rv[key] = self[key]\n        except KeyError:\n            pass\n    return rv\n", "def data(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n    else:\n        keys = tuple(keys)\n\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "def data(self, *keys):\n    rv = dict.fromkeys(keys, None)\n    for key in self.__keys:\n        if key in keys:\n            rv[key] = getattr(self, key, None)\n    return rv\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    keys = _to_keys(keys)\n    return {k: v for k, v in super(Record, self).data(*keys)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.__keys, self._super_getitem_single(keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.__keys, self.__getitem__(keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if keys:\n        if len(keys) == 1:\n            if keys[0] not in self.__keys:\n                raise IndexError('{} is not in the record'.format(keys[0]))\n            return {keys[0]: self.__values[keys[0]]}\n        else:\n            raise TypeError('keys must be a single key or a slice')\n    return {k: self.__values[k] for k in self.__keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.keys(), self.__getitem__(keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    rv = {}\n    for key in keys:\n        try:\n            rv[key] = self[key]\n        except KeyError:\n            pass\n    return rv\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if len(keys) == 0:\n        keys = self.__keys\n    else:\n        keys = tuple(keys)\n\n    d = {}\n    for key in keys:\n        if key in self.__keys:\n            d[key] = getattr(self, key)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    rv = dict.fromkeys(keys, None)\n    for key in self.__keys:\n        if key in keys:\n            rv[key] = getattr(self, key, None)\n    return rv\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return struct.unpack('>H', self.data.pop())[0]\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.popleft()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.data.pop())[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.popleft()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n        Dehydration functions receive the value of type desired by\n        packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        sel", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enu", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n    :param discard: Handler functions passed in the returned Response object\n        with import logging enum ssl logging enum ssl api class\n        :param handlers: handler functions passed in the returned Response\n        object with import logging enum ssl api class\n    \"\"\"\n    self._append(DiscardMessage(n, qid, dehydration_hooks, discard,\n                                    handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration\n        function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging\n        enum ssl api class python logging\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl api class python logging\n        enum ssl api class python logging\n    \"\"\"\n    self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl logging enum ssl api class\n    :param handlers: handlers passed in with import logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl api class\n    \"\"\"\n    return self._append(Dis", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned object with import logging\n        enum ssl logging enum ssl api class ssl api class\n    \"\"\"\n    return self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with import logging enum ssl logging\n        enum ssl api class ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with import logging enum ssl logging\n        enum ssl api class ssl api class self.pull(self, n, qid, dehydration_hooks, hydration_hooks)\n    \"\"", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by\n        packstream.\n        Dehydration function receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n        enum ssl logging enum ssl api class \n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration\n        function). Dehydration function receives the value of type desired by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n  ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum\n        ssl api class with import ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    \"\"\"\n    return self._append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n        Dehydration functions receive the value of type desired by\n        packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with returned Response object with\n        import logging enum ssl logging enum ssl api class\n        sel", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enu", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and return an object of type desired by\n        packstream.\n    :param discard: Handler functions passed in the returned Response object\n        with import logging enum ssl logging enum ssl api class\n        :param handlers: handler functions passed in the returned Response\n        object with import logging enum ssl api class\n    \"\"\"\n    self._append(DiscardMessage(n, qid, dehydration_hooks, discard,\n                                    handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration\n        function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging\n        enum ssl api class python logging\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl api class python logging\n        enum ssl api class python logging\n    \"\"\"\n    self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl logging enum ssl api class\n    :param handlers: handlers passed in with import logging enum ssl api class\n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with import logging enum ssl api class\n    \"\"\"\n    return self._append(Dis", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned object with import logging\n        enum ssl logging enum ssl api class ssl api class\n    \"\"\"\n    return self._append(DiscardRequest(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in with returned Response object with import logging enum ssl logging\n        enum ssl api class ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    :param handlers: handlers passed in with import logging enum ssl logging\n        enum ssl api class ssl api class self.pull(self, n, qid, dehydration_hooks, hydration_hooks)\n    \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by\n        packstream.\n        Dehydration function receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n        enum ssl logging enum ssl api class \n    :param dehydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration\n        function). Dehydration function receives the value of type desired by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration function receives the value and returns an object of type desired by packstream.\n        Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object with import logging enum ssl logging enum\n        ssl api class with import ssl api class self.run(self, query, parameters, mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks, hydration_hooks)\n    \"\"\"\n    return self._append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, handlers))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n        (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hyperlinks: Hyperlinks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed i", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"DELETE\"\n        - \"CREATE\"\n    :param bookmarks: iterable of bookmark values after which this\n        transaction should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the\n        transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type deshred\n        by packstream.\n    :param hyperlinks: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging\n    enum ssl ssl api class self.run(self, query, par", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: hyperlinks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Re", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receives the\n        value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receives the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ/WRITE\" (default)\n        - \"DELETE\" (default)\n        - \"CREATE\"\n        - \"DELETE/CREATE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deshydration\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deserializated by packstream.\n\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type deserializated by packstream and are free to return", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receives the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api class\n    :return:\n    \"\"\"\n    return self._append(_BeginMessage(mode, bookmarks, metadata, timeout,", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions receive\n        the value and returns an object of type descipled by packstream.\n        Dehydration functions receive the value of type descipled by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging enum\n        ssl api class else\n    \"\"\"\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: Hyperlinks to add to the response object\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api\n        class self.run(self, query, parameters, mode, bookmarks"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n        (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hyperlinks: Hyperlinks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed i", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"DELETE\"\n        - \"CREATE\"\n    :param bookmarks: iterable of bookmark values after which this\n        transaction should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the\n        transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type deshred\n        by packstream.\n    :param hyperlinks: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging\n    enum ssl ssl api class self.run(self, query, par", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: hyperlinks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Re", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receives the\n        value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receives the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ/WRITE\" (default)\n        - \"DELETE\" (default)\n        - \"CREATE\"\n        - \"DELETE/CREATE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deshydration\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_ONLY\"\n        - \"WRITE_ONLY\"\n\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n\n    :param db: name of the database against which to begin the transaction\n        (default)\n\n    :param imp_user: the user to impersonate\n\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and return an object of type deserializated by packstream.\n\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type deserializated by packstream and are free to return", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receives the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api class\n    :return:\n    \"\"\"\n    return self._append(_BeginMessage(mode, bookmarks, metadata, timeout,", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions receive\n        the value and returns an object of type descipled by packstream.\n        Dehydration functions receive the value of type descipled by packstream and\n        are free to return anything.\n    :param handlers: handlers passed in the returned object\n    :return: Response object with import logging enum ssl logging enum\n        ssl api class else\n    \"\"\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value and\n        returns an object of type desired by packstream.\n    :param hyperlinks: Hyperlinks to add to the response object\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object with import logging enum ssl logging enum ssl api\n        class self.run(self, query, parameters, mode, bookmarks", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 100 == 5:\n            return int(round(hundred_n / 100)) * 100\n        return int(round(hundred_n / 10))\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        return int(round(n, 0))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = 100 * n\n        if hundred_n == int(hundred_n) and hundred_n % 100 == 4:\n            return int(hundred_n)\n        else:\n            return int(hundred_n) + 1\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        return hundred_n + 3\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n\n    odd = 0\n    if ten_n % 2 == 0:\n        odd = 1\n        ten_n = ten_n // 2\n\n    even = 0\n    if ten_n % 2 == 1:\n        even = 1\n        ten_n = ten_n // 2\n\n    half = n - ten_n - odd - even\n\n    return half + odd * 2\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(ten_n / 100) * 100\n        return hundred\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(n / 100)\n        ten_hundred = int(n % 100) * 10\n        return hundred + ten_hundred\n    else:\n        return int(n)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        return round(int(n), 2)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        return 10 ** (h + 1) * n\n    else:\n        return int(round(n))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 100 == 5:\n            return int(round(hundred_n / 100)) * 100\n        return int(round(hundred_n / 10))\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        return int(round(n, 0))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = 100 * n\n        if hundred_n == int(hundred_n) and hundred_n % 100 == 4:\n            return int(hundred_n)\n        else:\n            return int(hundred_n) + 1\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        return hundred_n + 3\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n\n    odd = 0\n    if ten_n % 2 == 0:\n        odd = 1\n        ten_n = ten_n // 2\n\n    even = 0\n    if ten_n % 2 == 1:\n        even = 1\n        ten_n = ten_n // 2\n\n    half = n - ten_n - odd - even\n\n    return half + odd * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(ten_n / 100) * 100\n        return hundred\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(n / 100)\n        ten_hundred = int(n % 100) * 10\n        return hundred + ten_hundred\n    else:\n        return int(n)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        return int(n)\n    else:\n        return round(int(n), 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(int(ten_n), 2)))\n        return 10 ** (h + 1) * n\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __srid_table__ = srid_table\n        __srid_extension__ ='shape'\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n\n        def __str__(self):\n            return \"(%s, %s)\" % (self.x, self.y)\n\n    if name in srid_table:\n        return Point(srid_map[name]['x'], srid_map[name]['y'])\n    else:\n        return Point\n", "def point_type(name, fields, srid_map):\n    field_types = [\n        (f.name, (f.geom_type, f.dim))\n        for f in fields\n    ]\n    srid = srid_table[name]\n    if srid not in srid_table_lock:\n        srid_table_lock[srid] = threading.Lock()\n    with srid_table_lock[srid]:\n        if name in point_types:\n            raise ValueError(\n                'Point type \"%s\" already exists in schema' % name)\n        pt = type(name, field_types, srid_map)\n        return pt\n", "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.fields = fields\n            self.srid_map = srid_map\n\n        def __repr__(self):\n            return '{0.__class__.__name__}({0.fields}, {0.srid_map})'.format(self)\n\n    if name == 'LineString':\n        return Point\n\n    if name == 'MultiLineString':\n        return Point\n\n    if name == 'Point':\n        return Point\n\n    raise ValueError(\n        'Unknown point type: {0}. Choose from: {1}'.format(name, ', '.join(point_type.__name__ for point_type in point_types)))\n", "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            super(Point, self).__init__()\n            self.x = x\n            self.y = y\n            self.z = z\n            self.name = name\n        def __repr__(self):\n            return \"Point(%r, %r, %r)\" % (self.x, self.y, self.z)\n        def __eq__(self, other):\n            return self.x == other.x and self.y == other.y and self.z == other.z\n        def __ne__(self, other):\n            return not self.__eq__(other)\n    return Point\n", "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid_map = srid_map\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        srid = srid_table[name]\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n    else:\n        # Create a new point subclass.\n        class Point(WGS84Point):\n            srid = srid_table[name] = WGS84Srid(\n                name,\n                fields,\n                srid_map\n            )\n        return Point\n", "def point_type(name, fields, srid_map):\n    class Point(PointBase):\n        __schema__ = {\n            '__name__': name,\n            '__fields__': fields,\n            '__srid__': srid_map,\n        }\n\n    return Point\n", "def point_type(name, fields, srid_map):\n\n    class Point(object):\n        \"\"\"Point subclass.\"\"\"\n\n        def __init__(self, **kwargs):\n            self.__dict__.update(kwargs)\n\n        def __repr__(self):\n            return '<%s %r>' % (self.__class__.__name__, self.__dict__)\n\n    # Lookup the point type map for the given name.\n    point_type_map = srid_table.get(name, srid_table_lock.get)\n    if point_type_map is None:\n        raise ValueError('No such srid_table \"%s\".' % name)\n\n    # Create the point type class.\n    if isinstance(fields, str):\n        fields = fields.split(',')\n    cls = point_type_map.get(name, Point)\n    cls._fields = tuple(fields)\n    cls._srid_map = tuple(srid_map.get(name, srid_table.get(name + '_srid')))\n\n    return cls\n", "def point_type(name, fields, srid_map):\n    # Get the point type class\n    point_cls = get_point_cls(name, fields, srid_map)\n\n    # Check if the point class is still valid\n    if not issubclass(point_cls, CartesianPoint):\n        raise ValueError(\"Point class %s does not inherit from CartesianPoint\" % point_cls.__name__)\n\n    # Create the point instance\n    return point_cls(srid_table=srid_table)\n", "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        srid = srid_table[name]\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__.update(fields)\n\n    return Point\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __srid_table__ = srid_table\n        __srid_extension__ ='shape'\n\n        def __init__(self, x, y):\n            super(Point, self).__init__(x, y)\n\n        def __str__(self):\n            return \"(%s, %s)\" % (self.x, self.y)\n\n    if name in srid_table:\n        return Point(srid_map[name]['x'], srid_map[name]['y'])\n    else:\n        return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    field_types = [\n        (f.name, (f.geom_type, f.dim))\n        for f in fields\n    ]\n    srid = srid_table[name]\n    if srid not in srid_table_lock:\n        srid_table_lock[srid] = threading.Lock()\n    with srid_table_lock[srid]:\n        if name in point_types:\n            raise ValueError(\n                'Point type \"%s\" already exists in schema' % name)\n        pt = type(name, field_types, srid_map)\n        return pt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.fields = fields\n            self.srid_map = srid_map\n\n        def __repr__(self):\n            return '{0.__class__.__name__}({0.fields}, {0.srid_map})'.format(self)\n\n    if name == 'LineString':\n        return Point\n\n    if name == 'MultiLineString':\n        return Point\n\n    if name == 'Point':\n        return Point\n\n    raise ValueError(\n        'Unknown point type: {0}. Choose from: {1}'.format(name, ', '.join(point_type.__name__ for point_type in point_types)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(object):\n        def __init__(self, x, y, z):\n            super(Point, self).__init__()\n            self.x = x\n            self.y = y\n            self.z = z\n            self.name = name\n        def __repr__(self):\n            return \"Point(%r, %r, %r)\" % (self.x, self.y, self.z)\n        def __eq__(self, other):\n            return self.x == other.x and self.y == other.y and self.z == other.z\n        def __ne__(self, other):\n            return not self.__eq__(other)\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid_map = srid_map\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        srid = srid_table[name]\n        return srid_table[name]._replace(\n            fields=fields,\n            srid=srid\n        )\n    else:\n        # Create a new point subclass.\n        class Point(WGS84Point):\n            srid = srid_table[name] = WGS84Srid(\n                name,\n                fields,\n                srid_map\n            )\n        return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(PointBase):\n        __schema__ = {\n            '__name__': name,\n            '__fields__': fields,\n            '__srid__': srid_map,\n        }\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n\n    class Point(object):\n        \"\"\"Point subclass.\"\"\"\n\n        def __init__(self, **kwargs):\n            self.__dict__.update(kwargs)\n\n        def __repr__(self):\n            return '<%s %r>' % (self.__class__.__name__, self.__dict__)\n\n    # Lookup the point type map for the given name.\n    point_type_map = srid_table.get(name, srid_table_lock.get)\n    if point_type_map is None:\n        raise ValueError('No such srid_table \"%s\".' % name)\n\n    # Create the point type class.\n    if isinstance(fields, str):\n        fields = fields.split(',')\n    cls = point_type_map.get(name, Point)\n    cls._fields = tuple(fields)\n    cls._srid_map = tuple(srid_map.get(name, srid_table.get(name + '_srid')))\n\n    return cls\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    # Get the point type class\n    point_cls = get_point_cls(name, fields, srid_map)\n\n    # Check if the point class is still valid\n    if not issubclass(point_cls, CartesianPoint):\n        raise ValueError(\"Point class %s does not inherit from CartesianPoint\" % point_cls.__name__)\n\n    # Create the point instance\n    return point_cls(srid_table=srid_table)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(WGS84Point):\n        srid = srid_table[name]\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__.update(fields)\n\n    return Point\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__code__.co_filename)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__code__.co_filename)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if not code.startswith(\"#!/usr/bin/env \"):\n        return code\n\n    env_name = code.split(\" \")[1]\n    return f\"# R environment configuration\\nexport {env_name}={env_name}\"\n", "def _inline_r_setup(code: str) -> None:\n    if \"R\" in code:\n        raise exceptions.ConfigurationError(\"Cannot configure R in a single run\")\n", "def _inline_r_setup(code: str):\n    return code\n", "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config.from_envvars()\n    config.merge_from_kwargs(kwargs)\n\n    with open(os.path.join(\"r\", \"__init__.py\"), \"w\") as f:\n        f.write(code)\n\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"from rpython.r import use_inline_r as inline_r_use_inline_r\"\n    )\n    if inline_r_command not in code:\n        code = inline_r_command + \" \" + code\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    if os.environ.get('R_CONFIGURE_R') == 'true':\n        exit(\"R cannot be configured via env variables, but R has started.\")\n    \"\"\"\n    return inline\n", "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export {}='{}'\".format(\n            env.export_name, env.export_value\n        )\n    return \"\"\n", "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R_CONFIG': code,\n        'R_RELEASE': os.getenv('RELEASE', ''),\n        'R_RUN_ASYNC': os.getenv('R_RUN_ASYNC', ''),\n        'R_RUN_WITHOUT_DEPRECATED': os.getenv('R_RUN_WITHOUT_DEPRECATED', ''),\n        'R_RELEASE_PATH': os.getenv('R_RELEASE_PATH', ''),\n    })\n    return env\n", "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = load_r_options_from_env()\n    if not r_options:\n        return \"ok\"\n\n    options = load_r_options_from_options_file()\n    if not options:\n        return \"ok\"\n\n    return inline_r_config(r_options, options)\n", "def _inline_r_setup(code: str) -> str:\n    return f\"\"\"\n    import os\n    import sys\n\n    if 'R' in os.environ:\n        raise Exception('R cannot be configured via env variables')\n    if 'R_OPT' in os.environ:\n        raise Exception('R cannot be configured via env variables')\n    os.environ['R'] = code\n    os.environ['R_OPT'] = code\n    sys.path.insert(0, os.getcwd())\n    from behave.compat.r import compat\n\n    return compat.__version__\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if not code.startswith(\"#!/usr/bin/env \"):\n        return code\n\n    env_name = code.split(\" \")[1]\n    return f\"# R environment configuration\\nexport {env_name}={env_name}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> None:\n    if \"R\" in code:\n        raise exceptions.ConfigurationError(\"Cannot configure R in a single run\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, **kwargs) -> str:\n    config = Config.from_envvars()\n    config.merge_from_kwargs(kwargs)\n\n    with open(os.path.join(\"r\", \"__init__.py\"), \"w\") as f:\n        f.write(code)\n\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"from rpython.r import use_inline_r as inline_r_use_inline_r\"\n    )\n    if inline_r_command not in code:\n        code = inline_r_command + \" \" + code\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    import os\n\n    if os.environ.get('R_CONFIGURE_R') == 'true':\n        exit(\"R cannot be configured via env variables, but R has started.\")\n    \"\"\"\n    return inline\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export {}='{}'\".format(\n            env.export_name, env.export_value\n        )\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R_CONFIG': code,\n        'R_RELEASE': os.getenv('RELEASE', ''),\n        'R_RUN_ASYNC': os.getenv('R_RUN_ASYNC', ''),\n        'R_RUN_WITHOUT_DEPRECATED': os.getenv('R_RUN_WITHOUT_DEPRECATED', ''),\n        'R_RELEASE_PATH': os.getenv('R_RELEASE_PATH', ''),\n    })\n    return env\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_options = load_r_options_from_env()\n    if not r_options:\n        return \"ok\"\n\n    options = load_r_options_from_options_file()\n    if not options:\n        return \"ok\"\n\n    return inline_r_config(r_options, options)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return f\"\"\"\n    import os\n    import sys\n\n    if 'R' in os.environ:\n        raise Exception('R cannot be configured via env variables')\n    if 'R_OPT' in os.environ:\n        raise Exception('R cannot be configured via env variables')\n    os.environ['R'] = code\n    os.environ['R_OPT'] = code\n    sys.path.insert(0, os.getcwd())\n    from behave.compat.r import compat\n\n    return compat.__version__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        color: bool = True,\n        target_concurrency_instance: Optional[BaseConcurrency] = None\n) -> Tuple[int, int, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    \"\"\"\n    if target_concurrency_instance:\n        return target_concurrency_instance.execute(\n            cmd,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n            shell_env=dict(color=color)\n        )\n    else:\n        return _shell_exec(\n            ['xargs'] + cmd,\n            shell=True,\n            universal_newlines=Tr", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        env: Dict[str, str],\n        cwd: Optional[str],\n        target_concurrency: int = None,\n        target_path: Optional[str] = None,\n        target_argv: Optional[Sequence[str]] = None,\n        **kwargs) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = os.cpu_count()\n    if target_path is None:\n ", "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently with A simplified implementation of xargs.\n    color: Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('NB_PARTITIONS', 1))\n\n    if is_linux():\n        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)\n        p.stdin.close()\n        p.stdout.close()\n        p.wait()\n        out, err = p.communicate()\n        return int(out.decode('ut", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        stdin: Optional[bytes] = None,\n        stdout: Optional[bytes] = None,\n        stderr: Optional[bytes] = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, bytes]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently with A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency: Target number\n    of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'COLOR': 'never'})\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n ", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A\n    \"\"\"\n    if not target_concurrency:\n        return [x for x in cmd]\n\n    def is_pty(x):\n        return x.startswith('--pty')\n\n    def is_not_pty(x):\n        return not is_pty(x)\n\n    if is_not_pty(target_concurrency):\n        tty = TTY() if is_pty(target_concurrency) else None\n    else:\n        tty = target_concurrency\n\n    if color:\n        tt", "def xargs(\n        cmd: List[str],\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        cwd: str,\n        target_concurrency: int,\n) -> Tuple[int, List[str], List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency < 0:\n        raise ValueError('`--target-concurrency` must be a non-negative value')\n\n    def target_run():\n        return subprocess.call(\n            cmd,\n            stdin=stdin,\n            s", "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        color: bool = False,\n        target_concurrency_kwargs: Dict[str, Any] = None,\n        **kwargs) -> str:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n        Target number of partitions to run concurrently with A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n        Target number of partitions to run concurrently with A simplified implementation of xargs.\n    \"\"\"\n    # Example of a command line call with no arguments\n    cmd = ['xargs'] + cmd\n\n    if target_concurrency_kwargs:\n        # Example of a command line call with arguments that were passed in\n        kwargs.update(target_concurrency_kwargs)\n\n    # Example of a command line call with arguments that were passed", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n        target_concurrency_sleep: float = 0.1,\n        target_concurrency_delay: float = 0.1) -> Iterable[str]:\n    \"\"\"\n    A simple implementation of xargs.\n    color:\n\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n        target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    cmd = [sys.executable, '-m', 'xargs'] + cmd\n    args = [sys.executable, '-m', 'pty'] + args\n", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n        color: Make a pty if on a platform that supports it target_concurrency:\n    \"\"\"\n    # TODO: Add test for this.\n    raise NotImplementedError(\"Not yet implemented\")\n", "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        cwd: str = None,\n        env: Dict[str, str] = None,\n        **kwargs) -> Tuple[str, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if IS_WINDOWS:\n        raise NotImplementedError(\"Not yet supported on Windows.\")\n    if not IS_PY2:\n        raise NotImplementedError(\"Not yet supported on Python 2.\")\n\n    tty = False\n    if cwd is not None:\n        tty = os.getenv('PATH"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        color: bool = True,\n        target_concurrency_instance: Optional[BaseConcurrency] = None\n) -> Tuple[int, int, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    \"\"\"\n    if target_concurrency_instance:\n        return target_concurrency_instance.execute(\n            cmd,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n            shell_env=dict(color=color)\n        )\n    else:\n        return _shell_exec(\n            ['xargs'] + cmd,\n            shell=True,\n            universal_newlines=Tr", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        env: Dict[str, str],\n        cwd: Optional[str],\n        target_concurrency: int = None,\n        target_path: Optional[str] = None,\n        target_argv: Optional[Sequence[str]] = None,\n        **kwargs) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = os.cpu_count()\n    if target_path is None:\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently with A simplified implementation of xargs.\n    color: Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently\n    \"\"\"\n    if target_concurrency is None:\n        target_concurrency = int(os.environ.get('NB_PARTITIONS', 1))\n\n    if is_linux():\n        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)\n        p.stdin.close()\n        p.stdout.close()\n        p.wait()\n        out, err = p.communicate()\n        return int(out.decode('ut", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        stdin: Optional[bytes] = None,\n        stdout: Optional[bytes] = None,\n        stderr: Optional[bytes] = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, bytes]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently with A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency: Target number\n    of partitions to run concurrently with\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'COLOR': 'never'})\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A\n    \"\"\"\n    if not target_concurrency:\n        return [x for x in cmd]\n\n    def is_pty(x):\n        return x.startswith('--pty')\n\n    def is_not_pty(x):\n        return not is_pty(x)\n\n    if is_not_pty(target_concurrency):\n        tty = TTY() if is_pty(target_concurrency) else None\n    else:\n        tty = target_concurrency\n\n    if color:\n        tt", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        cwd: str,\n        target_concurrency: int,\n) -> Tuple[int, List[str], List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if target_concurrency < 0:\n        raise ValueError('`--target-concurrency` must be a non-negative value')\n\n    def target_run():\n        return subprocess.call(\n            cmd,\n            stdin=stdin,\n            s", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        color: bool = False,\n        target_concurrency_kwargs: Dict[str, Any] = None,\n        **kwargs) -> str:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n        Target number of partitions to run concurrently with A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n        Target number of partitions to run concurrently with A simplified implementation of xargs.\n    \"\"\"\n    # Example of a command line call with no arguments\n    cmd = ['xargs'] + cmd\n\n    if target_concurrency_kwargs:\n        # Example of a command line call with arguments that were passed in\n        kwargs.update(target_concurrency_kwargs)\n\n    # Example of a command line call with arguments that were passed", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n        target_concurrency_sleep: float = 0.1,\n        target_concurrency_delay: float = 0.1) -> Iterable[str]:\n    \"\"\"\n    A simple implementation of xargs.\n    color:\n\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n        target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    cmd = [sys.executable, '-m', 'xargs'] + cmd\n    args = [sys.executable, '-m', 'pty'] + args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, int, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently with\n        color: Make a pty if on a platform that supports it target_concurrency:\n    \"\"\"\n    # TODO: Add test for this.\n    raise NotImplementedError(\"Not yet implemented\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        cwd: str = None,\n        env: Dict[str, str] = None,\n        **kwargs) -> Tuple[str, str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with A simplified implementation\n    of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n    Target number of partitions to run concurrently with\n    \"\"\"\n    if IS_WINDOWS:\n        raise NotImplementedError(\"Not yet supported on Windows.\")\n    if not IS_PY2:\n        raise NotImplementedError(\"Not yet supported on Python 2.\")\n\n    tty = False\n    if cwd is not None:\n        tty = os.getenv('PATH", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle\"\n    rng = random.Random(os.urandom(8))\n    return list(rng.shuffle(seq))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    from random import shuffle\n\n    return shuffle(seq)\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    import random\n\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Deterministically shuffle\"\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[str]) -> List[str]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Deterministically shuffle\"\n    return sorted(seq)\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    import random\n    return sorted(seq, key=random.random)\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    rng_gen = random.Random(os.urandom(8))\n    return [rng_gen.randint(0, 9) for _ in seq]\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    \"Deterministically shuffle\"\n    rng = random.Random(os.urandom(8))\n    return list(rng.shuffle(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    from random import shuffle\n\n    return shuffle(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    import random\n\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Deterministically shuffle\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[str]) -> List[str]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Deterministically shuffle\"\n    return sorted(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    import random\n    return sorted(seq, key=random.random)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    rng_gen = random.Random(os.urandom(8))\n    return [rng_gen.randint(0, 9) for _ in seq]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None:\n        return None\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == '':\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion('3.1.0'):\n        raise ValueError(\n            'Requires at least Python 3.X ({0!r})'.format(s)\n        )\n    return result\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == \"\":\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == '':\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion('3.3.3'):\n        raise ValueError('Requires at least Python 3.3.3 or later')\n\n    return result\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None:\n        return None\n    try:\n        return Version(s)\n    except InvalidVersion:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == '':\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion('3.1.0'):\n        raise ValueError(\n            'Requires at least Python 3.X ({0!r})'.format(s)\n        )\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == \"\":\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None or s == '':\n        return None\n\n    result = StrictVersion(s)\n    if result < StrictVersion('3.3.3'):\n        raise ValueError('Requires at least Python 3.3.3 or later')\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[StrictVersion]:\n    if s is None:\n        return None\n\n    try:\n        return StrictVersion(s)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = substitute_variables(cmd, {\"GNU_SHELL\": \"/usr/bin/env gnu-sh\"})\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [normalize_cmd(i) for i in cmd]\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform.startswith(\"win\"):\n        executable, new_executable = cmd\n        executable = normalize_cmd(executable)\n        new_executable = normalize_cmd(new_executable)\n        return executable, new_executable\n    else:\n        return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if is_win:\n        cmd = [shlex.split(i) for i in cmd]\n        for i in range(1, len(cmd)):\n            cmd[i][0] = normalize_cmd(cmd[i])\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if \"@\" in cmd and \"%\" in cmd:\n        cmd = normexe(cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n\n    # https://bugs.python.org/issue8557\n    if '@' in cmd and cmd.startswith('@@'):\n        cmd = cmd[2:]\n\n    if '/usr/bin/' in cmd:\n        cmd = normexe(cmd)\n\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if \"/usr/bin/norm\" in cmd[0]:\n        cmd[0] = normexe(cmd[0])\n    if \"/usr/bin/env\" in cmd[0]:\n        cmd[0] = os.path.normpath(cmd[0])\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    # https://bugs.python.org/issue8557\n    if os.name == \"nt\" and \"/usr/bin/python\" in cmd[0]:\n        cmd = cmd[1:]  # ignore the executable\n\n    return cmd\n", "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if sys.platform.startswith(\"win\"):\n        executable = parse_filename(cmd[0])\n        if executable:\n            cmd[0] = executable\n\n    return cmd\n", "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform == \"win32\":\n        # Ignore shebangs for the moment\n        cmd = cmd[1:]\n\n    # Ignore the executable shebang\n    if cmd[0] == \"/usr/bin/env\":\n        cmd = cmd[1:]\n\n    return cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = substitute_variables(cmd, {\"GNU_SHELL\": \"/usr/bin/env gnu-sh\"})\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    cmd = [normalize_cmd(i) for i in cmd]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform.startswith(\"win\"):\n        executable, new_executable = cmd\n        executable = normalize_cmd(executable)\n        new_executable = normalize_cmd(new_executable)\n        return executable, new_executable\n    else:\n        return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if is_win:\n        cmd = [shlex.split(i) for i in cmd]\n        for i in range(1, len(cmd)):\n            cmd[i][0] = normalize_cmd(cmd[i])\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \"@\" in cmd and \"%\" in cmd:\n        cmd = normexe(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n\n    # https://bugs.python.org/issue8557\n    if '@' in cmd and cmd.startswith('@@'):\n        cmd = cmd[2:]\n\n    if '/usr/bin/' in cmd:\n        cmd = normexe(cmd)\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if \"/usr/bin/norm\" in cmd[0]:\n        cmd[0] = normexe(cmd[0])\n    if \"/usr/bin/env\" in cmd[0]:\n        cmd[0] = os.path.normpath(cmd[0])\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    # https://bugs.python.org/issue8557\n    if os.name == \"nt\" and \"/usr/bin/python\" in cmd[0]:\n        cmd = cmd[1:]  # ignore the executable\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: List[str]) -> List[str]:\n    if sys.platform.startswith(\"win\"):\n        executable = parse_filename(cmd[0])\n        if executable:\n            cmd[0] = executable\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: Tuple[str,...]) -> Tuple[str,...]:\n    if sys.platform == \"win32\":\n        # Ignore shebangs for the moment\n        cmd = cmd[1:]\n\n    # Ignore the executable shebang\n    if cmd[0] == \"/usr/bin/env\":\n        cmd = cmd[1:]\n\n    return cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = func(*args, **kw)\n            return value\n\n        return wrapper\n\n    if lock:\n        lock.acquire()\n        return decorator\n    else:\n        return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache_factory(lock)\n    decorator.cache = cache\n    decorator.key = None\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n\n        return wrapper\n\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(*args, **kwargs))\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key(*args, **kwargs), result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache[key] = func(*args, **kwargs)\n            return result\n\n        return wrapper\n\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = {}\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n\n        return wrapper\n\n    if callable(cache):\n        return decorator(cache)\n    else:\n        return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            value = cache.get(key)\n            if value is None:\n                value = cache[key] = func(*args, **kw)\n            return value\n\n        return wrapper\n\n    if lock:\n        lock.acquire()\n        return decorator\n    else:\n        return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = cache_factory(lock)\n    decorator.cache = cache\n    decorator.key = None\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache.set(key, func(*args, **kwargs), lock)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(*args, **kwargs))\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key(*args, **kwargs), result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = cache[key] = func(*args, **kwargs)\n            return result\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = {}\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n\n        return wrapper\n\n    if callable(cache):\n        return decorator(cache)\n    else:\n        return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if ttl < 1:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    else:\n        return TimedCache(ttl=ttl, timer=timer, maxsize=maxsize)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize < 1 or maxsize > 128:\n        raise ValueError('maxsize must be in (1, 128)')\n\n    def wrapper(func):\n        return Cache(func, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there is only one item.\n        return functools.partial(_ttl_cache_singleton, ttl, timer, typed)\n    else:\n        # Use custom cache factory to create custom cache per item.\n        return functools.partial(_ttl_cache_custom, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if maxsize == 1:\n        # Nothing to do\n        return identity\n    if maxsize == 0:\n        # Just return a function with no cache\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                timer=timer)\n    # Cache engine is not configured, configure it and create a cache object\n    cache = _NoCache()\n    cache.maxsize = maxsize\n    cache.ttl = ttl\n    cache.timer = timer\n    if typed:\n        # Wrap the cached function with a custom decorator\n        def wrapper(func):\n            return _CacheWrapper(func, cache)\n        return wrapper\n    else:\n        # Wrap the cached function with a custom decorator\n        def wrapper(func):\n            return _CacheWrappe", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if ttl < 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    else:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl, timer=timer)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # Wrap a function so that cache can be cleared\n    if not hasattr(ttl_cache, 'cache'):\n        ttl_cache.cache = {}\n    wrapper = _Cache(maxsize, ttl, timer, typed)\n    return lambda f: wrapper(f)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize < 1 or maxsize > 128:\n        raise ValueError('maxsize must be between 1 and 128')\n    if maxsize == 1:\n        # No caching since there are no items in the queue\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                timer=timer)\n\n    def wrapper(fn):\n        cached_func = _Cached(fn, maxsize, ttl, typed)\n        return lambda *a, **kw: cached_func(*a, **kw)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                 timer=timer)\n\n    def wrapper(f):\n        cached = LruCache(maxsize, ttl, typed)\n        return functools.wraps(f)(lambda *a, **kw: cached(f, *a, **kw))\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(maxsize, ttl, timer, False, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if ttl < 1:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    else:\n        return TimedCache(ttl=ttl, timer=timer, maxsize=maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize < 1 or maxsize > 128:\n        raise ValueError('maxsize must be in (1, 128)')\n\n    def wrapper(func):\n        return Cache(func, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there is only one item.\n        return functools.partial(_ttl_cache_singleton, ttl, timer, typed)\n    else:\n        # Use custom cache factory to create custom cache per item.\n        return functools.partial(_ttl_cache_custom, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if maxsize == 1:\n        # Nothing to do\n        return identity\n    if maxsize == 0:\n        # Just return a function with no cache\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                timer=timer)\n    # Cache engine is not configured, configure it and create a cache object\n    cache = _NoCache()\n    cache.maxsize = maxsize\n    cache.ttl = ttl\n    cache.timer = timer\n    if typed:\n        # Wrap the cached function with a custom decorator\n        def wrapper(func):\n            return _CacheWrapper(func, cache)\n        return wrapper\n    else:\n        # Wrap the cached function with a custom decorator\n        def wrapper(func):\n            return _CacheWrappe", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if ttl < 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    else:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl, timer=timer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # Wrap a function so that cache can be cleared\n    if not hasattr(ttl_cache, 'cache'):\n        ttl_cache.cache = {}\n    wrapper = _Cache(maxsize, ttl, timer, typed)\n    return lambda f: wrapper(f)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize < 1 or maxsize > 128:\n        raise ValueError('maxsize must be between 1 and 128')\n    if maxsize == 1:\n        # No caching since there are no items in the queue\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                timer=timer)\n\n    def wrapper(fn):\n        cached_func = _Cached(fn, maxsize, ttl, typed)\n        return lambda *a, **kw: cached_func(*a, **kw)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return functools.partial(ttl_cache, maxsize=maxsize, ttl=ttl,\n                                 timer=timer)\n\n    def wrapper(f):\n        cached = LruCache(maxsize, ttl, typed)\n        return functools.wraps(f)(lambda *a, **kw: cached(f, *a, **kw))\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(maxsize, ttl, timer, False, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _MRUWrapper(maxsize)\n    else:\n        return _MRUWrapper(maxsize, _cache_factory)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached = MruCache(maxsize, typed)\n        if callable(fn):\n            # Wrap the function with a memoizing callable\n            cached.cache_clear = lambda: fn()\n            return cached\n        else:\n            return lambda *a, **kw: cached.cache_clear()\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        # Must return a function whose decorator takes one argument\n        # (the function to wrap)\n        return _MruCacheTypedDecorator\n    else:\n        # Must return a function whose decorator takes one argument\n        # (the function to wrap)\n        return _MruCacheWrapper\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = _MRUWrapper(func, maxsize)\n        if typed:\n            cached.__dict__ = func.__dict__\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _MRUCACHE(maxsize)\n    else:\n        return _MRUWrapper(maxsize)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n\n    return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _MRUWrapper(maxsize)\n    else:\n        return _MRUWrapper(maxsize, _cache_factory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached = MruCache(maxsize, typed)\n        if callable(fn):\n            # Wrap the function with a memoizing callable\n            cached.cache_clear = lambda: fn()\n            return cached\n        else:\n            return lambda *a, **kw: cached.cache_clear()\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        # Must return a function whose decorator takes one argument\n        # (the function to wrap)\n        return _MruCacheTypedDecorator\n    else:\n        # Must return a function whose decorator takes one argument\n        # (the function to wrap)\n        return _MruCacheWrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = _MRUWrapper(func, maxsize)\n        if typed:\n            cached.__dict__ = func.__dict__\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _MRUCACHE(maxsize)\n    else:\n        return _MRUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached_func = _MRUWrapper(func, maxsize)\n        if typed:\n            cached_func.typed = True\n        return cached_func\n\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCacheWrapper(maxsize)\n    else:\n        return _LRUCacheWrapper(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        return _CacheStatus(cached_func, fn.__name__, maxsize)\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LruCacheTyped(maxsize)\n    else:\n        return _LruCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _Memoize(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return lambda *a, **kw: cached_fn(*a, **kw)\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LRUCache(maxsize, typed=True, f=f)\n        return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LruCacheTyped(maxsize)\n    else:\n        return _LruCache(maxsize)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCacheWrapper(maxsize)\n    else:\n        return _LRUCacheWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        return _CacheStatus(cached_func, fn.__name__, maxsize)\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LruCacheTyped(maxsize)\n    else:\n        return _LruCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _Memoize(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached_fn = _LRUWrapper(fn, maxsize)\n        return lambda *a, **kw: cached_fn(*a, **kw)\n\n    if typed:\n        return wrapper\n\n    else:\n        return partial(wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LRUCache(maxsize, typed=True, f=f)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LruCacheTyped(maxsize)\n    else:\n        return _LruCache(maxsize)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCacheWrapper(fn, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(fn, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        return _LFUCacheWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCACHE(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCACHE(maxsize, f)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCacheWrapper(f, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = fn(*args, **kwargs)\n                return ret\n\n        return wrapped if typed else wrapped(fn)\n\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCacheWrapper(f, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCacheWrapper(fn, maxsize)\n        return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCacheWrapper(fn, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(fn, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        return _LFUCacheWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCACHE(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCACHE(maxsize, f)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCacheWrapper(f, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = fn(*args, **kwargs)\n                return ret\n\n        return wrapped if typed else wrapped(fn)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCacheWrapper(f, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCacheWrapper(fn, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise ValueError('Does not contain any items.')\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self.pop(key)\n        return (key, value)\n    except StopIteration:\n        raise KeyError\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCacheError(\n            'There is nothing to remove from the cache.') from e\n", "def popitem(self):\n    if len(self.__order) > 0:\n        return self.__order.popitem()\n    else:\n        raise KeyError(\"pop from an empty collection\")\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    if not self:\n        raise KeyError(\"OrderedDict is already empty\")\n    key = self.__order.popleft()\n    return (key, self[key])\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return (key, value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise ValueError('Does not contain any items.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self.pop(key)\n        return (key, value)\n    except StopIteration:\n        raise KeyError\n", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCacheError(\n            'There is nothing to remove from the cache.') from e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if len(self.__order) > 0:\n        return self.__order.popitem()\n    else:\n        raise KeyError(\"pop from an empty collection\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError(\"OrderedDict is already empty\")\n    key = self.__order.popleft()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return (key, value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return super().setdefault(self._keytransform(key), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return super().setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(self._keytransform(key), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return super().setdefault(key, default)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        cached = cache(func)\n\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            value = cached.get(key, None)\n            if value is None:\n                value = func(*args, **kwds)\n                cached[key] = value\n                return value\n            else:\n                with lock:\n                    return value\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(self, *args, **kw):\n            if not hasattr(self, '_result'):\n                self._result = cached(self, *args, **kw)\n            return self._result\n        return newfunc\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(self, *args, **kw):\n        with lock:\n            return self._call_with_cache(func, *args, **kw)\n    return wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        __wrapper.cache = cache\n        __wrapper.key = key\n        return __wrapper\n\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        @functools.wraps(func)\n        def __wrapper(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.set(key(*args, **kw), result, cache.timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kw)\n                cache.set(key, result, time=self.timeout)\n            return result\n        return wrapper\n    return decorate\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        cachedmethods[key] = func\n        @wraps(func)\n        def wrapper(self, *args, **kw):\n            with lock:\n                return func(self, *args, **kw)\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = self._call(func, *args, **kw)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        def wrapper2(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        cache = {}\n        wrapper.cache = cache\n        wrapper2.cache = cache\n        return wrapper\n\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        return cache.get(key)\n    else:\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n            "], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        cached = cache(func)\n\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            value = cached.get(key, None)\n            if value is None:\n                value = func(*args, **kwds)\n                cached[key] = value\n                return value\n            else:\n                with lock:\n                    return value\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(*args, **kwds):\n            key = key(*args, **kwds)\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = func(*args, **kwds)\n                return ret\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache(func)\n        def newfunc(self, *args, **kw):\n            if not hasattr(self, '_result'):\n                self._result = cached(self, *args, **kw)\n            return self._result\n        return newfunc\n    if lock is None:\n        lock = threading.Lock()\n    def wrapper(self, *args, **kw):\n        with lock:\n            return self._call_with_cache(func, *args, **kw)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        __wrapper.cache = cache\n        __wrapper.key = key\n        return __wrapper\n\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        @functools.wraps(func)\n        def __wrapper(*args, **kw):\n            result = cache.get(key(*args, **kw))\n            if result is None:\n                result = func(*args, **kw)\n                cache.set(key(*args, **kw), result, cache.timeout)\n            return result\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kw)\n                cache.set(key, result, time=self.timeout)\n            return result\n        return wrapper\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        cachedmethods[key] = func\n        @wraps(func)\n        def wrapper(self, *args, **kw):\n            with lock:\n                return func(self, *args, **kw)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = self._call(func, *args, **kw)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        def wrapper2(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        cache = {}\n        wrapper.cache = cache\n        wrapper2.cache = cache\n        return wrapper\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        return cache.get(key)\n    else:\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n            ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        s = e.get_formatted_string()\n    else:\n        s = str(e)\n\n    if max_level is not None and len(s) > max_level:\n        s = s[:max_level] + '...'\n\n    if max_path_level is not None and len(s) > max_path_level:\n        s = s[:max_path_level] + '...'\n\n    return s\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    return super(SolBase, cls).extostr(e, max_level, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n\".format(cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        if e.get_traceback() is None:\n            tb = None\n        else:\n            tb = e.get_traceback()\n    else:\n        tb = e\n    if tb is not None:\n        tb = '\\n'.join(tb)\n        s = 'SolBaseException:'+ cls.__name__ + ':\\n' + tb\n    else:\n        s = cls.__name__ + ':'+ str(e)\n    if max_level > 0 and max_path_level > 0:\n        if tb is not None:\n            s = s + '\\n' + tb\n        else:\n            s = s + '\\n' + '-' * max_path_level\n    return s\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n\n    if isinstance(e, SolException):\n        exc_msg = cls._get_exc_msg(e, max_level, max_path_level)\n        if exc_msg:\n            return str(e) + \": \" + exc_msg\n        else:\n            return str(e)\n\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, socket.error) and e.errno == errno.ECONNABORTED:\n        # Connection aborted to the server\n        return ''\n    return str(e).replace('\\n', '\\n    ')\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        e = Exception(e)\n    return super(SolBase, cls).extostr(e, max_level=max_level, max_path_level=max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return e.format_exc()\n\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    if isinstance(e, SolException):\n        # Don't print anything to stderr\n        return \"{}\\n{}\".format(\n            SolBaseException.extostr(self, e, max_level, max_path_level)\n            or '',\n            e.args[0] if e.args else ''\n        )\n    return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        s = e.get_formatted_string()\n    else:\n        s = str(e)\n\n    if max_level is not None and len(s) > max_level:\n        s = s[:max_level] + '...'\n\n    if max_path_level is not None and len(s) > max_path_level:\n        s = s[:max_path_level] + '...'\n\n    return s\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    return super(SolBase, cls).extostr(e, max_level, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n\".format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        if e.get_traceback() is None:\n            tb = None\n        else:\n            tb = e.get_traceback()\n    else:\n        tb = e\n    if tb is not None:\n        tb = '\\n'.join(tb)\n        s = 'SolBaseException:'+ cls.__name__ + ':\\n' + tb\n    else:\n        s = cls.__name__ + ':'+ str(e)\n    if max_level > 0 and max_path_level > 0:\n        if tb is not None:\n            s = s + '\\n' + tb\n        else:\n            s = s + '\\n' + '-' * max_path_level\n    return s\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n\n    if isinstance(e, SolException):\n        exc_msg = cls._get_exc_msg(e, max_level, max_path_level)\n        if exc_msg:\n            return str(e) + \": \" + exc_msg\n        else:\n            return str(e)\n\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, socket.error) and e.errno == errno.ECONNABORTED:\n        # Connection aborted to the server\n        return ''\n    return str(e).replace('\\n', '\\n    ')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        e = Exception(e)\n    return super(SolBase, cls).extostr(e, max_level=max_level, max_path_level=max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return e.format_exc()\n\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SolBaseException):\n        return str(e)\n    if isinstance(e, SolException):\n        # Don't print anything to stderr\n        return \"{}\\n{}\".format(\n            SolBaseException.extostr(self, e, max_level, max_path_level)\n            or '',\n            e.args[0] if e.args else ''\n        )\n    return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if is_path_exist(file_name):\n        if not overwrite and is_file_exist(file_name):\n            logger.warning(\"File %s exists already, overwriting...\" % file_name)\n            return 0\n\n        if not overwrite and os.path.isfile(file_name):\n            logger.warning(\"File %s is removed from memory, overwriting...\" % file_name)\n            os.remove(file_name)\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error(\"File '%s' already exists\", file_name)\n        return 0\n    with open(file_name, 'wb') as file_handle:\n        file_handle.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"append_text_to_file(%s, %s, %s)\", file_name, text_buffer, encoding)\n\n    if not is_path_exist(file_name):\n        logger.debug(\"Creating directory %s\", file_name)\n        os.makedirs(file_name)\n\n    if not overwrite and is_path_exist(file_name):\n        logger.debug(\"File %s already exists\", file_name)\n        return 0\n\n    if not is_path_exist(file_name):\n        logger.debug(\"Creating new file %s\", file_name)\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(text_buffer, bytes):\n        raise TypeError(\"text_buffer must be of type bytes\")\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be of type str\")\n    if not overwrite and isfile(file_name):\n        return 0\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return file_to_binary(file_name, encoding)(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(file_name, str):\n        raise TypeError(\"file_name must be a string\")\n    if not isinstance(text_buffer, str):\n        raise TypeError(\"text_buffer must be a string\")\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be a string\")\n    if not overwrite and is_path_exist(file_name):\n        raise FileExistsError(\"file {} already exists\".format(file_name))\n\n    try:\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    except (TypeError, IOError) as e:\n        raise e\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.warning(\"Overwriting file %s\", file_name)\n        return 0\n\n    if isinstance(text_buffer, str):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    else:\n        return len(text_buffer)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if is_path_exist(file_name):\n        if not overwrite and is_file_exist(file_name):\n            logger.warning(\"File %s exists already, overwriting...\" % file_name)\n            return 0\n\n        if not overwrite and os.path.isfile(file_name):\n            logger.warning(\"File %s is removed from memory, overwriting...\" % file_name)\n            os.remove(file_name)\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error(\"File '%s' already exists\", file_name)\n        return 0\n    with open(file_name, 'wb') as file_handle:\n        file_handle.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"append_text_to_file(%s, %s, %s)\", file_name, text_buffer, encoding)\n\n    if not is_path_exist(file_name):\n        logger.debug(\"Creating directory %s\", file_name)\n        os.makedirs(file_name)\n\n    if not overwrite and is_path_exist(file_name):\n        logger.debug(\"File %s already exists\", file_name)\n        return 0\n\n    if not is_path_exist(file_name):\n        logger.debug(\"Creating new file %s\", file_name)\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(text_buffer, bytes):\n        raise TypeError(\"text_buffer must be of type bytes\")\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be of type str\")\n    if not overwrite and isfile(file_name):\n        return 0\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return file_to_binary(file_name, encoding)(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(file_name, str):\n        raise TypeError(\"file_name must be a string\")\n    if not isinstance(text_buffer, str):\n        raise TypeError(\"text_buffer must be a string\")\n    if not isinstance(encoding, str):\n        raise TypeError(\"encoding must be a string\")\n    if not overwrite and is_path_exist(file_name):\n        raise FileExistsError(\"file {} already exists\".format(file_name))\n\n    try:\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    except (TypeError, IOError) as e:\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    return append_binary_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.warning(\"Overwriting file %s\", file_name)\n        return 0\n\n    if isinstance(text_buffer, str):\n        with open(file_name, \"wb\") as outfile:\n            outfile.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    else:\n        return len(text_buffer)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = None\n        with open(file_name, \"rb\") as f:\n            buf = f.read()\n        return buf\n    except Exception as e:\n        logger.error(\"Failed to read file {} to textbuffer: {}\".format(file_name, e))\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except Exception:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except IOError as e:\n        logger.error(e)\n        return None\n    else:\n        text_buffer = file_handle.read()\n        file_handle.close()\n        return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            bin_buf = f.read()\n        return text_type(bin_buf, encoding=encoding)\n    except FileNotFoundError as err:\n        logger.error(\"File not found: %s\", err)\n        return None\n    except UnicodeDecodeError as err:\n        logger.error(\"Invalid encoding for file: %s\", err)\n        return None\n    except EnvironmentError as err:\n        logger.error(\"Error reading file: %s\", err)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"file_to_textbuffer %s\", file_name)\n    try:\n        file_handle = codecs.open(file_name, \"rb\", encoding)\n        text_buffer = file_handle.read()\n        file_handle.close()\n        return text_buffer\n    except Exception as ex:\n        logger.error(\"file_to_textbuffer failed %s\", ex)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = None\n        with open(file_name, \"rb\") as f:\n            buf = f.read()\n        return buf\n    except IOError as e:\n        return str(e)\n    except UnicodeDecodeError as e:\n        logger.error(\"Error reading file %s - %s\", file_name, e)\n        return None\n    except Exception as e:\n        logger.error(\"Error reading file %s - %s\", file_name, e)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    logger.debug('file_to_textbuffer ({})'.format(file_name))\n\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            buf = f.read()\n\n        return buf\n    except Exception as exc:\n        logger.exception('Failed to read file \"{}\"'.format(file_name))\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            text_buf = f.read().decode(encoding)\n        return text_buf\n    except IOError as e:\n        logger.error('Unable to load file %s: %s', file_name, e.strerror)\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"rb\") as f:\n            text_buf = f.read().decode(encoding)\n    except IOError:\n        logger.exception(\"Critical error reading file {}. Skipping.\".format(file_name))\n        return None\n    return text_buf\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            text_buffer = f.read()\n    except (IOError, OSError, UnicodeDecodeError):\n        logger.exception(\"Unable to read file '%s'.\", file_name)\n    return text_buffer\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = None\n        with open(file_name, \"rb\") as f:\n            buf = f.read()\n        return buf\n    except Exception as e:\n        logger.error(\"Failed to read file {} to textbuffer: {}\".format(file_name, e))\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buf = f.read()\n        return text_buf\n    except Exception:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except IOError as e:\n        logger.error(e)\n        return None\n    else:\n        text_buffer = file_handle.read()\n        file_handle.close()\n        return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            bin_buf = f.read()\n        return text_type(bin_buf, encoding=encoding)\n    except FileNotFoundError as err:\n        logger.error(\"File not found: %s\", err)\n        return None\n    except UnicodeDecodeError as err:\n        logger.error(\"Invalid encoding for file: %s\", err)\n        return None\n    except EnvironmentError as err:\n        logger.error(\"Error reading file: %s\", err)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"file_to_textbuffer %s\", file_name)\n    try:\n        file_handle = codecs.open(file_name, \"rb\", encoding)\n        text_buffer = file_handle.read()\n        file_handle.close()\n        return text_buffer\n    except Exception as ex:\n        logger.error(\"file_to_textbuffer failed %s\", ex)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = None\n        with open(file_name, \"rb\") as f:\n            buf = f.read()\n        return buf\n    except IOError as e:\n        return str(e)\n    except UnicodeDecodeError as e:\n        logger.error(\"Error reading file %s - %s\", file_name, e)\n        return None\n    except Exception as e:\n        logger.error(\"Error reading file %s - %s\", file_name, e)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug('file_to_textbuffer ({})'.format(file_name))\n\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            buf = f.read()\n\n        return buf\n    except Exception as exc:\n        logger.exception('Failed to read file \"{}\"'.format(file_name))\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'rb') as f:\n            text_buf = f.read().decode(encoding)\n        return text_buf\n    except IOError as e:\n        logger.error('Unable to load file %s: %s', file_name, e.strerror)\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"rb\") as f:\n            text_buf = f.read().decode(encoding)\n    except IOError:\n        logger.exception(\"Critical error reading file {}. Skipping.\".format(file_name))\n        return None\n    return text_buf\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = None\n        with codecs.open(file_name, \"rb\", encoding) as f:\n            text_buffer = f.read()\n    except (IOError, OSError, UnicodeDecodeError):\n        logger.exception(\"Unable to read file '%s'.\", file_name)\n    return text_buffer\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    logger.debug(\"file name is %s\", file_name)\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    if not os.path.isfile(file_name):\n        logger.warning(\"File not found: %s\", file_name)\n        return False\n    return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    logger.debug(\"file name is %s\", file_name)\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not isinstance(file_name, str):\n        return False\n    if not os.path.isfile(file_name):\n        logger.warning(\"File not found: %s\", file_name)\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.INFO)\n    logging.getLogger().propagate = False\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._handler)\n    logging.getLogger().addHandler(cls._handler)\n    cls._handler = None\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.NOTSET)\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(logging.NullHandler())\n    logging.getLogger().addHandler(logging.NullHandler())\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n    logging.getLogger().propagate = False\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    if cls._saved_logging is not None:\n        logging.getLogger('solbase').removeHandler(cls._saved_logging)\n        cls._saved_logging = None\n", "def _reset_logging(cls):\n    sys.modules.pop('pysolbase.utils', None)\n    sys.modules.pop('pysolbase.utils.time', None)\n    sys.modules.pop('pysolbase.utils.gevent', None)\n    sys.modules.pop('pysolbase.utils.gevent.__main__', None)\n    sys.modules.pop('pysolbase.utils.gevent.__version__', None)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.INFO)\n    logging.getLogger().propagate = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._handler)\n    logging.getLogger().addHandler(cls._handler)\n    cls._handler = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.NOTSET)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(logging.NullHandler())\n    logging.getLogger().addHandler(logging.NullHandler())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().addHandler(cls._log_handler)\n    logging.getLogger().propagate = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if cls._saved_logging is not None:\n        logging.getLogger('solbase').removeHandler(cls._saved_logging)\n        cls._saved_logging = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    sys.modules.pop('pysolbase.utils', None)\n    sys.modules.pop('pysolbase.utils.time', None)\n    sys.modules.pop('pysolbase.utils.gevent', None)\n    sys.modules.pop('pysolbase.utils.gevent.__main__', None)\n    sys.modules.pop('pysolbase.utils.gevent.__version__', None)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return Cache\n", "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "def _getTargetClass(self):\n    return _Implementation\n", "def _getTargetClass(self):\n    return html.PlainText\n", "def _getTargetClass(self):\n    return JavaScriptTarget\n", "def _getTargetClass(self):\n    return Implementation\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return Data\n", "def _getTargetClass(self):\n    return ast.AsyncFunctionDef\n", "def _getTargetClass(self):\n    return html.PlainText\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return Cache\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return _Implementation\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.PlainText\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JavaScriptTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Implementation\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return ast.AsyncFunctionDef\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.PlainText\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n        else:\n            prefix = current[0]\n            if prefix!= ordering[0][0]:\n                raise ValueError(\"Orderings must be constrained in such a way that if one object appears in two or more orderings, then the suffix that begins with the object must be in both orderings.\")\n            else:\n                merged.append(prefix)\n                for i in range(1, len(ordering)):\n                    prefix = '%s%s' % (prefix, ordering[i][0])\n                    merged.append(prefix)\n\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n\n    orderings = []\n    for o in orderings:\n        if not any([o[0].startswith(s) for s in orderings]):\n            orderings.append(o)\n    return orderings\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o.endswith(other_o[-1]):\n                continue\n            if common_suffix is None or o.endswith(common_suffix):\n                common_suffix = o.endswith(other_o[-1])\n                longest_common_suffix = other_o[-1]\n\n    if common_suffix is None:\n        return orderings\n\n    if longest_common_suffix is None:\n        return orderings\n\n    # Merge the longest common suffix and the longest ordering\n    return [o[0] for o in orderings if o[-1] ", "def _legacy_mergeOrderings(orderings):\n    constr = []\n    for o in orderings:\n        for c in o:\n            if c not in constr:\n                constr.append(c)\n    return constr\n", "def _legacy_mergeOrderings(orderings):\n    # get rid of the invalid orderings\n    uniqueOrderings = []\n    for o in orderings:\n        if not _is_valid_ordering(o):\n            raise ValueError(\"Invalid ordering provided. It must contain 2 or more items.\")\n        if len(o) == 1:\n            uniqueOrderings.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i] < prefix:\n                    uniqueOrderings.append(prefix)\n                    prefix = o[i]\n            uniqueOrderings.append(prefix)\n\n    return uniqueOrderings\n", "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n\n    # Find the longest suffix in any of the other orderings\n    longest_suffix = 0\n    longest_ordering = None\n    for o, r in orderings:\n        if o == longest_suffix:\n            if longest_ordering is None:\n                longest_ordering = r\n        else:\n            if longest_ordering is not None:\n                if o > longest_ordering:\n                    longest_ordering = r\n\n    # Make sure the longest ordering is not already present\n    if longest_ordering is not None:\n        while longest_ordering in orderings:\n            longest_ordering = None\n\n    return orderings + [longest_suffix] if longest_suffix else orderings\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [[o] if isinstance(o, basestring) else o for o in orderings]\n    merged = []\n    for ordering in orderings:\n        for obj in ordering:\n            if obj not in merged:\n                merged.append(obj)\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    for ordering in orderings:\n        for otherOrdering in result:\n            if otherOrdering.startswith(ordering):\n                raise OrderingConstraintError(\"Orderings are not constrained in such a way that if an object \"\n                                             \"appear in two or more orderings, then the suffix that begins with \"\n                                             \"the object must be in both orderings.\")\n\n        result += ordering\n\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [sorted(o, key=lambda x: x[0]) for o in orderings]\n    merged_orderings = []\n    current_ordering = None\n    for ordering in orderings:\n        if current_ordering is not None:\n            if current_ordering[0] == current_ordering[-1]:\n                merged_orderings.append(current_ordering)\n            else:\n                merged_orderings.append([current_ordering[0]] + ordering)\n            current_ordering = None\n        else:\n            current_ordering = ordering[0]\n    return merged_orderings\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n        else:\n            prefix = current[0]\n            if prefix!= ordering[0][0]:\n                raise ValueError(\"Orderings must be constrained in such a way that if one object appears in two or more orderings, then the suffix that begins with the object must be in both orderings.\")\n            else:\n                merged.append(prefix)\n                for i in range(1, len(ordering)):\n                    prefix = '%s%s' % (prefix, ordering[i][0])\n                    merged.append(prefix)\n\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n\n    orderings = []\n    for o in orderings:\n        if not any([o[0].startswith(s) for s in orderings]):\n            orderings.append(o)\n    return orderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o.endswith(other_o[-1]):\n                continue\n            if common_suffix is None or o.endswith(common_suffix):\n                common_suffix = o.endswith(other_o[-1])\n                longest_common_suffix = other_o[-1]\n\n    if common_suffix is None:\n        return orderings\n\n    if longest_common_suffix is None:\n        return orderings\n\n    # Merge the longest common suffix and the longest ordering\n    return [o[0] for o in orderings if o[-1] ", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    constr = []\n    for o in orderings:\n        for c in o:\n            if c not in constr:\n                constr.append(c)\n    return constr\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # get rid of the invalid orderings\n    uniqueOrderings = []\n    for o in orderings:\n        if not _is_valid_ordering(o):\n            raise ValueError(\"Invalid ordering provided. It must contain 2 or more items.\")\n        if len(o) == 1:\n            uniqueOrderings.append(o[0])\n        else:\n            prefix = o[0]\n            for i in range(1, len(o)):\n                if o[i] < prefix:\n                    uniqueOrderings.append(prefix)\n                    prefix = o[i]\n            uniqueOrderings.append(prefix)\n\n    return uniqueOrderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n\n    orderings = [[o] + r for o, r in orderings]\n\n    # Find the longest suffix in any of the other orderings\n    longest_suffix = 0\n    longest_ordering = None\n    for o, r in orderings:\n        if o == longest_suffix:\n            if longest_ordering is None:\n                longest_ordering = r\n        else:\n            if longest_ordering is not None:\n                if o > longest_ordering:\n                    longest_ordering = r\n\n    # Make sure the longest ordering is not already present\n    if longest_ordering is not None:\n        while longest_ordering in orderings:\n            longest_ordering = None\n\n    return orderings + [longest_suffix] if longest_suffix else orderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [[o] if isinstance(o, basestring) else o for o in orderings]\n    merged = []\n    for ordering in orderings:\n        for obj in ordering:\n            if obj not in merged:\n                merged.append(obj)\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    for ordering in orderings:\n        for otherOrdering in result:\n            if otherOrdering.startswith(ordering):\n                raise OrderingConstraintError(\"Orderings are not constrained in such a way that if an object \"\n                                             \"appear in two or more orderings, then the suffix that begins with \"\n                                             \"the object must be in both orderings.\")\n\n        result += ordering\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [sorted(o, key=lambda x: x[0]) for o in orderings]\n    merged_orderings = []\n    current_ordering = None\n    for ordering in orderings:\n        if current_ordering is not None:\n            if current_ordering[0] == current_ordering[-1]:\n                merged_orderings.append(current_ordering)\n            else:\n                merged_orderings.append([current_ordering[0]] + ordering)\n            current_ordering = None\n        else:\n            current_ordering = ordering[0]\n    return merged_orderings\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    elif spec is None:\n        return _ADVICE_WARNING\n    else:\n        return InterfaceSpecification(spec, None)\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    else:\n        return spec._proxied\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is None:\n        return _next_super_class(object)\n    return implementedBy(spec)\n", "def directlyProvidedBy(object):\n    direct = getattr(object, '__provides__', None)\n    if direct is not None:\n        return direct\n    direct = _implements_advice(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    direct = _implements_name(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    raise TypeError('%s has no direct properties' % (object,))\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return interfaces.IInterfaceSpecification(None)\n    else:\n        return spec\n", "def directlyProvidedBy(object):\n    direct = _directly_provided(object)\n    if direct is _empty:\n        return implementedBy(object)\n    return implementedBy(direct)\n", "def directlyProvidedBy(object):\n    direct = providedBy(object)\n    if direct is _empty:\n        return interfaces.IInterfaceSpecification([])\n    elif issubclass(direct, type):\n        return interfaces.IInterfaceSpecification([direct])\n    else:\n        return direct\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _next_super_class(spec)\n    else:\n        return spec\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return interfaces.NO_VALUE\n    return implementedBy(spec)\n", "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    else:\n        return InterfaceSpecification(spec, None)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    elif spec is None:\n        return _ADVICE_WARNING\n    else:\n        return InterfaceSpecification(spec, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    else:\n        return spec._proxied\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is None:\n        return _next_super_class(object)\n    return implementedBy(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    direct = getattr(object, '__provides__', None)\n    if direct is not None:\n        return direct\n    direct = _implements_advice(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    direct = _implements_name(object)\n    if direct is not None:\n        object.__provides__ = direct\n        return direct\n    raise TypeError('%s has no direct properties' % (object,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return interfaces.IInterfaceSpecification(None)\n    else:\n        return spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    direct = _directly_provided(object)\n    if direct is _empty:\n        return implementedBy(object)\n    return implementedBy(direct)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    direct = providedBy(object)\n    if direct is _empty:\n        return interfaces.IInterfaceSpecification([])\n    elif issubclass(direct, type):\n        return interfaces.IInterfaceSpecification([direct])\n    else:\n        return direct\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _next_super_class(spec)\n    else:\n        return spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return interfaces.NO_VALUE\n    return implementedBy(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    spec = providedBy(object)\n    if spec is _empty:\n        return _ADVICE_ERROR\n    else:\n        return InterfaceSpecification(spec, None)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n\n    return sorted(classes, key=lambda x: x.order)\n", "def minimalBases(classes):\n    minBases = []\n    for cls in classes:\n        if cls not in minBases:\n            minBases.append(cls)\n    return minBases\n", "def minimalBases(classes):\n    if len(classes) <= 1:\n        return classes\n\n    min_class = classes[0]\n    for c in classes[1:]:\n        if c < min_class:\n            min_class = c\n    return [min_class] + minimalBases(classes[1:])\n", "def minimalBases(classes):\n    if len(classes) <= 1:\n        return classes\n\n    ordered = sorted(classes, key=lambda x: x.order)\n    for i in range(len(ordered) - 1):\n        if ordered[i].order < ordered[i + 1].order:\n            return classes[:i] + ordered[i + 1:]\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.order)[0]\n", "def minimalBases(classes):\n\n    minbases = []\n\n    for classe in classes:\n        for base in classe.__bases__:\n            if base not in minbases:\n                minbases.append(base)\n\n    return minbases\n", "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n\n    ordered = []\n    for base in classes:\n        for otherBase in ordered:\n            if base == otherBase:\n                continue\n            if base.isSame(otherBase):\n                ordered.append(otherBase)\n                break\n        else:\n            ordered.append(base)\n\n    return ordered\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda b: b.order)[0]\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.ordered_min())\n", "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort(key=lambda x: x.order)\n    return [classes[0]] + [c for c in classes[1:] if c.order < c.orderOfBase(classes[0])]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n\n    return sorted(classes, key=lambda x: x.order)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBases = []\n    for cls in classes:\n        if cls not in minBases:\n            minBases.append(cls)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) <= 1:\n        return classes\n\n    min_class = classes[0]\n    for c in classes[1:]:\n        if c < min_class:\n            min_class = c\n    return [min_class] + minimalBases(classes[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) <= 1:\n        return classes\n\n    ordered = sorted(classes, key=lambda x: x.order)\n    for i in range(len(ordered) - 1):\n        if ordered[i].order < ordered[i + 1].order:\n            return classes[:i] + ordered[i + 1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.order)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n\n    minbases = []\n\n    for classe in classes:\n        for base in classe.__bases__:\n            if base not in minbases:\n                minbases.append(base)\n\n    return minbases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n\n    ordered = []\n    for base in classes:\n        for otherBase in ordered:\n            if base == otherBase:\n                continue\n            if base.isSame(otherBase):\n                ordered.append(otherBase)\n                break\n        else:\n            ordered.append(base)\n\n    return ordered\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda b: b.order)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.ordered_min())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort(key=lambda x: x.order)\n    return [classes[0]] + [c for c in classes[1:] if c.order < c.orderOfBase(classes[0])]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid attribute or descriptor\" %\n            self.__name__)\n    if not all:\n        return self.__attrs.keys()\n    return self.__ibmodule__.getTaggedValue(self.__name__)\n", "def namesAndDescriptions(self, all=False):\n    tags = self.__iro__\n    if all:\n        tags = self.__ibmodule__.getTaggedValueTags()\n    return tags.keys(), tags.values()\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in reversed(self.__bases__):\n        if hasattr(base, 'queryTaggedValue'):\n            names.extend(base.queryTaggedValue('names', all))\n            descriptions.extend(base.queryTaggedValue('descriptions',\n                                                       all))\n        else:\n            names.extend(base.getTaggedValue('names', all))\n            descriptions.extend(base.getTaggedValue('descriptions',\n                                                       all))\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    d = {}\n    for v in self.__v_repr:\n        if (\n            v[1] is not None and\n            v[1]!= getattr(self, v[0]) and\n            v[1]!= getattr(self.__ibmodule__, v[0])\n        ):\n            d[v[0]] = v[1]\n    if all:\n        return d\n    return [\n        (k, v[1])\n        for k, v in d.items()\n        if k not in self.__attrs\n    ]\n", "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid attribute of %s\" % (\n                self.__name__, self.__class__.__name__))\n    return self.__ibmodule__.getAttributeDescriptions(\n        self.__class__, self, all)\n", "def namesAndDescriptions(self, all=False):\n    attrs = self.__attrs\n    if all:\n        return attrs.keys()\n    descs = []\n    for base in self.__bases__:\n        descs += base.namesAndDescriptions(all)\n    descs.append(self.__name__)\n    return descs\n", "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((k, v.__doc__) for k, v in self.__attrs.items())\n    return tuple((k, getattr(self, k, None)) for k in self.__attrs)\n", "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\"can't retrieve attributes of non-initialized \"\n                        \"Interface %s\" % self.__name__)\n    if not all:\n        return sorted(self.__iro__.namesAndDescriptions(all=all))\n    return dict((name, getattr(self, name))\n                for name in self.__iro__.namesFor(self.__ibmodule__))\n", "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError('can not resolve attributes of un-initialized '\n                        'container')\n    if not all:\n        return list(self.__attrs.keys())\n    else:\n        return self.__ibmodule__.namesAndDescriptions(all=all)\n", "def namesAndDescriptions(self, all=False):\n    if not all:\n        return tuple(self.__attrs) + tuple(self.__ibmodule__.descriptions)\n    return self.__attrs\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid attribute or descriptor\" %\n            self.__name__)\n    if not all:\n        return self.__attrs.keys()\n    return self.__ibmodule__.getTaggedValue(self.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    tags = self.__iro__\n    if all:\n        tags = self.__ibmodule__.getTaggedValueTags()\n    return tags.keys(), tags.values()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in reversed(self.__bases__):\n        if hasattr(base, 'queryTaggedValue'):\n            names.extend(base.queryTaggedValue('names', all))\n            descriptions.extend(base.queryTaggedValue('descriptions',\n                                                       all))\n        else:\n            names.extend(base.getTaggedValue('names', all))\n            descriptions.extend(base.getTaggedValue('descriptions',\n                                                       all))\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    d = {}\n    for v in self.__v_repr:\n        if (\n            v[1] is not None and\n            v[1]!= getattr(self, v[0]) and\n            v[1]!= getattr(self.__ibmodule__, v[0])\n        ):\n            d[v[0]] = v[1]\n    if all:\n        return d\n    return [\n        (k, v[1])\n        for k, v in d.items()\n        if k not in self.__attrs\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\n            \"Object %s is not a valid attribute of %s\" % (\n                self.__name__, self.__class__.__name__))\n    return self.__ibmodule__.getAttributeDescriptions(\n        self.__class__, self, all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = self.__attrs\n    if all:\n        return attrs.keys()\n    descs = []\n    for base in self.__bases__:\n        descs += base.namesAndDescriptions(all)\n    descs.append(self.__name__)\n    return descs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((k, v.__doc__) for k, v in self.__attrs.items())\n    return tuple((k, getattr(self, k, None)) for k in self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError(\"can't retrieve attributes of non-initialized \"\n                        \"Interface %s\" % self.__name__)\n    if not all:\n        return sorted(self.__iro__.namesAndDescriptions(all=all))\n    return dict((name, getattr(self, name))\n                for name in self.__iro__.namesFor(self.__ibmodule__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if self.__ibmodule__ is None:\n        raise TypeError('can not resolve attributes of un-initialized '\n                        'container')\n    if not all:\n        return list(self.__attrs.keys())\n    else:\n        return self.__ibmodule__.namesAndDescriptions(all=all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if not all:\n        return tuple(self.__attrs) + tuple(self.__ibmodule__.descriptions)\n    return self.__attrs\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    else:\n        return tuple(sorted(v for v in self.__attrs.values()\n                            if v.isAttribute))\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return list(self.__attrs)\n", "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return list(sorted(names))\n", "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return list(sorted(set(names + self.__attrs)))\n", "def names(self, all=False):\n    return tuple(v.__name__ for v in self.__bases__ if v.isTagged or not all)\n", "def names(self, all=False):\n    return tuple(k for k in self.__attrs)\n", "def names(self, all=False):\n    if self.__bases__ and not all:\n        return self.__bases__[0].names(all=all)\n    return super(Interface, self).names(all=all)\n", "def names(self, all=False):\n    if not all:\n        return tuple(self.__attrs)\n    return tuple(self.__ibmodule__.getMetadata(name).keys())\n", "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    return self.__attrs\n", "def names(self, all=False):\n    return tuple(self.__attrs) + ('__module__',)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    else:\n        return tuple(sorted(v for v in self.__attrs.values()\n                            if v.isAttribute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return list(self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return list(sorted(names))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    names = []\n    for base in self.__bases__:\n        if hasattr(base, 'names'):\n            names.extend(base.names(all=all))\n    return list(sorted(set(names + self.__attrs)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return tuple(v.__name__ for v in self.__bases__ if v.isTagged or not all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return tuple(k for k in self.__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if self.__bases__ and not all:\n        return self.__bases__[0].names(all=all)\n    return super(Interface, self).names(all=all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if not all:\n        return tuple(self.__attrs)\n    return tuple(self.__ibmodule__.getMetadata(name).keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    return self.__attrs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return tuple(self.__attrs) + ('__module__',)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg._implementation)\n        elif isinstance(arg, Specification):\n            output.append(arg)\n        else:\n            for x in sequence:\n                _normalize(x)\n    _normalize(arg)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg.__interfaces__:\n            _normalize(iface)\n\n    for iface in sequence:\n        _normalize(iface)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return arg\n        elif isinstance(arg, Specification):\n            output.append(arg.normalize())\n            return Specification(arg.implementation)\n        else:\n            raise TypeError(\n                \"%s cannot be normalized in %s\" % (arg, sequence))\n\n    for iface in sequence:\n        _normalize(iface)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, types.GenericMeta):\n        return sequence._declaration_spec.normalize_arguments(sequence.__args__, output)\n    for i in sequence:\n        output.append(_normalizeargs(i, output))\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return arg\n        if isinstance(arg, type) and issubclass(arg, Spec):\n            output.append(arg.__implementation__)\n            return arg\n        if isinstance(arg, tuple) and len(arg) == 2 and issubclass(arg[0], type) and issubclass(arg[1], Spec):\n            output.append(arg[0](*arg[1]))\n            return arg[1]\n        if isinstance(arg, InterfaceClass):\n            return arg\n        raise TypeError(_ADVICE_ERROR % (type(arg), arg))\n\n    _normalize(sequence)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def onInterface(ob):\n        if isinstance(ob, Class):\n            output.append(ob)\n            return\n        for v in getattr(ob, '__mro__', []):\n            if isinstance(v, InterfaceClass):\n                onInterface(v)\n            elif isinstance(v, ImplementationClass):\n                onInterface(v.implementation)\n            elif isinstance(v, SpecificationClass):\n                onInterface(v.provided)\n\n    onInterface(sequence[0])\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, types.GeneratorType):\n        for item in sequence:\n            _normalizeargs(item, output)\n        return output\n    for item in sequence:\n        output.append(_normalizeargs(item, output))\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg._implementation)\n        elif isinstance(arg, Specification):\n            output.append(arg)\n        else:\n            for x in sequence:\n                _normalize(x)\n    _normalize(arg)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg:\n            _normalize(iface)\n    _normalize(sequence)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return\n        for iface in arg.__interfaces__:\n            _normalize(iface)\n\n    for iface in sequence:\n        _normalize(iface)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return arg\n        elif isinstance(arg, Specification):\n            output.append(arg.normalize())\n            return Specification(arg.implementation)\n        else:\n            raise TypeError(\n                \"%s cannot be normalized in %s\" % (arg, sequence))\n\n    for iface in sequence:\n        _normalize(iface)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, types.GenericMeta):\n        return sequence._declaration_spec.normalize_arguments(sequence.__args__, output)\n    for i in sequence:\n        output.append(_normalizeargs(i, output))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, InterfaceClass):\n            output.append(arg)\n            return arg\n        if isinstance(arg, type) and issubclass(arg, Spec):\n            output.append(arg.__implementation__)\n            return arg\n        if isinstance(arg, tuple) and len(arg) == 2 and issubclass(arg[0], type) and issubclass(arg[1], Spec):\n            output.append(arg[0](*arg[1]))\n            return arg[1]\n        if isinstance(arg, InterfaceClass):\n            return arg\n        raise TypeError(_ADVICE_ERROR % (type(arg), arg))\n\n    _normalize(sequence)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def onInterface(ob):\n        if isinstance(ob, Class):\n            output.append(ob)\n            return\n        for v in getattr(ob, '__mro__', []):\n            if isinstance(v, InterfaceClass):\n                onInterface(v)\n            elif isinstance(v, ImplementationClass):\n                onInterface(v.implementation)\n            elif isinstance(v, SpecificationClass):\n                onInterface(v.provided)\n\n    onInterface(sequence[0])\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    if isinstance(sequence, types.GeneratorType):\n        for item in sequence:\n            _normalizeargs(item, output)\n        return output\n    for item in sequence:\n        output.append(_normalizeargs(item, output))\n    return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('zope.optimize')\n    except ImportError:\n        pass\n    try:\n        from zope.schema import interfaces\n        return interfaces.IConfigurer\n    except ImportError:\n        pass\n    raise ImportError('Optimizations required but not available')\n", "def _c_optimizations_available():\n    if _c_optimizations_required():\n        import _c_optimizations\n        return _c_optimizations\n    else:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.component import getUtility\n        return getUtility(ICompiler)\n    except ImportError:\n        # Python 2 and 3 are not compatible\n        return False\n", "def _c_optimizations_available():\n    if not _c_optimizations_required():\n        return False\n\n    try:\n        import c_optimizations\n    except ImportError:\n        # PyPy will fail if the c_optimizations module was not found.\n        # Assume that it's ok to use the C implementation.\n        return True\n    else:\n        return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations as c_optimizations_module\n    except ImportError:\n        # Under PYPY2 this raises an ImportError.\n        # Under PYPY3 this does not raise an ImportError.\n        _skip_under_py2k(c_optimizations_module)\n    return c_optimizations_module\n", "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_required():\n        _c_optimizations_available = True\n        try:\n            import c_optimizations  # noqa\n        except ImportError:\n            _c_optimizations_available = False\n            return False\n    return _c_optimizations_available\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import alsoProvides\n    except ImportError:\n        # Python 2.7\n        try:\n            from zope.component.interfaces import providedBy\n        except ImportError:\n            # Python 2.6\n            try:\n                from zope.schema import create_metadata\n            except ImportError:\n                # Python 3.3 or later\n                return False\n            return create_metadata(options=[], prefix='zope.interface')\n        return False\n    else:\n        return alsoProvides(zope.interface.Interface, providedBy(Optimizable))\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        # This can happen on Windows 64 bit, see Python issue 7511\n        if not sys.platform.startswith('win32'):\n            return False\n        raise\n    return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_required():\n        _c_optimizations_available()\n    return _c_optimizations_available\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('zope.optimize')\n    except ImportError:\n        pass\n    try:\n        from zope.schema import interfaces\n        return interfaces.IConfigurer\n    except ImportError:\n        pass\n    raise ImportError('Optimizations required but not available')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    if _c_optimizations_required():\n        import _c_optimizations\n        return _c_optimizations\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.component import getUtility\n        return getUtility(ICompiler)\n    except ImportError:\n        # Python 2 and 3 are not compatible\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    if not _c_optimizations_required():\n        return False\n\n    try:\n        import c_optimizations\n    except ImportError:\n        # PyPy will fail if the c_optimizations module was not found.\n        # Assume that it's ok to use the C implementation.\n        return True\n    else:\n        return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations as c_optimizations_module\n    except ImportError:\n        # Under PYPY2 this raises an ImportError.\n        # Under PYPY3 this does not raise an ImportError.\n        _skip_under_py2k(c_optimizations_module)\n    return c_optimizations_module\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_required():\n        _c_optimizations_available = True\n        try:\n            import c_optimizations  # noqa\n        except ImportError:\n            _c_optimizations_available = False\n            return False\n    return _c_optimizations_available\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import alsoProvides\n    except ImportError:\n        # Python 2.7\n        try:\n            from zope.component.interfaces import providedBy\n        except ImportError:\n            # Python 2.6\n            try:\n                from zope.schema import create_metadata\n            except ImportError:\n                # Python 3.3 or later\n                return False\n            return create_metadata(options=[], prefix='zope.interface')\n        return False\n    else:\n        return alsoProvides(zope.interface.Interface, providedBy(Optimizable))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        # This can happen on Windows 64 bit, see Python issue 7511\n        if not sys.platform.startswith('win32'):\n            return False\n        raise\n    return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_required():\n        _c_optimizations_available()\n    return _c_optimizations_available\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py3k(os.environ.get('PURE_PYTHON')):\n        return False\n    return os.environ.get('C_OPTIMIZATIONS') is not None\n", "def _should_attempt_c_optimizations():\n    if _pypy:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_available()\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' or\n            _c_optimizations_required())\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' or\n            _use_c_impl() or\n            _c_optimizations_required() or\n            _c_optimizations_available() or\n            _c_optimizations_ignored())\n", "def _should_attempt_c_optimizations():\n    # We only attempt to use the C optimizations if we're on PyPy.\n    if _skip_under_py3k(os.environ.get('PURE_PYTHON')):\n        return False\n\n    # Assume we're on PyPy where the C optimizations should be available.\n    if sys.version_info[:2] >= (3, ):\n        return True\n    else:\n        return _c_optimizations_required()\n", "def _should_attempt_c_optimizations():\n    if _pypy:\n        return False\n    else:\n        return os.environ.get('PURE_PYTHON') == 'true'\n", "def _should_attempt_c_optimizations():\n    if _pypy:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_available()\n", "def _should_attempt_c_optimizations():\n    return not _pypy_and_pure_impl() or _c_optimizations_required()\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            _use_c_impl())\n", "def _should_attempt_c_optimizations():\n    if not sys.pypy_version_info >= (3, ):\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy or _skip_under_py3k(os.environ.get('PURE_PYTHON')):\n        return False\n    return os.environ.get('C_OPTIMIZATIONS') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_available()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' or\n            _c_optimizations_required())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == '1' or\n            _use_c_impl() or\n            _c_optimizations_required() or\n            _c_optimizations_available() or\n            _c_optimizations_ignored())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # We only attempt to use the C optimizations if we're on PyPy.\n    if _skip_under_py3k(os.environ.get('PURE_PYTHON')):\n        return False\n\n    # Assume we're on PyPy where the C optimizations should be available.\n    if sys.version_info[:2] >= (3, ):\n        return True\n    else:\n        return _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy:\n        return False\n    else:\n        return os.environ.get('PURE_PYTHON') == 'true'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _pypy:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_available()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return not _pypy_and_pure_impl() or _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true' and\n            _use_c_impl())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if not sys.pypy_version_info >= (3, ):\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return ['-stdlib=libc', '-stdlib=libc++']\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return (\n        'CPython>=1.5.6,!=2.0.4,!=2.1.2,!=2.1.3',\n        'CPython>=1.5.6,!=2.0.4,!=2.1.2,!=2.1.3,CPython>=1.5.6',\n    )\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return ['-g', '--generate-only']\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return _c_optimizations_required() ^ _c_optimizations_required()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return ['-stdlib=libc', '-stdlib=libc++']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        'CPython>=1.5.6,!=2.0.4,!=2.1.2,!=2.1.3',\n        'CPython>=1.5.6,!=2.0.4,!=2.1.2,!=2.1.3,CPython>=1.5.6',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return ['-g', '--generate-only']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return _c_optimizations_required() ^ _c_optimizations_required()\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "def _c_optimizations_required():\n    pure_python = os.environ.get('PURE_PYTHON')\n    if pure_python:\n        return pure_python == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    else:\n        return pure_env == '1'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _c_optimizations_required():\n    return os.environ.get(\"PURE_PYTHON\", \"0\").upper() == \"TRUE\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_python = os.environ.get('PURE_PYTHON')\n    if pure_python:\n        return pure_python == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    else:\n        return pure_env == '1'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return os.environ.get(\"PURE_PYTHON\", \"0\").upper() == \"TRUE\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._hist.reset()\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist.clear()\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._hist.reset()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist.clear()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self._points, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated. Please use to_csv_table instead.\",\n                  DeprecationWarning)\n    return self.to_csv_table(separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from.utils import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    if header is None:\n        header = []\n    warnings.warn(\"deprecated: Lena 0.5 to_csv is not used. Iterables are converted to tables. To convert \"\n                  \" graph's points to CSV inside a Lena sequence, use \"\n                  \":class:`lena.output.ToCSV`. with import warnings operator functools recopy \"\n                  \"leena functools class self._update`\", DeprecationWarning)\n    header = separator.join(header)\n    return PointsCSV([x.to_csv(separator=separator, header=header) for x in self.points])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self._points, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated. Please use to_csv_table instead.\",\n                  DeprecationWarning)\n    return self.to_csv_table(separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.utils import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    if header is None:\n        header = []\n    warnings.warn(\"deprecated: Lena 0.5 to_csv is not used. Iterables are converted to tables. To convert \"\n                  \" graph's points to CSV inside a Lena sequence, use \"\n                  \":class:`lena.output.ToCSV`. with import warnings operator functools recopy \"\n                  \"leena functools class self._update`\", DeprecationWarning)\n    header = separator.join(header)\n    return PointsCSV([x.to_csv(separator=separator, header=header) for x in self.points])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return super(Field, self)._get_err_indices(coord_name)\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\n            'coordinate {!r} is not in the shape of the data '\n            'fields'.format(coord_name))\n\n    if self._scale!= 1:\n        raise ValueError(\n            'coordinate {!r} is not scaled correctly'.format(coord_name))\n\n    return self._parse_error_names(self.field_names)\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError(\"Unknown coordinate '%s'\" % coord_name)\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise ValueError('Unrecognized coordinate \"{0}\"!'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Unknown coordinate \"{}\".'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name in self._coord_names:\n        return self._coord_names.index(coord_name)\n    else:\n        raise KeyError(f\"{coord_name} not found in coordinate names.\")\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"coordinate '{}' is not a valid coordinate name\"\n        raise KeyError(msg.format(coord_name))\n\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif isinstance(coord_name, int):\n        return [coord_name]\n    else:\n        msg = \"Unknown coordinate name '{}'\".format(coord_name)\n        raise KeyError(msg)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return super(Field, self)._get_err_indices(coord_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\n            'coordinate {!r} is not in the shape of the data '\n            'fields'.format(coord_name))\n\n    if self._scale!= 1:\n        raise ValueError(\n            'coordinate {!r} is not scaled correctly'.format(coord_name))\n\n    return self._parse_error_names(self.field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError(\"Unknown coordinate '%s'\" % coord_name)\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise ValueError('Unrecognized coordinate \"{0}\"!'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Unknown coordinate \"{}\".'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif coord_name in self._coord_names:\n        return self._coord_names.index(coord_name)\n    else:\n        raise KeyError(f\"{coord_name} not found in coordinate names.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        msg = \"coordinate '{}' is not a valid coordinate name\"\n        raise KeyError(msg.format(coord_name))\n\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    elif isinstance(coord_name, int):\n        return [coord_name]\n    else:\n        msg = \"Unknown coordinate name '{}'\".format(coord_name)\n        raise KeyError(msg)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.error = []\n    for field_name in self.field_names:\n        if field_name not in context.error:\n            context.error.append(field_name)\n\n    context.value = {}\n    for coord_name in self.coord_names:\n        if coord_name not in context.value:\n            context.value[coord_name] = {}\n        context.value[coord_name].update(\n            {\n                \"x_low\": self._get_err_indices(coord_name)\n            }\n        )\n", "def _update_context(self, context):\n    context.error = {}\n    for field in self.field_names:\n        if field not in context.error:\n            context.error[field] = {}\n        context.error[field][\"index\"] = self._get_err_indices(\n            field, coord_name=context.error[field].get(\"coord_name\")\n        )\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self.field_names:\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name].update(self._parse_error_names(name))\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        coord = self.coords[name]\n        context.error[name] = {\"x_low\": {\"index\": coord[0]}}\n        context.error[name][\"y\"] = {\"index\": coord[1]}\n        context.error[name][\"z\"] = {\"index\": coord[2]}\n", "def _update_context(self, context):\n    context.error = {}\n    for field_name, field in self._coord_names.items():\n        if field_name in context.error:\n            context.error[field_name] = dict(\n                (field_name, getattr(self, field_name))\n                for field_name in context.error[field_name]\n            )\n        if field not in context.value:\n            context.value[field] = None\n", "def _update_context(self, context):\n    context[\"error\"] = {}\n    for field in self.field_names:\n        if field!= \"error\":\n            context[\"error\"][field] = getattr(self, field)\n", "def _update_context(self, context):\n    context.error = {}\n    for field_name in self.field_names:\n        if field_name not in context.error:\n            context.error[field_name] = {}\n        context.error[field_name].update(getattr(self, field_name))\n", "def _update_context(self, context):\n    for field_name, properties in context.error.items():\n        if field_name not in self.field_names:\n            continue\n        properties[\"index\"] = self._get_err_indices(field_name)[-1] + 1\n        context.error[field_name] = properties\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self.field_names:\n        if name in context.error:\n            context.error[name] = {\"index\": context.error[name]}\n        else:\n            context.error[name] = {\"index\": len(context.error)}\n", "def _update_context(self, context):\n    # Keep a copy of the error names in context.value so we don't lose\n    # their indices.\n    context.value = {name: self._parse_error_names(names)\n                    for names in self._coord_names.values()}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.error = []\n    for field_name in self.field_names:\n        if field_name not in context.error:\n            context.error.append(field_name)\n\n    context.value = {}\n    for coord_name in self.coord_names:\n        if coord_name not in context.value:\n            context.value[coord_name] = {}\n        context.value[coord_name].update(\n            {\n                \"x_low\": self._get_err_indices(coord_name)\n            }\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for field in self.field_names:\n        if field not in context.error:\n            context.error[field] = {}\n        context.error[field][\"index\"] = self._get_err_indices(\n            field, coord_name=context.error[field].get(\"coord_name\")\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self.field_names:\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name].update(self._parse_error_names(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        coord = self.coords[name]\n        context.error[name] = {\"x_low\": {\"index\": coord[0]}}\n        context.error[name][\"y\"] = {\"index\": coord[1]}\n        context.error[name][\"z\"] = {\"index\": coord[2]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for field_name, field in self._coord_names.items():\n        if field_name in context.error:\n            context.error[field_name] = dict(\n                (field_name, getattr(self, field_name))\n                for field_name in context.error[field_name]\n            )\n        if field not in context.value:\n            context.value[field] = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context[\"error\"] = {}\n    for field in self.field_names:\n        if field!= \"error\":\n            context[\"error\"][field] = getattr(self, field)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for field_name in self.field_names:\n        if field_name not in context.error:\n            context.error[field_name] = {}\n        context.error[field_name].update(getattr(self, field_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for field_name, properties in context.error.items():\n        if field_name not in self.field_names:\n            continue\n        properties[\"index\"] = self._get_err_indices(field_name)[-1] + 1\n        context.error[field_name] = properties\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self.field_names:\n        if name in context.error:\n            context.error[name] = {\"index\": context.error[name]}\n        else:\n            context.error[name] = {\"index\": len(context.error)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    # Keep a copy of the error names in context.value so we don't lose\n    # their indices.\n    context.value = {name: self._parse_error_names(names)\n                    for names in self._coord_names.values()}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "def integral(bins, edges):\n    if bins.ndim == 1:\n        bins = bins[:, None]\n    return _calculate_bin_edges_var(bins, edges)\n", "def integral(bins, edges):\n    _check_edges_increasing_1d(bins)\n    return np.diff(bins) * edges[:-1] / edges[1:]\n", "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n\n    if edges[0] < edges[-1]:\n        raise ValueError(\"edges must be within the integral bin range\")\n\n    return np.diff(bins) * np.diff(edges) / 2. / np.pi\n", "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins) * edges\n", "def integral(bins, edges):\n    return bin_edges_to_graph(bins, edges)\n", "def integral(bins, edges):\n    return make_hist_context(bins, {})\n", "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if bins.ndim == 1:\n        bins = bins[:, None]\n    return _calculate_bin_edges_var(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    _check_edges_increasing_1d(bins)\n    return np.diff(bins) * edges[:-1] / edges[1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n\n    if edges[0] < edges[-1]:\n        raise ValueError(\"edges must be within the integral bin range\")\n\n    return np.diff(bins) * np.diff(edges) / 2. / np.pi\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins) * edges\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return bin_edges_to_graph(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return make_hist_context(bins, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _check_edges_increasing_1d(bins)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or len(seq) <= 0:\n        return False\n    return not is_source(seq) and is_fill_compute_seq(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    return not is_source(seq) and hasattr(seq,'source')\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and not is_source(seq))\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or len(seq) <= 0:\n        return False\n    return not is_source(seq) and is_fill_compute_seq(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    return not is_source(seq) and hasattr(seq,'source')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) \\\n        and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and not is_source(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if is_fill_compute_el(seq) or is_fill_request_el(seq):\n        return False\n    return not is_source(seq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return obj.type == vim.VirtualDiskFillDevice.FillSpec or \\\n        obj.type == vim.VirtualDiskFillRequestDevice.FillSpec\n", "def is_fill_request_el(obj):\n    return obj.type == vim.VirtualMachine and \\\n           obj.driver == 'eXe' and \\\n           obj.index is None and \\\n           obj.id is None and \\\n           obj.datacenter == 'local' and \\\n           obj.memorySizeMB is None\n", "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "def is_fill_request_el(obj):\n    return obj.type == vim.FillMode and obj.fill =='request'\n", "def is_fill_request_el(obj):\n    return obj.type == vim.HttpMethod.fill\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.method == \"request\"\n", "def is_fill_request_el(obj):\n    return obj.type == vim.HttpMethod.fill and obj.method == vim.Method.request\n", "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "def is_fill_request_el(obj):\n    return obj.type == vim.VirtualMachine and obj.driver == 'qemu'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.VirtualDiskFillDevice.FillSpec or \\\n        obj.type == vim.VirtualDiskFillRequestDevice.FillSpec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.VirtualMachine and \\\n           obj.driver == 'eXe' and \\\n           obj.index is None and \\\n           obj.id is None and \\\n           obj.datacenter == 'local' and \\\n           obj.memorySizeMB is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.FillMode and obj.fill =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.HttpMethod.fill\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.method == \"request\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.HttpMethod.fill and obj.method == vim.Method.request\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.__class__.__name__ in ['FillRequest', 'Request']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.type == vim.VirtualMachine and obj.driver == 'qemu'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return isinstance(obj, BaseExecutor) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, BaseRunner) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, BaseExecutor) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'FillCompute' and\n            obj.fill.__class__.__name__ == 'ComputeFill' and\n            obj.compute.__class__.__name__ == 'ComputeCompute')\n", "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'FillCompute' and\n            obj.fill.__class__.__name__ == 'ComputeFill' and\n            obj.compute.__class__.__name__ == 'ComputeCompute')\n", "def is_fill_compute_el(obj):\n    return obj.__class__.__name__ in ['FillCompute', 'Compute']\n", "def is_fill_compute_el(obj):\n    return obj.__class__.__name__ in ['Fill', 'Compute']\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, Fill) or\n        isinstance(obj, Compute)\n    )\n", "def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'Fill' and\n            obj.fill.__class__.__name__ == 'Compute')\n", "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'FillCompute' and\n            obj.fill.__class__.__name__ == 'ComputeFill' and\n            obj.compute.__class__.__name__ == 'ComputeCompute')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'FillCompute' and\n            obj.fill.__class__.__name__ == 'ComputeFill' and\n            obj.compute.__class__.__name__ == 'ComputeCompute')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return obj.__class__.__name__ in ['FillCompute', 'Compute']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return obj.__class__.__name__ in ['Fill', 'Compute']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, Fill) or\n        isinstance(obj, Compute)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (obj.__class__.__name__ == 'Fill' and\n            obj.fill.__class__.__name__ == 'Compute')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level > 0:\n        d2_keys = set(d2.keys())\n        d1_keys = set(d1.keys())\n        intersection = d1_keys.intersection\n    else:\n        intersection = d1.intersection\n\n    diff = {}\n    for key in intersection(d2_keys, d1_keys):\n        value = d1[key]\n        if value not in d2:\n            diff[key] = value\n        elif isinstance(d2[value], dict) and isinstance(d1[value], dict):\n            diff[key] = diff[key].difference(d2[value], level=level - 1)\n        else:\n            diff[key] = d1[key]\n\n    return diff\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n\n    d1_copy = d1.copy()\n    if level >= 0:\n        for key in d2:\n            if key not in d1:\n                d1_copy[key] = d2[key]\n            elif d1[key]!= d2[key]:\n                d1_copy[key] = d2[key]\n            elif d1[key] == _sentinel:\n                d1_copy[key] = d2[key]\n                break\n    else:\n        for key in d1:\n            d1_copy[key] = d1[key]\n\n    return d1_copy\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('d1 and d2 must be a dict but not %s' % type(d1))\n\n    if level == _sentinel:\n        level = max(d1.keys() | d2.keys()) + 1\n\n    d = defaultdict(list)\n\n    for k in d1:\n        if k in d2:\n            d[level].append(d1[k])\n        else:\n            d[level].append(k)\n\n    for k in d2:\n        if k not in d1:\n            d[level].append(d2[k])\n        else:\n            d[level].extend(d1[k])\n\n    return dict(d)\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n\n    if level < 0:\n        level = _sentinel\n\n    d2_copy = d2.copy()\n    keys = d1 if level == 0 else d1.keys()\n    for key in keys:\n        if key not in d2_copy:\n            yield d1[key]\n        else:\n            for other in iterate_recursively(d1[key], d2_copy, level - 1):\n                yield d1[key]\n", "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(0, len(d1) - len(d2))\n\n    d = defaultdict(list)\n\n    for k, v in dict(d1).items():\n        if k in d2 and v == d2[k]:\n            continue\n        elif k not in d2 and v!= v:\n            d[level].append(k)\n        elif k not in d2 or v!= d2[k]:\n            d[level + 1].append(k)\n\n    for k, v in dict(d2).items():\n        if k not in d1 and v!= v:\n            d[level + 1].append(k)\n\n    return dict(d)\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level >= 0:\n        d2_keys = set(d2.keys())\n        d1_keys = set(d1.keys())\n        return {k: d1.get(k, _sentinel) for k in d2_keys - d1_keys}\n    else:\n        return {k: d1.get(k, _sentinel) for k in d1}\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d = d1.copy()\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n                if level < 0:\n                    return d\n                elif level == 0 or (level > 0 and k in d1):\n                    level = max(level, 1)\n", "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel in d2:\n        return d2\n\n    d = defaultdict(list)\n\n    for key in d1:\n        if key not in d2:\n            d[level].append(key)\n\n    for key in d2:\n        if key not in d1:\n            d[level + 1].append(key)\n\n    return dict(d)\n", "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n\n    d = d1.copy()\n    keys = d1.keys()\n\n    if level < 0:\n        for k in d2:\n            if k not in d1:\n                d.pop(k)\n                keys.remove(k)\n    else:\n        for k in d2:\n            if k not in d1:\n                d[level] = d1.pop(k)\n                keys.remove(k)\n            else:\n                d1[level] = k\n\n    for k in keys:\n        d1[k] = intersection(d1[k], d2.pop(k))\n\n    return d\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level == 0:\n        return dict(d1)\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    diff = dict()\n\n    for key in d1_keys - d2_keys:\n        diff[key] = d1[key] if key in d1 else _sentinel\n\n    for key in d2_keys - d1_keys:\n        diff[key] = d2[key] if key in d2 else _sentinel\n\n    for key in d1_keys & d2_keys:\n        if d1[key] == d2[key]:\n            continue\n        elif d1[key] > d2[key]:\n            diff[key] = d1[key]\n        else:\n            diff[key] = d2[key]\n\n    return diff\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level > 0:\n        d2_keys = set(d2.keys())\n        d1_keys = set(d1.keys())\n        intersection = d1_keys.intersection\n    else:\n        intersection = d1.intersection\n\n    diff = {}\n    for key in intersection(d2_keys, d1_keys):\n        value = d1[key]\n        if value not in d2:\n            diff[key] = value\n        elif isinstance(d2[value], dict) and isinstance(d1[value], dict):\n            diff[key] = diff[key].difference(d2[value], level=level - 1)\n        else:\n            diff[key] = d1[key]\n\n    return diff\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n\n    d1_copy = d1.copy()\n    if level >= 0:\n        for key in d2:\n            if key not in d1:\n                d1_copy[key] = d2[key]\n            elif d1[key]!= d2[key]:\n                d1_copy[key] = d2[key]\n            elif d1[key] == _sentinel:\n                d1_copy[key] = d2[key]\n                break\n    else:\n        for key in d1:\n            d1_copy[key] = d1[key]\n\n    return d1_copy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError('d1 and d2 must be a dict but not %s' % type(d1))\n\n    if level == _sentinel:\n        level = max(d1.keys() | d2.keys()) + 1\n\n    d = defaultdict(list)\n\n    for k in d1:\n        if k in d2:\n            d[level].append(d1[k])\n        else:\n            d[level].append(k)\n\n    for k in d2:\n        if k not in d1:\n            d[level].append(d2[k])\n        else:\n            d[level].extend(d1[k])\n\n    return dict(d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict.')\n\n    if level < 0:\n        level = _sentinel\n\n    d2_copy = d2.copy()\n    keys = d1 if level == 0 else d1.keys()\n    for key in keys:\n        if key not in d2_copy:\n            yield d1[key]\n        else:\n            for other in iterate_recursively(d1[key], d2_copy, level - 1):\n                yield d1[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(0, len(d1) - len(d2))\n\n    d = defaultdict(list)\n\n    for k, v in dict(d1).items():\n        if k in d2 and v == d2[k]:\n            continue\n        elif k not in d2 and v!= v:\n            d[level].append(k)\n        elif k not in d2 or v!= d2[k]:\n            d[level + 1].append(k)\n\n    for k, v in dict(d2).items():\n        if k not in d1 and v!= v:\n            d[level + 1].append(k)\n\n    return dict(d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level >= 0:\n        d2_keys = set(d2.keys())\n        d1_keys = set(d1.keys())\n        return {k: d1.get(k, _sentinel) for k in d2_keys - d1_keys}\n    else:\n        return {k: d1.get(k, _sentinel) for k in d1}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d = d1.copy()\n        for k in d2:\n            if k not in d1:\n                d[k] = d2[k]\n                if level < 0:\n                    return d\n                elif level == 0 or (level > 0 and k in d1):\n                    level = max(level, 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel in d2:\n        return d2\n\n    d = defaultdict(list)\n\n    for key in d1:\n        if key not in d2:\n            d[level].append(key)\n\n    for key in d2:\n        if key not in d1:\n            d[level + 1].append(key)\n\n    return dict(d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if _sentinel in d1:\n        return d1\n    if _sentinel not in d2:\n        return d2\n\n    d = d1.copy()\n    keys = d1.keys()\n\n    if level < 0:\n        for k in d2:\n            if k not in d1:\n                d.pop(k)\n                keys.remove(k)\n    else:\n        for k in d2:\n            if k not in d1:\n                d[level] = d1.pop(k)\n                keys.remove(k)\n            else:\n                d1[level] = k\n\n    for k in keys:\n        d1[k] = intersection(d1[k], d2.pop(k))\n\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n\n    if level == 0:\n        return dict(d1)\n\n    d1_keys = set(d1.keys())\n    d2_keys = set(d2.keys())\n    diff = dict()\n\n    for key in d1_keys - d2_keys:\n        diff[key] = d1[key] if key in d1 else _sentinel\n\n    for key in d2_keys - d1_keys:\n        diff[key] = d2[key] if key in d2 else _sentinel\n\n    for key in d1_keys & d2_keys:\n        if d1[key] == d2[key]:\n            continue\n        elif d1[key] > d2[key]:\n            diff[key] = d1[key]\n        else:\n            diff[key] = d2[key]\n\n    return diff\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    # TODO: use hist.fill instead\n    if coord > self.bins or coord < 0:\n        raise ValueError(\n            \"Coordinate {} outside histogram edges {}\".format(coord, self.edges)\n        )\n    if coord in self:\n        self[coord] += weight\n    else:\n        self[coord] = weight\n", "def fill(self, coord, weight=1):\n    ctx = self._update_context({coord: weight})\n    self.bins[coord] = ctx.new_bins(self.edges[coord])\n", "def fill(self, coord, weight=1):\n    if self.bins is None:\n        raise ValueError('histogram bins not set')\n    self.data[coord] = weight\n", "def fill(self, coord, weight=1):\n    # fill histogram at *coord* with the given *weight*\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    if self.edges[-1] <= coord < self.edges[0]:\n        # edges are outside the histogram\n        self._update_context({coord: weight})\n    else:\n        # edges are inside the histogram\n        self._update_context({coord: 0})\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    bins = self.edges[1:] - self.edges[:-1]\n    context = _FillContext(coord, bins, weight)\n    self._update_context(context)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO: use hist.fill instead\n    if coord > self.bins or coord < 0:\n        raise ValueError(\n            \"Coordinate {} outside histogram edges {}\".format(coord, self.edges)\n        )\n    if coord in self:\n        self[coord] += weight\n    else:\n        self[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    ctx = self._update_context({coord: weight})\n    self.bins[coord] = ctx.new_bins(self.edges[coord])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.bins is None:\n        raise ValueError('histogram bins not set')\n    self.data[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # fill histogram at *coord* with the given *weight*\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges[-1] <= coord < self.edges[0]:\n        # edges are outside the histogram\n        self._update_context({coord: weight})\n    else:\n        # edges are inside the histogram\n        self._update_context({coord: 0})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    bins = self.edges[1:] - self.edges[:-1]\n    context = _FillContext(coord, bins, weight)\n    self._update_context(context)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not _label_key_pattern.match(key) or not _label_value_pattern.match(value):\n                raise ValidationError(f\"{key} does not match the regular expressions {_label_key_pattern.pattern} and {_label_value_pattern.pattern}\")\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(values, dict):\n            raise ValidationError(\"labels must contain a dictionary\")\n\n        for value in values.values():\n            if not _label_key_pattern.match(key) or not _label_value_pattern.match(value):\n                raise ValidationError(\"labels must contain a key and value pair\")\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        for regex, expected in zip(_label_key_pattern, value):\n            if not regex.match(key):\n                raise ValidationError(f\"Invalid label key: '{key}'. Expected key: '{expected}'\")\n            if not regex.match(expected):\n                raise ValidationError(f\"Invalid label value: '{expected}'. Expected value: '{value}'\")\n", "def _validate_labels(labels):\n    for name, regex in labels.items():\n        if name not in _label_key_pattern:\n            raise ValidationError(f\"'{name}' is not a valid label key\")\n        for key, value in labels.get(name, {}).items():\n            if not _label_key_regex.match(key):\n                raise ValidationError(f\"'{name}' key '{key}' does not match the regex '{_label_key_pattern[1]}'\")\n            if not _label_value_regex.match(value):\n                raise ValidationError(f\"'{name}' value '{value}' does not match the regex '{_label_value_pattern[2]}'\")\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            regex = _label_value_regex.copy()\n            for value in values.values():\n                regex.fullmatch(value)\n        else:\n            regex = _label_key_regex.copy()\n            regex.fullmatch(key)\n\n        for err in regex.errors:\n            err.regex = regex\n            raise err\n", "def _validate_labels(labels):\n    errors = []\n    for key, values in labels.items():\n        if not isinstance(key, str):\n            errors.append(\n                ValidationError(\n                    f\"'{key}' key must be a string. Got: {type(key)}\"\n                )\n            )\n            continue\n\n        for value in values:\n            if not _get_resource_name_regex().match(value):\n                errors.append(ValidationError(f\"'{value}' is not a regular expression.\"))\n                continue\n\n            try:\n                _get_resource_name_regex().match(value)\n            except Exception as exc:\n                errors.append(exc)\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if isinstance(value, str):\n                try:\n                    match = _label_key_pattern.match(value)\n                    if not match:\n                        raise ValidationError(f\"'{key}' is not a valid label key\")\n                except (TypeError, MismatchError):\n                    raise ValidationError(f\"'{key}' is not a valid label key\")\n\n            if isinstance(value, list):\n                for match in _label_value_pattern.findall(value):\n                    match = _label_value_regex.sub(r\"\\1\", match)\n                    if match:\n                        raise ValidationError(f\"'{key}' contains invalid regex\")\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    \"Keys in the labels should be strings, \"\n                    \"got {} instead.\".format(type(value).__name__))\n            for pattern, error in _label_key_pattern.items():\n                if not re.match(pattern, key):\n                    raise ValidationError(error)\n            for pattern, error in _label_value_pattern.items():\n                if not re.match(pattern, value):\n                    raise ValidationError(error)\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(values, (list, tuple)):\n            values = [values]\n        for value in values:\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    f\"{key!r} is not a valid label key or label value.\"\n                )\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    f\"{value!r} is not a valid label value.\"\n                )\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            key = resource_name_pattern.sub(r'[\\1]', key)\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(f\"{key}: expected string or bytes-like object, got {type(value)}\")\n            _validate_resource_name(key, value)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not _label_key_pattern.match(key) or not _label_value_pattern.match(value):\n                raise ValidationError(f\"{key} does not match the regular expressions {_label_key_pattern.pattern} and {_label_value_pattern.pattern}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(values, dict):\n            raise ValidationError(\"labels must contain a dictionary\")\n\n        for value in values.values():\n            if not _label_key_pattern.match(key) or not _label_value_pattern.match(value):\n                raise ValidationError(\"labels must contain a key and value pair\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        for regex, expected in zip(_label_key_pattern, value):\n            if not regex.match(key):\n                raise ValidationError(f\"Invalid label key: '{key}'. Expected key: '{expected}'\")\n            if not regex.match(expected):\n                raise ValidationError(f\"Invalid label value: '{expected}'. Expected value: '{value}'\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for name, regex in labels.items():\n        if name not in _label_key_pattern:\n            raise ValidationError(f\"'{name}' is not a valid label key\")\n        for key, value in labels.get(name, {}).items():\n            if not _label_key_regex.match(key):\n                raise ValidationError(f\"'{name}' key '{key}' does not match the regex '{_label_key_pattern[1]}'\")\n            if not _label_value_regex.match(value):\n                raise ValidationError(f\"'{name}' value '{value}' does not match the regex '{_label_value_pattern[2]}'\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            regex = _label_value_regex.copy()\n            for value in values.values():\n                regex.fullmatch(value)\n        else:\n            regex = _label_key_regex.copy()\n            regex.fullmatch(key)\n\n        for err in regex.errors:\n            err.regex = regex\n            raise err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, values in labels.items():\n        if not isinstance(key, str):\n            errors.append(\n                ValidationError(\n                    f\"'{key}' key must be a string. Got: {type(key)}\"\n                )\n            )\n            continue\n\n        for value in values:\n            if not _get_resource_name_regex().match(value):\n                errors.append(ValidationError(f\"'{value}' is not a regular expression.\"))\n                continue\n\n            try:\n                _get_resource_name_regex().match(value)\n            except Exception as exc:\n                errors.append(exc)\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if isinstance(value, str):\n                try:\n                    match = _label_key_pattern.match(value)\n                    if not match:\n                        raise ValidationError(f\"'{key}' is not a valid label key\")\n                except (TypeError, MismatchError):\n                    raise ValidationError(f\"'{key}' is not a valid label key\")\n\n            if isinstance(value, list):\n                for match in _label_value_pattern.findall(value):\n                    match = _label_value_regex.sub(r\"\\1\", match)\n                    if match:\n                        raise ValidationError(f\"'{key}' contains invalid regex\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(\n                    \"Keys in the labels should be strings, \"\n                    \"got {} instead.\".format(type(value).__name__))\n            for pattern, error in _label_key_pattern.items():\n                if not re.match(pattern, key):\n                    raise ValidationError(error)\n            for pattern, error in _label_value_pattern.items():\n                if not re.match(pattern, value):\n                    raise ValidationError(error)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if not isinstance(values, (list, tuple)):\n            values = [values]\n        for value in values:\n            if not _label_key_pattern.match(key):\n                raise ValidationError(\n                    f\"{key!r} is not a valid label key or label value.\"\n                )\n            if not _label_value_pattern.match(value):\n                raise ValidationError(\n                    f\"{value!r} is not a valid label value.\"\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            key = resource_name_pattern.sub(r'[\\1]', key)\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(f\"{key}: expected string or bytes-like object, got {type(value)}\")\n            _validate_resource_name(key, value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    # type: () -> Tuple[re.Pattern, re.Pattern]\n    \"\"\"Build or return the regular expressions that are used to validate the\n    name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing serializable\n            datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n    \"\"\"\n    if not _label_key_pattern.match(KrakeConfig.namespace):\n        return _label_key_regex, _label_key_regex\n\n    return _get_labels_regex(), _get_resource_name_regex()\n", "def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"Build or return the regular expressions that are used to validate the\n        name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing\n            serializable datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n            _validate_resource_name(name)\n            _validate_resource_namespace(namespace)\n\n    \"\"\"\n    return _get_labels_regex() | _get_resource_name_regex()\n", "def _get_resource_name_regex():\n    namespace = \"/meta/\"\n    if not namespace in _label_key_pattern.patterns:\n        _label_key_pattern.add_pattern(namespace, _label_key_regex)\n    if not namespace in _label_value_pattern.patterns:\n        _label_value_pattern.add_pattern(namespace, _label_value_regex)\n    return _label_key_pattern.patterns[namespace]\n", "def _get_resource_name_regex():\n    if not _resource_name_regex:\n        _resource_name_regex = re.compile(r\"^((?P<label>(?:[a-zA-Z_][a-zA-Z_0-9]*)|\"\n                                          r\"(?P<name>[a-zA-Z_][a-zA-Z_0-9]*))\\.)+\"\n                                          r\"(?P<resource>[a-zA-Z_][a-zA-Z_0-9]*)$\")\n    return _resource_name_regex\n", "def _get_resource_name_regex():\n    return get_regex(_RESOURCE_NAME_PATTERN)\n", "def _get_resource_name_regex():\n    return get_regex(KrakeConstants.NAME_PATTERN)\n", "def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"Build or return the regular expressions that are used to validate the\n        name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing redatetime\n            serialIZable datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n    \"\"\"\n    if _get_resource_name_regex.pattern is None:\n        _get_resource_name_regex.pattern = _get_labels_regex.pattern = re.compile(\n            r\"^(?P<{label_key}>[a-z0-9_]+)(?P<{label_value}>[a-z0-9_]+)$\".format(\n                label_key=_label_key_pattern.value,\n                label_value=_label_value_pattern.value\n        ", "def _get_resource_name_regex():\n    return getattr(\n        settings,\n        'KAKE_RESOURCE_NAME_REGEX',\n        re.compile(_label_key_pattern),\n    )\n", "def _get_resource_name_regex():\n    return get_regex(_get_resource_name_pattern())\n", "def _get_resource_name_regex():\n    return get_resource_name_regex()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    # type: () -> Tuple[re.Pattern, re.Pattern]\n    \"\"\"Build or return the regular expressions that are used to validate the\n    name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing serializable\n            datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n    \"\"\"\n    if not _label_key_pattern.match(KrakeConfig.namespace):\n        return _label_key_regex, _label_key_regex\n\n    return _get_labels_regex(), _get_resource_name_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"Build or return the regular expressions that are used to validate the\n        name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing\n            serializable datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n            _validate_resource_name(name)\n            _validate_resource_namespace(namespace)\n\n    \"\"\"\n    return _get_labels_regex() | _get_resource_name_regex()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    namespace = \"/meta/\"\n    if not namespace in _label_key_pattern.patterns:\n        _label_key_pattern.add_pattern(namespace, _label_key_regex)\n    if not namespace in _label_value_pattern.patterns:\n        _label_value_pattern.add_pattern(namespace, _label_value_regex)\n    return _label_key_pattern.patterns[namespace]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    if not _resource_name_regex:\n        _resource_name_regex = re.compile(r\"^((?P<label>(?:[a-zA-Z_][a-zA-Z_0-9]*)|\"\n                                          r\"(?P<name>[a-zA-Z_][a-zA-Z_0-9]*))\\.)+\"\n                                          r\"(?P<resource>[a-zA-Z_][a-zA-Z_0-9]*)$\")\n    return _resource_name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_regex(_RESOURCE_NAME_PATTERN)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_regex(KrakeConstants.NAME_PATTERN)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"Build or return the regular expressions that are used to validate the\n        name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name. with import dataclasses enum typing redatetime\n            serialIZable datetime file _label_key_pattern\n            _label_value_pattern\n            _label_key_regex\n            _label_value_regex\n            _get_labels_regex()\n    \"\"\"\n    if _get_resource_name_regex.pattern is None:\n        _get_resource_name_regex.pattern = _get_labels_regex.pattern = re.compile(\n            r\"^(?P<{label_key}>[a-z0-9_]+)(?P<{label_value}>[a-z0-9_]+)$\".format(\n                label_key=_label_key_pattern.value,\n                label_value=_label_value_pattern.value\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return getattr(\n        settings,\n        'KAKE_RESOURCE_NAME_REGEX',\n        re.compile(_label_key_pattern),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_regex(_get_resource_name_pattern())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return get_resource_name_regex()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    _validate_resource_name(value)\n    _validate_labels(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_labels(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name_regex(value)\n    _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value)\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(value)\n    _validate_resource_namespace(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name_pattern(key)\n", "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "def validate_key(key):\n    _validate_resource_name(key)\n", "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "def validate_key(key):\n    _validate_resource_name_regex(_resource_name_pattern, key)\n", "def validate_key(key):\n    _validate_labels(_get_labels(key))\n    _validate_resource_name_regex(_get_resource_name_regex(key))\n", "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n", "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "def validate_key(key):\n    _validate_labels(key.split(\"/\"))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name_pattern(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_resource_name(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_resource_name_regex(_resource_name_pattern, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(_get_labels(key))\n    _validate_resource_name_regex(_get_resource_name_regex(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(get_labels(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(key)\n    _validate_resource_name(key)\n    _validate_resource_namespace(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _validate_labels(key.split(\"/\"))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'manifest': manifest_dict}\n\n    return {'observer': manifest_dict}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below\n    part. For a partial Kubernetes resource, this function is called recursively to generate part of a partial\n    Kubernetes resource and replace all non-list and non-dict values by None.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource first_level (bool, optional): If True, indicates that the\n            dictionary represents the whole observer_schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    \"\"\"\n    if manifest_dict.get('kind') == 'Config':\n        return generate_default_observer_schema_dict(manifest_dict.get('data'), first_level=True)\n    else:\n        return {k: v for k, v in manifest_dict.items() if not isinstance(v, list) and not isinstance(v, dict)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        logger.error('Observer schema cannot be generated for a resource without manifest.')\n        raise ValueError('Observer schema cannot be generated for a resource without manifest.')\n    manifest_dict.update({'manifest': None})\n    manifest_dict.update({'apiVersion': 'v1'})\n    manifest_dict.update({'kind': 'observer'})\n    return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    return {'$ref': '#/definitions/ObserverSchema/{}'.format(manifest_dict['name'])}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    manifest_list = manifest_dict.get('manifestList', None)\n    if manifest_list is not None:\n        manifest_dict = generate_default_observer_schema_list(manifest_list)\n\n    manifest_dict.update({\n       'manifestVersion': 'v1',\n        'kind': 'Observer',\n       'metadata': {\n            'name': manifest_dict.get('name'),\n            'labels': manifest_dict.get('labels', None),\n        },\n    })\n    if first_level:\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if isinstance(manifest_dict, dict):\n        return {\n            k: generate_default_observer_schema_dict(v, first_level=first_level)\n            for k, v in manifest_dict.items()\n        }\n    if isinstance(manifest_dict, list):\n        return [\n            generate_default_observer_schema_dict(v, first_level=first_level)\n            for v in manifest_dict\n        ]\n    if first_level:\n        return {\n            k: v if not isinstance(v, dict) else generate_default_observer_schema_dict(v, first_level=False)\n            for k, v in manifest_dict.items()\n        }\n    return None\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector')\n            },\n           'spec': manifest_dict.get('spec'),\n           'status': manifest_dict.get('status')\n        }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n            'type': None,\n           'status': None,\n           'subject': None\n        }\n\n    return {\n       'metadata': generate_default_observer_schema_dict(manifest_dict.get('metadata', {})),\n       'spec': generate_default_observer_schema_dict(manifest_dict.get('spec', {})),\n        'type': manifest_dict.get('type', None),\n       'status': manifest_dict.get('status', None),\n       'subject': manifest_dict.get('subject', None),\n    }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = {}\n        for k, v in manifest_dict.items():\n            if isinstance(v, dict):\n                schema[k] = generate_default_observer_schema_dict(v, True)\n            else:\n                schema[k] = None\n        return schema\n    else:\n        return {'observer': manifest_dict.get('observer', None)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n    else:\n        return copy.deepcopy(manifest_dict)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'manifest': manifest_dict}\n\n    return {'observer': manifest_dict}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    Recursively generates part of a default ``observer_schema`` from part of a Kubernetes resource, defined below\n    part. For a partial Kubernetes resource, this function is called recursively to generate part of a partial\n    Kubernetes resource and replace all non-list and non-dict values by None.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resource first_level (bool, optional): If True, indicates that the\n            dictionary represents the whole observer_schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    \"\"\"\n    if manifest_dict.get('kind') == 'Config':\n        return generate_default_observer_schema_dict(manifest_dict.get('data'), first_level=True)\n    else:\n        return {k: v for k, v in manifest_dict.items() if not isinstance(v, list) and not isinstance(v, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        logger.error('Observer schema cannot be generated for a resource without manifest.')\n        raise ValueError('Observer schema cannot be generated for a resource without manifest.')\n    manifest_dict.update({'manifest': None})\n    manifest_dict.update({'apiVersion': 'v1'})\n    manifest_dict.update({'kind': 'observer'})\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if first_level:\n        return {'$ref': '#/definitions/ObserverSchema'}\n    return {'$ref': '#/definitions/ObserverSchema/{}'.format(manifest_dict['name'])}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    manifest_list = manifest_dict.get('manifestList', None)\n    if manifest_list is not None:\n        manifest_dict = generate_default_observer_schema_list(manifest_list)\n\n    manifest_dict.update({\n       'manifestVersion': 'v1',\n        'kind': 'Observer',\n       'metadata': {\n            'name': manifest_dict.get('name'),\n            'labels': manifest_dict.get('labels', None),\n        },\n    })\n    if first_level:\n        return manifest_dict\n    else:\n        return generate_default_observer_schema_list(manifest_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n    if isinstance(manifest_dict, dict):\n        return {\n            k: generate_default_observer_schema_dict(v, first_level=first_level)\n            for k, v in manifest_dict.items()\n        }\n    if isinstance(manifest_dict, list):\n        return [\n            generate_default_observer_schema_dict(v, first_level=first_level)\n            for v in manifest_dict\n        ]\n    if first_level:\n        return {\n            k: v if not isinstance(v, dict) else generate_default_observer_schema_dict(v, first_level=False)\n            for k, v in manifest_dict.items()\n        }\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n           'status': {}\n        }\n    else:\n        return {\n           'metadata': {\n                'name': manifest_dict.get('name'),\n                'namespace': manifest_dict.get('namespace'),\n                'apiVersion': manifest_dict.get('apiVersion'),\n                'kind': manifest_dict.get('kind'),\n               'selector': manifest_dict.get('selector')\n            },\n           'spec': manifest_dict.get('spec'),\n           'status': manifest_dict.get('status')\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {},\n           'spec': {},\n            'type': None,\n           'status': None,\n           'subject': None\n        }\n\n    return {\n       'metadata': generate_default_observer_schema_dict(manifest_dict.get('metadata', {})),\n       'spec': generate_default_observer_schema_dict(manifest_dict.get('spec', {})),\n        'type': manifest_dict.get('type', None),\n       'status': manifest_dict.get('status', None),\n       'subject': manifest_dict.get('subject', None),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = {}\n        for k, v in manifest_dict.items():\n            if isinstance(v, dict):\n                schema[k] = generate_default_observer_schema_dict(v, True)\n            else:\n                schema[k] = None\n        return schema\n    else:\n        return {'observer': manifest_dict.get('observer', None)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n    else:\n        return copy.deepcopy(manifest_dict)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with inspect logging asyncio collections so secrets operator\n    collections base64 console enum functools datetime random copy\n    logger (logging.Logger): logger to log messages to\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(app, response)\n    update_last_observed_manifest_dict(observed_resource, respon", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections\n        secrets operator base64 collections secrets so file logger aiohttp asyncio secrets\n        enum functools datetime yarl file logger so listen and update_last_applied_manifest_from_resp\n        resp\n        functools\n        collections.abc.MutableMapping\n    \"\"\"\n    update_last_applied_manifest_dict(last_applied_manifest, observer_schema, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema`` response\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they are\n        not yet present with import inspect logging asyncio collections secret so yarl\n        file logger\n        secrets operator base64 console enum functools datetime random copy logging\n        aiohttp asyncio secrets enum functools krake datetime random copy\n        logger\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n   ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections secret so base64\n                                                                                                                                                                                                                       ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n        through all observed fields, and initialized their value in last_applied_manifest\n        if their values are not yet present with import inspect logging aiohttp asyncio\n        secrets operator base64 collections secrets so function goes through\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app, response)\n        update_last_observed_manifest_from_resp(app, response)\n    \"\"", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated from the Kubernetes API.\n        This function gothrough all observed fields, and initialized\n        their value in last_applied_manifest if they are not yet\n        present with import inspect logging asyncio collections\n        secrets so boto3 collections secrets so boto3 aiohttp secrets\n        enum functools datetime random copy\n\n        boto3 secrets enum functools krake datetime random\n        copy\n    \"\"\"\n    return update_last_applied_manifest_from_resp(\n        last_applied_manifest, observer_schema, response\n    )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections so\n    base64 collections secret operator secret so yarl file logger\n        collections enum\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema,\n        response)\n    update_last_observed_manifest_from_resp(app, response)\n    \"\"\"\n    return update_last_applie", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if they are not yet present with import inspect logging asyncio collections\n            secrets operator base64 string function collections enum functools datetime\n            yarl file logger\n            listen\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app,response)\n    \"", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with inspect logging asyncio collections secret operator\n        base64 collections soup file logger\n        secrets operator secret functools generator secret functools yarl file logger\n        listen (update_last_applied_manifest_from_resp)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_observed_manifest_from_resp(app,", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` if they are not\n    yet present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` dict\n\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n    observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_res"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized their value in last_applied_manifest\n    if they are not yet present with inspect logging asyncio collections so secrets operator\n    collections base64 console enum functools datetime random copy\n    logger (logging.Logger): logger to log messages to\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(app, response)\n    update_last_observed_manifest_dict(observed_resource, respon", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections\n        secrets operator base64 collections secrets so file logger aiohttp asyncio secrets\n        enum functools datetime yarl file logger so listen and update_last_applied_manifest_from_resp\n        resp\n        functools\n        collections.abc.MutableMapping\n    \"\"\"\n    update_last_applied_manifest_dict(last_applied_manifest, observer_schema, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema`` response\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they are\n        not yet present with import inspect logging asyncio collections secret so yarl\n        file logger\n        secrets operator base64 console enum functools datetime random copy logging\n        aiohttp asyncio secrets enum functools krake datetime random copy\n        logger\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n        This function go through all observed fields, and initialized their value in last_applied_manifest\n        if they are not yet present with import inspect logging asyncio collections secret so base64\n                                                                                                                                                                                                                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n        through all observed fields, and initialized their value in last_applied_manifest\n        if their values are not yet present with import inspect logging aiohttp asyncio\n        secrets operator base64 collections secrets so function goes through\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app, response)\n        update_last_observed_manifest_from_resp(app, response)\n    \"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated from the Kubernetes API.\n        This function gothrough all observed fields, and initialized\n        their value in last_applied_manifest if they are not yet\n        present with import inspect logging asyncio collections\n        secrets so boto3 collections secrets so boto3 aiohttp secrets\n        enum functools datetime random copy\n\n        boto3 secrets enum functools krake datetime random\n        copy\n    \"\"\"\n    return update_last_applied_manifest_from_resp(\n        last_applied_manifest, observer_schema, response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n            being updated\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections so\n    base64 collections secret operator secret so yarl file logger\n        collections enum\n\n    update_last_applied_manifest_list_from_resp(last_applied_manifest,\n        observer_schema, response)\n\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema,\n        response)\n    update_last_observed_manifest_from_resp(app, response)\n    \"\"\"\n    return update_last_applie", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function goes\n            through all observed fields, and initialized their value in last_applied_manifest\n            if they are not yet present with import inspect logging asyncio collections\n            secrets operator base64 string function collections enum functools datetime\n            yarl file logger\n            listen\n        update_last_applied_manifest_list_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_applied_manifest_from_resp(last_applied_manifest,observer_schema,response)\n        update_last_observed_manifest_from_resp(app,response)\n    \"", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API. This function gothrough\n        all observed fields, and initialized their value in last_applied_manifest if they\n        are not yet present with inspect logging asyncio collections secret operator\n        base64 collections soup file logger\n        secrets operator secret functools generator secret functools yarl file logger\n        listen (update_last_applied_manifest_from_resp)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n        update_last_observed_manifest_from_resp(app,", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest``\n        being updated observer_schema (list): partial ``observer_schema``\n        response (list): partial ``response``\n\n    This function goes through all observed fields, and initialized\n    their value in last_applied_manifest if they are not yet\n    present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` if they are not\n    yet present with import inspect logging asyncio collections secret\n    switches to partial ``last_applied_manifest`` dict\n\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n    observer_schema, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_res", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in observer_schema:\n        if key in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], observer_schema[key], response)\n        else:\n            last_applied_manifest[key] = response[key]\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], response[field])\n        else:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], None)\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    Returns:\n        dict: updated ``last_applied_manifest``\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if response[key]!= observer_schema[key]:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema``\n            being updated\n        response (dict): partial ``response``\n            being updated\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes\n            response\n\n    Returns:\n        dict: updated ``last_applied_manifest`` dict\n    \"\"\"\n    for key in observer_schema:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[key]\n        else:\n            last_applied_manifest[key] = update_last_applied_manifest_dict_from_resp(\n                last_applied", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    This function is called recursively to update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if the observed\n            field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    update_last_applied_manifest_list_from_resp(\n        last_applied_manifest=last_applied_manifest, observer_schema=observer_schema, response=response\n    )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = {}\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if\n            the observed field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n        Yields:\n            dict: updated ``last_applied_manifest``\n    \"\"\"\n    for field, value in response.items():\n        if field not in observer_schema:\n            continue\n\n        setattr(last_applied_manifest, field, value)\n        yield from update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schem", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema`` being updated\n            with import inspect logging asyncio collections secret so base64\n            conversion secrets operator base64 contextlib enum functools\n            syncio collections secret so collections secret so listen\n            function base64 conversion secrets operator collections secret\n            so collections secret so collections secret so logger\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes\n            response\n\n    \"\"\"\n    return update_last_applied_manifest_dict_from_resp(\n        last_applied_manifest=last_applied_manifest,\n        observer_schema", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n        raises: KeyError: If the observed field is not present in the Kubernetes response\n\n        Returns:\n            dict: updated ``last_applied_manifest``\n\n    \"\"\"\n    for key in observer_schema:\n        if key not in response:\n            continue\n\n        if isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema[key], response[key]\n            )\n        else:\n            last_applied_manifest[ke"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key in observer_schema:\n        if key in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], observer_schema[key], response)\n        else:\n            last_applied_manifest[key] = response[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial ``response``\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], response[field])\n        else:\n            setattr(last_applied_manifest[field], observer_schema[field][\"name\"], None)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    Returns:\n        dict: updated ``last_applied_manifest``\n    \"\"\"\n    for key in response:\n        if key not in observer_schema:\n            continue\n        if response[key]!= observer_schema[key]:\n            last_applied_manifest[key] = response[key]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema``\n            being updated\n        response (dict): partial ``response``\n            being updated\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes\n            response\n\n    Returns:\n        dict: updated ``last_applied_manifest`` dict\n    \"\"\"\n    for key in observer_schema:\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = observer_schema[key]\n        else:\n            last_applied_manifest[key] = update_last_applied_manifest_dict_from_resp(\n                last_applied", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    This function is called recursively to update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if the observed\n            field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    update_last_applied_manifest_list_from_resp(\n        last_applied_manifest=last_applied_manifest, observer_schema=observer_schema, response=response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = {}\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API. Raises KeyError if\n            the observed field is not present in the Kubernetes response\n\n        Raises:\n            KeyError: If the observed field is not present in the Kubernetes response\n\n        Yields:\n            dict: updated ``last_applied_manifest``\n    \"\"\"\n    for field, value in response.items():\n        if field not in observer_schema:\n            continue\n\n        setattr(last_applied_manifest, field, value)\n        yield from update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schem", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    \"\"\"\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        else:\n            last_applied_manifest[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial\n    Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema`` being updated\n            with import inspect logging asyncio collections secret so base64\n            conversion secrets operator base64 contextlib enum functools\n            syncio collections secret so collections secret so listen\n            function base64 conversion secrets operator collections secret\n            so collections secret so collections secret so logger\n\n    Raises:\n        KeyError:\n            If the observed field is not present in the Kubernetes\n            response\n\n    \"\"\"\n    return update_last_applied_manifest_dict_from_resp(\n        last_applied_manifest=last_applied_manifest,\n        observer_schema", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Recursively update a partial ``last_applied_manifest`` from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n        raises: KeyError: If the observed field is not present in the Kubernetes response\n\n        Returns:\n            dict: updated ``last_applied_manifest``\n\n    \"\"\"\n    for key in observer_schema:\n        if key not in response:\n            continue\n\n        if isinstance(response[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest, observer_schema[key], response[key]\n            )\n        else:\n            last_applied_manifest[ke", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    spec = app.kubernetes_spec\n    if spec.observer_schema is None:\n        return\n    logger.debug(\"Generating default observer schema for %s\", spec.name)\n    manifest_dict = generate_observer_schema_dict(\n        spec.observer_schema, app.kubernetes_spec.api_version\n    )\n    update_last_observed_manifest_dict_from_resp(\n        last_applied_manifest=spec.last_applied_manifest,\n        observer_schema=manifest_dict,\n        response=spec.last_response,\n    )\n", "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        logger.debug('KubernetesResourceObserver is specified, generating default schema')\n        return generate_default_observer_schema_dict(app)\n    else:\n        logger.debug('No KubernetesResourceObserver is specified, ignoring the default schema')\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    logger.debug('Generated default observer schema: {}'.format(manifest_dict))\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    spec = app.spec.to_dict()\n    manifest_dict = app.spec.to_manifest()\n    logger.debug('Generating default observer schema')\n    observer_schema = generate_observer_schema(spec, manifest_dict)\n    return observer_schema\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    return update_last_applied_manifest_dict_from_resp(\n        manifest_dict, app.manifest, response=app.response\n    )\n", "def generate_default_observer_schema(app):\n    return generate_observer_schema(app, create=True)\n", "def generate_default_observer_schema(app):\n    spec = app.config.get('Kubernetes', {}).get('observer_schema')\n    if spec is not None:\n        return generate_observer_schema_dict(spec)\n", "def generate_default_observer_schema(app):\n    manifest_spec = app.spec.observer_schema\n    if manifest_spec is None:\n        return\n\n    logger.debug(\"Generating default observer schema from spec: %s\",\n                 manifest_spec)\n    return generate_observer_schema(manifest_spec)\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    update_last_observed_manifest_dict_from_resp(manifest_dict, app, response=True)\n    update_last_applied_manifest_dict_from_resp(manifest_dict, app, response=True)\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    manifest = utils.load_yaml_from_path(app.config.get('Kubernetes','manifest'))\n    return generate_observer_schema(manifest)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    spec = app.kubernetes_spec\n    if spec.observer_schema is None:\n        return\n    logger.debug(\"Generating default observer schema for %s\", spec.name)\n    manifest_dict = generate_observer_schema_dict(\n        spec.observer_schema, app.kubernetes_spec.api_version\n    )\n    update_last_observed_manifest_dict_from_resp(\n        last_applied_manifest=spec.last_applied_manifest,\n        observer_schema=manifest_dict,\n        response=spec.last_response,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver'):\n        logger.debug('KubernetesResourceObserver is specified, generating default schema')\n        return generate_default_observer_schema_dict(app)\n    else:\n        logger.debug('No KubernetesResourceObserver is specified, ignoring the default schema')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    logger.debug('Generated default observer schema: {}'.format(manifest_dict))\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec = app.spec.to_dict()\n    manifest_dict = app.spec.to_manifest()\n    logger.debug('Generating default observer schema')\n    observer_schema = generate_observer_schema(spec, manifest_dict)\n    return observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    return update_last_applied_manifest_dict_from_resp(\n        manifest_dict, app.manifest, response=app.response\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    return generate_observer_schema(app, create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    spec = app.config.get('Kubernetes', {}).get('observer_schema')\n    if spec is not None:\n        return generate_observer_schema_dict(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_spec = app.spec.observer_schema\n    if manifest_spec is None:\n        return\n\n    logger.debug(\"Generating default observer schema from spec: %s\",\n                 manifest_spec)\n    return generate_observer_schema(manifest_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    update_last_observed_manifest_dict_from_resp(manifest_dict, app, response=True)\n    update_last_applied_manifest_dict_from_resp(manifest_dict, app, response=True)\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = utils.load_yaml_from_path(app.config.get('Kubernetes','manifest'))\n    return generate_observer_schema(manifest)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. Its maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLES\nclass.  then :class:`.__repr", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style,\nthievely the :class:`.Mapping` then the :class:`.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, str]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style. then\n*params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or :class:`list`).\nwith import typing retyping file _BYTES_EN", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, Union[int, bytes]] = None\n) -> Tuple[bytes, Sequence[Mapping[str, Union[int, bytes]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) must contain the \nspectral parameters (:class:`str` or :class:`int`) \ncontains the set of out-style parameters. \n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`. \n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byte", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Union[str, bytes]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\n* If :attr:`.SQLParams.in_style` is a named parameter style.\nor if :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:clas", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str`\nor :class:`int`) to value. If :attr:`.SQLParams.in_style` is\na named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLE", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`. Returns a :class:`tuple`\ncontaining:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\n\n:_BYTES_ENCODING\n:_STYLES\n\n\"\"\"", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str`\nor :class:`int`) to value.  If :attr:`.SQLParams.in_style` is\nnamed parameter style. then *params* must be a :class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import typing retyping file _BYTES_ENCODING\nand _STYLES", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. If :attr:`.SQLParams.in_style` is a named\nparameters style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\nand _STYLES\n\n:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`. with import typing file\n_BYTES_ENCO", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._format_impl(sql, params)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. Its maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLES\nclass.  then :class:`.__repr", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style,\nthievely the :class:`.Mapping` then the :class:`.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, str]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style. then\n*params* must be a\n:class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or :class:`list`).\nwith import typing retyping file _BYTES_EN", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, Union[int, bytes]] = None\n) -> Tuple[bytes, Sequence[Mapping[str, Union[int, bytes]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) must contain the \nspectral parameters (:class:`str` or :class:`int`) \ncontains the set of out-style parameters. \n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a\n:class:`~collections.abc.Mapping`. \n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byte", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Union[str, bytes]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\n* If :attr:`.SQLParams.in_style` is a named parameter style.\nor if :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Mapping`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter\nstyle, then *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:clas", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str`\nor :class:`int`) to value. If :attr:`.SQLParams.in_style` is\na named parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n`list`). with import typing file _BYTES_ENCODING\nand _STYLE", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`. Returns a :class:`tuple`\ncontaining:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\n\n:_BYTES_ENCODING\n:_STYLES\n\n\"\"\"", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.  It maps each parameter (:class:`str`\nor :class:`int`) to value.  If :attr:`.SQLParams.in_style` is\nnamed parameter style. then *params* must be a :class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`).  with import typing retyping file _BYTES_ENCODING\nand _STYLES", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, Any]]:\n\"\"\"\nFormat the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. If :attr:`.SQLParams.in_style` is a named\nparameters style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- The set of converted out-style parameters (:class:`dict` or\n:class:`list`). with import typing file _BYTES_ENCODING\nand _STYLES\n\n:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`. with import typing file\n_BYTES_ENCO", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Mapping[Union[str, int], Union[str, int]]]:\nreturn self._format_impl(sql, params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.  If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameters parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\npara", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`).  with import typing class self._create_converter()\n  and self.format(sql, params)\n . self.__class__ then :class:`~collections.abc.Mapping", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]]\n) -> Tuple[bytes, List[Dict[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\nThrows :class:`.ParamsFormatError`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`)", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nand then *params* must be a :class:`~collections.abc.Mapping`.  If\n:attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Mapping[str, int] = None,\n*params: Mapping[str, int] = None\n) -> Tuple[bytes, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters. - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. Its maps each parameter (:class:`str or :class:`int`) to\nvalue. If :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of\nconvertable out-style parameters (:class:`dict` or :class:`list`). If\n:attr:`.SQLParams.in_style` is a named parameter style.\none param must be a ", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[bytes, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  Its maps each parameter (:class:`str or :class:`int`) to\nthe value.  If :attr:`.SQLParams.in_style` is a named parameter\nstyle. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams ", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dic", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, bytes]] = (),\nparams: Mapping[Union[str, bytes], Any] = None\n) -> Tuple[str, List[Mapping[Union[str, bytes], Any]]]:\nif self.in_style == 'ordinal':\nreturn self._create_in_regex().formatmany(sql, many_params, params)\nelse:\nreturn self._create_converter().formatmany(sql, many_params, params)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[bytes, list]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\nEach set of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :clas"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\nIt maps each parameter (:class:`str` or :class:`int`) to value.  If\n:attr:`.SQLParams.in_style` is a named parameter style. then *params*\nmust be a :class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter (:class:`str` or\n:class:`int`) to value. If :attr:`.SQLParams.in_style` is a named\nparameters parameter style. then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\npara", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, list]:\n\"\"\"Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`).  with import typing class self._create_converter()\n  and self.format(sql, params)\n . self.__class__ then :class:`~collections.abc.Mapping", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]]\n) -> Tuple[bytes, List[Dict[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nthen *params* must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\nThrows :class:`.ParamsFormatError`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :class:`list`)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[str, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\nand then *params* must be a :class:`~collections.abc.Mapping`.  If\n:attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\nor :attr:`.SQLParams.in_style` is an ordinal parameter style.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Mapping[str, int] = None,\n*params: Mapping[str, int] = None\n) -> Tuple[bytes, List[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters. - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters. Its maps each parameter (:class:`str or :class:`int`) to\nvalue. If :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\n*params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of\nconvertable out-style parameters (:class:`dict` or :class:`list`). If\n:attr:`.SQLParams.in_style` is a named parameter style.\none param must be a ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]]\n) -> Tuple[bytes, List[dict]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  Its maps each parameter (:class:`str or :class:`int`) to\nthe value.  If :attr:`.SQLParams.in_style` is a named parameter\nstyle. then *params* must be a\n:class:`~collections.abc.Mapping`.  If :attr:`.SQLParams.in_style`\nis an ordinal parameter style. then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dic", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, bytes]] = (),\nparams: Mapping[Union[str, bytes], Any] = None\n) -> Tuple[str, List[Mapping[Union[str, bytes], Any]]]:\nif self.in_style == 'ordinal':\nreturn self._create_in_regex().formatmany(sql, many_params, params)\nelse:\nreturn self._create_converter().formatmany(sql, many_params, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Union[Mapping[str, int], Sequence[int]]\n) -> Tuple[bytes, list]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\nEach set of in-style parameters (*params*).  - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\nIf :attr:`.SQLParams.in_style` is a named parameter style.\none param must be a :class:`str` or :class:`int`.\n\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style.\none param must be a :class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or :clas", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n\n    if path is None:\n        return True\n\n    return self.obj_fs.isfile(path)\n", "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.debug(\"%s: %s\", e, path)\n        return False\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"path '%s' is not a directory\", path)\n        return False\n\n    if self.obj_fs.exists(path):\n        self.log.debug(\"path '%s' is a file\", path)\n        return True\n\n    self.log.debug(\"path '%s' is not a file\", path)\n    return False\n", "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.obj_fs.stat(path)\n    except FileNotFoundError:\n        self.log.debug(\"Path does not exist: %s\", path)\n        return False\n    except PermissionError:\n        self.log.debug(\"Path is not readable: %s\", path)\n        return False\n    return True\n", "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return True\n", "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    if not self.content_directory:\n        self.log.debug(\"No content directory specified, cannot validate\")\n        return False\n\n    return self.obj_fs.isfile(os.path.join(self.content_directory, path))\n", "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.obj_fs.isdir(path):\n        self.log.warn(\"%s is a directory, but is a file\", path)\n        return False\n\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.info('%s is not a directory', path)\n        return False\n    return True\n", "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"%s is not a directory\", path)\n        return False\n\n    if not self.obj_fs.isfile(os.path.join(path, self.id + '.py')):\n        self.log.debug(\"%s is not a file\", path)\n        return False\n\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n\n    if path is None:\n        return True\n\n    return self.obj_fs.isfile(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    try:\n        self.obj_fs.stat(path)\n    except OSError as e:\n        self.log.debug(\"%s: %s\", e, path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"path '%s' is not a directory\", path)\n        return False\n\n    if self.obj_fs.exists(path):\n        self.log.debug(\"path '%s' is a file\", path)\n        return True\n\n    self.log.debug(\"path '%s' is not a file\", path)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.obj_fs.stat(path)\n    except FileNotFoundError:\n        self.log.debug(\"Path does not exist: %s\", path)\n        return False\n    except PermissionError:\n        self.log.debug(\"Path is not readable: %s\", path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    if not self.content_directory:\n        self.log.debug(\"No content directory specified, cannot validate\")\n        return False\n\n    return self.obj_fs.isfile(os.path.join(self.content_directory, path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if self.obj_fs.isdir(path):\n        self.log.warn(\"%s is a directory, but is a file\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.info('%s is not a directory', path)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isdir(path):\n        self.log.debug(\"%s is not a directory\", path)\n        return False\n\n    if not self.obj_fs.isfile(os.path.join(path, self.id + '.py')):\n        self.log.debug(\"%s is not a file\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    result = []\n    if self.show_warnings:\n        result.append('Warnings: ')\n    if self.show_errors:\n        result.append('Errors: ')\n    if self.num_errors:\n        result.append('Errors (%d):'% self.num_errors)\n    if self.num_warnings:\n        result.append('Warnings (%d):'% self.num_warnings)\n    if self.status_str is not None:\n        result.append(self.status_str)\n    if prefix:\n        result.append(prefix)\n    return''.join(result)\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[' + self.status + ']'\n    if s:\n        s += ': '\n    s += prefix + self.spec\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.show_warnings:\n        s += 'Warnings: '\n    if self.show_errors:\n        s += 'Errors: '\n    if self.num_errors:\n        s += 'Errors (%d):'% self.num_errors\n    if self.num_warnings:\n        s += 'Warnings (%d):'% self.num_warnings\n    s += prefix + self.status_str_fmt % (self.status,)\n    return s\n", "def status_str(self, prefix=''):\n    result = ''\n    if self.show_errors:\n        result += '[!] '\n    result += 'Validator status: '\n    result += '{}{}'.format(prefix, self.status_str(prefix))\n    if self.show_warnings:\n        result += '[*] '\n    result += '{}'.format(prefix)\n    if self.num_errors:\n        result +='({})'.format(self.num_errors)\n    return result\n", "def status_str(self, prefix=''):\n    return ', '.join(\n        '{pre}{code}'.format(pre=prefix, code=code)\n        for code in self.status_codes\n    )\n", "def status_str(self, prefix=''):\n    result = []\n    for status, msg in self.status_tuples:\n        if status:\n            result.append('{} {}'.format(prefix, status))\n        result.append(msg)\n    return ', '.join(result)\n", "def status_str(self, prefix=''):\n    result = [self.status_str(code, prefix) for code, _ in self.status.items()]\n    return''.join(result)\n", "def status_str(self, prefix=''):\n    if self.show_errors:\n        return '%sErrors: %d' % (prefix, self.num_errors)\n    elif self.show_warnings:\n        return '%sWarnings: %d' % (prefix, self.num_warnings)\n    else:\n        return '%sStatus: %d' % (prefix, self.status)\n", "def status_str(self, prefix=''):\n    return ', '.join([self.status_str(code, prefix)\n                     for code, name in self.spec])\n", "def status_str(self, prefix=''):\n    return ', '.join(\n        ['{}{}'.format(prefix, code) for code in self.status])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    result = []\n    if self.show_warnings:\n        result.append('Warnings: ')\n    if self.show_errors:\n        result.append('Errors: ')\n    if self.num_errors:\n        result.append('Errors (%d):'% self.num_errors)\n    if self.num_warnings:\n        result.append('Warnings (%d):'% self.num_warnings)\n    if self.status_str is not None:\n        result.append(self.status_str)\n    if prefix:\n        result.append(prefix)\n    return''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status:\n        s += '[' + self.status + ']'\n    if s:\n        s += ': '\n    s += prefix + self.spec\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.show_warnings:\n        s += 'Warnings: '\n    if self.show_errors:\n        s += 'Errors: '\n    if self.num_errors:\n        s += 'Errors (%d):'% self.num_errors\n    if self.num_warnings:\n        s += 'Warnings (%d):'% self.num_warnings\n    s += prefix + self.status_str_fmt % (self.status,)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = ''\n    if self.show_errors:\n        result += '[!] '\n    result += 'Validator status: '\n    result += '{}{}'.format(prefix, self.status_str(prefix))\n    if self.show_warnings:\n        result += '[*] '\n    result += '{}'.format(prefix)\n    if self.num_errors:\n        result +='({})'.format(self.num_errors)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(\n        '{pre}{code}'.format(pre=prefix, code=code)\n        for code in self.status_codes\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = []\n    for status, msg in self.status_tuples:\n        if status:\n            result.append('{} {}'.format(prefix, status))\n        result.append(msg)\n    return ', '.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = [self.status_str(code, prefix) for code, _ in self.status.items()]\n    return''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.show_errors:\n        return '%sErrors: %d' % (prefix, self.num_errors)\n    elif self.show_warnings:\n        return '%sWarnings: %d' % (prefix, self.num_warnings)\n    else:\n        return '%sStatus: %d' % (prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join([self.status_str(code, prefix)\n                     for code, name in self.spec])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(\n        ['{}{}'.format(prefix, code) for code in self.status])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    s = \"\"\n    if self.log:\n        s += \"\\n==== %s ====\\n\" % self.status_str(prefix)\n        s += \"%s\\n\" % self.log\n        s += \"===============\\n\\n\"\n    return s\n", "def status_str(self, prefix=''):\n    if self.status_str_fn:\n        return self.status_str_fn(self, prefix)\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    return \"{0}{1}\".format(prefix, self.status_str_map.get(self.status, \"Unknown\"))\n", "def status_str(self, prefix=''):\n    s = \"{}{} ({})\".format(prefix, self.id, self.status_str_value)\n    if self.log is not None:\n        s += \" ({})\".format(self.log)\n    return s\n", "def status_str(self, prefix=''):\n    l = []\n    l.append(\"{}file: {}\".format(prefix, self.obj_fs.path.name))\n    for k, v in self.lax_digests.items():\n        l.append(\"{}{}: {}\".format(prefix, k, v))\n    l.append(\"{}digest: {}\".format(prefix, self.digest_algorithm))\n    if self.digest_algorithm == \"sha256\":\n        l.append(\"{}digest_algorithm: sha256\".format(prefix))\n    return \"\\n\".join(l)\n", "def status_str(self, prefix=''):\n    if self.log:\n        s = 'Validating {} against {} using {}'.format(\n            self.id, self.spec_version, self.digest_algorithm)\n        if self.digest_algorithm =='sha256':\n            s +='with SHA256'\n        elif self.digest_algorithm =='sha1':\n            s +='with SHA1'\n        elif self.digest_algorithm =='sha512':\n            s +='with SHA512'\n        elif self.digest_algorithm =='sha512_256':\n            s +='with SHA512_256'\n        else:\n            s +='with {} unknown'.format(self.digest_algorithm)\n        s +='for inventory {}'.format(self.inventory_digest_file)\n        return prefix + s\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '{} | {}'.format(prefix, self.status_str)\n    return status_str\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status_strs:\n        s += 'Validation log for {0}\\n'.format(prefix)\n        for key, val in self.status_strs.items():\n            s += '{0}: {1}\\n'.format(key, val)\n    return s\n", "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.status_str_map.get(self.status, self.status))\n", "def status_str(self, prefix=''):\n    if self.status_str_map is None:\n        self.status_str_map = {}\n        for status in self.status_str:\n            self.status_str_map[status] = 1\n\n    s = prefix + \": \"\n    for status in self.status_str:\n        if status in self.status_str_map:\n            s += status + \"=\" + str(self.status_str_map[status])\n        else:\n            s += status + \" \"\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    s = \"\"\n    if self.log:\n        s += \"\\n==== %s ====\\n\" % self.status_str(prefix)\n        s += \"%s\\n\" % self.log\n        s += \"===============\\n\\n\"\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str_fn:\n        return self.status_str_fn(self, prefix)\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return \"{0}{1}\".format(prefix, self.status_str_map.get(self.status, \"Unknown\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = \"{}{} ({})\".format(prefix, self.id, self.status_str_value)\n    if self.log is not None:\n        s += \" ({})\".format(self.log)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    l = []\n    l.append(\"{}file: {}\".format(prefix, self.obj_fs.path.name))\n    for k, v in self.lax_digests.items():\n        l.append(\"{}{}: {}\".format(prefix, k, v))\n    l.append(\"{}digest: {}\".format(prefix, self.digest_algorithm))\n    if self.digest_algorithm == \"sha256\":\n        l.append(\"{}digest_algorithm: sha256\".format(prefix))\n    return \"\\n\".join(l)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.log:\n        s = 'Validating {} against {} using {}'.format(\n            self.id, self.spec_version, self.digest_algorithm)\n        if self.digest_algorithm =='sha256':\n            s +='with SHA256'\n        elif self.digest_algorithm =='sha1':\n            s +='with SHA1'\n        elif self.digest_algorithm =='sha512':\n            s +='with SHA512'\n        elif self.digest_algorithm =='sha512_256':\n            s +='with SHA512_256'\n        else:\n            s +='with {} unknown'.format(self.digest_algorithm)\n        s +='for inventory {}'.format(self.inventory_digest_file)\n        return prefix + s\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '{} | {}'.format(prefix, self.status_str)\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status_strs:\n        s += 'Validation log for {0}\\n'.format(prefix)\n        for key, val in self.status_strs.items():\n            s += '{0}: {1}\\n'.format(key, val)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{} {}'.format(prefix, self.status_str_map.get(self.status, self.status))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str_map is None:\n        self.status_str_map = {}\n        for status in self.status_str:\n            self.status_str_map[status] = 1\n\n    s = prefix + \": \"\n    for status in self.status_str:\n        if status in self.status_str_map:\n            s += status + \"=\" + str(self.status_str_map[status])\n        else:\n            s += status + \" \"\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_path()\n    self._check_content_paths_map_to_versions()\n\n    self._check_state_block()\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n    self._check_as_prior_version()\n\n    self._check_state_block()\n\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_digests_present_and_used()\n\n    self._check_state_block()\n\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    self._validate_as_prior_version(\n        'normal', inventory, extract_spec_version=extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.id = inventory.id\n    self.log = inventory.log\n    self.where = inventory.where\n    self.spec_version = inventory.spec_version\n    self.unnormalized_digests = inventory.unnormalized_digests\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.digest_regex = inventory.digest_regex\n\n    self.check_digests_present_and_used(\n        manifest_files=inventory.manifest_files,\n        digests_used=inventory.digests_used,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=inventory.manifest_files,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_logical_path(inventory.logical_path, version=inventory.version, logical_paths=inventory.logical_paths)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.log.debug(\"Validating %s\", self)\n\n    # check the digests present\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n    )\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=self.spec_versions_supported,\n    )\n\n    # check the logical paths\n    self.check_logical_path(\n        path=inventory.inventory_path,\n        version=self.spec_version,\n        logical_paths=self.logical_paths,\n    )\n\n    # check the fixity\n    self.check_fixity(\n        fixity=inventory.inventory_fixity,\n        manifest_files=inventory.manifest_files,\n    )\n\n    # check the state block\n    self.check_state_block(\n        inventory=inventory,\n        state=self.state,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    # check the error message\n    self.check_error(code=self.error)\n\n    #", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.validate_version_sequence()\n    self.validate_logical_paths_map_to_versions(inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory.get_all_versions(),\n        self.digest_regex(),\n    )\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory.get_all_versions(),\n            all_versions=True,\n        )\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=True)\n        self.check_content_path(inventory, self.content_paths, content_directories=True)\n        self.check_logical_path(inventory, self.logical_paths, logical_directories=True)\n\n    self.validate_version_sequence()\n    self.validate_spec_version()\n\n    self.check_digests_present_and_used(inventory, self.digests_used)\n\n    self.error('Unknown inventory type \"{}\"'.format(inventory.inventory_type))\n", "def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating inventory...\")\n    self.where = inventory\n    self.spec_version = inventory.get(\"spec_version\", \"1.0\")\n    self.check_version_sequence()\n\n    self._validate_as_prior_version(self.prior, \"inventory\")\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_as_prior_version(self.normal, \"normal\")\n\n    self._validate_as_prior_version(self.additional, \"additional\")\n\n    self._validate_as_prior_version(self.removed, \"removed\")\n\n    self._validate_as_prior_version(self.changed, \"changed\")\n\n    self._validate_as_prior_version(self.unnormalized, \"unnormalized\")\n\n    self._validate_as_prior_version(self.unnormalized_digests, \"unnormalized_digests\")\n\n    self._validate_as_prior_version(self.error, \"error\")\n\n    self._validate_as_prior_version(self.where, \"where\")\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = self._get_inventory_version(inventory)\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.check_digests_present_and_used()\n    self.check_content_paths_map_to_versions()\n\n    self.check_logical_path(self.where, self.spec_versions_supported)\n    self.check_content_path(self.where, self.spec_versions_used)\n\n    self.check_digests_present()\n    self.check_content_paths_map()\n\n    self.check_logical_path(self.where, self.lax_digests)\n    self.check_logical_path(self.where, self.digest_regex())\n\n    self.check_content_paths_map()\n\n    self.check_state_block()\n    self.check_content_paths_map_to_versions()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_as_prior_version()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_digests_present()\n    self.check_logical_path(self.where, self.lax_digests)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_logical_path(inventory, version='', logical_paths=[])\n\n    if extract_spec_version:\n        self.check_version_sequence(\n            version=self.spec_version,\n            inventory=inventory,\n            all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n\n    self.check_logical_path(inventory, version='', logical_paths=[])\n", "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    if extract_spec_version:\n        self._extract_spec_version()\n    self._validate()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_path()\n    self._check_content_paths_map_to_versions()\n\n    self._check_state_block()\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n\n    self._check_logical_path()\n    self._check_logical_paths()\n\n    self._check_content_paths_map_to_versions()\n    self._check_digests_present_and_used()\n\n    self._check_content_paths_map_to_versions()\n    self._check_as_prior_version()\n\n    self._check_state_block()\n\n    self._check_digests_present_and_used()\n\n    self._check_logical_path()\n    self._check_digests_present_and_used()\n\n    self._check_state_block()\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self._validate_as_prior_version(\n        'normal', inventory, extract_spec_version=extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.id = inventory.id\n    self.log = inventory.log\n    self.where = inventory.where\n    self.spec_version = inventory.spec_version\n    self.unnormalized_digests = inventory.unnormalized_digests\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.digest_regex = inventory.digest_regex\n\n    self.check_digests_present_and_used(\n        manifest_files=inventory.manifest_files,\n        digests_used=inventory.digests_used,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=inventory.manifest_files,\n        all_versions=inventory.all_versions,\n    )\n\n    self.check_logical_path(inventory.logical_path, version=inventory.version, logical_paths=inventory.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.log.debug(\"Validating %s\", self)\n\n    # check the digests present\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n    )\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=self.spec_versions_supported,\n    )\n\n    # check the logical paths\n    self.check_logical_path(\n        path=inventory.inventory_path,\n        version=self.spec_version,\n        logical_paths=self.logical_paths,\n    )\n\n    # check the fixity\n    self.check_fixity(\n        fixity=inventory.inventory_fixity,\n        manifest_files=inventory.manifest_files,\n    )\n\n    # check the state block\n    self.check_state_block(\n        inventory=inventory,\n        state=self.state,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    # check the error message\n    self.check_error(code=self.error)\n\n    #", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.validate_version_sequence()\n    self.validate_logical_paths_map_to_versions(inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory.get_all_versions(),\n        self.digest_regex(),\n    )\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory.get_all_versions(),\n            all_versions=True,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=True)\n        self.check_content_path(inventory, self.content_paths, content_directories=True)\n        self.check_logical_path(inventory, self.logical_paths, logical_directories=True)\n\n    self.validate_version_sequence()\n    self.validate_spec_version()\n\n    self.check_digests_present_and_used(inventory, self.digests_used)\n\n    self.error('Unknown inventory type \"{}\"'.format(inventory.inventory_type))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating inventory...\")\n    self.where = inventory\n    self.spec_version = inventory.get(\"spec_version\", \"1.0\")\n    self.check_version_sequence()\n\n    self._validate_as_prior_version(self.prior, \"inventory\")\n\n    if extract_spec_version:\n        self._extract_spec_version()\n\n    self._validate_as_prior_version(self.normal, \"normal\")\n\n    self._validate_as_prior_version(self.additional, \"additional\")\n\n    self._validate_as_prior_version(self.removed, \"removed\")\n\n    self._validate_as_prior_version(self.changed, \"changed\")\n\n    self._validate_as_prior_version(self.unnormalized, \"unnormalized\")\n\n    self._validate_as_prior_version(self.unnormalized_digests, \"unnormalized_digests\")\n\n    self._validate_as_prior_version(self.error, \"error\")\n\n    self._validate_as_prior_version(self.where, \"where\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = self._get_inventory_version(inventory)\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.check_digests_present_and_used()\n    self.check_content_paths_map_to_versions()\n\n    self.check_logical_path(self.where, self.spec_versions_supported)\n    self.check_content_path(self.where, self.spec_versions_used)\n\n    self.check_digests_present()\n    self.check_content_paths_map()\n\n    self.check_logical_path(self.where, self.lax_digests)\n    self.check_logical_path(self.where, self.digest_regex())\n\n    self.check_content_paths_map()\n\n    self.check_state_block()\n    self.check_content_paths_map_to_versions()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_as_prior_version()\n\n    self.check_content_paths_map_to_versions()\n\n    self.check_digests_present()\n    self.check_logical_path(self.where, self.lax_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    self.spec_version = get_inventory_version(inventory)\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True)\n    self.check_logical_path(inventory, version='', logical_paths=[])\n\n    if extract_spec_version:\n        self.check_version_sequence(\n            version=self.spec_version,\n            inventory=inventory,\n            all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, manifest_files=True, digests_used=self.digest_regex())\n\n    self.check_logical_path(inventory, version='', logical_paths=[])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.where = inventory\n    if extract_spec_version:\n        self._extract_spec_version()\n    self._validate()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error('Digest \"{}\" not found in manifest files'.format(digest))\n            self.error('This is a reserved digest and may cause errors.')\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in self.digest_regex:\n            self.error(\n                \"Manifest file '{}' is missing a regex that matches \"\n                \"the required digest pattern\".format(manifest_file))\n        else:\n            self._check_digests_present_and_used_in_manifest(\n                manifest_file, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file in digests_used:\n            self.digest_algorithm.check(manifest_file, digests_used[manifest_file])\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = {}\n\n    for path in manifest_files:\n        for digest in self.digest_regex():\n            if digest not in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n            elif digest in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n        else:\n            self.digest_used(digest, path)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        self.check_digest(digest)\n\n    for digest in manifest_files:\n        self.check_digest(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = self.digest_regex.findall(manifest_file)\n        if digest:\n            digests_used.add(digest[0])\n            self.digest_algorithm(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.digest_regex()\n            self.error(\"Digest '{}' is not present in manifest\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error('Digest \"{}\" not found in manifest files'.format(digest))\n            self.error('This is a reserved digest and may cause errors.')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in self.digest_regex:\n            self.error(\n                \"Manifest file '{}' is missing a regex that matches \"\n                \"the required digest pattern\".format(manifest_file))\n        else:\n            self._check_digests_present_and_used_in_manifest(\n                manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file in digests_used:\n            self.digest_algorithm.check(manifest_file, digests_used[manifest_file])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = {}\n\n    for path in manifest_files:\n        for digest in self.digest_regex():\n            if digest not in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n            elif digest in digests_used:\n                self.digest_used(digest, path)\n                if self.where == \"head\":\n                    break\n        else:\n            self.digest_used(digest, path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        self.check_digest(digest)\n\n    for digest in manifest_files:\n        self.check_digest(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = self.digest_regex.findall(manifest_file)\n        if digest:\n            digests_used.add(digest[0])\n            self.digest_algorithm(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.digest_regex()\n            self.error(\"Digest '{}' is not present in manifest\".format(digest))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if self.where!= \"source\" or prior.state!= \"source\":\n        return\n\n    if prior.id!= self.id:\n        return\n\n    if prior.version!= self.spec_version:\n        return\n\n    if prior.error!= \"unknown\":\n        return\n\n    if prior.digest_regex!= self.digest_regex:\n        return\n\n    if prior.content_directory!= self.content_directory:\n        return\n\n    if prior.logical_path!= self.logical_path:\n        return\n\n    return\n", "def validate_as_prior_version(self, prior):\n    self.check_digests_present_and_used(prior.digests_used, prior.digests_added)\n", "def validate_as_prior_version(self, prior):\n    if prior.id is None:\n        self.error('Unable to validate as prior version')\n        return\n\n    if prior.id not in self.lax_digests:\n        self.error('Unable to validate as prior version (%s) as it does not have a corresponding lax digest' % prior.id)\n        return\n\n    if self.lax_digests[prior.id].version!= prior.version:\n        self.error('Unable to validate as prior version (%s) as it is different from the lax version (%s)' % (prior.id, prior.version))\n", "def validate_as_prior_version(self, prior):\n    if prior.is_null():\n        return\n    if not self.check_digests_present_and_used(prior.state, prior.digests_used):\n        self.error(code='incompatible-version', message='Inventory contains un-assigned digests.')\n", "def validate_as_prior_version(self, prior):\n    self.id = prior.id\n    self.spec_version = prior.spec_version\n    self.unnormalized_digests = prior.unnormalized_digests\n    self.error = prior.error\n    self.error = self.error or \"\"\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        self.error(\"Unable to determine inventory prior version for id=%s\" % self.id)\n    elif prior.id!= self.id:\n        self.error(\"Unable to determine inventory prior version for id=%s and inventory prior version id=%s\" % (\n            prior.id, self.id))\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='incorrect-version',\n            message='The inventory in question does not match the '\n                    'current inventory version of the inventory.',\n            extract_spec_version=prior.version,\n        )\n", "def validate_as_prior_version(self, prior):\n    self.check_content_paths_map_to_versions(\n        manifest_files=prior.manifest_files,\n        all_versions=prior.all_versions)\n", "def validate_as_prior_version(self, prior):\n    if not self.validate_state_block(prior.state, prior.version):\n        self.error(\"Inventory state '{}' does not match expected state '{}'\".format(prior.state, self.id))\n    if prior.content_directory is None:\n        self.error(\"Inventory has no content directory\")\n    if prior.content_directory!= self.content_directory:\n        self.error(\"Inventory '{}' does not have expected content directory '{}'\".format(prior.content_directory, self.content_directory))\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='invalid-version',\n            message='Inventory ID \"%s\" does not match expected version \"%s\"' % (prior.id, self.id),\n            extra='This inventory does not match the expected version of the current inventory.'\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if self.where!= \"source\" or prior.state!= \"source\":\n        return\n\n    if prior.id!= self.id:\n        return\n\n    if prior.version!= self.spec_version:\n        return\n\n    if prior.error!= \"unknown\":\n        return\n\n    if prior.digest_regex!= self.digest_regex:\n        return\n\n    if prior.content_directory!= self.content_directory:\n        return\n\n    if prior.logical_path!= self.logical_path:\n        return\n\n    return\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.check_digests_present_and_used(prior.digests_used, prior.digests_added)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.id is None:\n        self.error('Unable to validate as prior version')\n        return\n\n    if prior.id not in self.lax_digests:\n        self.error('Unable to validate as prior version (%s) as it does not have a corresponding lax digest' % prior.id)\n        return\n\n    if self.lax_digests[prior.id].version!= prior.version:\n        self.error('Unable to validate as prior version (%s) as it is different from the lax version (%s)' % (prior.id, prior.version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.is_null():\n        return\n    if not self.check_digests_present_and_used(prior.state, prior.digests_used):\n        self.error(code='incompatible-version', message='Inventory contains un-assigned digests.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.id = prior.id\n    self.spec_version = prior.spec_version\n    self.unnormalized_digests = prior.unnormalized_digests\n    self.error = prior.error\n    self.error = self.error or \"\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        self.error(\"Unable to determine inventory prior version for id=%s\" % self.id)\n    elif prior.id!= self.id:\n        self.error(\"Unable to determine inventory prior version for id=%s and inventory prior version id=%s\" % (\n            prior.id, self.id))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='incorrect-version',\n            message='The inventory in question does not match the '\n                    'current inventory version of the inventory.',\n            extract_spec_version=prior.version,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.check_content_paths_map_to_versions(\n        manifest_files=prior.manifest_files,\n        all_versions=prior.all_versions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not self.validate_state_block(prior.state, prior.version):\n        self.error(\"Inventory state '{}' does not match expected state '{}'\".format(prior.state, self.id))\n    if prior.content_directory is None:\n        self.error(\"Inventory has no content directory\")\n    if prior.content_directory!= self.content_directory:\n        self.error(\"Inventory '{}' does not have expected content directory '{}'\".format(prior.content_directory, self.content_directory))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='invalid-version',\n            message='Inventory ID \"%s\" does not match expected version \"%s\"' % (prior.id, self.id),\n            extra='This inventory does not match the expected version of the current inventory.'\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if key!= version:\n            inventory_dict = inventory[key]\n            for logical_path in inventory_dict.get('logical_paths', []):\n                if logical_path not in result:\n                    result[logical_path] = set()\n                result[logical_path].update(inventory_dict.get('content_files', []))\n    return result\n", "def get_logical_path_map(inventory, version):\n    result = {}\n    for key, value in inventory.items():\n        if key == version:\n            continue\n        for path in value:\n            if path in result:\n                result[path].add(key)\n            else:\n                result[path] = set([key])\n    return result\n", "def get_logical_path_map(inventory, version):\n    logical_path_map = {}\n\n    for inventory_item in inventory:\n        for content_file in inventory_item.content_files:\n            logical_path_in_state = set()\n\n            for file_in_inventory in logical_path_map.values():\n                logical_path_in_state.add(\n                    file_in_inventory.get_content_file_path(version))\n\n            if inventory_item.state == 'completed':\n                file_in_inventory = inventory_item.content_files[-1]\n                logical_path_in_state.add(\n                    file_in_inventory.get_content_file_path(version))\n\n            logical_path_map[inventory_item.logical_path] = logical_path_in_state\n\n    return logical_path_map\n", "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    if version.state is None:\n        version.state = inventory.states[inventory.get_state_name(version.content.state)]\n\n    return inventory.get_logical_path_map(version.state)\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    logical_path_in_state = {}\n\n    for content_file_path in inventory.content_file_paths:\n        for logical_path in inventory.get_logical_paths(content_file_path):\n            if logical_path not in logical_path_in_state:\n                logical_path_in_state[logical_path] = set()\n            logical_path_in_state[logical_path].add(content_file_path)\n\n    return logical_path_in_state\n", "def get_logical_path_map(inventory, version):\n    logical_path_in_state = {}\n    for content_file in inventory.content_files:\n        if content_file.is_duplicate and content_file.logical_path not in logical_path_in_state:\n            logical_path_in_state[content_file.logical_path] = set()\n        logical_path_in_state[content_file.logical_path].add(content_file)\n\n    return logical_path_in_state\n", "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.get(\"logical_paths\", []):\n            ret.setdefault(logical_path, set()).add(file_inventory[\"path\"])\n    return ret\n", "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if key!= version:\n            inventory_dict = inventory[key]\n            for logical_path in inventory_dict.get('logical_paths', []):\n                if logical_path not in result:\n                    result[logical_path] = set()\n                result[logical_path].update(inventory_dict.get('content_files', []))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for key, value in inventory.items():\n        if key == version:\n            continue\n        for path in value:\n            if path in result:\n                result[path].add(key)\n            else:\n                result[path] = set([key])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    logical_path_map = {}\n\n    for inventory_item in inventory:\n        for content_file in inventory_item.content_files:\n            logical_path_in_state = set()\n\n            for file_in_inventory in logical_path_map.values():\n                logical_path_in_state.add(\n                    file_in_inventory.get_content_file_path(version))\n\n            if inventory_item.state == 'completed':\n                file_in_inventory = inventory_item.content_files[-1]\n                logical_path_in_state.add(\n                    file_in_inventory.get_content_file_path(version))\n\n            logical_path_map[inventory_item.logical_path] = logical_path_in_state\n\n    return logical_path_map\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    if version.state is None:\n        version.state = inventory.states[inventory.get_state_name(version.content.state)]\n\n    return inventory.get_logical_path_map(version.state)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_by_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    logical_path_in_state = {}\n\n    for content_file_path in inventory.content_file_paths:\n        for logical_path in inventory.get_logical_paths(content_file_path):\n            if logical_path not in logical_path_in_state:\n                logical_path_in_state[logical_path] = set()\n            logical_path_in_state[logical_path].add(content_file_path)\n\n    return logical_path_in_state\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    logical_path_in_state = {}\n    for content_file in inventory.content_files:\n        if content_file.is_duplicate and content_file.logical_path not in logical_path_in_state:\n            logical_path_in_state[content_file.logical_path] = set()\n        logical_path_in_state[content_file.logical_path].add(content_file)\n\n    return logical_path_in_state\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    ret = {}\n    for file_inventory in inventory.values():\n        for logical_path in file_inventory.get(\"logical_paths\", []):\n            ret.setdefault(logical_path, set()).add(file_inventory[\"path\"])\n    return ret\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    self.where = fixity[\"where\"]\n    self.spec_version = fixity[\"spec_version\"]\n    self.digest_regex = fixity[\"digest_regex\"]\n    self.digest_algorithm = fixity[\"digest_algorithm\"]\n    self.content_directory = fixity[\"content_directory\"]\n    self.content_paths = fixity[\"content_paths\"]\n    self.digest_algorithm_options = fixity[\"digest_algorithm_options\"]\n    self.digest_regex_options = fixity[\"digest_regex_options\"]\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.content_directories:\n        check_content_paths_map_to_versions(\n            fixity, self.content_directory, manifest_files\n        )\n\n    if fixity.logical_paths:\n        check_logical_path(fixity, self.content_directory, manifest_files)\n\n    if fixity.spec_version:\n        check_spec_version(fixity, manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity %s\", fixity)\n    self.validate_version_sequence(fixity, manifest_files)\n    self.validate_content_paths_map_to_versions(\n        manifest_files, all_versions=True\n    )\n    self.check_digests_present_and_used(manifest_files, digests_used={})\n", "def validate_fixity(self, fixity, manifest_files):\n    # TODO: consider using a different validator for the type of fixity here\n    return self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def validate_fixity(self, fixity, manifest_files):\n    if fixity.id is None:\n        self.error('Fixity id missing.')\n\n    if fixity.content_directory is None:\n        self.error('Fixity content directory missing.')\n\n    if fixity.content_path is None:\n        self.error('Fixity content path missing.')\n\n    self.check_content_path(fixity.content_path, manifest_files)\n    self.check_content_path(fixity.content_directory, manifest_files)\n\n    self.check_logical_path(fixity.content_path, fixity.logical_path, manifest_files)\n    self.check_logical_path(fixity.content_directory, fixity.logical_path, manifest_files)\n\n    self.check_state_block(fixity, manifest_files)\n    self.check_digests_present_and_used(manifest_files, digests_used=[fixity.id])\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "def validate_fixity(self, fixity, manifest_files):\n    self.error(\"Summary of fixity block not implemented\")\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    # Since we used to have a version specific digest for the manifest files,\n    # we need to check that the digest matches the expected digest.\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n    self.check_digests_present_and_used(manifest_files, digests_used=[])\n", "def validate_fixity(self, fixity, manifest_files):\n    for content_path in manifest_files:\n        self.check_content_path(content_path, True)\n    return fixity\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.where = fixity[\"where\"]\n    self.spec_version = fixity[\"spec_version\"]\n    self.digest_regex = fixity[\"digest_regex\"]\n    self.digest_algorithm = fixity[\"digest_algorithm\"]\n    self.content_directory = fixity[\"content_directory\"]\n    self.content_paths = fixity[\"content_paths\"]\n    self.digest_algorithm_options = fixity[\"digest_algorithm_options\"]\n    self.digest_regex_options = fixity[\"digest_regex_options\"]\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.content_directories:\n        check_content_paths_map_to_versions(\n            fixity, self.content_directory, manifest_files\n        )\n\n    if fixity.logical_paths:\n        check_logical_path(fixity, self.content_directory, manifest_files)\n\n    if fixity.spec_version:\n        check_spec_version(fixity, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity %s\", fixity)\n    self.validate_version_sequence(fixity, manifest_files)\n    self.validate_content_paths_map_to_versions(\n        manifest_files, all_versions=True\n    )\n    self.check_digests_present_and_used(manifest_files, digests_used={})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    # TODO: consider using a different validator for the type of fixity here\n    return self.validate_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity.id is None:\n        self.error('Fixity id missing.')\n\n    if fixity.content_directory is None:\n        self.error('Fixity content directory missing.')\n\n    if fixity.content_path is None:\n        self.error('Fixity content path missing.')\n\n    self.check_content_path(fixity.content_path, manifest_files)\n    self.check_content_path(fixity.content_directory, manifest_files)\n\n    self.check_logical_path(fixity.content_path, fixity.logical_path, manifest_files)\n    self.check_logical_path(fixity.content_directory, fixity.logical_path, manifest_files)\n\n    self.check_state_block(fixity, manifest_files)\n    self.check_digests_present_and_used(manifest_files, digests_used=[fixity.id])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.error(\"Summary of fixity block not implemented\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    # Since we used to have a version specific digest for the manifest files,\n    # we need to check that the digest matches the expected digest.\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n    self.check_digests_present_and_used(manifest_files, digests_used=[])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for content_path in manifest_files:\n        self.check_content_path(content_path, True)\n    return fixity\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    files = []\n    for entry in os.scandir(path):\n        if entry.is_file():\n            files.append(entry.path)\n    return files\n", "def files_list(path):\n    for entry in os.scandir(path):\n        if entry.is_file():\n            yield entry.path\n", "def files_list(path):\n    for item in os.listdir(path):\n        full_path = os.path.join(path, item)\n        if os.path.isfile(full_path) and item.endswith('.py'):\n            yield full_path\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    if not os.path.exists(path):\n        return []\n    zipfile_obj = zipfile.ZipFile(path, 'r')\n    return zipfile_obj.namelist()\n", "def files_list(path):\n    files = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            files.append(os.path.join(root, name))\n    return files\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    files = []\n    for entry in os.scandir(path):\n        if entry.is_file():\n            files.append(entry.path)\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for entry in os.scandir(path):\n        if entry.is_file():\n            yield entry.path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for item in os.listdir(path):\n        full_path = os.path.join(path, item)\n        if os.path.isfile(full_path) and item.endswith('.py'):\n            yield full_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if not os.path.exists(path):\n        return []\n    zipfile_obj = zipfile.ZipFile(path, 'r')\n    return zipfile_obj.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    packtools_files = [f for f in files if _eval_file(prefix=f, xmls=xmls)]\n    packtools_files = [f for f in packtools_files if f.endswith('.xml')]\n    packtools_files = [f for f in packtools_files if not f.endswith('.zip')]\n\n    xml_filenames = {f[:-4]: f for f in packtools_files}\n\n    for xml in xmls:\n        for f in xmls:\n            if f in xml_filenames[xml]:\n                packtools_files.remove(f)\n\n    logger.debug('Found packtools files: {}'.format(packtools_files))\n\n    file_names = {f: f for f in packtools_files}\n\n    for xml in xmls:\n        for f in xmls:\n            if f not in file_names:\n                logger.debug('Found packtools file for {}'.format(xml))\n                file_names[f] = f\n\n    return file_names\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(prefix=file, file_path=source)\n        if file_path:\n            data[file] = Package(file_path)\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for filename in files:\n        package_name = os.path.splitext(os.path.basename(filename))[0]\n        packages[package_name] = _group_files_by_xml_filename(source, xmls, filename)\n    return packages\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        xml_basename = os.path.basename(file_path).replace('.xml', '')\n        package_name = xml_basename.replace('_','').title()\n        data[package_name] = _group_files_by_xml_filename(source, xmls, file_path)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        package = _explore_file(source, file_path)\n        data[filename] = package\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    packtools_data = _group_files_by_xml_filename(source, xmls, files)\n    for packtools_item in packtools_data:\n        packtools_item.pop(\"packtools_file\")\n    return packtools_data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    package = {}\n    for xml_file in xmls:\n        package[xml_file] = _group_files_by_xml_filename(source, xml_file, files)\n    return package\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        name = _eval_file(prefix=file, file_path=source)\n        data[name] = Package(name=name, source=source, xmls=xmls)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for f in files:\n        src_fn = os.path.basename(source)\n        dest_fn = os.path.basename(f)\n        if src_fn.startswith(xml_filenames_prefix):\n            data[src_fn] = Package(source=source, filename=f)\n        elif src_fn.startswith(xml_filenames_suffix):\n            data[dest_fn] = Package(source=source, filename=f)\n        else:\n            data[src_fn] = Package(source=source, filename=f)\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    pack = {}\n    for f in files:\n        pack[f] = explore_source(source)\n        logger.debug(\"Found package %s\", pack[f])\n    return pack\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packtools_files = [f for f in files if _eval_file(prefix=f, xmls=xmls)]\n    packtools_files = [f for f in packtools_files if f.endswith('.xml')]\n    packtools_files = [f for f in packtools_files if not f.endswith('.zip')]\n\n    xml_filenames = {f[:-4]: f for f in packtools_files}\n\n    for xml in xmls:\n        for f in xmls:\n            if f in xml_filenames[xml]:\n                packtools_files.remove(f)\n\n    logger.debug('Found packtools files: {}'.format(packtools_files))\n\n    file_names = {f: f for f in packtools_files}\n\n    for xml in xmls:\n        for f in xmls:\n            if f not in file_names:\n                logger.debug('Found packtools file for {}'.format(xml))\n                file_names[f] = f\n\n    return file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(prefix=file, file_path=source)\n        if file_path:\n            data[file] = Package(file_path)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for filename in files:\n        package_name = os.path.splitext(os.path.basename(filename))[0]\n        packages[package_name] = _group_files_by_xml_filename(source, xmls, filename)\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        xml_basename = os.path.basename(file_path).replace('.xml', '')\n        package_name = xml_basename.replace('_','').title()\n        data[package_name] = _group_files_by_xml_filename(source, xmls, file_path)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        package = _explore_file(source, file_path)\n        data[filename] = package\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packtools_data = _group_files_by_xml_filename(source, xmls, files)\n    for packtools_item in packtools_data:\n        packtools_item.pop(\"packtools_file\")\n    return packtools_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    package = {}\n    for xml_file in xmls:\n        package[xml_file] = _group_files_by_xml_filename(source, xml_file, files)\n    return package\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        name = _eval_file(prefix=file, file_path=source)\n        data[name] = Package(name=name, source=source, xmls=xmls)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for f in files:\n        src_fn = os.path.basename(source)\n        dest_fn = os.path.basename(f)\n        if src_fn.startswith(xml_filenames_prefix):\n            data[src_fn] = Package(source=source, filename=f)\n        elif src_fn.startswith(xml_filenames_suffix):\n            data[dest_fn] = Package(source=source, filename=f)\n        else:\n            data[src_fn] = Package(source=source, filename=f)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    pack = {}\n    for f in files:\n        pack[f] = explore_source(source)\n        logger.debug(\"Found package %s\", pack[f])\n    return pack\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    # return True if file_path.startswith(prefix) else False\n    return True if file_path.startswith(prefix + '/') else False\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return False\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    # se a documento com o prefix e o nombre de archivo no archivo zipfile \u00e9 identificado\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    # return True if file_path.startswith(prefix) else False\n    return True if file_path.startswith(prefix + '/') else False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return False\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    # se a documento com o prefix e o nombre de archivo no archivo zipfile \u00e9 identificado\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files).get(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files, files=[f])]\n", "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    logger.debug(\"Files selecionados por prefix: {}\".format(files))\n    return files\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if os.path.basename(f) == prefix]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files, files=[f])]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if _eval_file(prefix, file_path)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files).get(prefix)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if f.startswith(prefix):\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files, files=[f])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    logger.debug(\"Files selecionados por prefix: {}\".format(files))\n    return files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if os.path.basename(f) == prefix]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if _group_files_by_xml_filename(source=source, xmls=files, files=[f])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if _eval_file(prefix, file_path)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                result[filename] = _explore_file(\n                    os.path.join(root, filename))\n\n    return result\n", "def _explore_folder(folder):\n    files = []\n    for root, _, files in os.walk(folder):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if filepath.endswith(\".xml\"):\n                files.append(filepath)\n                logger.info(\"Reading XML file {}\".format(filepath))\n                data = _eval_file(prefix=filepath[:-4], file_path=filepath)\n                return data\n            else:\n                logger.info(\"File {} is not a valid XML file\".format(filepath))\n", "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            result[file] = _explore_file(file_path)\n\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(folder, ['package.xml']):\n        result[os.path.basename(file)] = eval(file)\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for filename in _group_files_by_xml_filename(folder, []):\n        result[filename] = _eval_file(prefix=folder, file_path=filename)\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            xml = _eval_file(prefix=filepath)\n            if xml:\n                result[filename] = xml\n    return result\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            full_path = os.path.join(root, filename)\n            if os.path.isfile(full_path):\n                data[full_path.split(os.sep)[-1]] = _eval_file(prefix='', file_path=full_path)\n    return data\n", "def _explore_folder(folder):\n    result = {}\n    for file_path in _explore_zipfile(folder):\n        xml_name = os.path.basename(file_path)\n        result[xml_name] = _group_files_by_xml_filename(\n            file_path, xmls=[folder], files=[]\n        )\n    return result\n", "def _explore_folder(folder):\n    packages = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if f.endswith(\".xml\"):\n                packages[os.path.basename(f).rstrip(\".xml\")] = eval(f)\n\n    return packages\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.zip'):\n                with zipfile.ZipFile(filepath) as zip:\n                    data = _eval_file(prefix=filename, file_path=filepath)\n                    logger.info('Package: {} data retrieved'.format(filename))\n                    return data\n            elif filepath.endswith('.xml'):\n                with open(filepath) as xml:\n                    data = _group_files_by_xml_filename(data, xml.read(), filepath)\n                    logger.info('Package: {} data retrieved'.format(filename))\n                    return data\n            else:\n                logger.info('Package: {} data not"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith('.xml'):\n                result[filename] = _explore_file(\n                    os.path.join(root, filename))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = []\n    for root, _, files in os.walk(folder):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if filepath.endswith(\".xml\"):\n                files.append(filepath)\n                logger.info(\"Reading XML file {}\".format(filepath))\n                data = _eval_file(prefix=filepath[:-4], file_path=filepath)\n                return data\n            else:\n                logger.info(\"File {} is not a valid XML file\".format(filepath))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            result[file] = _explore_file(file_path)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(folder, ['package.xml']):\n        result[os.path.basename(file)] = eval(file)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for filename in _group_files_by_xml_filename(folder, []):\n        result[filename] = _eval_file(prefix=folder, file_path=filename)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        filepath = os.path.join(folder, filename)\n        if os.path.isfile(filepath):\n            xml = _eval_file(prefix=filepath)\n            if xml:\n                result[filename] = xml\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            full_path = os.path.join(root, filename)\n            if os.path.isfile(full_path):\n                data[full_path.split(os.sep)[-1]] = _eval_file(prefix='', file_path=full_path)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for file_path in _explore_zipfile(folder):\n        xml_name = os.path.basename(file_path)\n        result[xml_name] = _group_files_by_xml_filename(\n            file_path, xmls=[folder], files=[]\n        )\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packages = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if f.endswith(\".xml\"):\n                packages[os.path.basename(f).rstrip(\".xml\")] = eval(f)\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.zip'):\n                with zipfile.ZipFile(filepath) as zip:\n                    data = _eval_file(prefix=filename, file_path=filepath)\n                    logger.info('Package: {} data retrieved'.format(filename))\n                    return data\n            elif filepath.endswith('.xml'):\n                with open(filepath) as xml:\n                    data = _group_files_by_xml_filename(data, xml.read(), filepath)\n                    logger.info('Package: {} data retrieved'.format(filename))\n                    return data\n            else:\n                logger.info('Package: {} data not", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'package'\n\n    packages = _group_files_by_xml_filename(source=file_path, xmls=[file_type])\n    if not packages:\n        return {}\n    return packages[file_type]\n", "def _eval_file(prefix, file_path):\n    return _group_files_by_xml_filename(source=explore_source(source=file_path), xmls=[prefix], files=[file_path])\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    files = os.listdir(file_path)\n    if prefix in files:\n        package_name = prefix\n    else:\n        package_name = os.path.splitext(os.path.basename(file_path))[0]\n\n    package_path = os.path.join(file_path, package_name)\n    package_file = os.path.join(package_path, 'package.xml')\n\n    packages = _eval_file(package_name, package_file)\n\n    if packages is None:\n        raise KeyError(\"File not found: {}\".format(package_file))\n\n    return packages\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path).replace('.xml', '')\n    if filename in _group_files_by_xml_filename(source=source, xmls=files):\n        return _group_files_by_xml_filename(source=source, xmls=files)[filename]\n    elif filename in _group_files_by_xml_filename(source=source, xmls=assets):\n        return _group_files_by_xml_filename(source=source, xmls=assets)[filename]\n    else:\n        return _group_files_by_xml_filename(source=source, xmls=packages)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.endswith('.zip'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    if filename.endswith('.svg'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    if filename.endswith('.png'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    raise ValueError('Cannot identify file type \"{}\"'.format(filename))\n", "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[-1]\n    logger.debug('Escolha %s com o extens \u2047 o %s', file_path, ext)\n\n    if ext in ['.zip', '.rar']:\n        return _explore_zipfile(zip_path=file_path)\n\n    return _group_files_by_xml_filename(source=file_path)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    package = select_filenames_by_prefix(prefix, files=files)\n    return _group_files_by_xml_filename(source=explore_source(source=file_path),\n                                       xmls=package['xmls'],\n                                       files=package['files'])\n", "def _eval_file(prefix, file_path):\n    xml_file = os.path.basename(file_path).split('.')[0] + '.xml'\n    packages = select_filenames_by_prefix(prefix, files=[file_path])\n\n    if xml_file in packages.keys():\n        file_path = packages[xml_file]\n\n    return {'package': prefix, 'file': file_path}\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    packages = _group_files_by_xml_filename(source=source, xmls=packages, files=[file_path])\n    file_path = os.path.join(file_path, 'package.json')\n    packages[prefix].update({'file_path': file_path})\n    return packages\n", "def _eval_file(prefix, file_path):\n    package_file_name = os.path.splitext(file_path)[0] + '.zip'\n    package_file = _eval_file(prefix, package_file_name)\n    return package_file\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    if filename.startswith('asset'):\n        file_type = 'asset'\n    elif filename.startswith('rendition'):\n        file_type ='rendition'\n    else:\n        file_type = 'package'\n\n    packages = _group_files_by_xml_filename(source=file_path, xmls=[file_type])\n    if not packages:\n        return {}\n    return packages[file_type]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return _group_files_by_xml_filename(source=explore_source(source=file_path), xmls=[prefix], files=[file_path])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    files = os.listdir(file_path)\n    if prefix in files:\n        package_name = prefix\n    else:\n        package_name = os.path.splitext(os.path.basename(file_path))[0]\n\n    package_path = os.path.join(file_path, package_name)\n    package_file = os.path.join(package_path, 'package.xml')\n\n    packages = _eval_file(package_name, package_file)\n\n    if packages is None:\n        raise KeyError(\"File not found: {}\".format(package_file))\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path).replace('.xml', '')\n    if filename in _group_files_by_xml_filename(source=source, xmls=files):\n        return _group_files_by_xml_filename(source=source, xmls=files)[filename]\n    elif filename in _group_files_by_xml_filename(source=source, xmls=assets):\n        return _group_files_by_xml_filename(source=source, xmls=assets)[filename]\n    else:\n        return _group_files_by_xml_filename(source=source, xmls=packages)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.endswith('.zip'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    if filename.endswith('.svg'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    if filename.endswith('.png'):\n        packs_by_xml = _group_files_by_xml_filename(source=source, xmls=files)\n\n        if packs_by_xml and prefix in packs_by_xml:\n            return packs_by_xml[prefix]\n\n        return {}\n\n    raise ValueError('Cannot identify file type \"{}\"'.format(filename))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[-1]\n    logger.debug('Escolha %s com o extens \u2047 o %s', file_path, ext)\n\n    if ext in ['.zip', '.rar']:\n        return _explore_zipfile(zip_path=file_path)\n\n    return _group_files_by_xml_filename(source=file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    package = select_filenames_by_prefix(prefix, files=files)\n    return _group_files_by_xml_filename(source=explore_source(source=file_path),\n                                       xmls=package['xmls'],\n                                       files=package['files'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    xml_file = os.path.basename(file_path).split('.')[0] + '.xml'\n    packages = select_filenames_by_prefix(prefix, files=[file_path])\n\n    if xml_file in packages.keys():\n        file_path = packages[xml_file]\n\n    return {'package': prefix, 'file': file_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    packages = _group_files_by_xml_filename(source=source, xmls=packages, files=[file_path])\n    file_path = os.path.join(file_path, 'package.json')\n    packages[prefix].update({'file_path': file_path})\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    package_file_name = os.path.splitext(file_path)[0] + '.zip'\n    package_file = _eval_file(prefix, package_file_name)\n    return package_file\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    asset = self.get_asset(basename=file_path)\n    self._assets[lang] = asset\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    asset = self.get_asset(basename=file_path)\n    self._assets[lang] = asset\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    self._assets[asset.name] = asset\n    self._xml.append(asset.xml())\n", "def add_asset(self, basename, file_path):\n    asset = Asset(file_path)\n    asset.basename = basename\n    self._assets[basename] = asset\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset = Asset(file_path, self._assets)\n    asset.name = basename\n    self._assets[basename] = asset\n    self._assets[asset.name] = asset\n", "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    with open(file_path, \"rb\") as f:\n        self._assets[asset.name] = f.read()\n", "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, {})\n    asset['path'] = file_path\n    asset['mime_type'] = mimetypes.guess_type(file_path)[0] or 'image/png'\n    self._assets[basename] = asset\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    with open(file_path, 'rb') as f:\n        self._assets[basename] = f.read()\n", "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, Asset())\n    asset.add_file(file_path)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    self._assets[asset.name] = asset\n    self._xml.append(asset.xml())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(file_path)\n    asset.basename = basename\n    self._assets[basename] = asset\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = Asset(file_path, self._assets)\n    asset.name = basename\n    self._assets[basename] = asset\n    self._assets[asset.name] = asset\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    asset.file_path = file_path\n    self._assets.append(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self.get_asset(basename)\n    with open(file_path, \"rb\") as f:\n        self._assets[asset.name] = f.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, {})\n    asset['path'] = file_path\n    asset['mime_type'] = mimetypes.guess_type(file_path)[0] or 'image/png'\n    self._assets[basename] = asset\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    with open(file_path, 'rb') as f:\n        self._assets[basename] = f.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = self._assets.setdefault(basename, Asset())\n    asset.add_file(file_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            # Ignore files that are not XML files\n            if name.endswith(\".xml\"):\n                continue\n            data[name] = _eval_file(prefix=name, file_path=zf.open(name))\n    return data\n", "def _explore_zipfile(zip_path):\n    result = {}\n    for name in _group_files_by_xml_filename(zip_path):\n        result[name] = _eval_file(prefix=name, file_path=zip_path)\n    return result\n", "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            result[file_name] = _eval_file(prefix=file_name, file_path=file_path)\n    return result\n", "def _explore_zipfile(zip_path):\n    # remove filename from zip_path if exists\n    if zip_path.startswith(\"/\"):\n        zip_path = zip_path.lstrip(\"/\")\n\n    # get files from zip_path\n    files = _explore_folder(zip_path)\n\n    # remove filename from files if exists\n    if len(files) == 0:\n        logger.info(\"No files found in zip_path\")\n        return {}\n\n    # get packages' data from zip_path\n    data = _group_files_by_xml_filename(files, files)\n\n    return data\n", "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for prefix, dirs, files in os.walk(zip_path):\n            for fn in files:\n                fn_path = os.path.join(prefix, fn)\n                data[fn_path] = _eval_file(prefix, fn_path)\n    return data\n", "def _explore_zipfile(zip_path):\n    import_os_log = {}\n    with zipfile.ZipFile(zip_path) as zip_file:\n        for prefix, filenames in _group_files_by_xml_filename(zip_file, zip_file.namelist()):\n            if prefix in import_os_log:\n                import_os_log[prefix].extend(filenames)\n            else:\n                import_os_log[prefix] = filenames\n    return import_os_log\n", "def _explore_zipfile(zip_path):\n    if not zip_path:\n        return {}\n\n    zip_data = _explore_folder(zip_path)\n\n    return _group_files_by_xml_filename(zip_data, zip_path)\n", "def _explore_zipfile(zip_path):\n    data = {}\n    for root, _, files in os.walk(zip_path):\n        for filename in files:\n            if filename.endswith('.xml'):\n                data[filename[:-4]] = _explore_file(os.path.join(root, filename))\n    return data\n", "def _explore_zipfile(zip_path):\n    import_data = {}\n    for root, dirs, files in os.walk(zip_path):\n        for fname in files:\n            if fname.endswith('.xml'):\n                xml_file_path = os.path.join(root, fname)\n                import_data[fname] = explore_source(xml_file_path)\n    return import_data\n", "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for file_path in files:\n            if file_path.endswith(\".xml\"):\n                file_path = os.path.join(root, file_path)\n                result[file_path] = _explore_file(zip_path=zip_path,\n                                                  file_path=file_path)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            # Ignore files that are not XML files\n            if name.endswith(\".xml\"):\n                continue\n            data[name] = _eval_file(prefix=name, file_path=zf.open(name))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    for name in _group_files_by_xml_filename(zip_path):\n        result[name] = _eval_file(prefix=name, file_path=zip_path)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            result[file_name] = _eval_file(prefix=file_name, file_path=file_path)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # remove filename from zip_path if exists\n    if zip_path.startswith(\"/\"):\n        zip_path = zip_path.lstrip(\"/\")\n\n    # get files from zip_path\n    files = _explore_folder(zip_path)\n\n    # remove filename from files if exists\n    if len(files) == 0:\n        logger.info(\"No files found in zip_path\")\n        return {}\n\n    # get packages' data from zip_path\n    data = _group_files_by_xml_filename(files, files)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for prefix, dirs, files in os.walk(zip_path):\n            for fn in files:\n                fn_path = os.path.join(prefix, fn)\n                data[fn_path] = _eval_file(prefix, fn_path)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    import_os_log = {}\n    with zipfile.ZipFile(zip_path) as zip_file:\n        for prefix, filenames in _group_files_by_xml_filename(zip_file, zip_file.namelist()):\n            if prefix in import_os_log:\n                import_os_log[prefix].extend(filenames)\n            else:\n                import_os_log[prefix] = filenames\n    return import_os_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    if not zip_path:\n        return {}\n\n    zip_data = _explore_folder(zip_path)\n\n    return _group_files_by_xml_filename(zip_data, zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    for root, _, files in os.walk(zip_path):\n        for filename in files:\n            if filename.endswith('.xml'):\n                data[filename[:-4]] = _explore_file(os.path.join(root, filename))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    import_data = {}\n    for root, dirs, files in os.walk(zip_path):\n        for fname in files:\n            if fname.endswith('.xml'):\n                xml_file_path = os.path.join(root, fname)\n                import_data[fname] = explore_source(xml_file_path)\n    return import_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    for root, dirs, files in os.walk(zip_path):\n        for file_path in files:\n            if file_path.endswith(\".xml\"):\n                file_path = os.path.join(root, file_path)\n                result[file_path] = _explore_file(zip_path=zip_path,\n                                                  file_path=file_path)\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [path.split(os.sep)[-1] for path in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = []\n        for name in zf.namelist():\n            if os.path.isfile(name):\n                files.append(name)\n        return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path, 'r') as zf:\n        files_list = [f.filename for f in zf.filelist]\n    return files_list\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [path.split(os.sep)[-1] for path in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = []\n        for name in zf.namelist():\n            if os.path.isfile(name):\n                files.append(name)\n        return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path, 'r') as zf:\n        files_list = [f.filename for f in zf.filelist]\n    return files_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(st:)?)+', r'\\g<1>-\\g<2>', content)\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n\n    content = content.replace(' w:st=\"','w-st=\"')\n    content = content.replace(' w:st=\"','w-st=\"')\n\n    return content\n", "def fix_namespace_prefix_w(content):\n    if content == '\"':\n        return 'w-st=\"'\n    return content\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if isinstance(content, str):\n        return content.replace(' w:st=\"','w-st=\"')\n    return content\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if content.startswith(\"w:st=\"):\n        return \"w-st=\" + content[len(\"w:st=\"):]\n    if content.startswith(\"w-st=\"):\n        return \"w-st=\" + content[len(\"w-st=\"):]\n    return content\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(st:)?)+', r'\\g<1>-\\g<2>', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n\n    content = content.replace(' w:st=\"','w-st=\"')\n    content = content.replace(' w:st=\"','w-st=\"')\n\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content == '\"':\n        return 'w-st=\"'\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if isinstance(content, str):\n        return content.replace(' w:st=\"','w-st=\"')\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if content.startswith(\"w:st=\"):\n        return \"w-st=\" + content[len(\"w:st=\"):]\n    if content.startswith(\"w-st=\"):\n        return \"w-st=\" + content[len(\"w-st=\"):]\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    pubdates = [get_pubdate(node, xpath) for xpath in pubdate_xpaths]\n    return pubdates[0] if pubdates else None\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    matches = node.xpath(pubdate_xpaths[0])\n    return matches[0] if len(matches) > 0 else None\n", "def match_pubdate(node, pubdate_xpaths):\n    pubdates = [\n        node.xpath(xpath)[0].text\n        for xpath in pubdate_xpaths\n    ]\n    return pubdates[0] if pubdates else None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath, namespaces=node.nsmap)\n        if match:\n            return match[0]\n", "def match_pubdate(node, pubdate_xpaths):\n    pubdate_xpath = pubdate_xpaths[0]\n    return node.xpath(pubdate_xpath, namespaces={'xsi': ns_xsi})[0]\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    matches = node.xpath(pubdate_xpaths[0])\n    return matches[0] if matches else None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if match:\n            return match[0]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    pubdates = [get_pubdate(node, xpath) for xpath in pubdate_xpaths]\n    return pubdates[0] if pubdates else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    matches = node.xpath(pubdate_xpaths[0])\n    return matches[0] if len(matches) > 0 else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    pubdates = [\n        node.xpath(xpath)[0].text\n        for xpath in pubdate_xpaths\n    ]\n    return pubdates[0] if pubdates else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath, namespaces=node.nsmap)\n        if match:\n            return match[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    pubdate_xpath = pubdate_xpaths[0]\n    return node.xpath(pubdate_xpath, namespaces={'xsi': ns_xsi})[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    matches = node.xpath(pubdate_xpaths[0])\n    return matches[0] if matches else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if match:\n            return match[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='suppl':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = issue.find('number').text\n        suppl = issue.find('suppl').text\n    except AttributeError:\n        number = ''\n        suppl = ''\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    if issue.find('xbrli:Number') is not None:\n        number = issue.find('xbrli:Number').text\n    if issue.find('xbrli:Supplement') is not None:\n        suppl = issue.find('xbrli:Supplement').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        if element.tag =='suppl':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = issue['number']['value']\n        suppl = issue['suppl']['value']\n    except KeyError as e:\n        raise ValueError('issue does not have a {} key'.format(e.args[0]))\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    try:\n        number = issue.find('Number').text\n        suppl = issue.find('Supply').text\n    except AttributeError:\n        pass\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n\n    if 'number' in issue.attrib:\n        number = issue.attrib['number']\n\n    if'suppl' in issue.attrib:\n        suppl = issue.attrib['suppl']\n\n    return number, suppl\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        elif element.tag =='suppl':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = issue.find('number').text\n        suppl = issue.find('suppl').text\n    except AttributeError:\n        number = ''\n        suppl = ''\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    if issue.find('xbrli:Number') is not None:\n        number = issue.find('xbrli:Number').text\n    if issue.find('xbrli:Supplement') is not None:\n        suppl = issue.find('xbrli:Supplement').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue:\n        if element.tag == 'number':\n            number = element.text\n        if element.tag =='suppl':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    try:\n        number = issue['number']['value']\n        suppl = issue['suppl']['value']\n    except KeyError as e:\n        raise ValueError('issue does not have a {} key'.format(e.args[0]))\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    try:\n        number = issue.find('Number').text\n        suppl = issue.find('Supply').text\n    except AttributeError:\n        pass\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n\n    if 'number' in issue.attrib:\n        number = issue.attrib['number']\n\n    if'suppl' in issue.attrib:\n        suppl = issue.attrib['suppl']\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    lines = []\n    for s in self._sort_order:\n        if s == self.FALSE:\n            lines.append(\"{}{} = False\".format(' '* indent, s))\n        elif s == self.True:\n            lines.append(\"{}{} = True\".format(' '* indent, s))\n        else:\n            lines.append(\"{}{} = {}\".format(' '* (indent + 2), s, self._dual[s]))\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        if debug:\n            lines.append(\"Canonical in %s\" % self.name)\n        else:\n            lines.append(\"Canonical in False mode\")\n    else:\n        if debug:\n            lines.append(\"Semantic in %s\" % self.name)\n        else:\n            lines.append(\"Semantic in False mode\")\n    if self.dual:\n        lines.append(\"Dual in %s\" % self.name)\n    else:\n        lines.append(\"Dual in False mode\")\n    if self.restrict:\n        lines.append(\"Restrict in %s\" % self.name)\n    else:\n        lines.append(\"Restrict in False mode\")\n    if self.analyze:\n        lines.append(\"Analyze in %s\" % self.name)\n    else:\n        lines.append(\"Analyze in False mode\")\n    if self.compare:\n        lines.append(\"Compare in %s\" % self.name)\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"{}('{}')\".format(self.__class__.__name__, self.__str__())\n    else:\n        s = \"{}('{}', '{}')\".format(\n            self.__class__.__name__, self.__str__(), self.dual.__str__()\n        )\n    if indent:\n        for i in range(indent):\n            s += \"\\n\"\n        s += \"{}\".format(\"  \" * indent)\n    if debug:\n        s += \"\\n\" + self.__str__()\n    return s\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    for s in self.sorted_items():\n        lines.append(s.pretty(indent=indent + 2, debug=debug))\n    return \"\\n\".join(lines)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent + '#'+ self.name +'is canonical')\n    else:\n        lines.append(''* indent + '#'+ self.name +'is not canonical')\n    if self.isdual:\n        lines.append(''* (indent + 2) + '|-'+ self.dual.pretty(indent + 2, debug))\n    else:\n        lines.append(''* (indent + 2) + '|-'+ self.name +'is not dual')\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG: \"\n\n    if self.iscanonical:\n        debug_str += \"(canonical)\"\n    else:\n        debug_str += \"(non-canonical)\"\n\n    if indent:\n        indent_str = \" \" * indent\n        debug_str = debug_str.rstrip(\"\\n\") + indent_str + \" \" + debug_str\n    else:\n        debug_str += \" \" + debug_str\n\n    if self.__lt__(other):\n        return debug_str + \" \" + self.dual.pretty(indent + 2, debug)\n    else:\n        return debug_str + \" \" + self.dual.pretty(indent + 1, debug)\n", "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + l for l in self._pretty(debug))\n", "def pretty(self, indent=0, debug=False):\n    output = \"\\n\".join(str(x) for x in self._expr if x.iscanonical)\n    if debug:\n        return output\n    return output.ljust(indent)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(\"Canonical: {0.canonical}\".format(self))\n    else:\n        lines.append(\"{0.iscanonical}\".format(self))\n    if self.sort_order is not None:\n        lines.append(\"Sort order: {0.sort_order}\".format(self))\n    if self.dual is not None:\n        lines.append(\"Dual: {0.dual}\".format(self))\n    if self.FALSE is not None:\n        lines.append(\"FALSE: {0.FALSE}\".format(self))\n    if self.TRUE is not None:\n        lines.append(\"TRUE: {0.TRUE}\".format(self))\n    if not debug:\n        return \"\\n\".join(lines)\n    else:\n        return \"\\n\".join([\"\"] + lines + [\"\"])\n", "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG      : {}\\n\".format(self.__class__.__name__)\n        debug_str += \"-----      -----\\n\"\n\n    pretty_list = []\n    for item in self:\n        item_str = item.pretty(indent=indent + 2)\n        if debug:\n            debug_str += \"\\t{}\\n\".format(item_str)\n        else:\n            pretty_list.append(item_str)\n\n    return \"\\n\".join(pretty_list)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    for s in self._sort_order:\n        if s == self.FALSE:\n            lines.append(\"{}{} = False\".format(' '* indent, s))\n        elif s == self.True:\n            lines.append(\"{}{} = True\".format(' '* indent, s))\n        else:\n            lines.append(\"{}{} = {}\".format(' '* (indent + 2), s, self._dual[s]))\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        if debug:\n            lines.append(\"Canonical in %s\" % self.name)\n        else:\n            lines.append(\"Canonical in False mode\")\n    else:\n        if debug:\n            lines.append(\"Semantic in %s\" % self.name)\n        else:\n            lines.append(\"Semantic in False mode\")\n    if self.dual:\n        lines.append(\"Dual in %s\" % self.name)\n    else:\n        lines.append(\"Dual in False mode\")\n    if self.restrict:\n        lines.append(\"Restrict in %s\" % self.name)\n    else:\n        lines.append(\"Restrict in False mode\")\n    if self.analyze:\n        lines.append(\"Analyze in %s\" % self.name)\n    else:\n        lines.append(\"Analyze in False mode\")\n    if self.compare:\n        lines.append(\"Compare in %s\" % self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"{}('{}')\".format(self.__class__.__name__, self.__str__())\n    else:\n        s = \"{}('{}', '{}')\".format(\n            self.__class__.__name__, self.__str__(), self.dual.__str__()\n        )\n    if indent:\n        for i in range(indent):\n            s += \"\\n\"\n        s += \"{}\".format(\"  \" * indent)\n    if debug:\n        s += \"\\n\" + self.__str__()\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    for s in self.sorted_items():\n        lines.append(s.pretty(indent=indent + 2, debug=debug))\n    return \"\\n\".join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent + '#'+ self.name +'is canonical')\n    else:\n        lines.append(''* indent + '#'+ self.name +'is not canonical')\n    if self.isdual:\n        lines.append(''* (indent + 2) + '|-'+ self.dual.pretty(indent + 2, debug))\n    else:\n        lines.append(''* (indent + 2) + '|-'+ self.name +'is not dual')\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG: \"\n\n    if self.iscanonical:\n        debug_str += \"(canonical)\"\n    else:\n        debug_str += \"(non-canonical)\"\n\n    if indent:\n        indent_str = \" \" * indent\n        debug_str = debug_str.rstrip(\"\\n\") + indent_str + \" \" + debug_str\n    else:\n        debug_str += \" \" + debug_str\n\n    if self.__lt__(other):\n        return debug_str + \" \" + self.dual.pretty(indent + 2, debug)\n    else:\n        return debug_str + \" \" + self.dual.pretty(indent + 1, debug)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return '\\n'.join(''* indent + l for l in self._pretty(debug))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    output = \"\\n\".join(str(x) for x in self._expr if x.iscanonical)\n    if debug:\n        return output\n    return output.ljust(indent)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(\"Canonical: {0.canonical}\".format(self))\n    else:\n        lines.append(\"{0.iscanonical}\".format(self))\n    if self.sort_order is not None:\n        lines.append(\"Sort order: {0.sort_order}\".format(self))\n    if self.dual is not None:\n        lines.append(\"Dual: {0.dual}\".format(self))\n    if self.FALSE is not None:\n        lines.append(\"FALSE: {0.FALSE}\".format(self))\n    if self.TRUE is not None:\n        lines.append(\"TRUE: {0.TRUE}\".format(self))\n    if not debug:\n        return \"\\n\".join(lines)\n    else:\n        return \"\\n\".join([\"\"] + lines + [\"\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_str = \"\"\n    if debug:\n        debug_str += \"DEBUG      : {}\\n\".format(self.__class__.__name__)\n        debug_str += \"-----      -----\\n\"\n\n    pretty_list = []\n    for item in self:\n        item_str = item.pretty(indent=indent + 2)\n        if debug:\n            debug_str += \"\\t{}\\n\".format(item_str)\n        else:\n            pretty_list.append(item_str)\n\n    return \"\\n\".join(pretty_list)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    args = flatten(args)\n    if len(args) > 1:\n        return self.absorb_iterable(args)\n    arg = args[0]\n    if arg.is_Symbol:\n        return self.absorb_symbol(arg)\n    if not arg.is_Mul:\n        return self.absorb_iterable([arg])\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.args[0].is_Symbol:\n            args = args[:i] + [~arg] + args[i:]\n            continue\n        args[i] = self.absorb_symbol(arg)\n    return self.NOT(*args)\n", "def absorb(self, args):\n    if not args:\n        return self\n\n    if len(args) == 1:\n        return args[0]\n\n    args = list(args)\n    for i in range(1, len(args)):\n        args[i] = self.absorb(args[i])\n\n    return self.NOT(*args)\n", "def absorb(self, args):\n    if self.iscanonical:\n        return []\n    args = list(args)\n    for i in range(len(args)):\n        if args[i].iscanonical:\n            args.pop(i)\n\n    if self.iscanonical:\n        return args\n\n    if len(args) == 1:\n        return self\n    elif len(args) == 2:\n        return self.absorb([args[0]])\n    elif len(args) == 3:\n        return self.absorb([args[0], args[1]])\n    else:\n        return self.NOT(*[args[i] for i in range(len(args) - 2)])\n", "def absorb(self, args):\n    args = tuple(args)\n    if len(args) == 1:\n        return args[0]\n\n    a, b = args\n\n    if not isinstance(self.dual, Not):\n        return Not(self.dual.absorb(args))\n\n    args = [self]\n\n    while True:\n        if a is None:\n            a = self.dual.args[0]\n\n        if b is None:\n            b = self.dual.args[0]\n\n        args.append(a.doit(b))\n\n        if not self.dual.doit(args[-1]):\n            break\n\n        a = self.dual.args[0]\n        args.append(b.doit(a))\n\n    return args\n", "def absorb(self, args):\n    args = flatten(args)\n\n    if not self.iscanonical:\n        args = [self] + args\n\n    for i in range(len(args) - 1, 0, -1):\n        arg = args[i]\n        if isinstance(arg, self.__class__):\n            if args[i - 1] == self.NOT:\n                args[i - 1] = ~args[i - 1]\n            else:\n                args[i - 1] = arg.args[0] & ~args[i - 1]\n        else:\n            if self._pyoperator == arg._pyoperator:\n                args[i - 1] = arg & ~arg\n            else:\n                args[i - 1] = arg & arg.args[0]\n    return args\n", "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "def absorb(self, args):\n    args = flatten(args)\n    for a in args:\n        if a.iscanonical:\n            continue\n        for b in self.args:\n            if b.iscanonical:\n                continue\n            absorb_inner = self.absorb(b.args)\n            if absorb_inner is None:\n                b.args = absorb_inner\n            else:\n                b.args = absorb_inner & b.args\n    return args\n", "def absorb(self, args):\n\n    if not args:\n        return self\n    if len(args) == 1:\n        return self ^ args[0]\n    if len(args) == 2:\n        return self ^ args[0] ^ ~args[1]\n    if len(args) == 3:\n        return self ^ (~args[0] & args[1]) ^ args[2]\n    raise ValueError(\"Unexpected number of arguments for absorb: {}\".format(len(args)))\n", "def absorb(self, args):\n    if not args:\n        return self\n\n    # If the arguments are simple, absorb the left hand side\n    if self.iscanonical():\n        return self.absorb_simple(args)\n\n    # Otherwise, absorb the right hand side\n    return self.absorb_simple(self.args + args)\n", "def absorb(self, args):\n\n    args = list(args)\n    for i in range(len(args)):\n        if isinstance(args[i], self.__class__):\n            args[i] = args[i].absorb()\n        else:\n            args[i] = self.NOT(args[i])\n    return self._pyoperator(*args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    args = flatten(args)\n    if len(args) > 1:\n        return self.absorb_iterable(args)\n    arg = args[0]\n    if arg.is_Symbol:\n        return self.absorb_symbol(arg)\n    if not arg.is_Mul:\n        return self.absorb_iterable([arg])\n    args = list(args)\n    for i, arg in enumerate(args):\n        if arg.args[0].is_Symbol:\n            args = args[:i] + [~arg] + args[i:]\n            continue\n        args[i] = self.absorb_symbol(arg)\n    return self.NOT(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if not args:\n        return self\n\n    if len(args) == 1:\n        return args[0]\n\n    args = list(args)\n    for i in range(1, len(args)):\n        args[i] = self.absorb(args[i])\n\n    return self.NOT(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if self.iscanonical:\n        return []\n    args = list(args)\n    for i in range(len(args)):\n        if args[i].iscanonical:\n            args.pop(i)\n\n    if self.iscanonical:\n        return args\n\n    if len(args) == 1:\n        return self\n    elif len(args) == 2:\n        return self.absorb([args[0]])\n    elif len(args) == 3:\n        return self.absorb([args[0], args[1]])\n    else:\n        return self.NOT(*[args[i] for i in range(len(args) - 2)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = tuple(args)\n    if len(args) == 1:\n        return args[0]\n\n    a, b = args\n\n    if not isinstance(self.dual, Not):\n        return Not(self.dual.absorb(args))\n\n    args = [self]\n\n    while True:\n        if a is None:\n            a = self.dual.args[0]\n\n        if b is None:\n            b = self.dual.args[0]\n\n        args.append(a.doit(b))\n\n        if not self.dual.doit(args[-1]):\n            break\n\n        a = self.dual.args[0]\n        args.append(b.doit(a))\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = flatten(args)\n\n    if not self.iscanonical:\n        args = [self] + args\n\n    for i in range(len(args) - 1, 0, -1):\n        arg = args[i]\n        if isinstance(arg, self.__class__):\n            if args[i - 1] == self.NOT:\n                args[i - 1] = ~args[i - 1]\n            else:\n                args[i - 1] = arg.args[0] & ~args[i - 1]\n        else:\n            if self._pyoperator == arg._pyoperator:\n                args[i - 1] = arg & ~arg\n            else:\n                args[i - 1] = arg & arg.args[0]\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = flatten(args)\n    for a in args:\n        if a.iscanonical:\n            continue\n        for b in self.args:\n            if b.iscanonical:\n                continue\n            absorb_inner = self.absorb(b.args)\n            if absorb_inner is None:\n                b.args = absorb_inner\n            else:\n                b.args = absorb_inner & b.args\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n\n    if not args:\n        return self\n    if len(args) == 1:\n        return self ^ args[0]\n    if len(args) == 2:\n        return self ^ args[0] ^ ~args[1]\n    if len(args) == 3:\n        return self ^ (~args[0] & args[1]) ^ args[2]\n    raise ValueError(\"Unexpected number of arguments for absorb: {}\".format(len(args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if not args:\n        return self\n\n    # If the arguments are simple, absorb the left hand side\n    if self.iscanonical():\n        return self.absorb_simple(args)\n\n    # Otherwise, absorb the right hand side\n    return self.absorb_simple(self.args + args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n\n    args = list(args)\n    for i in range(len(args)):\n        if isinstance(args[i], self.__class__):\n            args[i] = args[i].absorb()\n        else:\n            args[i] = self.NOT(args[i])\n    return self._pyoperator(*args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "def on(self, hook):\n\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n\n    return wrapper\n", "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "def on(self, hook):\n\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        if listener is None:\n            return lambda listener: self.registry.remove(hook, listener)\n\n        if not isinstance(listener, HookType):\n            raise TypeError(\n                'Only accepting HookType instances as listeners can '\n               'register listeners for hook {}.'.format(hook)\n            )\n\n        self.registry[hook].add(listener)\n\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(listener)\n        return listener\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(handler):\n        self.registry[hook] = handler\n        return handler\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(callback):\n        self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        if listener is None:\n            return lambda listener: self.registry.remove(hook, listener)\n\n        if not isinstance(listener, HookType):\n            raise TypeError(\n                'Only accepting HookType instances as listeners can '\n               'register listeners for hook {}.'.format(hook)\n            )\n\n        self.registry[hook].add(listener)\n\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(listener)\n        return listener\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"database-host\": etcd_host,\n        \"database-port\": etcd_port\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"password\": \"\",\n        \"key\": \"\",\n        \"cert\": \"\",\n        \"cacert\": \"\",\n        \"certificate_chain\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"database\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"encrypted\": False,\n        \"secure\": False,\n        \"datadir\": \"/tmp/.etcd\",\n        \"ttl\": 3600,\n        \"certfile\": \"/tmp/.etcd/client.crt\",\n        \"keyfile\": \"/tmp/.etcd/client.key\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"version\": \"1.0\",\n        \"version_prefix\": \"\",\n        \"key\": {\"foo\": \"bar\"},\n        \"cert\": {\"foo\": \"bar\"},\n        \"cacert\": {\"foo\": \"bar\"},\n        \"certificate\": {\"foo\": \"bar\"},\n        \"private_key\": {\"foo\": \"bar\"},\n        \"private_certificate\": {\"foo\": \"bar\"},\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": \"\",\n        \"password\": \"\",\n        \"database_name\": \"\",\n        \"ttl\": \"\",\n        \"certificate_authority_uri\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_auth\": {\n            \"client\": {\n                \"username\": \"dummy_user\",\n                \"password\": \"dummy_password\"\n            }\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": {\n            \"mode\": \"aes256gcm\",\n            \"key\": None\n        },\n        \"expiration\": {\n            \"days\": -1,\n            \"seconds\": 30\n        },\n        \"name\": \"test_config\",\n        \"encryption\": {\n            \"mode\": \"aes256gcm\",\n            \"key\": None\n        },\n        \"secret\": \"\"\n    }\n\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"database-host\": etcd_host,\n        \"database-port\": etcd_port\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"password\": \"\",\n        \"key\": \"\",\n        \"cert\": \"\",\n        \"cacert\": \"\",\n        \"certificate_chain\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"database\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"encrypted\": False,\n        \"secure\": False,\n        \"datadir\": \"/tmp/.etcd\",\n        \"ttl\": 3600,\n        \"certfile\": \"/tmp/.etcd/client.crt\",\n        \"keyfile\": \"/tmp/.etcd/client.key\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"version\": \"1.0\",\n        \"version_prefix\": \"\",\n        \"key\": {\"foo\": \"bar\"},\n        \"cert\": {\"foo\": \"bar\"},\n        \"cacert\": {\"foo\": \"bar\"},\n        \"certificate\": {\"foo\": \"bar\"},\n        \"private_key\": {\"foo\": \"bar\"},\n        \"private_certificate\": {\"foo\": \"bar\"},\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": \"\",\n        \"password\": \"\",\n        \"database_name\": \"\",\n        \"ttl\": \"\",\n        \"certificate_authority_uri\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_auth\": {\n            \"client\": {\n                \"username\": \"dummy_user\",\n                \"password\": \"dummy_password\"\n            }\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": {\n            \"mode\": \"aes256gcm\",\n            \"key\": None\n        },\n        \"expiration\": {\n            \"days\": -1,\n            \"seconds\": 30\n        },\n        \"name\": \"test_config\",\n        \"encryption\": {\n            \"mode\": \"aes256gcm\",\n            \"key\": None\n        },\n        \"secret\": \"\"\n    }\n\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('datetime {} has no timezone; unable to determine'\n                        'fromutc state'.format(dt))\n\n    return dt.astimezone(self.timezone)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"Cannot give fromutc to non-existent timezone\")\n    return dt.astimezone(self._tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    # This method is necessary since the datetime.datetime.now() method does not\n    # include the time zone information in its signature. Assumes that the\n    # timezone is the same as the one given.\n    return dt.replace(tzinfo=None)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with datetimes that are always\n        # in UTC, this will return a datetime with a timezone\n        # that is the same as the original timezone.\n        return dt.replace(tzinfo=timezone.utc)\n    else:\n        return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self.tz)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('datetime {} has no timezone; unable to determine'\n                        'fromutc state'.format(dt))\n\n    return dt.astimezone(self.timezone)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"Cannot give fromutc to non-existent timezone\")\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # This method is necessary since the datetime.datetime.now() method does not\n    # include the time zone information in its signature. Assumes that the\n    # timezone is the same as the one given.\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        # For consistency with datetimes that are always\n        # in UTC, this will return a datetime with a timezone\n        # that is the same as the original timezone.\n        return dt.replace(tzinfo=timezone.utc)\n    else:\n        return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__class__.__slots__})\n", "def normalized(self):\n\n    return self.__class__(self.day, self.second, self.microsecond,\n                          years=self.years, months=self.months,\n                          days=self.days, leapdays=self.leapdays)\n", "def normalized(self):\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        weeks_in_month=self.weeks_in_month,\n        months_in_year=self.months_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_month=self.leapdays_in_month,\n        microseconds=self.microseconds,\n        microseconds_in_day=self.microseconds_in_day,\n    )\n", "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        years=self.years,\n        months=self.months,\n        days_in_month=self.days_in_month,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n    )\n", "def normalized(self):\n    return self.__class__(self.day, self.second, self.microsecond,\n                          self.leapdays, self.weeks(),\n                          self.hour, self.minute, self.second)\n", "def normalized(self):\n\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_month=self.days_in_month,\n        weeks_in_year=self.weeks_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_month=self.leapdays_in_month,\n        months_in_year=self.months_in_year,\n        months_in_day=self.months_in_day,\n        months_in_week=self.months_in_week,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_day=self.leapdays_in_day)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        leapdays=self.leapdays,\n                        weeks=self.weeks,\n                        hours_in_hours=self.hours_in_hours,\n                        minutes_in_minutes=self.minutes_in_minutes,\n                        seconds_in_seconds=self.seconds_in_seconds)\n", "def normalized(self):\n    return self.__class__(self.days, self.seconds,\n                          self.microseconds, self.years,\n                          self.months, self.days_in_month,\n                          self.leapdays, self.weeks,\n                          self.hours, self.minutes, self.seconds,\n                          self.microseconds, self.year, self.month,\n                          self.day, self.weekday, self.year)\n", "def normalized(self):\n    return self.__class__(self.days, self.seconds, self.microseconds,\n                          years=self.years, months=self.months,\n                          days=self.days, weeks=self.weeks,\n                          hours=self.hours, minutes=self.minutes,\n                          seconds=self.seconds, microseconds=self.microseconds)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        weeks=self.weeks,\n                        months_in_year=self.months_in_year)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__class__.__slots__})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return self.__class__(self.day, self.second, self.microsecond,\n                          years=self.years, months=self.months,\n                          days=self.days, leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        weeks_in_month=self.weeks_in_month,\n        months_in_year=self.months_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_month=self.leapdays_in_month,\n        microseconds=self.microseconds,\n        microseconds_in_day=self.microseconds_in_day,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        years=self.years,\n        months=self.months,\n        days_in_month=self.days_in_month,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_week=self.days_in_week,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.day, self.second, self.microsecond,\n                          self.leapdays, self.weeks(),\n                          self.hour, self.minute, self.second)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        years=self.years,\n        months=self.months,\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds,\n        microseconds=self.microseconds,\n        year=self.year,\n        month=self.month,\n        day=self.day,\n        weeks=self.weeks,\n        days_in_month=self.days_in_month,\n        weeks_in_year=self.weeks_in_year,\n        leapdays=self.leapdays,\n        leapdays_in_month=self.leapdays_in_month,\n        months_in_year=self.months_in_year,\n        months_in_day=self.months_in_day,\n        months_in_week=self.months_in_week,\n        leapdays_in_week=self.leapdays_in_week,\n        leapdays_in_day=self.leapdays_in_day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        leapdays=self.leapdays,\n                        weeks=self.weeks,\n                        hours_in_hours=self.hours_in_hours,\n                        minutes_in_minutes=self.minutes_in_minutes,\n                        seconds_in_seconds=self.seconds_in_seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.days, self.seconds,\n                          self.microseconds, self.years,\n                          self.months, self.days_in_month,\n                          self.leapdays, self.weeks,\n                          self.hours, self.minutes, self.seconds,\n                          self.microseconds, self.year, self.month,\n                          self.day, self.weekday, self.year)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.days, self.seconds, self.microseconds,\n                          years=self.years, months=self.months,\n                          days=self.days, weeks=self.weeks,\n                          hours=self.hours, minutes=self.minutes,\n                          seconds=self.seconds, microseconds=self.microseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                        hours=self.hours,\n                        minutes=self.minutes,\n                        seconds=self.seconds,\n                        microseconds=self.microseconds,\n                        years=self.years,\n                        months=self.months,\n                        days_in_month=self.days_in_month,\n                        weeks=self.weeks,\n                        months_in_year=self.months_in_year)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode('utf-8'))\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        if not PY3:\n            namefunc(self, dt_arg, *args, **kwargs)\n        else:\n            name = namefunc.__name__\n            result = {\n                'year': name[:4],\n               'month': name[4:6],\n                'day': name[6:8],\n                'hour': name[9:11],\n               'minute': name[11:13],\n               'second': name[13:15],\n            }\n            return result\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if not isinstance(name, six.binary_type):\n            name = name.encode('utf-8')\n        return name\n    return _wrapper\n", "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        name = namefunc(self, dt_arg, *args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode('utf-8'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        if not PY3:\n            namefunc(self, dt_arg, *args, **kwargs)\n        else:\n            name = namefunc.__name__\n            result = {\n                'year': name[:4],\n               'month': name[4:6],\n                'day': name[6:8],\n                'hour': name[9:11],\n               'minute': name[11:13],\n               'second': name[13:15],\n            }\n            return result\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _wrapper(self):\n        name = namefunc(self)\n        if not isinstance(name, six.binary_type):\n            name = name.encode('utf-8')\n        return name\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        name = namefunc(self, dt_arg, *args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "def get_versions():\n    try:\n        return get_config()[\"versions\"]\n    except KeyError:\n        return versions_from_parentdir(parentdir_prefix=parentdir(),\n                                        root=os.getcwd(),\n                                        verbose=True)\n", "def get_versions():\n    try:\n        return get_config()[\"versions\"]\n    except KeyError:\n        return default_versions()\n", "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return versions_from_parentdir(\n            os.path.dirname(os.path.abspath(__file__)), \"release\"\n        )\n", "def get_versions():\n    try:\n        return get_config().versions\n    except KeyError:\n        return versions_from_parentdir(os.path.dirname(os.path.abspath(__file__)), \"release\", verbose=True)\n", "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "def get_versions():\n    try:\n        return get_config().versions\n    except (NoSectionError, NoOptionError):\n        return versions_from_parentdir(os.sep, \"VERSIONfile\", verbose=True)\n", "def get_versions():\n    try:\n        return get_config().versions\n    except (NoInstallationError, NoValueError):\n        return versions_from_parentdir(parentdir_prefix=get_config().parent,\n                                        root=get_config().root,\n                                        verbose=get_config().verbose)\n", "def get_versions():\n    try:\n        return get_config().versions\n    except (AttributeError, KeyError):\n        return versions_from_parentdir(parentdir_prefix='',\n                                        root=os.getcwd(),\n                                        verbose=True)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config()[\"versions\"]\n    except KeyError:\n        return versions_from_parentdir(parentdir_prefix=parentdir(),\n                                        root=os.getcwd(),\n                                        verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config()[\"versions\"]\n    except KeyError:\n        return default_versions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return versions_from_parentdir(\n            os.path.dirname(os.path.abspath(__file__)), \"release\"\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().versions\n    except KeyError:\n        return versions_from_parentdir(os.path.dirname(os.path.abspath(__file__)), \"release\", verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_versions()\n    except Exception:\n        return defaults.versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().versions\n    except (NoSectionError, NoOptionError):\n        return versions_from_parentdir(os.sep, \"VERSIONfile\", verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().versions\n    except (NoInstallationError, NoValueError):\n        return versions_from_parentdir(parentdir_prefix=get_config().parent,\n                                        root=get_config().root,\n                                        verbose=get_config().verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().versions\n    except (AttributeError, KeyError):\n        return versions_from_parentdir(parentdir_prefix='',\n                                        root=os.getcwd(),\n                                        verbose=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_split_post(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describ", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-split-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-split-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_regression/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"xform/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/pinterest/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semi_neurotrans/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"py_crowdsales/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodejs_ui/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_sdk/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_regression/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"xform/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/pinterest/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semi_neurotrans/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"py_crowdsales/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodejs_ui/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_sdk/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"\n    Create decorator to mark a method as the handler of a VCS. With Create\n    decorator to mark a method as the handler of a VCS.\n    \"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"\n    Create decorator to mark a method as the handler of a VCS. with\n    Create decorator to mark a method as the handler of a VCS.\n    \"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"\n    Create decorator to mark a method as the handler of a VCS. With Create\n    decorator to mark a method as the handler of a VCS.\n    \"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"\n    Create decorator to mark a method as the handler of a VCS. with\n    Create decorator to mark a method as the handler of a VCS.\n    \"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.check_root_structure()\n        self.check_extensions_dir()\n        self.check_hierarchy()\n\n    if check_digests:\n        self.check_digest_values()\n\n    if show_warnings:\n        self.log.info(\"\\t\\tHierarchy check succeeded\")\n\n    return self.num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # Validate all storage root objects\n    num_objects = 0\n    for obj in self.object_paths:\n        self.log.debug(\"Validating %s\", obj)\n        try:\n            obj.validate(validate_objects=validate_objects, check_digests=check_digests)\n        except ValidationError as e:\n            self.log.error(\"Validation error for %s: %s\", obj, e)\n            self.num_traversal_errors += 1\n            if show_warnings:\n                self.log.warning(\"Traversing error to user: %s\", e)\n        else:\n            self.num_objects += 1\n    return self.num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating storage root hierarchy\")\n    num_objects = self.validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n\n    return num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy.\")\n    if validate_objects:\n        self._dispositor.dispositor.validate_objects()\n    if check_digests:\n        self._dispositor.dispositor.validate_digests()\n\n    num_objects = 0\n    for object_path in self.object_paths:\n        num_objects += len(object_path)\n\n    return num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, self.log)\n    return validator.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests,\n                                       show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info('Validating storage root hierarchy')\n\n    if validate_objects:\n        self.object_paths()\n\n    self.check_root_structure()\n\n    if check_digests:\n        self.check_digest_hierarchy()\n\n    self.check_extensions_dir()\n\n    if self.description:\n        self.dispositor('object_paths')\n\n    if self.dispositor('good_objects'):\n        self.good_objects = len(self.object_paths)\n\n    if self.description:\n        self.dispositor('description')\n\n    if self.dispositor('num_objects'):\n        self.num_objects = len(self.object_paths)\n\n    if self.description:\n        self.log.info('Storage root hierarchy is valid')\n\n    if show_warnings:\n        self.log.warning('')\n\n    return self.num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.num_objects is None:\n        self.num_objects = self.check_root_structure()\n\n    return self.num_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validate storage root hierarchy\")\n    if not self.is_root:\n        raise ValueError(\"Not a storage root: %s\" % self.root)\n    self.log.debug(\"Validating storage root hierarchy\")\n    return self.validate_extensions_dir(validate_objects=validate_objects,\n                                       check_digests=check_digests,\n                                       show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy\")\n    return self.check_root_structure()\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy\")\n    num_objects = self.check_root_structure()\n    if validate_objects:\n        self.check_object_paths()\n        self.check_root_fs()\n    if self.description:\n        self.log.info(\"Description provided\")\n    if self.dispositor:\n        self.dispositor()\n    if check_digests:\n        self.check_digests_dir()\n    if show_warnings:\n        self.log.info(\"Validation of object paths failed\")\n    return num_objects\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.check_root_structure()\n        self.check_extensions_dir()\n        self.check_hierarchy()\n\n    if check_digests:\n        self.check_digest_values()\n\n    if show_warnings:\n        self.log.info(\"\\t\\tHierarchy check succeeded\")\n\n    return self.num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # Validate all storage root objects\n    num_objects = 0\n    for obj in self.object_paths:\n        self.log.debug(\"Validating %s\", obj)\n        try:\n            obj.validate(validate_objects=validate_objects, check_digests=check_digests)\n        except ValidationError as e:\n            self.log.error(\"Validation error for %s: %s\", obj, e)\n            self.num_traversal_errors += 1\n            if show_warnings:\n                self.log.warning(\"Traversing error to user: %s\", e)\n        else:\n            self.num_objects += 1\n    return self.num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validating storage root hierarchy\")\n    num_objects = self.validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n\n    return num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy.\")\n    if validate_objects:\n        self._dispositor.dispositor.validate_objects()\n    if check_digests:\n        self._dispositor.dispositor.validate_digests()\n\n    num_objects = 0\n    for object_path in self.object_paths:\n        num_objects += len(object_path)\n\n    return num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, self.log)\n    return validator.validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests,\n                                       show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info('Validating storage root hierarchy')\n\n    if validate_objects:\n        self.object_paths()\n\n    self.check_root_structure()\n\n    if check_digests:\n        self.check_digest_hierarchy()\n\n    self.check_extensions_dir()\n\n    if self.description:\n        self.dispositor('object_paths')\n\n    if self.dispositor('good_objects'):\n        self.good_objects = len(self.object_paths)\n\n    if self.description:\n        self.dispositor('description')\n\n    if self.dispositor('num_objects'):\n        self.num_objects = len(self.object_paths)\n\n    if self.description:\n        self.log.info('Storage root hierarchy is valid')\n\n    if show_warnings:\n        self.log.warning('')\n\n    return self.num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.num_objects is None:\n        self.num_objects = self.check_root_structure()\n\n    return self.num_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"Validate storage root hierarchy\")\n    if not self.is_root:\n        raise ValueError(\"Not a storage root: %s\" % self.root)\n    self.log.debug(\"Validating storage root hierarchy\")\n    return self.validate_extensions_dir(validate_objects=validate_objects,\n                                       check_digests=check_digests,\n                                       show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy\")\n    return self.check_root_structure()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.info(\"Validating storage root hierarchy\")\n    num_objects = self.check_root_structure()\n    if validate_objects:\n        self.check_object_paths()\n        self.check_root_fs()\n    if self.description:\n        self.log.info(\"Description provided\")\n    if self.dispositor:\n        self.dispositor()\n    if check_digests:\n        self.check_digests_dir()\n    if show_warnings:\n        self.log.info(\"Validation of object paths failed\")\n    return num_objects\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n\n    self.root_fs = self.open_root_fs(create=True)\n\n    self.spec_file = None\n\n    self._dispositor.register(self.root_fs)\n", "def initialize(self):\n    self.log.debug(\"Initializing new OCFL root\")\n    self.root = None\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor()\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.check_root_structure()\n    self._dispositor.dispositor(self.root)\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths.append(self.root)\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.debug('initialize')\n\n    self.root = None\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n\n    self.object_paths = []\n    self.object_paths_sorted = []\n\n    self.open_root_fs = self.open_root_fs(create=False)\n    self.dispositor = self.dispositor(self.open_root_fs)\n", "def initialize(self):\n    self.log.info('Initializing new OCFL storage root')\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths.append(self.root_fs.path)\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.root_fs.makedirs(self.object_path)\n    self.root_fs.chmod(self.object_path, 0o0777)\n    self.spec_file = self.root_fs.join('object-spec.json')\n    self.dispositor()\n", "def initialize(self):\n    self.log.info(\"creating a new OCFL storage root\")\n\n    self.root = self.root_fs.makedir(self.object_path(''))\n\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor.dispositor(self)\n", "def initialize(self):\n    self.log.debug(\"Initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info('initializing OCFL storage root')\n    self.root = None\n    self.dispositor()\n    self._dispositor.dispositor()\n    self.object_paths = {}\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.open_root_fs(create=True)\n    self.check_root_structure()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n\n    self.root_fs = self.open_root_fs(create=True)\n\n    self.spec_file = None\n\n    self._dispositor.register(self.root_fs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"Initializing new OCFL root\")\n    self.root = None\n    self.object_paths = []\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.check_root_structure()\n    self._dispositor.dispositor(self.root)\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths.append(self.root)\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug('initialize')\n\n    self.root = None\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n\n    self.object_paths = []\n    self.object_paths_sorted = []\n\n    self.open_root_fs = self.open_root_fs(create=False)\n    self.dispositor = self.dispositor(self.open_root_fs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info('Initializing new OCFL storage root')\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths.append(self.root_fs.path)\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"initializing OCFL storage root\")\n    self.root = self.root_fs.makedirs(self.object_path)\n    self.root_fs.chmod(self.object_path, 0o0777)\n    self.spec_file = self.root_fs.join('object-spec.json')\n    self.dispositor()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"creating a new OCFL storage root\")\n\n    self.root = self.root_fs.makedir(self.object_path(''))\n\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.dispositor.dispositor(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"Initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info('initializing OCFL storage root')\n    self.root = None\n    self.dispositor()\n    self._dispositor.dispositor()\n    self.object_paths = {}\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.open_root_fs(create=True)\n    self.check_root_structure()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if version == '':\n        raise ValueError(\"Must specify a version with a '/' character\")\n    if version[0] not in '0123456789':\n        raise ValueError(\"Must specify a version with a '0' first letter\")\n    version = find_path_type(version)\n    if version[0] == '0':\n        # Must prefix the version with zero length\n        version = version + '0'\n    return version\n", "def next_version(version):\n    while version in ('', '.'):\n        version = version_next(version)\n    return version\n", "def next_version(version):\n    version_prefix, version_suffix = split_version(version)\n    next_version = \"{0}.{1}\".format(version_prefix, version_suffix)\n    return next_version\n", "def next_version(version):\n    if version[0] == \"0\":\n        raise ValueError(\"Must specify a prefix for version 0\")\n    return \"%s.0\" % version\n", "def next_version(version):\n    if version[:2] == \"0\":\n        prefix, sep, version = version.partition(\"0\")\n    else:\n        prefix = \"\"\n    return prefix + version\n", "def next_version(version):\n    version = check_shared_args(version)\n    if version['prefix'] is None:\n        return version\n    else:\n        return add_object_args(parser)\n", "def next_version(version):\n    \"Must deal with both zero-prefixed and non-zero prefixed versions.\"\n    if version == '':\n        raise ValueError(\"Invalid version ''\")\n    if version[0] == 'v':\n        version = version[1:]\n    while True:\n        if version[0]!= 'v':\n            break\n        version = version[1:]\n    return version\n", "def next_version(version):\n    if version[:2] == ('0', '0'):\n        raise ValueError('Cannot parse version %s' % version)\n    return '0' + version\n", "def next_version(version):\n    if version[0] == '0':\n        raise ValueError('Unsupported version %s' % version)\n    return 'v%s' % version\n", "def next_version(version):\n    if version[0] == \"0\":\n        raise ValueError(\"Pattern {!r} must not be zero-prefixed\".format(version))\n    for prefix in \"pre\", \"post\":\n        next_prefix = \"{}{}\".format(version[0], prefix)\n        if exists(join(version[1], next_prefix)):\n            return next_prefix\n    raise ValueError(\"Unable to find next version {!r}\".format(version))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if version == '':\n        raise ValueError(\"Must specify a version with a '/' character\")\n    if version[0] not in '0123456789':\n        raise ValueError(\"Must specify a version with a '0' first letter\")\n    version = find_path_type(version)\n    if version[0] == '0':\n        # Must prefix the version with zero length\n        version = version + '0'\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    while version in ('', '.'):\n        version = version_next(version)\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    version_prefix, version_suffix = split_version(version)\n    next_version = \"{0}.{1}\".format(version_prefix, version_suffix)\n    return next_version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version[0] == \"0\":\n        raise ValueError(\"Must specify a prefix for version 0\")\n    return \"%s.0\" % version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version[:2] == \"0\":\n        prefix, sep, version = version.partition(\"0\")\n    else:\n        prefix = \"\"\n    return prefix + version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    version = check_shared_args(version)\n    if version['prefix'] is None:\n        return version\n    else:\n        return add_object_args(parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Must deal with both zero-prefixed and non-zero prefixed versions.\"\n    if version == '':\n        raise ValueError(\"Invalid version ''\")\n    if version[0] == 'v':\n        version = version[1:]\n    while True:\n        if version[0]!= 'v':\n            break\n        version = version[1:]\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version[:2] == ('0', '0'):\n        raise ValueError('Cannot parse version %s' % version)\n    return '0' + version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version[0] == '0':\n        raise ValueError('Unsupported version %s' % version)\n    return 'v%s' % version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version[0] == \"0\":\n        raise ValueError(\"Pattern {!r} must not be zero-prefixed\".format(version))\n    for prefix in \"pre\", \"post\":\n        next_prefix = \"{}{}\".format(version[0], prefix)\n        if exists(join(version[1], next_prefix)):\n            return next_prefix\n    raise ValueError(\"Unable to find next version {!r}\".format(version))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories: version_dirs %s\", version_dirs)\n    if len(version_dirs)!= len(self.inventory_digest_files):\n        raise Exception(\"Length of version_dirs and inventory_digest_files do not match\")\n\n    for vdf_file, inv_digest_file in zip(version_dirs, self.inventory_digest_files):\n        self.log.debug(\"Validating inventory file %s\", vdf_file)\n        self.validate_inventory_digest(vdf_file, inv_digest_file)\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    for inv_file in self.content_directory.glob(\"*/inventory\"):\n        if inv_file.is_file():\n            self.validate_inventory(inv_file, version_dirs, False)\n", "def validate_version_inventories(self, version_dirs):\n    # TODO: this needs to be updated to use the correct root inventories file\n    # (i.e. the content directory in the version sequence (1, 2, 3))\n    if version_dirs:\n        self.log.error(\"Can't use version sequences with root inventory\")\n        raise InvalidRootDir\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        content_digest_file = os.path.join(version_dir, 'content.digest')\n        if not os.path.isfile(content_digest_file):\n            self.log.debug(\"%s: %s not found\", version_dir, content_digest_file)\n        else:\n            self.log.info(\"%s: found %s in %s\", version_dir, content_digest_file, version_dir)\n", "def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories: version_dirs %s\", version_dirs)\n    if len(version_dirs)!= len(self.inventory_digest_files):\n        raise Exception(\"Length of version_dirs and inventory_digest_files do not match\")\n\n    for vdf_file, inv_digest_file in zip(version_dirs, self.inventory_digest_files):\n        self.log.debug(\"Validating inventory file %s\", vdf_file)\n        self.validate_inventory_digest(vdf_file, inv_digest_file)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    for inv_file in self.content_directory.glob(\"*/inventory\"):\n        if inv_file.is_file():\n            self.validate_inventory(inv_file, version_dirs, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: this needs to be updated to use the correct root inventories file\n    # (i.e. the content directory in the version sequence (1, 2, 3))\n    if version_dirs:\n        self.log.error(\"Can't use version sequences with root inventory\")\n        raise InvalidRootDir\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        content_digest_file = os.path.join(version_dir, 'content.digest')\n        if not os.path.isfile(content_digest_file):\n            self.log.debug(\"%s: %s not found\", version_dir, content_digest_file)\n        else:\n            self.log.info(\"%s: found %s in %s\", version_dir, content_digest_file, version_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # Ignore non-filesystem paths\n    if not os.path.isfile(path):\n        return 'root'\n    elif os.path.isdir(path):\n        return 'object'\n    elif not re.match('^0\\\\d+=', path):\n        return 'file'\n    else:\n        return ''\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '?'\n", "def find_path_type(path):\n    # If the path is a directory we have to look for an object file\n    if os.path.isdir(path):\n        return 'object'\n    # If it is a file we need to look for an inventory file\n    elif os.path.isfile(path):\n        return 'file'\n    # It's not an inventory file so just return 'root'\n    return 'root'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '0=' in path:\n        return 'object'\n\n    if '*' in path:\n        return 'file'\n\n    return ''\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif '0=*' in path:\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    for i in range(1, 4):\n        if os.path.isfile(path + '/' + str(i)):\n            return 'file'\n        elif os.path.isdir(path + '/' + str(i)):\n            return 'object'\n        else:\n            if re.match('^0=*', path):\n                return 'root'\n            else:\n                return 'file'\n", "def find_path_type(path):\n    if '0=*' in path:\n        return 'root'\n    elif 'object' in path:\n        return 'object'\n    elif 'file' in path:\n        return 'file'\n    else:\n        return 'none'\n", "def find_path_type(path):\n\n    # TODO: support multiple filesystems for the same kind of paths.\n    #       - could be made more robust to determine the type of directory\n    #         (no user specified directory structure)\n    #       - also could be made more robust to determine the type of file\n    #         (no user specified path)\n\n    if not os.path.isdir(path):\n        return 'root'\n\n    if not os.path.isfile(path):\n        return 'object'\n\n    if not fs.is_fs_type(path):\n        return 'file'\n\n    return '*'\n", "def find_path_type(path):\n    if \"0=\" in path:\n        return 'root'\n    elif \"=\" in path:\n        return 'object'\n    elif \"*\" in path:\n        return 'file'\n    else:\n        return 'unknown'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    path = os.path.abspath(path)\n\n    # Ignore non-filesystem paths\n    if not os.path.isfile(path):\n        return 'root'\n    elif os.path.isdir(path):\n        return 'object'\n    elif not re.match('^0\\\\d+=', path):\n        return 'file'\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '?'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    # If the path is a directory we have to look for an object file\n    if os.path.isdir(path):\n        return 'object'\n    # If it is a file we need to look for an inventory file\n    elif os.path.isfile(path):\n        return 'file'\n    # It's not an inventory file so just return 'root'\n    return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n\n    if '0=' in path:\n        return 'object'\n\n    if '*' in path:\n        return 'file'\n\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif '0=*' in path:\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for i in range(1, 4):\n        if os.path.isfile(path + '/' + str(i)):\n            return 'file'\n        elif os.path.isdir(path + '/' + str(i)):\n            return 'object'\n        else:\n            if re.match('^0=*', path):\n                return 'root'\n            else:\n                return 'file'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '0=*' in path:\n        return 'root'\n    elif 'object' in path:\n        return 'object'\n    elif 'file' in path:\n        return 'file'\n    else:\n        return 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n\n    # TODO: support multiple filesystems for the same kind of paths.\n    #       - could be made more robust to determine the type of directory\n    #         (no user specified directory structure)\n    #       - also could be made more robust to determine the type of file\n    #         (no user specified path)\n\n    if not os.path.isdir(path):\n        return 'root'\n\n    if not os.path.isfile(path):\n        return 'object'\n\n    if not fs.is_fs_type(path):\n        return 'file'\n\n    return '*'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if \"0=\" in path:\n        return 'root'\n    elif \"=\" in path:\n        return 'object'\n    elif \"*\" in path:\n        return 'file'\n    else:\n        return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    if self.dryrun:\n        return\n\n    bug_ids = list(bug_ids)\n    params = dict(\n        id=params.get('id', None),\n        bug_ids=bug_ids,\n        subject=params.get('subject', None),\n        needinfo=self.get_needinfo(),\n        comments=self.get_comments(),\n        msg=params.get('msg', None),\n        url=params.get('url', None),\n        user=params.get('user', None),\n        products=params.get('products', None),\n        bug_classification=params.get('bug_classification', None),\n        bug_status=params.get('bug_status', None),\n        owner=params.get('owner', None),\n        product_update=params.get('product_update', None),\n        status=params.get('status', None),\n    )\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params[\"id\"] = bug_id\n        params[\"status\"] = \"NAG-AUTO-MAYBE\"\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    for key in params:\n        if key in self.ignore_meta:\n            continue\n        params[key] = self.get_bz_params(params[key])\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if self.query_params:\n        params = dict(\n            (k, v) for k, v in params.items() if k in self.query_params\n        )\n    params[\"product_ids\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return  # No bugzilla ids specified\n    params['bugzilla_ids'] = bug_ids\n    # Adjust the comments and notifications flags to prevent\n    # triggering a bugzilla update event.\n    if self.dryrun:\n        return\n    if self.name == 'Anonymous':\n        self.name = None\n    if self.autofix:\n        self.set_autofix_change(params)\n    if self.query_params.get('needinfo'):\n        self.set_needinfo()\n    if self.get_data():\n        self.get_data()\n", "def amend_bzparams(self, params, bug_ids):\n    if not self.dryrun:\n        params['component'] = 'bugzilla'\n        params['status'] = 'new'\n        params['date_last_change'] = int(time.time())\n        params['date_last_activity'] = int(time.time())\n        params['date_last_activity_pk'] = None\n        params['last_activity'] = int(time.time())\n        params['date_next_activity'] = int(time.time())\n        params['ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n        return params\n    if self.bughandler.bugzilla_ids:\n        params['bugzilla_ids'] = self.bughandler.bugzilla_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = dict()\n    params['bug_ids'] = bug_ids\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_chunks:\n        return\n\n    for i in range(len(bug_ids)):\n        params['ids[%d]' % (i + 1)] = bug_ids[i]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if self.dryrun:\n        return\n\n    bug_ids = list(bug_ids)\n    params = dict(\n        id=params.get('id', None),\n        bug_ids=bug_ids,\n        subject=params.get('subject', None),\n        needinfo=self.get_needinfo(),\n        comments=self.get_comments(),\n        msg=params.get('msg', None),\n        url=params.get('url', None),\n        user=params.get('user', None),\n        products=params.get('products', None),\n        bug_classification=params.get('bug_classification', None),\n        bug_status=params.get('bug_status', None),\n        owner=params.get('owner', None),\n        product_update=params.get('product_update', None),\n        status=params.get('status', None),\n    )\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params[\"id\"] = bug_id\n        params[\"status\"] = \"NAG-AUTO-MAYBE\"\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for key in params:\n        if key in self.ignore_meta:\n            continue\n        params[key] = self.get_bz_params(params[key])\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if self.query_params:\n        params = dict(\n            (k, v) for k, v in params.items() if k in self.query_params\n        )\n    params[\"product_ids\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return  # No bugzilla ids specified\n    params['bugzilla_ids'] = bug_ids\n    # Adjust the comments and notifications flags to prevent\n    # triggering a bugzilla update event.\n    if self.dryrun:\n        return\n    if self.name == 'Anonymous':\n        self.name = None\n    if self.autofix:\n        self.set_autofix_change(params)\n    if self.query_params.get('needinfo'):\n        self.set_needinfo()\n    if self.get_data():\n        self.get_data()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not self.dryrun:\n        params['component'] = 'bugzilla'\n        params['status'] = 'new'\n        params['date_last_change'] = int(time.time())\n        params['date_last_activity'] = int(time.time())\n        params['date_last_activity_pk'] = None\n        params['last_activity'] = int(time.time())\n        params['date_next_activity'] = int(time.time())\n        params['ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        params['bugzilla_ids'] = bug_ids\n        return params\n    if self.bughandler.bugzilla_ids:\n        params['bugzilla_ids'] = self.bughandler.bugzilla_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = dict()\n    params['bug_ids'] = bug_ids\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_chunks:\n        return\n\n    for i in range(len(bug_ids)):\n        params['ids[%d]' % (i + 1)] = bug_ids[i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[("], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append((node, deep_merge_nodes(node.value)))\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in node.items():\n                if k not in new_node:\n                    new_node[k] = v\n                else:\n                    new_node[k].extend(v)\n            result.append(new_node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            merge_result.append(deep_merge_nodes(node.value))\n        else:\n            merge_result.append(node)\n    return merge_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n            else:\n                if node.value in result:\n                    result[result.index(node.value)].append(node)\n                else:\n                    result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    if not nodes:\n        return []\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = deep_merge_nodes(node.value)\n            if node.tag not in result:\n                result.append(node.tag)\n            else:\n                result[node.tag] = new_node\n            node.value = result[node.tag]\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for key in node.keys():\n                if key in result and isinstance(result[key], MappingNode):\n                    result[key].update(new_node[key])\n                else:\n                    result[key] = new_node[key]\n            continue\n        result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            result.append((node, node.value))\n        elif isinstance(node, (ScalarNode, MappingNode)):\n            key = node.tag\n            value = node.value\n            if key in result:\n                result[key].extend(value)\n            else:\n                result.append((node, value))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (list) -> list)\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples\n    in the form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            ( ruamel.yaml.nodes.ScalarNode as a key,\n              ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param copy:\n        If True, the result is a copy of the original list of tuples.\n        Otherwise, it is the result of a deep copy.\n    \"\"\"\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            if node.tag in RUAmelNode.__tags__:\n                node.tag = RUAmelNode.__tags__[node.tag]\n            re", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0]))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    # type: (Iterable[Tuple[Node, MappingNode, Union[str, int]]]) -> List[Tuple[Node, MappingNode, Union[str, int]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n       .. deep merge any node values corresponding to duplicate keys and return\n            the result. If there are duplicate keys with non-MappingNode values\n            (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Manage Borgmatic installation credentials.')\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to use. Defaults to the '\n        '`DEFAULT_DESTINATION_CONFIG_FILENAME` environment variable.')\n    parser.add_argument(\n        '--user', required=False, help='The user name to login.')\n    parser.add_argument(\n        '--password', required=False, help='The password to login.')\n    parser.add_argument(\n        '--account', required=False, help='The account to login.')\n    parser.add_argument(\n        '--host', required=False, help='The account host to login.')\n    parser.add_argument(\n        '--token', required=False, help='The account to login.')\n    parser.add_argument(\n        '--ssl", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(*argument.split('=', 1), **argument.__dict__)\n    return parser\n", "def parse_arguments(*arguments):\n    return ArgumentParser(*arguments).parse()\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--user', '-u',\n        help='The username for the backup database',\n        required=True\n    )\n\n    parser.add_argument(\n        '--password', '-P',\n        help='The password for the backup database',\n        required=True\n    )\n\n    parser.add_argument(\n        '--destination-config', '-d',\n        help='The path to the destination configuration file',\n        required=True\n    )\n\n    parser.add_argument(\n        '--output-file', '-O',\n        help='The path to the file to write the configuration to',\n        required=True\n    )\n\n    return parser\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI interface.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_file', help='The path to a config file to store the destination for the remote repository.')\n    parser.add_argument('remote_name', help='The name of the remote repository.')\n    parser.add_argument('--verify', action='store_true', help='Verify the remote repository.')\n    parser.add_argument('--skip', action='append', help='Skip the remote repository if it already exists.')\n    parser.add_argument('--wait', action='store_true', help='Wait for the remote repository to complete.')\n\n    for argument in arguments:\n        if not argument:\n            continue\n        parser.add_argument(*argument.split(), **{'help': argument})\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_filename', nargs='?', type=str, default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--ignore_missing_ssh_keys', action='store_true',\n                        help='If this flag is set, all keys in the '\n                        'destination config file are ignored.')\n    parser.add_argument('--ssh_key_filename', type=str, default=None)\n    parser.add_argument('--ssh_key_filename_private', type=str, default=None)\n    parser.add_argument('--no_colors', action='store_true',\n                        help='Don\\'t colorize output.')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Test exporter for Galaxy archives.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple test command that writes out a message to stdout.',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        prog='test',\n        deprecation_warning=True,\n        argument_default=argparse.SUPPRESS,\n        add_help=False,\n    ) \\\n       .add_argument(\n            '--destination-config',\n            help='Path to the destination configuration file.',\n            default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n            required=False,\n        )\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        prog='backup',\n        description='Backup a database in a given location',\n        add_help=False,\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Manage Borgmatic installation credentials.')\n    parser.add_argument(\n        '--config',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Path to a config file to use. Defaults to the '\n        '`DEFAULT_DESTINATION_CONFIG_FILENAME` environment variable.')\n    parser.add_argument(\n        '--user', required=False, help='The user name to login.')\n    parser.add_argument(\n        '--password', required=False, help='The password to login.')\n    parser.add_argument(\n        '--account', required=False, help='The account to login.')\n    parser.add_argument(\n        '--host', required=False, help='The account host to login.')\n    parser.add_argument(\n        '--token', required=False, help='The account to login.')\n    parser.add_argument(\n        '--ssl", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(*argument.split('=', 1), **argument.__dict__)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(*arguments).parse()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--user', '-u',\n        help='The username for the backup database',\n        required=True\n    )\n\n    parser.add_argument(\n        '--password', '-P',\n        help='The password for the backup database',\n        required=True\n    )\n\n    parser.add_argument(\n        '--destination-config', '-d',\n        help='The path to the destination configuration file',\n        required=True\n    )\n\n    parser.add_argument(\n        '--output-file', '-O',\n        help='The path to the file to write the configuration to',\n        required=True\n    )\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI interface.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_file', help='The path to a config file to store the destination for the remote repository.')\n    parser.add_argument('remote_name', help='The name of the remote repository.')\n    parser.add_argument('--verify', action='store_true', help='Verify the remote repository.')\n    parser.add_argument('--skip', action='append', help='Skip the remote repository if it already exists.')\n    parser.add_argument('--wait', action='store_true', help='Wait for the remote repository to complete.')\n\n    for argument in arguments:\n        if not argument:\n            continue\n        parser.add_argument(*argument.split(), **{'help': argument})\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_filename', nargs='?', type=str, default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--ignore_missing_ssh_keys', action='store_true',\n                        help='If this flag is set, all keys in the '\n                        'destination config file are ignored.')\n    parser.add_argument('--ssh_key_filename', type=str, default=None)\n    parser.add_argument('--ssh_key_filename_private', type=str, default=None)\n    parser.add_argument('--no_colors', action='store_true',\n                        help='Don\\'t colorize output.')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Test exporter for Galaxy archives.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple test command that writes out a message to stdout.',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        prog='test',\n        deprecation_warning=True,\n        argument_default=argparse.SUPPRESS,\n        add_help=False,\n    ) \\\n       .add_argument(\n            '--destination-config',\n            help='Path to the destination configuration file.',\n            default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n            required=False,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        prog='backup',\n        description='Backup a database in a given location',\n        add_help=False,\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreTrueAction):\n            flags +='' + flag.dest\n        elif isinstance(flag, argparse._StoreFalseAction):\n            flags +='' + flag.dest\n        elif isinstance(flag, argparse.ArgumentParser):\n            flags +='' + flag.format_help()\n    return flags\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.extend(arg._flags)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +=''\n            flags += arg.format_help()\n        else:\n            flags +='{}'.format(arg)\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for argument in parser._actions:\n        flags +='' + argument.flag_name\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._flag_name\n    return flags\n", "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "def parser_flags(parser):\n    return''.join('--{}'.format(flag) for flag in parser.flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreTrueAction):\n            flags +='' + flag.dest\n        elif isinstance(flag, argparse._StoreFalseAction):\n            flags +='' + flag.dest\n        elif isinstance(flag, argparse.ArgumentParser):\n            flags +='' + flag.format_help()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.extend(arg._flags)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +=''\n            flags += arg.format_help()\n        else:\n            flags +='{}'.format(arg)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument in parser._actions:\n        flags +='' + argument.flag_name\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._flag_name\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(list(map(str, parser.flags)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(flag) for flag in parser.flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return dict((name.replace('-', '_').rstrip('='), arg)\n                for name, arg in namespace.__dict__.items()\n                if arg.__class__.__name__ in SUBPARSER_ALIASES)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser_name, parser.parse_args(unparsed_arguments[i]))\n                for i, subparser_name in enumerate(SUBPARSER_ALIASES))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*argument.split(' ', 1), **{'help': argument})\n        else:\n            parser.add_argument(*argument.split(' '), **{'help': argument})\n    return parser.parse_args()\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {name: parser.parse_args(args) for name, args in unparsed_arguments}\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        if argument[0] == '--':\n            name, subcommand = argument[1:].split('=')\n            if subcommand not in SUBPARSER_ALIASES:\n                raise ValueError(\"Unknown subcommand: %s\" % subcommand)\n            subcommand = SUBPARSER_ALIASES[subcommand]\n        else:\n            subcommand = argument\n        args = parser.parse_args([subcommand] + list(argument.split()))\n        namespace.update(vars(args))\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*parse_subparser_arguments(argument[2:], parser))\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = parser.parse_args(unparsed_arguments)\n    return dict((name.replace('-', '_').rstrip('='), arg)\n                for name, arg in namespace.__dict__.items()\n                if arg.__class__.__name__ in SUBPARSER_ALIASES)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser_name, parser.parse_args(unparsed_arguments[i]))\n                for i, subparser_name in enumerate(SUBPARSER_ALIASES))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*argument.split(' ', 1), **{'help': argument})\n        else:\n            parser.add_argument(*argument.split(' '), **{'help': argument})\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return {name: parser.parse_args(args) for name, args in unparsed_arguments}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        if argument[0] == '--':\n            name, subcommand = argument[1:].split('=')\n            if subcommand not in SUBPARSER_ALIASES:\n                raise ValueError(\"Unknown subcommand: %s\" % subcommand)\n            subcommand = SUBPARSER_ALIASES[subcommand]\n        else:\n            subcommand = argument\n        args = parser.parse_args([subcommand] + list(argument.split()))\n        namespace.update(vars(args))\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            parser.add_argument(*parse_subparser_arguments(argument[2:], parser))\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    for subparser in subparsers.values():\n        parsed_args.update(subparser.parse_args(unparsed_arguments))\n    return parsed_args, remaining_args, subparsers.keys()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    for parser_name, parser_args in six.iteritems(subparsers):\n        parser = subparsers[parser_name]\n        if parser_args:\n            parsed_args[parser_name] = parser_args\n        else:\n            remaining_args.append(parser_name)\n    return parsed_args, remaining_args, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        parser_arguments.update(subparser.parse_args())\n    for argname in unparsed_arguments:\n        remaining_arguments.append(parser_arguments.pop(argname, None))\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    parsed_args = []\n    for action in subparsers._actions:\n        parser = getattr(subparsers, action.dest)\n        parser_arguments[action.dest] = parser.parse_args(unparsed_arguments)\n        parsed_args.append(parser.parse_args())\n    return (parser_arguments, parsed_args, subparsers._mutually_exclusive_groups)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        parser_arguments[subparser_name] = argparse.ArgumentParser(\n            parents=[subparsers[subparser_name]])\n        for argument_name in unparsed_arguments:\n            parser_arguments[subparser_name].add_argument(\n                *parser_arguments[subparser_name].parse_args([argument_name]))\n        remaining_arguments.append(subparser_name)\n    return parser_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parser_arguments = parse_arguments_for_subparser(unparsed_arguments,\n                                                        subparser_name)\n        parsed_arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return (parsed_arguments, remaining_arguments, subparsers)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for name, subparser in six.iteritems(subparsers):\n        parser = subparser.add_parser(name)\n        arguments[name] = parser\n        remaining_arguments.append(name)\n    for name in unparsed_arguments:\n        if name in remaining_arguments:\n            remaining_arguments.remove(name)\n            parser = subparsers[name].add_parser(name)\n            arguments[name] = parser\n            remaining_arguments.append(name)\n    return arguments, remaining_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        remaining_arguments.extend(subparser.required_arguments)\n    return parsed_arguments, remaining_arguments, len(parsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    unparsed_arguments = set(unparsed_arguments)\n    for name, parser in subparsers.items():\n        parsed_args[name] = parser.parse_args(unparsed_arguments)\n        remaining_args.extend(parsed_args[name].args)\n        unparsed_arguments.difference_update(parsed_args[name].args)\n    return (parsed_args, remaining_args, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_args = {}\n    parser_remaining_args = []\n    for subparser in subparsers.values():\n        parser_args.update(subparser.parse_args())\n    for arg in unparsed_arguments:\n        if arg not in parser_args:\n            parser_args[arg] = arg\n        else:\n            parser_remaining_args.append(arg)\n    return (parser_args, parser_remaining_args, subparsers.keys())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    for subparser in subparsers.values():\n        parsed_args.update(subparser.parse_args(unparsed_arguments))\n    return parsed_args, remaining_args, subparsers.keys()\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    for parser_name, parser_args in six.iteritems(subparsers):\n        parser = subparsers[parser_name]\n        if parser_args:\n            parsed_args[parser_name] = parser_args\n        else:\n            remaining_args.append(parser_name)\n    return parsed_args, remaining_args, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        parser_arguments.update(subparser.parse_args())\n    for argname in unparsed_arguments:\n        remaining_arguments.append(parser_arguments.pop(argname, None))\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    parsed_args = []\n    for action in subparsers._actions:\n        parser = getattr(subparsers, action.dest)\n        parser_arguments[action.dest] = parser.parse_args(unparsed_arguments)\n        parsed_args.append(parser.parse_args())\n    return (parser_arguments, parsed_args, subparsers._mutually_exclusive_groups)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        parser_arguments[subparser_name] = argparse.ArgumentParser(\n            parents=[subparsers[subparser_name]])\n        for argument_name in unparsed_arguments:\n            parser_arguments[subparser_name].add_argument(\n                *parser_arguments[subparser_name].parse_args([argument_name]))\n        remaining_arguments.append(subparser_name)\n    return parser_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parser_arguments = parse_arguments_for_subparser(unparsed_arguments,\n                                                        subparser_name)\n        parsed_arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return (parsed_arguments, remaining_arguments, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for name, subparser in six.iteritems(subparsers):\n        parser = subparser.add_parser(name)\n        arguments[name] = parser\n        remaining_arguments.append(name)\n    for name in unparsed_arguments:\n        if name in remaining_arguments:\n            remaining_arguments.remove(name)\n            parser = subparsers[name].add_parser(name)\n            arguments[name] = parser\n            remaining_arguments.append(name)\n    return arguments, remaining_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        parsed_arguments.update(subparser.parse_args(unparsed_arguments))\n        remaining_arguments.extend(subparser.required_arguments)\n    return parsed_arguments, remaining_arguments, len(parsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    remaining_args = []\n    unparsed_arguments = set(unparsed_arguments)\n    for name, parser in subparsers.items():\n        parsed_args[name] = parser.parse_args(unparsed_arguments)\n        remaining_args.extend(parsed_args[name].args)\n        unparsed_arguments.difference_update(parsed_args[name].args)\n    return (parsed_args, remaining_args, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_args = {}\n    parser_remaining_args = []\n    for subparser in subparsers.values():\n        parser_args.update(subparser.parse_args())\n    for arg in unparsed_arguments:\n        if arg not in parser_args:\n            parser_args[arg] = arg\n        else:\n            parser_remaining_args.append(arg)\n    return (parser_args, parser_remaining_args, subparsers.keys())\n", "is_pass": false, "return_code": 2}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of commands from a given text file\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    for command in SUBPARSER_ALIASES:\n        parser_command = subparsers.add_parser(command)\n        parser_command.add_arguments(\n            default='',\n            help='The text to parse',\n            metavar=\"FILE\")\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test a simple CLI tool\")\n    for command_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=\"subcommand_{}\".format(command_name.replace(\"-\", \"_\")))\n        args = parser.parse_args([\"--help\"])\n        args.command = command_name\n        make_parser(subparser, args)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that subcommands can be run with arguments.',\n        add_help=False,\n        )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--%s' % alias,\n            action='store_true',\n            help='Run commands with %s instead of --help.' % alias,\n            )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % name, action='store_true')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the command line tools for remote Git repositories.\")\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        make_parsers(subparser=subparser)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        for subparser_name in SUBPARSER_ALIASES:\n            make_parser(subparser, subparser_name)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"A simple test parser\")\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--' + argument, type=int, help=argument.capitalize())\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the command line tool.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for command_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(command_name),\n            dest=command_name,\n            action='store_const',\n            const=lambda x: print(x),\n            default=None,\n            help='Test a command with this name.'\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a CSV file.'\n    )\n\n    for subcommand in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subcommand)\n\n        for name, command in SUBPARSER_ALIASES[subcommand]:\n            parser.add_argument(\n                name=name,\n                help=command[0],\n                action=command[1],\n                default=command[2],\n                required=command[3] is None,\n                choices=command[3],\n                metavar='PATH',\n                type=command[4],\n            )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"A simple tool to parse and export data from a data source.\"\n    )\n\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            \"--{}\".format(alias),\n            metavar=\"FILENAME\",\n            help=\"File to export data from.\",\n        )\n\n    return parser.parse_known_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse a series of commands from a given text file\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    for command in SUBPARSER_ALIASES:\n        parser_command = subparsers.add_parser(command)\n        parser_command.add_arguments(\n            default='',\n            help='The text to parse',\n            metavar=\"FILE\")\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test a simple CLI tool\")\n    for command_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=\"subcommand_{}\".format(command_name.replace(\"-\", \"_\")))\n        args = parser.parse_args([\"--help\"])\n        args.command = command_name\n        make_parser(subparser, args)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that subcommands can be run with arguments.',\n        add_help=False,\n        )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--%s' % alias,\n            action='store_true',\n            help='Run commands with %s instead of --help.' % alias,\n            )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % name, action='store_true')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test the command line tools for remote Git repositories.\")\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        make_parsers(subparser=subparser)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subparser_name)\n        for subparser_name in SUBPARSER_ALIASES:\n            make_parser(subparser, subparser_name)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"A simple test parser\")\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--' + argument, type=int, help=argument.capitalize())\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the command line tool.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for command_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(command_name),\n            dest=command_name,\n            action='store_const',\n            const=lambda x: print(x),\n            default=None,\n            help='Test a command with this name.'\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to parse data from a CSV file.'\n    )\n\n    for subcommand in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=subcommand)\n\n        for name, command in SUBPARSER_ALIASES[subcommand]:\n            parser.add_argument(\n                name=name,\n                help=command[0],\n                action=command[1],\n                default=command[2],\n                required=command[3] is None,\n                choices=command[3],\n                metavar='PATH',\n                type=command[4],\n            )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"A simple tool to parse and export data from a data source.\"\n    )\n\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            \"--{}\".format(alias),\n            metavar=\"FILENAME\",\n            help=\"File to export data from.\",\n        )\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            new_node = node.copy()\n            for k, v in new_node.items():\n                new_node[k] = deep_merge_nodes(v)\n            node = new_node\n        elif isinstance(node, ScalarNode):\n            node = node.value\n        elif isinstance(node, list):\n            node = [item.value if isinstance(item, ScalarNode) else item for item in node]\n\n        result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n    :param nodes:\n        A list of tuples in the form of:\n\n            (\n                ruamel.yaml.nodes.ScalarNode as a key,\n                ruamel.yaml.nodes.MappingNode or other Node as a value,\n            )\n\n    :param deep:\n        A boolean indicating if the values should be collapsed into MappingNodes\n        and returned as a list of tuples with their own values.\n    \"\"\"\n    return [\n        (node, mapping_node) if isinstance(node, MappingNode) else node\n        for node, mapping_node in nodes\n        if not (isinstance(node, Node) or isinstance(node, MappingNode))\n    ] if deep els", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append(deep_merge_nodes(node[0].value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.append(deep_merge_nodes(node.value))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    nodes = copy.deepcopy(nodes)\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            nodes.append((k, deep_merge_nodes(v)))\n        else:\n            if k in nodes:\n                nodes[k] = [(nodes[k], v)]\n            else:\n                nodes[k] = v\n    return nodes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if value in result:\n            result[result.index(value)].append(node)\n        else:\n            result.append(value)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[1], MappingNode):\n            node_val = node[1].value\n        elif isinstance(node[1], Node):\n            node_val = node[1].value\n        else:\n            node_val = node[1]\n        if node_val in result:\n            result[result.index(node_val)].append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node.value\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            next_node = deep_merge_nodes(node[0].value)\n        else:\n            next_node = node[0]\n\n        if isinstance(next_node, MappingNode):\n            next_node.value = node[1]\n        else:\n            next_node.value = next_node\n\n        result.append(next_node)\n\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Borgmatic Project (Borgmatic API v{0})'.format(\n            __version__),\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser(prog='prosper')\n    for argument in arguments:\n        parser.add_argument(*argument.split('='), **argument_options(argument))\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test the installation of Borgmatic packages in a \"\n        \"repository.\")\n\n    parser.add_argument(\n        '--config-file',\n        required=True,\n        help='Path to the config file to use.')\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    # Required arguments\n    parser.add_argument('config', metavar='CONFIG', help='Configuration file to use')\n\n    # Optional arguments\n    parser.add_argument(\n        '--dry-run', action='store_true', help='Dry run mode, do not write changes'\n    )\n\n    # Parse arguments\n    args = parser.parse_args(*arguments)\n\n    # Return parsed arguments\n    return args\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(*argument.split('='), **argument_kwargs(argument))\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Borgmatic CLI tools for managing Borgmatic data sources.\n        \"\"\")\n\n    parser.add_argument(\n       'source_config',\n        metavar='PATH',\n        help='The path to a configuration file to load.'\n    )\n\n    return parse_arguments_from_config(parser, *arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Given command-line arguments with which this script was invoked,\n        parse the arguments and return them as an ArgumentParser\n        instance. With import sys argparse file DEFAULT_DESTINATION_CONFIG_FILENAME\n        and parse_arguments() this script was invoked.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--config\",\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help=\"The config file to use to parse the source for the repository.\",\n    )\n    parser.add_argument(\n        \"--remote\",\n        default=None,\n        help=\"The remote name to use when parsing the source for the repository.\",\n    )\n    parser.add_argument(\n        \"--branch\",\n        default=\"master\",\n        help=\"The branch to use when parsing the source for the repository.\",\n    )\n    parser.add_argumen", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Common User Password Manager for Borgmatic\")\n    parser.add_argument(\n        \"--config-file\",\n        dest=\"config_file\",\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help=\"Path to a configuration file to use for the user password manager. \"\n        \"Defaults to %(default)s\")\n\n    for argument in arguments:\n        parser.add_argument(*argument.args(), **argument.kwargs())\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Load and prepare a repository from a given URL.'\n    )\n    parser.add_argument(\n        'url', nargs='?',\n        help='The URL to a repository to pull from.'\n    )\n    parser.add_argument(\n        '--prepare', action='store_true',\n        help='If this flag is set, prepare the repository to be prepared.'\n    )\n    parser.add_argument(\n        '--clean', action='store_true',\n        help='If this flag is set, clean the repository before running.'\n    )\n    parser.add_argument(\n        '--dest', default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='The destination configuration file.'\n    )\n    parser.add_argument(\n        '--verbose', action='store_true',\n        help='Increase verbosity of the command.'\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple strategy for parsing remote Git repositories.',\n        add_help=False,\n        prog='git',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        **vars(arguments[0])\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='Borgmatic Project (Borgmatic API v{0})'.format(\n            __version__),\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(prog='prosper')\n    for argument in arguments:\n        parser.add_argument(*argument.split('='), **argument_options(argument))\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test the installation of Borgmatic packages in a \"\n        \"repository.\")\n\n    parser.add_argument(\n        '--config-file',\n        required=True,\n        help='Path to the config file to use.')\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Borgmatic CLI tool',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    # Required arguments\n    parser.add_argument('config', metavar='CONFIG', help='Configuration file to use')\n\n    # Optional arguments\n    parser.add_argument(\n        '--dry-run', action='store_true', help='Dry run mode, do not write changes'\n    )\n\n    # Parse arguments\n    args = parser.parse_args(*arguments)\n\n    # Return parsed arguments\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(*argument.split('='), **argument_kwargs(argument))\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Borgmatic CLI tools for managing Borgmatic data sources.\n        \"\"\")\n\n    parser.add_argument(\n       'source_config',\n        metavar='PATH',\n        help='The path to a configuration file to load.'\n    )\n\n    return parse_arguments_from_config(parser, *arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Given command-line arguments with which this script was invoked,\n        parse the arguments and return them as an ArgumentParser\n        instance. With import sys argparse file DEFAULT_DESTINATION_CONFIG_FILENAME\n        and parse_arguments() this script was invoked.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--config\",\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help=\"The config file to use to parse the source for the repository.\",\n    )\n    parser.add_argument(\n        \"--remote\",\n        default=None,\n        help=\"The remote name to use when parsing the source for the repository.\",\n    )\n    parser.add_argument(\n        \"--branch\",\n        default=\"master\",\n        help=\"The branch to use when parsing the source for the repository.\",\n    )\n    parser.add_argumen", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Common User Password Manager for Borgmatic\")\n    parser.add_argument(\n        \"--config-file\",\n        dest=\"config_file\",\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help=\"Path to a configuration file to use for the user password manager. \"\n        \"Defaults to %(default)s\")\n\n    for argument in arguments:\n        parser.add_argument(*argument.args(), **argument.kwargs())\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Load and prepare a repository from a given URL.'\n    )\n    parser.add_argument(\n        'url', nargs='?',\n        help='The URL to a repository to pull from.'\n    )\n    parser.add_argument(\n        '--prepare', action='store_true',\n        help='If this flag is set, prepare the repository to be prepared.'\n    )\n    parser.add_argument(\n        '--clean', action='store_true',\n        help='If this flag is set, clean the repository before running.'\n    )\n    parser.add_argument(\n        '--dest', default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='The destination configuration file.'\n    )\n    parser.add_argument(\n        '--verbose', action='store_true',\n        help='Increase verbosity of the command.'\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return ArgumentParser(\n        description='A simple strategy for parsing remote Git repositories.',\n        add_help=False,\n        prog='git',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        **vars(arguments[0])\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(['--{}'.format(flag)\n                     for flag in parser._actions\n                     if isinstance(flag, argparse.ArgumentParser)])\n", "def parser_flags(parser):\n    args = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            args.append(' '.join([a.description for a in arg._actions]))\n        else:\n            args.append(arg)\n    return''.join(args)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default is not None:\n            flags +='{}'.format(arg.default)\n        if arg.required and not arg.is_input:\n            flags +='--{}'.format(arg.dest)\n    return flags\n", "def parser_flags(parser):\n    return''.join([\n        '--{}'.format(flag.name.replace('_', '-'))\n        for flag in parser._actions\n    ])\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n    return flags\n", "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "def parser_flags(parser):\n    flags = []\n    for action in parser._actions:\n        if isinstance(action, argparse._StoreTrueAction):\n            flags.append('--%s' % action.dest)\n        elif isinstance(action, argparse._StoreFalseAction):\n            flags.append('--false')\n        elif isinstance(action, argparse._StoreUnsetAction):\n            flags.append('--unset')\n        elif isinstance(action, argparse._StoreAllActionsAction):\n            flags.append('--all')\n        elif isinstance(action, argparse._StoreOneAction):\n            flags.append('--%s' % action.dest)\n        elif isinstance(action, argparse._StoreAllActionsAction):\n            flags.append('--all')\n        elif isinstance(action, argparse._StoreOneActionWithDefaultAction):\n            flags.append('--default')\n        elif isinstance(action, argparse._StoreOneActionWit", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        flags +='' + str(flag)\n    return flags\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(flag)\n                     for flag in parser._actions\n                     if isinstance(flag, argparse.ArgumentParser)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    args = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            args.append(' '.join([a.description for a in arg._actions]))\n        else:\n            args.append(arg)\n    return''.join(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default is not None:\n            flags +='{}'.format(arg.default)\n        if arg.required and not arg.is_input:\n            flags +='--{}'.format(arg.dest)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([\n        '--{}'.format(flag.name.replace('_', '-'))\n        for flag in parser._actions\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for action in parser._actions:\n        if isinstance(action, argparse._StoreTrueAction):\n            flags.append('--%s' % action.dest)\n        elif isinstance(action, argparse._StoreFalseAction):\n            flags.append('--false')\n        elif isinstance(action, argparse._StoreUnsetAction):\n            flags.append('--unset')\n        elif isinstance(action, argparse._StoreAllActionsAction):\n            flags.append('--all')\n        elif isinstance(action, argparse._StoreOneAction):\n            flags.append('--%s' % action.dest)\n        elif isinstance(action, argparse._StoreAllActionsAction):\n            flags.append('--all')\n        elif isinstance(action, argparse._StoreOneActionWithDefaultAction):\n            flags.append('--default')\n        elif isinstance(action, argparse._StoreOneActionWit", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        flags +='' + str(flag)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--version', action='version',\n        version='%(prog)s {}'.format(__version__))\n\n    for flag in ('upgrade', 'delete','revision','show', 'all'):\n        parser.add_argument(\n            '--' + flag, action='store_true', help='Show this help message')\n\n    parser_flags(parser)\n    return parser.format_help()\n", "def bash_completion():\n    parser = parser_flags(bash_completion())\n    parser.prog = \"bash_completion\"\n    parser.description = \"Run bash completion for the Borgmatic CLI\"\n    return parser\n", "def bash_completion():\n    return '\\n'.join([\n        '',\n        '# Generated by Borgmatic.',\n        '',\n        '# The command line tool is based on the ',\n        '# http://github.com/Borgmatic/Borgmatic',\n        '# Command-Line interface.',\n        '',\n        UPGRADE_MESSAGE\n    ])\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__\n    )\n\n    parser_flags = parser.add_argument_group('flags')\n\n    return bash_completion_from_flags(parser_flags)\n", "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s'+ __version__)\n    parser_flags(parser)\n    return parser.format_help()\n", "def bash_completion():\n    parser = parser_flags(bash_completion_parser())\n    return parser.format_help()\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    parser_flags(parser)\n    return parser.format_help()\n", "def bash_completion():\n    return '\\n'.join(_BASH_COMMAND)\n", "def bash_completion():\n    return \"\"\"\\\n# Borgmatic command line arguments\nfrom __future__ import print_function\nfrom pkg_resources import iter_entry_points\nfrom pkg_resources import declare_names\nfrom pkg_resources import Require\nfrom pkg_resources import Require, parse_requirements\nfrom pkg_resources import Requirement\nfrom pkg_resources import RequirementSummary\nfrom pkg_resources import RequirementDescription\nfrom pkg_resources import Requirement, Requirement\nfrom pkg_resources import RequirementVersion\nfrom pkg_resources import RequirementList\nfrom pkg_resources import Requirement, RequirementEntryPoint\nfrom pkg_resources import Requirement, RequirementSet\nfrom pkg_resources import Requirement\nfrom pkg_resources import RequirementSummary\nfrom pkg_resources import Requirement\nfrom pkg_resources import Requirement, RequirementList, RequirementEntryPoint\nfrom pkg_resources import Requirement, Requirement\nfrom pkg_resources import Requirement, RequirementSet, RequirementList\nfrom pkg_resources import Requirement\nfrom pkg_resources import Requirement, RequirementSummary\nfrom pkg_resources import Requirement, Requiremen", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser_flags(parser)\n\n    return parser.format_help()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--version', action='version',\n        version='%(prog)s {}'.format(__version__))\n\n    for flag in ('upgrade', 'delete','revision','show', 'all'):\n        parser.add_argument(\n            '--' + flag, action='store_true', help='Show this help message')\n\n    parser_flags(parser)\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(bash_completion())\n    parser.prog = \"bash_completion\"\n    parser.description = \"Run bash completion for the Borgmatic CLI\"\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join([\n        '',\n        '# Generated by Borgmatic.',\n        '',\n        '# The command line tool is based on the ',\n        '# http://github.com/Borgmatic/Borgmatic',\n        '# Command-Line interface.',\n        '',\n        UPGRADE_MESSAGE\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__\n    )\n\n    parser_flags = parser.add_argument_group('flags')\n\n    return bash_completion_from_flags(parser_flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s'+ __version__)\n    parser_flags(parser)\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(bash_completion_parser())\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    parser_flags(parser)\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join(_BASH_COMMAND)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\\\n# Borgmatic command line arguments\nfrom __future__ import print_function\nfrom pkg_resources import iter_entry_points\nfrom pkg_resources import declare_names\nfrom pkg_resources import Require\nfrom pkg_resources import Require, parse_requirements\nfrom pkg_resources import Requirement\nfrom pkg_resources import RequirementSummary\nfrom pkg_resources import RequirementDescription\nfrom pkg_resources import Requirement, Requirement\nfrom pkg_resources import RequirementVersion\nfrom pkg_resources import RequirementList\nfrom pkg_resources import Requirement, RequirementEntryPoint\nfrom pkg_resources import Requirement, RequirementSet\nfrom pkg_resources import Requirement\nfrom pkg_resources import RequirementSummary\nfrom pkg_resources import Requirement\nfrom pkg_resources import Requirement, RequirementList, RequirementEntryPoint\nfrom pkg_resources import Requirement, Requirement\nfrom pkg_resources import Requirement, RequirementSet, RequirementList\nfrom pkg_resources import Requirement\nfrom pkg_resources import Requirement, RequirementSummary\nfrom pkg_resources import Requirement, Requiremen", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser_flags(parser)\n\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.ArgumentParser(\n        description='Borgmatic CLI tool for managing repositories.')\n    for subparser in SUBPARSER_ALIASES.values():\n        namespace.add_argument(*subparser.short_flags, **subparser.long_flags)\n    for argument in unparsed_arguments:\n        if isinstance(argument, argparse.Argument):\n            namespace.add_argument(*argument.args, **argument.kwargs)\n        elif isinstance(argument, (list, tuple)):\n            namespace.add_argument(*argument, **argument.flags)\n        elif isinstance(argument, dict):\n            namespace.add_argument(**argument)\n        else:\n            raise ValueError(\n                'Unrecognized argument type {}'.format(type(argument)))\n    return vars(namespace)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.names, **argument.values)\n    return dict(parser.parse_args().__dict__)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            subparser_name, argument_name = argument.split('=', 1)\n        except ValueError:\n            # If we get here we didn't find a value for the argument.\n            # This is an example of how to deal with --global arguments.\n            raise Exception(\n                \"Unable to parse argument '{}' as global argument.\".format(argument))\n        subparser_parser = SUBPARSER_ALIASES.get(subparser_name, None)\n        if subparser_parser:\n            argument_value = subparser_parser.parse_args(argument)\n            namespace.__dict__.update(argument_value.__dict__)\n        else:\n            namespace.__dict__.update(argument_value)\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace.__dict__.update(vars(argument))\n        except AttributeError:\n            namespace.__dict__.update({argument.name: argument})\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser.name, subparser) for subparser in parser._subparsers.values())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.ArgumentParser(\n        description='Borgmatic CLI tool for managing repositories.')\n    for subparser in SUBPARSER_ALIASES.values():\n        namespace.add_argument(*subparser.short_flags, **subparser.long_flags)\n    for argument in unparsed_arguments:\n        if isinstance(argument, argparse.Argument):\n            namespace.add_argument(*argument.args, **argument.kwargs)\n        elif isinstance(argument, (list, tuple)):\n            namespace.add_argument(*argument, **argument.flags)\n        elif isinstance(argument, dict):\n            namespace.add_argument(**argument)\n        else:\n            raise ValueError(\n                'Unrecognized argument type {}'.format(type(argument)))\n    return vars(namespace)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.names, **argument.values)\n    return dict(parser.parse_args().__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            subparser_name, argument_name = argument.split('=', 1)\n        except ValueError:\n            # If we get here we didn't find a value for the argument.\n            # This is an example of how to deal with --global arguments.\n            raise Exception(\n                \"Unable to parse argument '{}' as global argument.\".format(argument))\n        subparser_parser = SUBPARSER_ALIASES.get(subparser_name, None)\n        if subparser_parser:\n            argument_value = subparser_parser.parse_args(argument)\n            namespace.__dict__.update(argument_value.__dict__)\n        else:\n            namespace.__dict__.update(argument_value)\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        try:\n            namespace.__dict__.update(vars(argument))\n        except AttributeError:\n            namespace.__dict__.update({argument.name: argument})\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    return dict((subparser.name, subparser) for subparser in parser._subparsers.values())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments.update(parser.parse_args())\n    for argument in unparsed_arguments:\n        if argument not in parser_arguments:\n            parser_arguments[argument] = parser.parse_args()\n        remaining_arguments.append(argument)\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_names = SUBPARSER_ALIASES.keys()\n    parser_names.remove('repository')\n    parsers = {}\n    for parser_name in parser_names:\n        parser = SUBPARSER_ALIASES[parser_name](parser_name)\n        parsers[parser_name] = parser\n    remaining_arguments = unparsed_arguments\n    for parser_name in parser_names:\n        parser = parsers[parser_name]\n        remaining_arguments = parser.parse_args(remaining_arguments)\n    return parsers, remaining_arguments, parser_names\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_dict = {}\n    parser_args = []\n    remaining_args = []\n    for subparser in subparsers.values():\n        parser_dict.update(subparser.parse_args(unparsed_arguments))\n        parser_args.extend(subparser.required_args)\n        remaining_args += subparser.required_args\n    return (parser_dict, parser_args, remaining_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in SUBPARSER_ALIASES:\n        subparser = subparsers[name]\n        parsed_arguments[name] = subparser.parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(subparser.required_arguments)\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    not_parsed_args = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_args[subparser_name] = subparser.parse_args(unparsed_arguments)\n        not_parsed_args.extend(subparser.required_arguments)\n    return (parsed_args, not_parsed_args, not_parsed_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name in SUBPARSER_ALIASES:\n        parser = subparsers[parser_name]\n        parser_arguments = parser.parse_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments += parser_arguments.keys()\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name])\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name, subparser in subparsers.items():\n        for name in unparsed_arguments:\n            if name not in subparser._names:\n                continue\n            arguments[parser_name] = subparser.parse(name)\n            remaining_arguments.append(name)\n    return arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = set()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.required:\n            not_claimed.update(subparser.required)\n    return (parsed_arguments, not_claimed, subparsers)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parser_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments()\n\n    return parser_arguments, remaining_arguments, remaining_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments.update(parser.parse_args())\n    for argument in unparsed_arguments:\n        if argument not in parser_arguments:\n            parser_arguments[argument] = parser.parse_args()\n        remaining_arguments.append(argument)\n    return (parser_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_names = SUBPARSER_ALIASES.keys()\n    parser_names.remove('repository')\n    parsers = {}\n    for parser_name in parser_names:\n        parser = SUBPARSER_ALIASES[parser_name](parser_name)\n        parsers[parser_name] = parser\n    remaining_arguments = unparsed_arguments\n    for parser_name in parser_names:\n        parser = parsers[parser_name]\n        remaining_arguments = parser.parse_args(remaining_arguments)\n    return parsers, remaining_arguments, parser_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_dict = {}\n    parser_args = []\n    remaining_args = []\n    for subparser in subparsers.values():\n        parser_dict.update(subparser.parse_args(unparsed_arguments))\n        parser_args.extend(subparser.required_args)\n        remaining_args += subparser.required_args\n    return (parser_dict, parser_args, remaining_args)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name in SUBPARSER_ALIASES:\n        subparser = subparsers[name]\n        parsed_arguments[name] = subparser.parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(subparser.required_arguments)\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_args = {}\n    not_parsed_args = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_args[subparser_name] = subparser.parse_args(unparsed_arguments)\n        not_parsed_args.extend(subparser.required_arguments)\n    return (parsed_args, not_parsed_args, not_parsed_args)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name in SUBPARSER_ALIASES:\n        parser = subparsers[parser_name]\n        parser_arguments = parser.parse_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments += parser_arguments.keys()\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name])\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser_name, subparser in subparsers.items():\n        for name in unparsed_arguments:\n            if name not in subparser._names:\n                continue\n            arguments[parser_name] = subparser.parse(name)\n            remaining_arguments.append(name)\n    return arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = set()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.required:\n            not_claimed.update(subparser.required)\n    return (parsed_arguments, not_claimed, subparsers)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser_arguments = {}\n    remaining_arguments = []\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = subparsers[subparser_name]\n        parser_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        remaining_arguments += subparser.remaining_arguments()\n\n    return parser_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 2}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool for Borgmatic'\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses command line arguments and passes them to the application.'\n    )\n\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            argument=argument['argument'],\n            help=argument['help'],\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parsing functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=command)\n\n        make_parser(subparser)\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool to parse and validate output of a single JSON file.\"\n    )\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = getattr(parser, subparser_name)\n        parser.add_subparsers(dest=\"subcommand_{}\".format(subparser_name))\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple text document')\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(argument),\n                            default=None,\n                            help='The {} argument'.format(argument))\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        subparser = argparse.ArgumentParser(\n            description='Arguments for {}'.format(name))\n        SUBPARSER_ALIASES[name](subparser)\n        parser.add_argument('--{}'.format(name), '--{}'.format(name.lower()),\n                            action='store_true',\n                            help='Add a {} argument'.format(name))\n        parser.add_argument('-v', '--version', action='store_true',\n                            help='Show the version of the program.')\n        parser.add_argument('-y', '--yes', action='store_true',\n                            help='Show yes to all prompts')\n        parser.add_argument('-q', '--quit', action='store_true',\n                  ", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse data from a CSV file.')\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(subparser.replace('-', '_')),\n            dest=subparser,\n            help=subparser.capitalize() +'argument')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias.replace('-', '_').upper()),\n            nargs='?',\n            type=str,\n            default=None,\n            help='Alias for the data source.'\n        )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias),\n            action='store_true',\n            help='Program that parses files containing CSV files.')\n\n    return parser.parse_known_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test command line tool for Borgmatic'\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple command line tool that parses command line arguments and passes them to the application.'\n    )\n\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            argument=argument['argument'],\n            help=argument['help'],\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parsing functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command in SUBPARSER_ALIASES:\n        subparser = parser.add_subparsers(dest=command)\n\n        make_parser(subparser)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool to parse and validate output of a single JSON file.\"\n    )\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = getattr(parser, subparser_name)\n        parser.add_subparsers(dest=\"subcommand_{}\".format(subparser_name))\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple text document')\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(argument),\n                            default=None,\n                            help='The {} argument'.format(argument))\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for name in SUBPARSER_ALIASES:\n        subparser = argparse.ArgumentParser(\n            description='Arguments for {}'.format(name))\n        SUBPARSER_ALIASES[name](subparser)\n        parser.add_argument('--{}'.format(name), '--{}'.format(name.lower()),\n                            action='store_true',\n                            help='Add a {} argument'.format(name))\n        parser.add_argument('-v', '--version', action='store_true',\n                            help='Show the version of the program.')\n        parser.add_argument('-y', '--yes', action='store_true',\n                            help='Show yes to all prompts')\n        parser.add_argument('-q', '--quit', action='store_true',\n                  ", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse data from a CSV file.')\n    for subparser in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(subparser.replace('-', '_')),\n            dest=subparser,\n            help=subparser.capitalize() +'argument')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(argument)\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias.replace('-', '_').upper()),\n            nargs='?',\n            type=str,\n            default=None,\n            help='Alias for the data source.'\n        )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing CSV files.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(alias),\n            action='store_true',\n            help='Program that parses files containing CSV files.')\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield {\n            \"response\": response[i:i + 1]\n        }\n", "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be of type list\")\n\n    if len(response) < max_results:\n        yield response\n    else:\n        for i in range(0, len(response), max_results):\n            yield response[i:i + max_results]\n", "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "def paging(response, max_results):\n\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['page-size'])\n\n    while offset < max_results:\n        for item in response['results']:\n            yield {\n                'count': item['meta']['hits'],\n                'offset': item['meta']['offset'],\n               'results': item['results'],\n                'total_size': item['meta']['totalSize']\n            }\n\n        offset += page_size\n        page_size += 1\n", "def paging(response, max_results):\n    return (i for i in response[:max_results])\n", "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "def paging(response, max_results):\n\n    try:\n        if len(response) <= max_results:\n            for item in response:\n                yield item\n        else:\n            raise Exception(\"Too many results to page.\")\n\n    except Exception as error:\n        raise Exception(\"Error occurred: \" + str(error))\n", "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield {\n            \"response\": response[i:i + 1]\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    if not isinstance(response, list):\n        raise ValueError(\"response must be of type list\")\n\n    if len(response) < max_results:\n        yield response\n    else:\n        for i in range(0, len(response), max_results):\n            yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(1, max_results):\n            yield response[i:]\n    else:\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['page-size'])\n\n    while offset < max_results:\n        for item in response['results']:\n            yield {\n                'count': item['meta']['hits'],\n                'offset': item['meta']['offset'],\n               'results': item['results'],\n                'total_size': item['meta']['totalSize']\n            }\n\n        offset += page_size\n        page_size += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return (i for i in response[:max_results])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i:i + 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    try:\n        if len(response) <= max_results:\n            for item in response:\n                yield item\n        else:\n            raise Exception(\"Too many results to page.\")\n\n    except Exception as error:\n        raise Exception(\"Error occurred: \" + str(error))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response\n            response = []\n        if page >= len(response):\n            break\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)))\n    return int(float(size.strip(\"B\")))\n", "def size_to_bytes(size: str) -> int:\n    value = int(size)\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)) * 1024)\n    raise ValueError(\"Could not convert {} to bytes\".format(size))\n", "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Invalid value for input file size: {}\".format(size))\n    result = round(number * multiplier)\n    return result\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor, unit in FILE_UNITS.items():\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n\n    raise ValueError(f\"Unknown file size '{size}'\")\n", "def size_to_bytes(size: str) -> int:\n    converted_size = float(size.replace(\"B\", \"\"))\n    return int(round(converted_size / 1024))\n", "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value = value.quantize(Decimal('0.' + '0' * 8), rounding=ROUND_UP)\n    return value.normalize().as_bytes()\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)))\n    return int(float(size.strip(\"B\")))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = int(size)\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if value < 1024:\n            return value\n        value /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)) * 1024)\n    raise ValueError(\"Could not convert {} to bytes\".format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            multiplier *= 1024\n            break\n    try:\n        number, unit = size.split(\"i\")\n    except ValueError:\n        number, unit = size, \"B\"\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError(\"Invalid value for input file size: {}\".format(size))\n    result = round(number * multiplier)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if unit == \"P\":\n            return int(float(size) / 1024)\n        else:\n            return int(float(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor, unit in FILE_UNITS.items():\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            return int(size)\n\n    raise ValueError(f\"Unknown file size '{size}'\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    converted_size = float(size.replace(\"B\", \"\"))\n    return int(round(converted_size / 1024))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"B\", \"\"))\n    value = value.quantize(Decimal('0.' + '0' * 8), rounding=ROUND_UP)\n    return value.normalize().as_bytes()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, [d.items() for d in dicts]))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, [d.items() for d in dicts]))\n", "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(d.items() for d in dicts))\n", "def _dictsum(dicts):\n    return functools.reduce(operator.add, map(dict.items, dicts))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, [d.items() for d in dicts]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(reduce(operator.add, [d.items() for d in dicts]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(d.items() for d in dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return functools.reduce(operator.add, map(dict.items, dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(_dict, dicts)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    for key, val in url_args.items():\n        url[key] = val\n    return url\n", "def _replace_url_args(url, url_args):\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    for arg, value in url_args.items():\n        if value is not None:\n            url[arg] = value\n    return url\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    for key, val in url_args.items():\n        url[key] = val\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.replace('{{' + key + '}}', str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{}\\:(.+?)}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for arg, value in url_args.items():\n        if value is not None:\n            url[arg] = value\n    return url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "def is_none_string(val: str) -> bool:\n    if val == 'None':\n        return True\n    return False\n", "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == 'None'\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is not str\n", "def is_none_string(val: Optional[str]) -> bool:\n    return val is None or val == \"\"\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    if val == 'None':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == 'None'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is not str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Optional[str]) -> bool:\n    return val is None or val == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root == path:\n        raise Exception('root cannot be stripped')\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception('path does not start with root {0}'.format(root))\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Invalid path %s\" % path)\n", "def strip_root(path, root):\n    if not root:\n        return path\n    if path == root:\n        raise ValueError('Root cannot be the root of the path')\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if root:\n        path = '/'.join([p for p in path.split('/') if p!= root])\n    return path\n", "def strip_root(path, root):\n    if root == path:\n        return path\n\n    if path == root:\n        raise Exception('Root \"%s\" is already stripped.' % root)\n\n    # Get parent directory\n    path_parent = os.path.dirname(path)\n\n    if path_parent == root:\n        return ''\n\n    # Recurse\n    return strip_root(path_parent, root)\n", "def strip_root(path, root):\n    if path == '':\n        raise Exception('Root cannot be removed from empty path')\n\n    if path == root:\n        return path\n\n    if root == '':\n        return path\n\n    if path[0] == root[0] and path[1:] == root[1:]:\n        return path[1:]\n\n    raise Exception('Invalid root for removal: %s' % root)\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n\n    if root == path:\n        return path\n\n    if path.startswith(root):\n        return path[len(root):]\n\n    raise OSError(\n        \"Invalid path: '{}'. Root '{}' does not match '{}'\"\n       .format(path, root, path[:len(root)])\n    )\n", "def strip_root(path, root):\n    if root == path:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"path does not start with root '%s'\" % root)\n", "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return path\n    if path[0] == root[0]:\n        path = path[1:]\n    else:\n        root = root[1:]\n    return path if path == root else None\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root == path:\n        raise Exception('root cannot be stripped')\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception('path does not start with root {0}'.format(root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Invalid path %s\" % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    if path == root:\n        raise ValueError('Root cannot be the root of the path')\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root:\n        path = '/'.join([p for p in path.split('/') if p!= root])\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == path:\n        return path\n\n    if path == root:\n        raise Exception('Root \"%s\" is already stripped.' % root)\n\n    # Get parent directory\n    path_parent = os.path.dirname(path)\n\n    if path_parent == root:\n        return ''\n\n    # Recurse\n    return strip_root(path_parent, root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == '':\n        raise Exception('Root cannot be removed from empty path')\n\n    if path == root:\n        return path\n\n    if root == '':\n        return path\n\n    if path[0] == root[0] and path[1:] == root[1:]:\n        return path[1:]\n\n    raise Exception('Invalid root for removal: %s' % root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n\n    if root == path:\n        return path\n\n    if path.startswith(root):\n        return path[len(root):]\n\n    raise OSError(\n        \"Invalid path: '{}'. Root '{}' does not match '{}'\"\n       .format(path, root, path[:len(root)])\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == path:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"path does not start with root '%s'\" % root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return path\n    if path[0] == root[0]:\n        path = path[1:]\n    else:\n        root = root[1:]\n    return path if path == root else None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    flags = ''\n    for argument in parser._actions:\n        if argument.dest is None:\n            flags +='' + argument.default\n        else:\n            flags +='' + argument.choices[argument.dest]\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default == argparse.SUPPRESS:\n            continue\n        flags +='{}'.format(arg.default)\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        else:\n  ", "def parser_flags(parser):\n    flags = []\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                for flag in action._group_kwargs['flags']:\n                    flags.append('{0}'.format(flag))\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{} '.format(flag)\n                flags = flags.strip()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        else:\n            flags += '-' * arg.default\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_args for a in parser._actions)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse._StoreTrueAction):\n            flags +='' + arg.dest\n        elif isinstance(arg, argparse._StoreFalseAction):\n            flags +='' + arg.dest +''\n    return flags\n", "def parser_flags(parser):\n    return''.join(flag.arg for flag in parser._option_class.parse_args(parser.parse_args()))\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n            flags += arg._flag_str()\n    return flags\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument in parser._actions:\n        if argument.dest is None:\n            flags +='' + argument.default\n        else:\n            flags +='' + argument.choices[argument.dest]\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default == argparse.SUPPRESS:\n            continue\n        flags +='{}'.format(arg.default)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.OPTIONAL:\n            flags +=''\n        elif arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        elif arg.nargs == argparse.ONE_OR_MORE:\n            flags +=''\n        else:\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                for flag in action._group_kwargs['flags']:\n                    flags.append('{0}'.format(flag))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +=''\n                for flag in action._option_string_actions:\n                    flags += '{} '.format(flag)\n                flags = flags.strip()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        else:\n            flags += '-' * arg.default\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_args for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse._StoreTrueAction):\n            flags +='' + arg.dest\n        elif isinstance(arg, argparse._StoreFalseAction):\n            flags +='' + arg.dest +''\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag.arg for flag in parser._option_class.parse_args(parser.parse_args()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +=''\n            flags += arg._flag_str()\n    return flags\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\n    # Get the list of files and directories in the path\n    files, directories = _get_files_and_directories(path_name)\n\n    if processed:\n        return False\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Processing {} in set {}'.format(path_name, processed))\n\n    # Check if the file or directory is already in the set\n    for item in files:\n        if item in processed:\n            return False\n    for item in directories:\n        if item in processed:\n            return False\n\n    # Add the item to the set\n    processed.add(path_name)\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {} ({})'.format(path_name, path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added entry to path {} ({})'.format(path_name, path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Found path {} already in set.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n        if verbose:\n            print(\"Adding {} to set.\".format(path_name))\n        if os.path.isdir(path_name):\n            for entry in os.listdir(path_name):\n                was_processed(processed, os.path.join(path_name, entry),\n                              verbose)\n        else:\n            if verbose:\n                print(\"Adding entry {} to set.\".format(path_name))\n            os.makedirs(path_name)\n            if verbose:\n                print(\"Added entry to set.\")\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Entry {} already in set\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding entry {} to set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    if os.path.isdir(path_name):\n        if verbose:\n            print(\"Skipping {0} because it is a directory\".format(path_name))\n        return True\n    if os.path.isfile(path_name):\n        if verbose:\n            print(\"Skipping {0} because it is a file\".format(path_name))\n        return True\n    if verbose:\n        print(\"Adding {0}\".format(path_name))\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return True\n    else:\n        if verbose:\n            print(\"Dir:\", path_name, \"already processed.\")\n        processed.add(path_name)\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\n    # Get the list of files and directories in the path\n    files, directories = _get_files_and_directories(path_name)\n\n    if processed:\n        return False\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Processing {} in set {}'.format(path_name, processed))\n\n    # Check if the file or directory is already in the set\n    for item in files:\n        if item in processed:\n            return False\n    for item in directories:\n        if item in processed:\n            return False\n\n    # Add the item to the set\n    processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {} ({})'.format(path_name, path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added entry to path {} ({})'.format(path_name, path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected: {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Found path {} already in set.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n        if verbose:\n            print(\"Adding {} to set.\".format(path_name))\n        if os.path.isdir(path_name):\n            for entry in os.listdir(path_name):\n                was_processed(processed, os.path.join(path_name, entry),\n                              verbose)\n        else:\n            if verbose:\n                print(\"Adding entry {} to set.\".format(path_name))\n            os.makedirs(path_name)\n            if verbose:\n                print(\"Added entry to set.\")\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Entry {} already in set\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding entry {} to set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    if os.path.isdir(path_name):\n        if verbose:\n            print(\"Skipping {0} because it is a directory\".format(path_name))\n        return True\n    if os.path.isfile(path_name):\n        if verbose:\n            print(\"Skipping {0} because it is a file\".format(path_name))\n        return True\n    if verbose:\n        print(\"Adding {0}\".format(path_name))\n    processed.add(path_name)\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {} with {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return True\n    else:\n        if verbose:\n            print(\"Dir:\", path_name, \"already processed.\")\n        processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices length is too short\")\n\n    if len(vertices) == 3:\n        return tuple([vertices[0], vertices[1], vertices[2]])\n\n    abcd = vertices[2] - vertices[1]\n    bcd = vertices[0] - vertices[2]\n    cda = vertices[1] - vertices[0]\n\n    return tuple([vertices[0], vertices[1], tuple([abcd[0], bcd[1], cda[2]])])\n", "def vertex3tuple(vertices):\n    return tuple(\n        (vertices[0], vertices[1], vertices[2]),\n        (vertices[1], vertices[0], vertices[2]),\n        (vertices[2], vertices[1], vertices[0]),\n    )\n", "def vertex3tuple(vertices):\n\n    vertices = [vertices[0], vertices[1], vertices[2]]\n    # reverse the order so the vertices are in reverse order (ABC, CDD, ABC)\n    return tuple(reversed(vertices))\n", "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    return ABCD\n", "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n    if len(vertices) < 3:\n        raise ValueError('must have at least 3 vertices')\n\n    if len(vertices) == 2:\n        return ((0, 0), vertices[0], vertices[1])\n\n    if len(vertices) == 3:\n        a, b = vertices\n        c, d = vertices\n\n        return ((a, b), (c, d), (d, b))\n\n    raise ValueError('must have at least 2 vertices (vertices are unpaired)')\n", "def vertex3tuple(vertices):\n\n    A, B, C = vertices\n\n    return tuple([A, B, C, D])\n", "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    ab_vertices = vertices[: 2]\n    bc_vertices = vertices[2 :]\n    cd_vertices = vertices[: 2]\n\n    ab = [pnt for pnt in ab_vertices]\n    bc = [pnt for pnt in bc_vertices]\n    cd = [pnt for pnt in cd_vertices]\n\n    return (ab, bc, cd)\n", "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return tuple((a, b, c))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices length is too short\")\n\n    if len(vertices) == 3:\n        return tuple([vertices[0], vertices[1], vertices[2]])\n\n    abcd = vertices[2] - vertices[1]\n    bcd = vertices[0] - vertices[2]\n    cda = vertices[1] - vertices[0]\n\n    return tuple([vertices[0], vertices[1], tuple([abcd[0], bcd[1], cda[2]])])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(\n        (vertices[0], vertices[1], vertices[2]),\n        (vertices[1], vertices[0], vertices[2]),\n        (vertices[2], vertices[1], vertices[0]),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = [vertices[0], vertices[1], vertices[2]]\n    # reverse the order so the vertices are in reverse order (ABC, CDD, ABC)\n    return tuple(reversed(vertices))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    return ABCD\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n    if len(vertices) < 3:\n        raise ValueError('must have at least 3 vertices')\n\n    if len(vertices) == 2:\n        return ((0, 0), vertices[0], vertices[1])\n\n    if len(vertices) == 3:\n        a, b = vertices\n        c, d = vertices\n\n        return ((a, b), (c, d), (d, b))\n\n    raise ValueError('must have at least 2 vertices (vertices are unpaired)')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A, B, C = vertices\n\n    return tuple([A, B, C, D])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    ab_vertices = vertices[: 2]\n    bc_vertices = vertices[2 :]\n    cd_vertices = vertices[: 2]\n\n    ab = [pnt for pnt in ab_vertices]\n    bc = [pnt for pnt in bc_vertices]\n    cd = [pnt for pnt in cd_vertices]\n\n    return (ab, bc, cd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return tuple((a, b, c))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: str) -> str:\n    output = \"\"\n    while number > 0:\n        output = alphabet[number % len(alphabet)] + output\n        number //= len(alphabet)\n    return output\n", "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n\n    output = []\n    while number > 0:\n        number, remainder = divmod(number, len(alphabet))\n        output.append(alphabet[remainder])\n    return ''.join(reversed(output))\n", "def int_to_string(number: int, alphabet: Optional[List[str]] = None) -> str:\n    if alphabet is None:\n        alphabet = list(range(10))\n    digits = [alphabet[number % len(alphabet)]]\n    number //= len(alphabet)\n    while number > 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return ''.join(reversed(digits))\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('Can not convert negative numbers')\n    s = ''\n    while number!= 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "def int_to_string(number: int, alphabet: str) -> str:\n    output_string = \"\"\n    power = len(alphabet)\n    while number > 0:\n        remainder = number % pow(10, power)\n        output_string = alphabet[remainder] + output_string\n        number //= pow(10, power)\n    return output_string\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while s[i] in alphabet:\n        i += 1\n    return s[:i]\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    output = []\n    while number > 0:\n        output.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    output.reverse()\n    return \"\".join(output)\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one digit.\")\n    if number == 0:\n        return \"0\"\n\n    result = ''\n    while number:\n        number, digit = divmod(number, len(alphabet))\n        result = alphabet[digit] + result\n    return result\n", "def int_to_string(number: int, alphabet: str) -> str:\n    output = ''\n\n    while number > 0:\n        output = alphabet[number % len(alphabet)] + output\n        number //= len(alphabet)\n\n    return output\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, mod = divmod(number, len(alphabet))\n        digits.append(alphabet[mod])\n    return \"\".join(reversed(digits))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    output = \"\"\n    while number > 0:\n        output = alphabet[number % len(alphabet)] + output\n        number //= len(alphabet)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str] = None) -> str:\n    if alphabet is None:\n        alphabet = get_alphabet()\n\n    output = []\n    while number > 0:\n        number, remainder = divmod(number, len(alphabet))\n        output.append(alphabet[remainder])\n    return ''.join(reversed(output))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[List[str]] = None) -> str:\n    if alphabet is None:\n        alphabet = list(range(10))\n    digits = [alphabet[number % len(alphabet)]]\n    number //= len(alphabet)\n    while number > 0:\n        number, remainder = divmod(number, len(alphabet))\n        digits.append(alphabet[remainder])\n    return ''.join(reversed(digits))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    if number < 0:\n        raise ValueError('Can not convert negative numbers')\n    s = ''\n    while number!= 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    output_string = \"\"\n    power = len(alphabet)\n    while number > 0:\n        remainder = number % pow(10, power)\n        output_string = alphabet[remainder] + output_string\n        number //= pow(10, power)\n    return output_string\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if not alphabet:\n        raise ValueError('Alphabet must be set to convert to string.')\n    if number == 0:\n        return '0'\n\n    s = str(number)\n    i = 0\n    while s[i] in alphabet:\n        i += 1\n    return s[:i]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    output = []\n    while number > 0:\n        output.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    output.reverse()\n    return \"\".join(output)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must contain at least one digit.\")\n    if number == 0:\n        return \"0\"\n\n    result = ''\n    while number:\n        number, digit = divmod(number, len(alphabet))\n        result = alphabet[digit] + result\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    output = ''\n\n    while number > 0:\n        output = alphabet[number % len(alphabet)] + output\n        number //= len(alphabet)\n\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    digits = []\n    while number!= 0:\n        number, mod = divmod(number, len(alphabet))\n        digits.append(alphabet[mod])\n    return \"\".join(reversed(digits))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[register_number]:\n        flow_params[register_number] = flow_params[register_number].replace(\n            register_value, flow_params[register_number][register_value])\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k =='sel_vlan':\n            flow_params[k] = register_value\n        elif k =='sel_vlan_prio':\n            flow_params[k] = register_value\n        elif k =='sel_ip':\n            flow_params[k] = register_value\n        elif k =='sel_ip_prio':\n            flow_params[k] = register_value\n        elif k =='src_ip':\n            flow_params[k] = register_value\n        elif k =='src_ip_prio':\n            flow_params[k] = register_value\n        elif k == 'dst_ip':\n            flow_params[k] = register_value\n        elif k == 'dst_ip_prio':\n            flow_params[k] = register_value\n        elif k == 'inst_ip':\n            flow", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number][register_value] = flow_params[\n           'registers'][register_number].pop(register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"register_type\", None) == \"FIFO\":\n        if register_number < len(flow_params[\"output\"]):\n            flow_params[\"output\"][register_number] = flow_params[\"input\"][register_value]\n        else:\n            flow_params[\"output\"] = {register_value: flow_params[\"input\"][register_number]}\n    else:\n        if register_number > len(flow_params[\"input\"]):\n            flow_params[\"input\"][register_number] = flow_params[\"output\"][register_value]\n        else:\n            flow_params[\"input\"] = {register_value: flow_params[\"output\"][register_number]}\n", "def _replace_register(flow_params, register_number, register_value):\n    for item in flow_params['register_value']:\n        if item['reg_number'] == register_number:\n            item['reg_value'] = register_value\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params:\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n        del flow_params['register_value'][register_number]\n    if'register_value' in flow_params:\n        flow_params[register_number] = flow_params['register_value']\n        del flow_params[register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params[register_number]:\n        flow_params[register_number]['register_value'] = flow_params[register_number].pop('register_value')\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[register_number] = value\n        if isinstance(value, dict):\n            _replace_register(value, register_number, register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"][register_number]:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n            register_value, flow_params[\"registers\"][register_number].replace(register_value, \"\"))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[register_number]:\n        flow_params[register_number] = flow_params[register_number].replace(\n            register_value, flow_params[register_number][register_value])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k =='sel_vlan':\n            flow_params[k] = register_value\n        elif k =='sel_vlan_prio':\n            flow_params[k] = register_value\n        elif k =='sel_ip':\n            flow_params[k] = register_value\n        elif k =='sel_ip_prio':\n            flow_params[k] = register_value\n        elif k =='src_ip':\n            flow_params[k] = register_value\n        elif k =='src_ip_prio':\n            flow_params[k] = register_value\n        elif k == 'dst_ip':\n            flow_params[k] = register_value\n        elif k == 'dst_ip_prio':\n            flow_params[k] = register_value\n        elif k == 'inst_ip':\n            flow", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number][register_value] = flow_params[\n           'registers'][register_number].pop(register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"register_type\", None) == \"FIFO\":\n        if register_number < len(flow_params[\"output\"]):\n            flow_params[\"output\"][register_number] = flow_params[\"input\"][register_value]\n        else:\n            flow_params[\"output\"] = {register_value: flow_params[\"input\"][register_number]}\n    else:\n        if register_number > len(flow_params[\"input\"]):\n            flow_params[\"input\"][register_number] = flow_params[\"output\"][register_value]\n        else:\n            flow_params[\"input\"] = {register_value: flow_params[\"output\"][register_number]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for item in flow_params['register_value']:\n        if item['reg_number'] == register_number:\n            item['reg_value'] = register_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params:\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n        del flow_params['register_value'][register_number]\n    if'register_value' in flow_params:\n        flow_params[register_number] = flow_params['register_value']\n        del flow_params[register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params[register_number]:\n        flow_params[register_number]['register_value'] = flow_params[register_number].pop('register_value')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[register_number] = value\n        if isinstance(value, dict):\n            _replace_register(value, register_number, register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"][register_number]:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n            register_value, flow_params[\"registers\"][register_number].replace(register_value, \"\"))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(g, cls)\n    ] + [cls]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    list_of_subclasses = []\n    for subclass in cls.__subclasses__():\n        list_of_subclasses.append(subclass)\n        list_of_subclasses.extend(subclass.subclasses())\n    return list_of_subclasses\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    list_subclasses = []\n    for subclass in cls.__subclasses__():\n        list_subclasses.append(subclass)\n        list_subclasses.extend(subclass.subclasses())\n    return list_subclasses\n", "def subclasses(cls):\n    return [\n        x for x in cls.__subclasses__()\n        if issubclass(x, cls)\n    ] + [x for x in cls.__subclasses__()]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    l = [cls]\n    for c in cls.__subclasses__():\n        l.extend([c] + l)\n    return l\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(g, cls)\n    ] + [cls]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    list_of_subclasses = []\n    for subclass in cls.__subclasses__():\n        list_of_subclasses.append(subclass)\n        list_of_subclasses.extend(subclass.subclasses())\n    return list_of_subclasses\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclasses(subclass)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    list_subclasses = []\n    for subclass in cls.__subclasses__():\n        list_subclasses.append(subclass)\n        list_subclasses.extend(subclass.subclasses())\n    return list_subclasses\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        x for x in cls.__subclasses__()\n        if issubclass(x, cls)\n    ] + [x for x in cls.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    l = [cls]\n    for c in cls.__subclasses__():\n        l.extend([c] + l)\n    return l\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0.\n    if string == \"\":\n        return 0\n\n    # Make sure that the given alphabet is a subset of the alphabet of the\n    # original string.\n    if not set(alphabet).issubset(set(string)):\n        raise ValueError(\"Unsupported alphabet given.\")\n\n    # Make sure that the given string has no duplicate characters.\n    if string not in set([x for x in alphabet]):\n        raise ValueError(\"String does not contain any of the given alphabet.\")\n\n    # Return the number of occurances of each character in the given string.\n    return {char: string.count(char) for char in alphabet}\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "def string_to_int(string: str, alphabet: list):\n    # Initialize the output variable\n    output = 0\n\n    # Use the given alphabet to convert the string to the number\n    for i in range(len(string)):\n        output += alphabet.index(string[i]) * (len(alphabet) - (i + 1))\n\n    return output\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index('0')\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum([ALPHABET.index(c) for c in string]) - 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    # If the given string is empty, return 0.\n    if string == \"\":\n        return 0\n\n    # Make sure that the given alphabet is a subset of the alphabet of the\n    # original string.\n    if not set(alphabet).issubset(set(string)):\n        raise ValueError(\"Unsupported alphabet given.\")\n\n    # Make sure that the given string has no duplicate characters.\n    if string not in set([x for x in alphabet]):\n        raise ValueError(\"String does not contain any of the given alphabet.\")\n\n    # Return the number of occurances of each character in the given string.\n    return {char: string.count(char) for char in alphabet}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: list):\n    # Initialize the output variable\n    output = 0\n\n    # Use the given alphabet to convert the string to the number\n    for i in range(len(string)):\n        output += alphabet.index(string[i]) * (len(alphabet) - (i + 1))\n\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result = alphabet.index(c) * result + alphabet.index('0')\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        requests.get(url, stream=True)\n\n        with archive_path.open(\"wb\") as f:\n            for chunk in requests.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    import requests\n\n    # retrieve the archive\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(f'Request failed: {response.status_code}')\n\n    # extract the tar.gz archive containg 'desc' file for each package\n    tar_file = tarfile.open(mode='r:gz', fileobj=io.BytesIO(response.content))\n    for member in tar_file.getmembers():\n        if member.name.endswith('.tar.gz'):\n            archive_path = Path(destination_path) / member.name\n            tar_file.extract(member, destination_path)\n            print(f'Extracted {archive_path} to {destination_path}')\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive to the destination path\n    tar_archive = Path(destination_path)\n    tar_archive.parent.mkdir(exist_ok=True)\n    tar_archive.joinpath(archive_name + '.tar.gz').extractall(path=tar_archive.parent)\n\n    # Return the directory path\n    return tar_archive.parent / archive_name\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # retrieve the tar archive of the source package\n    response = requests.get(url)\n    response.raise_for_status()\n    archive_path = destination_path / \"desc\"\n    with archive_path.open(\"wb\") as tar:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                tar.write(chunk)\n\n    # extract the archive to the destination directory\n    extract_tar_archive(destination_path, tar)\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # retrieve the tar archive from the url\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(f\"Failed to retrieve url {url}:\\n{response.text}\")\n    # extract the tar archive containing 'desc' file\n    tar_archive = tarfile.open(mode=\"r:gz\", fileobj=io.BytesIO(response.content))\n    # return the directory path where the archive has been extracted\n    return destination_path.joinpath(tar_archive.getnames()[0])\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception('Request to url {} failed with status code {}'.format(url, response.status_code))\n    with tarfile.open(tar_archive_path) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    if response.status_code == 200:\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(destination_path)\n            return archive_path\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(len(response.iter_content(1024))):\n        archive_path = destination_path / \"desc\" / f\"{response.iter_content(1024).decode()}.tar.gz\"\n        if not archive_path.exists():\n            archive_path.parent.mkdir(parents=True, exist_ok=True)\n            archive_path.touch()\n            with tarfile.open(archive_path, \"r:gz\") as tar:\n                tar.extractall(path=destination_path)\n\n    return destination_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path\n    try:\n        response = requests.get(url, stream=True)\n        with open(archive_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n        return archive_path\n    except requests.exceptions.RequestException as e:\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        requests.get(url, stream=True)\n\n        with archive_path.open(\"wb\") as f:\n            for chunk in requests.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    import requests\n\n    # retrieve the archive\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(f'Request failed: {response.status_code}')\n\n    # extract the tar.gz archive containg 'desc' file for each package\n    tar_file = tarfile.open(mode='r:gz', fileobj=io.BytesIO(response.content))\n    for member in tar_file.getmembers():\n        if member.name.endswith('.tar.gz'):\n            archive_path = Path(destination_path) / member.name\n            tar_file.extract(member, destination_path)\n            print(f'Extracted {archive_path} to {destination_path}')\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    # Remove the.tar.gz extension from the url\n    archive_name = url.split('/')[-1]\n\n    # Extract the tar archive to the destination path\n    tar_archive = Path(destination_path)\n    tar_archive.parent.mkdir(exist_ok=True)\n    tar_archive.joinpath(archive_name + '.tar.gz').extractall(path=tar_archive.parent)\n\n    # Return the directory path\n    return tar_archive.parent / archive_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # retrieve the tar archive of the source package\n    response = requests.get(url)\n    response.raise_for_status()\n    archive_path = destination_path / \"desc\"\n    with archive_path.open(\"wb\") as tar:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                tar.write(chunk)\n\n    # extract the archive to the destination directory\n    extract_tar_archive(destination_path, tar)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # retrieve the tar archive from the url\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(f\"Failed to retrieve url {url}:\\n{response.text}\")\n    # extract the tar archive containing 'desc' file\n    tar_archive = tarfile.open(mode=\"r:gz\", fileobj=io.BytesIO(response.content))\n    # return the directory path where the archive has been extracted\n    return destination_path.joinpath(tar_archive.getnames()[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    tar_archive_path = destination_path / archive_name\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception('Request to url {} failed with status code {}'.format(url, response.status_code))\n    with tarfile.open(tar_archive_path) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    archive_name = Path(destination_path).with_suffix(\".tar.gz\")\n    archive_path = destination_path / archive_name\n    if response.status_code == 200:\n        with tarfile.open(archive_path) as archive:\n            archive.extractall(destination_path)\n            return archive_path\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise Exception(\"Download failed\")\n\n    with tarfile.open(mode=\"r|gz\", fileobj=BytesIO(response.content)) as tar:\n        for member in tar.getmembers():\n            if member.name.endswith(\".tar.gz\"):\n                path = destination_path / member.name\n                tar.extract(member, path=str(path))\n                tar.close()\n                yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(len(response.iter_content(1024))):\n        archive_path = destination_path / \"desc\" / f\"{response.iter_content(1024).decode()}.tar.gz\"\n        if not archive_path.exists():\n            archive_path.parent.mkdir(parents=True, exist_ok=True)\n            archive_path.touch()\n            with tarfile.open(archive_path, \"r:gz\") as tar:\n                tar.extractall(path=destination_path)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return platform.system() == 'Darwin'\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == 'Darwin'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n\n    return {k.replace('*.', '.*'): v for k, v in item.items() if k.startswith('*.')}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if k in rules}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if k in rules}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if v}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n\n    regex_keys = {}\n\n    for key, value in item.items():\n        if key.endswith('.cpp'):\n            regex_key = key[:-9]\n            regex = value['regex']\n            value['regex'] = re.compile(regex)\n            regex_keys[regex_key] = value\n\n    return regex_keys\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: convert_regex(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n\n    return {k.replace('*.', '.*'): v for k, v in item.items() if k.startswith('*.')}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if k in rules}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if k in rules}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items() if v}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n\n    regex_keys = {}\n\n    for key, value in item.items():\n        if key.endswith('.cpp'):\n            regex_key = key[:-9]\n            regex = value['regex']\n            value['regex'] = re.compile(regex)\n            regex_keys[regex_key] = value\n\n    return regex_keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: convert_regex(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((key, re.compile(value, re.I)) for key, value in item.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        name = name[1:-1]\n    return name\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform =='sunos5':\n        platform ='sunos' in os.uname()\n    elif platform == 'darwin':\n        platform = platform =='mac'\n    if platform is None:\n        return s.split()\n    if isinstance(platform, int):\n        # Python 2.6 and below did not support slicing on an integer.\n        # A simple slicing would work on Python 2.6 or below, but the behavior\n        # for the multi-platform variant is different (see #2666)\n        start = platform\n        if platform < 2:\n            end = None\n        else:\n            end = platform + 1\n    else:\n        start = platform.startswith('0')\n  ", "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = '(\\\\\\\\)*(.*)'\n    elif platform == 'posix':\n        pattern = '([\\\\\\\\])*([\\\\\\\\])*(.*)'\n    elif platform == 'cmd':\n        pattern = '([\\\\\\\\])*(\\\\\\\\)*(.*)'\n    else:\n        raise ValueError('Invalid platform: %r' % platform)\n\n    return re.split(pattern, s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        matcher = re.compile(r'\\A\\Z(\\d+)\\Z')\n    elif platform == 'posix':\n        matcher = re.compile(r'\\A\\-\\Z(\\d+)\\-\\Z')\n    else:\n        matcher = re.compile(r'\\A\\-(\\d+)\\-\\Z')\n\n    return [m.group(1) for m in matcher.finditer(s)]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        splitter = re.compile(r'(\\\\\\\\)|(\\\\:)')\n    elif platform == 'posix':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    elif platform == 'cmd':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    else:\n        splitter = re.compile(r'([^\\\\/:*?\\\"<>|])')\n    return [t for t in splitter.split(s) if t]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        pattern = '(?:(?:%s[\\\\\\\\/])|(?:%s))' % (os.sep, os.sep)\n    else:\n        pattern = '(?:%s)' % (os.sep,)\n    return re.split(pattern, s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n\n    if platform == 1:\n        # POSIX variant of shlex.split()\n        return [i for i in shlex.split(s) if i!= '']\n\n    if platform == 0:\n        # Windows/CMD variant of shlex.split()\n        return [i for i in shlex.split(s) if not i.startswith('#')]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    if platform == 'cmd':\n        split = re.split(r'[;,:]', s)\n    elif platform =='shell':\n        split = re.split(r'(\\[|\\]|\\(|\\{|\\})', s)\n    else:\n        split = shlex.split(s)\n    return split\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = r'(\\\\w+)'\n    else:\n        pattern = r'(\\\\w+)' + '|'.join(['\\\\' + x for x in platform.split('-')])\n\n    if not s:\n        return []\n    # Strip leading spaces, then split on multiple whitespaces\n    return re.split(pattern, s.strip())\n", "def split(s, platform='this'):\n    if platform == 'this':\n        # Auto-import possible multi-platform variant of shlex.split()\n        from._this import split\n        return split(s)\n    else:\n        # Split on all possible REGEX variants.\n        return re.split(REGEX[platform], s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = REGEX.match(s)\n        if match:\n            # Underscores get converted to dashes in Windows/CMD\n            return [s[:match.start()]] + [s[match.end():]]\n    return shlex.split(s)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        platform = os.name == 'nt'\n    elif platform =='sunos5':\n        platform ='sunos' in os.uname()\n    elif platform == 'darwin':\n        platform = platform =='mac'\n    if platform is None:\n        return s.split()\n    if isinstance(platform, int):\n        # Python 2.6 and below did not support slicing on an integer.\n        # A simple slicing would work on Python 2.6 or below, but the behavior\n        # for the multi-platform variant is different (see #2666)\n        start = platform\n        if platform < 2:\n            end = None\n        else:\n            end = platform + 1\n    else:\n        start = platform.startswith('0')\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = '(\\\\\\\\)*(.*)'\n    elif platform == 'posix':\n        pattern = '([\\\\\\\\])*([\\\\\\\\])*(.*)'\n    elif platform == 'cmd':\n        pattern = '([\\\\\\\\])*(\\\\\\\\)*(.*)'\n    else:\n        raise ValueError('Invalid platform: %r' % platform)\n\n    return re.split(pattern, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        matcher = re.compile(r'\\A\\Z(\\d+)\\Z')\n    elif platform == 'posix':\n        matcher = re.compile(r'\\A\\-\\Z(\\d+)\\-\\Z')\n    else:\n        matcher = re.compile(r'\\A\\-(\\d+)\\-\\Z')\n\n    return [m.group(1) for m in matcher.finditer(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        splitter = re.compile(r'(\\\\\\\\)|(\\\\:)')\n    elif platform == 'posix':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    elif platform == 'cmd':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    else:\n        splitter = re.compile(r'([^\\\\/:*?\\\"<>|])')\n    return [t for t in splitter.split(s) if t]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        pattern = '(?:(?:%s[\\\\\\\\/])|(?:%s))' % (os.sep, os.sep)\n    else:\n        pattern = '(?:%s)' % (os.sep,)\n    return re.split(pattern, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n\n    if platform == 1:\n        # POSIX variant of shlex.split()\n        return [i for i in shlex.split(s) if i!= '']\n\n    if platform == 0:\n        # Windows/CMD variant of shlex.split()\n        return [i for i in shlex.split(s) if not i.startswith('#')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    if platform == 'cmd':\n        split = re.split(r'[;,:]', s)\n    elif platform =='shell':\n        split = re.split(r'(\\[|\\]|\\(|\\{|\\})', s)\n    else:\n        split = shlex.split(s)\n    return split\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = r'(\\\\w+)'\n    else:\n        pattern = r'(\\\\w+)' + '|'.join(['\\\\' + x for x in platform.split('-')])\n\n    if not s:\n        return []\n    # Strip leading spaces, then split on multiple whitespaces\n    return re.split(pattern, s.strip())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        # Auto-import possible multi-platform variant of shlex.split()\n        from._this import split\n        return split(s)\n    else:\n        # Split on all possible REGEX variants.\n        return re.split(REGEX[platform], s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = REGEX.match(s)\n        if match:\n            # Underscores get converted to dashes in Windows/CMD\n            return [s[:match.start()]] + [s[match.end():]]\n    return shlex.split(s)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: pathlib.Path, version: Optional[str] = None\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    The archive passed along does not deal with the case where the\n    archive passed along does not exist.\n    \"\"\"\n    if version is None:\n        # If version is not specified use the latest version available\n        version = archive_path.stem.split(\".\")[-1]\n    repo_url = \"https://raw.githubusercontent.com/{version}/v{version}/{archive_path}\".format(\n        version=version, archive_path=archive_path, version=version\n    )\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    version_scheme: str = 'https',\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    archive = archive_path.with_suffix('')\n    with archive.open('r') as archive_file:\n        archive_data = archive_file.read()\n\n    return _prepare_repository_from_archive_data(\n        archive_data,\n        version_scheme=version_scheme,\n    )\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, version: str = None\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not\n    deal with the case where the archive passed along does not exist.\n    \"\"\"\n    repo_url = prepare_repo_url(archive_path, version=version)\n    subprocess.check_call([\"git\", \"archive\", \"--prefix\", repo_url, archive_path])\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    archive_format: str = \"zip\",\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = pathlib.Path(archive_path)\n\n    if not archive_path.exists():\n        raise OSError(\n            \"Cannot uncompress archive {}. \"\n            \"File does not exist\".format(archive_path)\n        )\n\n    archive_format = archive_format.lower()\n\n    if archive_format == \"zip\":\n        return prepare_zip_repository_from_archive(\n            archive_path=archive_path,\n            force=force,\n        )\n\n    if archive_format == \"tar\":\n        return prepare_tar_repository_from_archive(\n            archive_path=archive_path", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    compression: str = \"bzip2\",\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        return f.read().decode(\"utf-8\")\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, compression_type: str = \"bzip2\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not exist. with import subprocess\n    The archive passed along does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    archive = zipfile.ZipFile(archive_path)\n    archive.extractall(path=archive_path.parent, pwd=archive_path.parent.parent)\n    archive.close()\n    return repository_url(archive_path.name, compression_type)\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, config: Configuration, build_directory: pathlib.Path\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = pathlib.Path(build_directory) / archive_path.stem\n    if not temp_dir.is_dir():\n        temp_dir.mkdir(exist_ok=True)\n    repo_url = config.get_repo_url(archive_path)\n    url = config.get_repo_url(archive_path)\n    subprocess.check_call(\n        [\n            \"git\",\n            \"archive\",\n            \"--prefix\",\n            url,\n            \"-o\",\n            temp_dir / archive_path.name,\n            repo_url,\n        ],\n        cwd=str(temp_dir),\n    )\n    return rep", "def prepare_repository_from_archive(\n    archive_path: Path, prefix: str, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    \"\"\"\n    archive = Archive(archive_path)\n    return archive.prepare_repository_from_archive(\n        prefix=prefix, allow_missing=allow_missing\n    )\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, compression: str = \"bzip2\", force: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where the\n    archive passed along does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n    \"\"\"\n    try:\n        return _prepare_repository_from_archive(\n            archive_path, compression=compression, force=force\n        )\n    except (\n        subprocess.CalledProcessError,\n        OSError,\n        ValueError,\n    ) as error:\n        if \"not found\" in str(error):\n            raise NotFoundError(\"repository\")\n        raise error\n", "def prepare_repository_from_archive(\n    archive_path: Path,\n    prepare_command: Callable[[str], None],\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    \"\"\"\n    archive_name = archive_path.name\n    archive_path.unlink()\n\n    try:\n        command = prepare_command(archive_name)\n        repo_url = command.run()\n    except subprocess.CalledProcessError as ex:\n        raise ValueError(\n            \"Error running prepare_repository_from_archive: {}\".format(ex)\n        ) from ex\n    return repo_url\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, version: Optional[str] = None\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    The archive passed along does not deal with the case where the\n    archive passed along does not exist.\n    \"\"\"\n    if version is None:\n        # If version is not specified use the latest version available\n        version = archive_path.stem.split(\".\")[-1]\n    repo_url = \"https://raw.githubusercontent.com/{version}/v{version}/{archive_path}\".format(\n        version=version, archive_path=archive_path, version=version\n    )\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    version_scheme: str = 'https',\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    archive = archive_path.with_suffix('')\n    with archive.open('r') as archive_file:\n        archive_data = archive_file.read()\n\n    return _prepare_repository_from_archive_data(\n        archive_data,\n        version_scheme=version_scheme,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, version: str = None\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url. This does not\n    deal with the case where the archive passed along does not exist.\n    \"\"\"\n    repo_url = prepare_repo_url(archive_path, version=version)\n    subprocess.check_call([\"git\", \"archive\", \"--prefix\", repo_url, archive_path])\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    archive_format: str = \"zip\",\n    force: bool = False,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = pathlib.Path(archive_path)\n\n    if not archive_path.exists():\n        raise OSError(\n            \"Cannot uncompress archive {}. \"\n            \"File does not exist\".format(archive_path)\n        )\n\n    archive_format = archive_format.lower()\n\n    if archive_format == \"zip\":\n        return prepare_zip_repository_from_archive(\n            archive_path=archive_path,\n            force=force,\n        )\n\n    if archive_format == \"tar\":\n        return prepare_tar_repository_from_archive(\n            archive_path=archive_path", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    compression: str = \"bzip2\",\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    \"\"\"\n    with archive_path.open(\"rb\") as f:\n        return f.read().decode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, compression_type: str = \"bzip2\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not exist. with import subprocess\n    The archive passed along does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    archive = zipfile.ZipFile(archive_path)\n    archive.extractall(path=archive_path.parent, pwd=archive_path.parent.parent)\n    archive.close()\n    return repository_url(archive_path.name, compression_type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, config: Configuration, build_directory: pathlib.Path\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. With import subprocess\n    \"\"\"\n    archive_path = str(archive_path)\n    temp_dir = pathlib.Path(build_directory) / archive_path.stem\n    if not temp_dir.is_dir():\n        temp_dir.mkdir(exist_ok=True)\n    repo_url = config.get_repo_url(archive_path)\n    url = config.get_repo_url(archive_path)\n    subprocess.check_call(\n        [\n            \"git\",\n            \"archive\",\n            \"--prefix\",\n            url,\n            \"-o\",\n            temp_dir / archive_path.name,\n            repo_url,\n        ],\n        cwd=str(temp_dir),\n    )\n    return rep", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, prefix: str, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    \"\"\"\n    archive = Archive(archive_path)\n    return archive.prepare_repository_from_archive(\n        prefix=prefix, allow_missing=allow_missing\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path, compression: str = \"bzip2\", force: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where the\n    archive passed along does not exist. with import subprocess\n\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n    \"\"\"\n    try:\n        return _prepare_repository_from_archive(\n            archive_path, compression=compression, force=force\n        )\n    except (\n        subprocess.CalledProcessError,\n        OSError,\n        ValueError,\n    ) as error:\n        if \"not found\" in str(error):\n            raise NotFoundError(\"repository\")\n        raise error\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path,\n    prepare_command: Callable[[str], None],\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist. With import subprocess\n\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    \"\"\"\n    archive_name = archive_path.name\n    archive_path.unlink()\n\n    try:\n        command = prepare_command(archive_name)\n        repo_url = command.run()\n    except subprocess.CalledProcessError as ex:\n        raise ValueError(\n            \"Error running prepare_repository_from_archive: {}\".format(ex)\n        ) from ex\n    return repo_url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = git.git_command(['ls-files', '-z'], ignore_errors=True)\n    ignored = [f for f in ignored.split('\\x00') if f]\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    filenames = []\n    ignored_str = \"\"\n    for i in ignored:\n        filenames.append(i[:-4])\n    filenames.sort()\n    for i in filenames:\n        ignored_str += i + \", \"\n    return ignored_str[:-2]\n", "def addignored(ignored):\n    ignored = ignored.strip()\n    ignored = ignored.split('\\n')\n    ignored = [fname.strip() for fname in ignored if fname.strip() and not fname.startswith('#')]\n    ignored = ', '.join(ignored)\n    return ignored\n", "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split(',')\n\n    # ignored files are one file per line\n    ignored = [f for f in filenames if not f.startswith('.')]\n\n    return ','.join(ignored)\n", "def addignored(ignored):\n\n    ignore_files = []\n    ignore_files_str = ''\n    if ignored == '':\n        return ignore_files_str\n\n    if os.path.exists(ignored):\n        with open(ignored, 'r') as f:\n            for line in f:\n                if '#' not in line:\n                    ignore_files.append(line)\n                else:\n                    ignore_files_str += line\n        return ignore_files_str\n    else:\n        print('ERROR: The file {} does not exist.'.format(ignored))\n        sys.exit(1)\n", "def addignored(ignored):\n    ignorelist = []\n    ignored = ignored.strip().split(',')\n    for f in ignored:\n        ignorelist.append(f)\n    ignored = ','.join(ignored)\n    subprocess.call(['git', 'add', ignorelist])\n    subprocess.call(['git', 'commit', '-m', 'ignored files'])\n    subprocess.call(['git', 'add', ignored])\n    subprocess.call(['git', 'commit', '-m', 'ignored files'])\n    return ignored\n", "def addignored(ignored):\n    ignored = ignored.split(\",\")\n    ignored.sort()\n    filenames = \"\"\n    for filename in ignored:\n        filenames += \"%s, \" % filename\n    return filenames[0:-2]\n", "def addignored(ignored):\n    ignored = git.git_cmd(['ls-files', '-z'], ignore_err=True)\n    ignored = ignored.split('\\0')\n    ignored.sort()\n    return ignored\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = git.git_command(['ls-files', '-z'], ignore_errors=True)\n    ignored = [f for f in ignored.split('\\x00') if f]\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    filenames = []\n    ignored_str = \"\"\n    for i in ignored:\n        filenames.append(i[:-4])\n    filenames.sort()\n    for i in filenames:\n        ignored_str += i + \", \"\n    return ignored_str[:-2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.strip()\n    ignored = ignored.split('\\n')\n    ignored = [fname.strip() for fname in ignored if fname.strip() and not fname.startswith('#')]\n    ignored = ', '.join(ignored)\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git.git.ls_files(ignored)\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    if ignored is None:\n        return None\n\n    ignored = ignored.decode('utf-8')\n    filenames = ignored.split(',')\n\n    # ignored files are one file per line\n    ignored = [f for f in filenames if not f.startswith('.')]\n\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    ignore_files = []\n    ignore_files_str = ''\n    if ignored == '':\n        return ignore_files_str\n\n    if os.path.exists(ignored):\n        with open(ignored, 'r') as f:\n            for line in f:\n                if '#' not in line:\n                    ignore_files.append(line)\n                else:\n                    ignore_files_str += line\n        return ignore_files_str\n    else:\n        print('ERROR: The file {} does not exist.'.format(ignored))\n        sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignorelist = []\n    ignored = ignored.strip().split(',')\n    for f in ignored:\n        ignorelist.append(f)\n    ignored = ','.join(ignored)\n    subprocess.call(['git', 'add', ignorelist])\n    subprocess.call(['git', 'commit', '-m', 'ignored files'])\n    subprocess.call(['git', 'add', ignored])\n    subprocess.call(['git', 'commit', '-m', 'ignored files'])\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(\",\")\n    ignored.sort()\n    filenames = \"\"\n    for filename in ignored:\n        filenames += \"%s, \" % filename\n    return filenames[0:-2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = git.git_cmd(['ls-files', '-z'], ignore_err=True)\n    ignored = ignored.split('\\0')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    # Match files that look like a file name with '.py' extension\n    if not filename or filename[0]!= '.':\n        return False\n    # Match files that look like a file name with a '.py' extension\n    if not filename.endswith('.py'):\n        return False\n    # Match files that look like a file name with a '.pyc' extension\n    if not filename.endswith('.pyc'):\n        return False\n    # Match files that look like a file name with a '.pyo' extension\n    if filename[-3:]!= '.pyo':\n        return False\n    # Match files that look like a.pyw extension\n    if filename[:3]!= '.pyw':\n        return False\n    return True\n", "def match(filename):\n    return (not filename.endswith('.py') or\n            filename.startswith('.') or\n            '.pyc' in filename or\n            '.pyo' in filename)\n", "def match(filename):\n    return not filename.startswith(\"pytsite.\")\n", "def match(filename):\n    return not filename.startswith('.') and filename!= '__init__.py'\n", "def match(filename):\n    return not filename.endswith('.py')\n", "def match(filename):\n    return not (filename.endswith(\".py\") or filename.endswith(\".pyc\") or filename.endswith(\".pyo\"))\n", "def match(filename):\n    # TODO - test if filename is a valid type or not\n    return False\n", "def match(filename):\n    return (\n        not filename.startswith(\"python\")\n        and filename.endswith(\".py\")\n        and filename[-3:]!= \"c\"\n        and not filename.startswith(\"_\")\n    )\n", "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported\n\n    \"\"\"\n    # check for git\n    if not git.GitCommand.is_supported(filename):\n        return False\n\n    # check for python 3\n    if sys.version_info < (3, 0):\n        return False\n\n    # check for pypy-pypy\n    if sys.version_info >= (3, 5, 0, 'final'):\n        return False\n\n    return True\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    # Match files that look like a file name with '.py' extension\n    if not filename or filename[0]!= '.':\n        return False\n    # Match files that look like a file name with a '.py' extension\n    if not filename.endswith('.py'):\n        return False\n    # Match files that look like a file name with a '.pyc' extension\n    if not filename.endswith('.pyc'):\n        return False\n    # Match files that look like a file name with a '.pyo' extension\n    if filename[-3:]!= '.pyo':\n        return False\n    # Match files that look like a.pyw extension\n    if filename[:3]!= '.pyw':\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (not filename.endswith('.py') or\n            filename.startswith('.') or\n            '.pyc' in filename or\n            '.pyo' in filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return not filename.startswith(\"pytsite.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return not filename.startswith('.') and filename!= '__init__.py'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return not filename.endswith('.py')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return not (filename.endswith(\".py\") or filename.endswith(\".pyc\") or filename.endswith(\".pyo\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # TODO - test if filename is a valid type or not\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.startswith(\"python\")\n        and filename.endswith(\".py\")\n        and filename[-3:]!= \"c\"\n        and not filename.startswith(\"_\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n\n    if not filename:\n        return False\n\n    if filename.endswith(\".py\"):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # type: (unicode) -> bool\n    \"\"\"Check if the filename is a type that this module supports\n\n    Args:\n        filename: Filename to match\n\n    Returns:\n        False if not a match, True if supported\n\n    \"\"\"\n    # check for git\n    if not git.GitCommand.is_supported(filename):\n        return False\n\n    # check for python 3\n    if sys.version_info < (3, 0):\n        return False\n\n    # check for pypy-pypy\n    if sys.version_info >= (3, 5, 0, 'final'):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency is None or \"always\" in frequency.lower():\n        return datetime.timedelta(days=1)\n    elif frequency in (\"week\", \"weeks\", \"weekday\"):\n        return datetime.timedelta(days=7)\n    elif frequency in (\"month\", \"months\", \"monthly\", \"yearly\"):\n        return datetime.timedelta(days=30)\n    elif frequency in (\"quarter\", \"quarters\", \"quarterly\", \"every\", \"everynth\"):\n        return datetime.timedelta(days=90)\n    elif frequency in (\"daily\", \"dailys\", \"daily\", \"weekly\", \"weeklys\"):\n        return datetime.timedelta(days=52)\n    elif frequency in (\"monthly\", \"monthlys\", \"monthlys\", \"yearly\"):\n        return datetime.timedelta(days=90 * 12)\n    else:\n        raise ValueError(\"Unknown frequency: \" + frequency)\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(weeks=1)\n    elif frequency == \"never\":\n        return datetime.timedelta(weeks=7)\n    elif frequency == \"once\":\n        return datetime.timedelta(weeks=1)\n    elif frequency is None:\n        return None\n    else:\n        raise ValueError(\"Unknown frequency {}\".format(frequency))\n", "def parse_frequency(frequency):\n    match = re.match(r'^(\\d+)w?$', frequency)\n    if match:\n        return timedelta(weeks=int(match.group(1)))\n    match = re.match(r'^(\\d+)d?$', frequency)\n    if match:\n        return timedelta(days=int(match.group(1)))\n    match = re.match(r'^(\\d+)h?$', frequency)\n    if match:\n        return timedelta(hours=int(match.group(1)))\n    match = re.match(r'^(\\d+)m?$', frequency)\n    if match:\n        return timedelta(minutes=int(match.group(1)))\n    raise ValueError('frequency {0!r} is not a valid frequency'.format(frequency))\n", "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "def parse_frequency(frequency):\n    frequency = frequency.strip().lower()\n    if frequency in [\"weeks\", \"week\", \"weeks since epoch\", \"weeks ago\"]:\n        return timedelta(weeks=int(frequency))\n    if frequency in [\"days\", \"day\", \"days since epoch\", \"days ago\"]:\n        return timedelta(days=int(frequency))\n    if frequency in [\"hours\", \"hour\", \"hours since epoch\", \"hours ago\"]:\n        return timedelta(hours=int(frequency))\n    if frequency in [\"minutes\", \"minute\", \"minutes since epoch\", \"minutes ago\"]:\n        return timedelta(minutes=int(frequency))\n    if frequency in [\"seconds\", \"second\", \"seconds since epoch\", \"seconds ago\"]:\n        return timedelta(seconds=int(frequency))\n    if frequency in [\"milliseconds\", \"milli\"]:\n        return timedelta(milliseconds=int(frequency))\n    raise ValueError(\"Unknown frequency '%s'\" % frequency)\n", "def parse_frequency(frequency):\n    match = re.match(r\"^([1-9])([wW])?$\", frequency)\n    if not match:\n        raise ValueError(\"Frequency '{}' is invalid\".format(frequency))\n    number, unit = match.groups()\n    if unit!= \"always\":\n        raise ValueError(\"Frequency '{}' is not always\".format(frequency))\n    return timedelta(days=int(number))\n", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', 'never'):\n        return datetime.timedelta(days=1)\n    elif frequency in ('1day', '7day', '1week', 'week'):\n        return datetime.timedelta(days=7)\n    elif frequency =='month':\n        return datetime.timedelta(days=30)\n    elif frequency == 'quarter':\n        return datetime.timedelta(days=90)\n    elif frequency == 'yearly':\n        return datetime.timedelta(days=365)\n    elif frequency == 'daily':\n        return datetime.timedelta(days=366)\n    else:\n        raise ValueError('Unknown frequency: %r' % frequency)\n", "def parse_frequency(frequency):\n    try:\n        number, unit = frequency.split(' ')\n    except ValueError:\n        raise ValueError('frequency must be \"always\", \"weeks\", or \"days\".')\n\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError('frequency must be an integer.')\n\n    if unit not in ['weeks', 'days']:\n        raise ValueError('frequency must be \"weeks\" or \"days\".')\n\n    if number < 1:\n        raise ValueError('frequency must be greater than 0.')\n\n    return timedelta(days=number * 7)\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.strip().lower()\n\n    if frequency in ['always', 'never']:\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Unknown frequency \"%s\". Must be \"always\" or \"never\".' % frequency)\n", "def parse_frequency(frequency):\n    if frequency in ('weeks', 'week'):\n        return timedelta(weeks=1)\n    if frequency in ('days', 'day'):\n        return timedelta(days=1)\n    if frequency in ('hours', 'hour'):\n        return timedelta(hours=1)\n    if frequency in ('minutes','minute'):\n        return timedelta(minutes=1)\n    if frequency in ('seconds','second'):\n        return timedelta(seconds=1)\n    if frequency in ('weeks', 'weekday', 'weekdays'):\n        return timedelta(weeks=52)\n    if frequency in ('months','month'):\n        return timedelta(months=1)\n    if frequency in ('years', 'year'):\n        return timedelta(years=1)\n    if frequency in ('weekly', 'week', 'weeks'):\n        return timedelta(weeks=52)\n    if frequency in ('daily', 'd'):\n        return timedelta(days=1)\n    if frequency in ('hourly', 'hour', 'hours'):\n        return timedelta(hours=1)\n  "], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency is None or \"always\" in frequency.lower():\n        return datetime.timedelta(days=1)\n    elif frequency in (\"week\", \"weeks\", \"weekday\"):\n        return datetime.timedelta(days=7)\n    elif frequency in (\"month\", \"months\", \"monthly\", \"yearly\"):\n        return datetime.timedelta(days=30)\n    elif frequency in (\"quarter\", \"quarters\", \"quarterly\", \"every\", \"everynth\"):\n        return datetime.timedelta(days=90)\n    elif frequency in (\"daily\", \"dailys\", \"daily\", \"weekly\", \"weeklys\"):\n        return datetime.timedelta(days=52)\n    elif frequency in (\"monthly\", \"monthlys\", \"monthlys\", \"yearly\"):\n        return datetime.timedelta(days=90 * 12)\n    else:\n        raise ValueError(\"Unknown frequency: \" + frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(weeks=1)\n    elif frequency == \"never\":\n        return datetime.timedelta(weeks=7)\n    elif frequency == \"once\":\n        return datetime.timedelta(weeks=1)\n    elif frequency is None:\n        return None\n    else:\n        raise ValueError(\"Unknown frequency {}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    match = re.match(r'^(\\d+)w?$', frequency)\n    if match:\n        return timedelta(weeks=int(match.group(1)))\n    match = re.match(r'^(\\d+)d?$', frequency)\n    if match:\n        return timedelta(days=int(match.group(1)))\n    match = re.match(r'^(\\d+)h?$', frequency)\n    if match:\n        return timedelta(hours=int(match.group(1)))\n    match = re.match(r'^(\\d+)m?$', frequency)\n    if match:\n        return timedelta(minutes=int(match.group(1)))\n    raise ValueError('frequency {0!r} is not a valid frequency'.format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        return FREQ_PAT.match(frequency).groups()\n    except AttributeError:\n        raise ValueError('frequency %r is not a valid frequency' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip().lower()\n    if frequency in [\"weeks\", \"week\", \"weeks since epoch\", \"weeks ago\"]:\n        return timedelta(weeks=int(frequency))\n    if frequency in [\"days\", \"day\", \"days since epoch\", \"days ago\"]:\n        return timedelta(days=int(frequency))\n    if frequency in [\"hours\", \"hour\", \"hours since epoch\", \"hours ago\"]:\n        return timedelta(hours=int(frequency))\n    if frequency in [\"minutes\", \"minute\", \"minutes since epoch\", \"minutes ago\"]:\n        return timedelta(minutes=int(frequency))\n    if frequency in [\"seconds\", \"second\", \"seconds since epoch\", \"seconds ago\"]:\n        return timedelta(seconds=int(frequency))\n    if frequency in [\"milliseconds\", \"milli\"]:\n        return timedelta(milliseconds=int(frequency))\n    raise ValueError(\"Unknown frequency '%s'\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    match = re.match(r\"^([1-9])([wW])?$\", frequency)\n    if not match:\n        raise ValueError(\"Frequency '{}' is invalid\".format(frequency))\n    number, unit = match.groups()\n    if unit!= \"always\":\n        raise ValueError(\"Frequency '{}' is not always\".format(frequency))\n    return timedelta(days=int(number))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', 'never'):\n        return datetime.timedelta(days=1)\n    elif frequency in ('1day', '7day', '1week', 'week'):\n        return datetime.timedelta(days=7)\n    elif frequency =='month':\n        return datetime.timedelta(days=30)\n    elif frequency == 'quarter':\n        return datetime.timedelta(days=90)\n    elif frequency == 'yearly':\n        return datetime.timedelta(days=365)\n    elif frequency == 'daily':\n        return datetime.timedelta(days=366)\n    else:\n        raise ValueError('Unknown frequency: %r' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    try:\n        number, unit = frequency.split(' ')\n    except ValueError:\n        raise ValueError('frequency must be \"always\", \"weeks\", or \"days\".')\n\n    try:\n        number = int(number)\n    except ValueError:\n        raise ValueError('frequency must be an integer.')\n\n    if unit not in ['weeks', 'days']:\n        raise ValueError('frequency must be \"weeks\" or \"days\".')\n\n    if number < 1:\n        raise ValueError('frequency must be greater than 0.')\n\n    return timedelta(days=number * 7)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n\n    frequency = frequency.strip().lower()\n\n    if frequency in ['always', 'never']:\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Unknown frequency \"%s\". Must be \"always\" or \"never\".' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in ('weeks', 'week'):\n        return timedelta(weeks=1)\n    if frequency in ('days', 'day'):\n        return timedelta(days=1)\n    if frequency in ('hours', 'hour'):\n        return timedelta(hours=1)\n    if frequency in ('minutes','minute'):\n        return timedelta(minutes=1)\n    if frequency in ('seconds','second'):\n        return timedelta(seconds=1)\n    if frequency in ('weeks', 'weekday', 'weekdays'):\n        return timedelta(weeks=52)\n    if frequency in ('months','month'):\n        return timedelta(months=1)\n    if frequency in ('years', 'year'):\n        return timedelta(years=1)\n    if frequency in ('weekly', 'week', 'weeks'):\n        return timedelta(weeks=52)\n    if frequency in ('daily', 'd'):\n        return timedelta(days=1)\n    if frequency in ('hourly', 'hour', 'hours'):\n        return timedelta(hours=1)\n  ", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    if host == \"127.0.0.1\":\n        return True\n    return False\n", "def is_local(host):\n    if host is None:\n        return False\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host!= '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n\n    if host.startswith('127.'):\n        return True\n\n    return False\n", "def is_local(host):\n    if not isinstance(host, string_types):\n        raise ValueError(\"Host must be a string\")\n    if host == '127.0.0.1':\n        return True\n    if host == '::1':\n        return False\n    try:\n        socket.getaddrinfo(host, None)\n    except socket.gaierror:\n        return False\n    return True\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return host == '127.0.0.1' or host.startswith('localhost')\n", "def is_local(host):\n    if host.startswith('127.0.0.1'):\n        return True\n    else:\n        return False\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    if \"127.0.0.1\" in host:\n        return True\n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    if host == \"127.0.0.1\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host is None:\n        return False\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host!= '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n\n    if host.startswith('127.'):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if not isinstance(host, string_types):\n        raise ValueError(\"Host must be a string\")\n    if host == '127.0.0.1':\n        return True\n    if host == '::1':\n        return False\n    try:\n        socket.getaddrinfo(host, None)\n    except socket.gaierror:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return host == '127.0.0.1' or host.startswith('localhost')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host.startswith('127.0.0.1'):\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if \"127.0.0.1\" in host:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    patterns = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            # Glob patterns can include slashes even on Windows.\n            pattern ='sh:' + pattern\n        patterns.append(pattern)\n    return patterns\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "def make_find_paths(find_paths):\n    if isinstance(find_paths, string_types):\n        return [find_paths]\n    return find_paths\n", "def make_find_paths(find_paths):\n    flags = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            flags.extend(glob.glob(pattern))\n        else:\n            flags.append(pattern)\n    return flags\n", "def make_find_paths(find_paths):\n    if find_paths:\n        return ['sh:**/*{}*/**'.format(f) for f in find_paths]\n    return find_paths\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path:\n            yield path\n", "def make_find_paths(find_paths):\n    patterns = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            # Pass through existing patterns untouched.\n            patterns.append(pattern)\n        else:\n            # Transform path fragments into glob patterns.\n            pattern ='sh:**/*{}*/**'.format(pattern)\n            patterns.append(pattern)\n    return patterns\n", "def make_find_paths(find_paths):\n    new_find_paths = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            segments = pattern.split(':')\n        else:\n            segments = [pattern]\n        for i in range(len(segments)):\n            segment = segments[i]\n            if '*' in segment:\n                segment = 'pp:' + segment\n            new_find_paths.append(segment)\n    return new_find_paths\n", "def make_find_paths(find_paths):\n    if isinstance(find_paths, string_types):\n        return [find_paths]\n    return find_paths\n", "def make_find_paths(find_paths):\n    pattern_list = []\n    for path in find_paths:\n        if path:\n            pattern_list.append(path)\n        else:\n            pattern_list.append('*')\n    return pattern_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    patterns = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            # Glob patterns can include slashes even on Windows.\n            pattern ='sh:' + pattern\n        patterns.append(pattern)\n    return patterns\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if isinstance(find_paths, string_types):\n        return [find_paths]\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    flags = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            flags.extend(glob.glob(pattern))\n        else:\n            flags.append(pattern)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        return ['sh:**/*{}*/**'.format(f) for f in find_paths]\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path:\n            yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    patterns = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            # Pass through existing patterns untouched.\n            patterns.append(pattern)\n        else:\n            # Transform path fragments into glob patterns.\n            pattern ='sh:**/*{}*/**'.format(pattern)\n            patterns.append(pattern)\n    return patterns\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    new_find_paths = []\n    for pattern in find_paths:\n        if ':' in pattern:\n            segments = pattern.split(':')\n        else:\n            segments = [pattern]\n        for i in range(len(segments)):\n            segment = segments[i]\n            if '*' in segment:\n                segment = 'pp:' + segment\n            new_find_paths.append(segment)\n    return new_find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if isinstance(find_paths, string_types):\n        return [find_paths]\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    pattern_list = []\n    for path in find_paths:\n        if path:\n            pattern_list.append(path)\n        else:\n            pattern_list.append('*')\n    return pattern_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "def is_gitbash():\n\n    # if running in gitbash, we have to look for the.git folder in the git\n    # repo to see if we can import it.\n    return os.path.isdir(os.path.join(\".git\", \"objects\"))\n", "def is_gitbash():\n    if os.name == \"nt\":\n        return True\n    else:\n        return False\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'true'\n    except KeyError:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH'] == 'true'\n    except KeyError:\n        return False\n", "def is_gitbash():\n    return platform.system() == \"Windows\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'git'\n    except KeyError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except subprocess.CalledProcessError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n\n    # if running in gitbash, we have to look for the.git folder in the git\n    # repo to see if we can import it.\n    return os.path.isdir(os.path.join(\".git\", \"objects\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    if os.name == \"nt\":\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH_COMMAND'] == 'true'\n    except KeyError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        return os.environ['GIT_BASH'] == 'true'\n    except KeyError:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('Config file \"{}\" already exists. Aborting.'.format(config_filename))\n        sys.exit()\n\n    # If the directories exist, make them if they don't.\n    directories = [os.path.dirname(config_filename), os.path.dirname(os.path.dirname(config_filename))]\n    for directory in directories:\n        if not os.path.isdir(directory):\n            os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    # Make sure the output directory exists\n    try:\n        os.makedirs(os.path.dirname(config_filename), mode)\n    except OSError as e:\n        if e.errno!= errno.EEXIST:\n            raise\n\n    # Write the output YAML\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n\n    # Make sure the output directory is writable\n    try:\n        os.chmod(config_filename, mode)\n    except OSError as e:\n        if e.errno!= errno.EROFS:\n            raise\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {} already exists and overwrite is False. Aborting.\".format(\n                directory\n            )\n        )\n    os.makedirs(directory, mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file \"{}\" already exists. Skipping.'.format(config_filename))\n        return\n\n    if directory:\n        print('Creating directory \"{}\"'.format(directory))\n        os.makedirs(directory)\n\n    with open(config_filename, 'w') as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file \"{0}\" already exists. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file \"{0}\"'.format(config_filename))\n    try:\n        with open(config_filename, mode) as config_file:\n            config_file.write(rendered_config)\n    except IOError as error:\n        print('Error writing configuration file \"{0}\": {1}'.format(config_filename, error))\n        sys.exit(1)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is writable\n    if directory:\n        os.makedirs(directory, mode)\n\n    with open(config_filename, 'w') as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname and not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, 'w') as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    # if the file already exists and overwrite is False, abort\n    if not overwrite and os.path.exists(config_filename):\n        print(\"ERROR: file '{}' already exists\".format(config_filename))\n        sys.exit(1)\n\n    # make sure the file is writable\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)\n\n    # write the output to a temporary file\n    with tempfile.NamedTemporaryFile(mode=mode) as f:\n        f.write(rendered_config)\n        f.flush()\n\n        # write the output to a temporary file on Windows\n        # http://stackoverflow.com/questions/38517197/how-to-make-a-python-file-with-a-tempfile-in-windows\n        os.chmod(f.name, mode)\n        f.close()\n\n        # and rename the temporary file to the config file\n        # this is done to prevent confusing output from accidentally saving to the console\n        os.rename(f.nam", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directories = find_containing_directories(config_filename)\n    if not directories:\n        return\n\n    # Make sure the directories exist\n    for directory in directories:\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n\n    # Write out the config\n    with open(config_filename, mode) as file_pointer:\n        file_pointer.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"\\t\\t\\tWARNING: config file already exists: {}\".format(config_filename))\n        return\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('Config file \"{}\" already exists. Aborting.'.format(config_filename))\n        sys.exit()\n\n    # If the directories exist, make them if they don't.\n    directories = [os.path.dirname(config_filename), os.path.dirname(os.path.dirname(config_filename))]\n    for directory in directories:\n        if not os.path.isdir(directory):\n            os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    # Make sure the output directory exists\n    try:\n        os.makedirs(os.path.dirname(config_filename), mode)\n    except OSError as e:\n        if e.errno!= errno.EEXIST:\n            raise\n\n    # Write the output YAML\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n\n    # Make sure the output directory is writable\n    try:\n        os.chmod(config_filename, mode)\n    except OSError as e:\n        if e.errno!= errno.EROFS:\n            raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {} already exists and overwrite is False. Aborting.\".format(\n                directory\n            )\n        )\n    os.makedirs(directory, mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file \"{}\" already exists. Skipping.'.format(config_filename))\n        return\n\n    if directory:\n        print('Creating directory \"{}\"'.format(directory))\n        os.makedirs(directory)\n\n    with open(config_filename, 'w') as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file \"{0}\" already exists. Aborting.'.format(config_filename))\n        return\n\n    print('Writing configuration file \"{0}\"'.format(config_filename))\n    try:\n        with open(config_filename, mode) as config_file:\n            config_file.write(rendered_config)\n    except IOError as error:\n        print('Error writing configuration file \"{0}\": {1}'.format(config_filename, error))\n        sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # make sure the directory is writable\n    if directory:\n        os.makedirs(directory, mode)\n\n    with open(config_filename, 'w') as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname and not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, 'w') as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    # if the file already exists and overwrite is False, abort\n    if not overwrite and os.path.exists(config_filename):\n        print(\"ERROR: file '{}' already exists\".format(config_filename))\n        sys.exit(1)\n\n    # make sure the file is writable\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)\n\n    # write the output to a temporary file\n    with tempfile.NamedTemporaryFile(mode=mode) as f:\n        f.write(rendered_config)\n        f.flush()\n\n        # write the output to a temporary file on Windows\n        # http://stackoverflow.com/questions/38517197/how-to-make-a-python-file-with-a-tempfile-in-windows\n        os.chmod(f.name, mode)\n        f.close()\n\n        # and rename the temporary file to the config file\n        # this is done to prevent confusing output from accidentally saving to the console\n        os.rename(f.nam", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directories = find_containing_directories(config_filename)\n    if not directories:\n        return\n\n    # Make sure the directories exist\n    for directory in directories:\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n\n    # Write out the config\n    with open(config_filename, mode) as file_pointer:\n        file_pointer.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"\\t\\t\\tWARNING: config file already exists: {}\".format(config_filename))\n        return\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(shlex.split(script))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(shlex.split(script))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(shlex.split(script))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(shlex.split(script))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as temp:\n        with open(temp.name, 'w') as file_obj:\n            file_obj.write('def foo():')\n            file_obj.write('    return None')\n        args = [sys.executable, '-m', func, '--tempfile', temp.name] + list(args)\n        if extra_env:\n            args += ['--env', extra_env]\n        try:\n            subprocess.run(args, timeout=timeout, check=True)\n        finally:\n            os.unlink(temp.name)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    proc_stdout, proc_stderr = proc.communicate()\n    if proc.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            proc.returncode,\n            func,\n            proc_stdout.decode(),\n            proc_stderr.decode(),\n        )\n    return proc_stdout.decode()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    try:\n        with start_new_session(\n            \"subprocess_run_helper\",\n            args=args,\n            env=env,\n            timeout=timeout,\n        ) as session:\n            func(session)\n    except KeyboardInterrupt:\n        raise\n    except Exception:\n        session.cleanup()\n        raise\n    finally:\n        session.close()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout))\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        p = subprocess.Popen(\n            [sys.executable, func.__name__, *args],\n            stdout=subprocess.PIPE,\n            stderr=devnull,\n            env=env,\n            close_fds=True,\n            timeout=timeout\n        )\n        out, err = p.communicate()\n    return out.decode(\"utf-8\").strip(), err.decode(\"utf-8\").strip()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    if proc.returncode:\n        raise Exception(\"Failed to run {}\".format(func))\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout)\n    return p.communicate()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, '-m', func.__module__, *args],\n            stdout=subprocess.PIPE,\n            stderr=devnull,\n            env=env,\n            close_fds=True)\n        returncode = proc.wait()\n    stdout = proc.communicate()[0].decode()\n    if returncode:\n        raise subprocess.CalledProcessError(returncode, func.__name__, stdout)\n    return stdout\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode!= 0:\n        raise subprocess.CalledProcessError(proc.returncode, func, output,\n                                           errors)\n    return output.decode()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=devnull, stderr=devnull, env=env,\n                timeout=timeout)\n        except OSError:\n            proc = subprocess.Popen(args, stdout=devnull, stderr=devnull)\n        proc.wait()\n        if proc.returncode!= 0:\n            raise subprocess.CalledProcessError(proc.returncode,\n                                               func.__name__,\n                                               args)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as temp:\n        with open(temp.name, 'w') as file_obj:\n            file_obj.write('def foo():')\n            file_obj.write('    return None')\n        args = [sys.executable, '-m', func, '--tempfile', temp.name] + list(args)\n        if extra_env:\n            args += ['--env', extra_env]\n        try:\n            subprocess.run(args, timeout=timeout, check=True)\n        finally:\n            os.unlink(temp.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    proc_stdout, proc_stderr = proc.communicate()\n    if proc.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            proc.returncode,\n            func,\n            proc_stdout.decode(),\n            proc_stderr.decode(),\n        )\n    return proc_stdout.decode()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    try:\n        with start_new_session(\n            \"subprocess_run_helper\",\n            args=args,\n            env=env,\n            timeout=timeout,\n        ) as session:\n            func(session)\n    except KeyboardInterrupt:\n        raise\n    except Exception:\n        session.cleanup()\n        raise\n    finally:\n        session.close()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env)\n    p.communicate(input=func(*args, timeout=timeout))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        p = subprocess.Popen(\n            [sys.executable, func.__name__, *args],\n            stdout=subprocess.PIPE,\n            stderr=devnull,\n            env=env,\n            close_fds=True,\n            timeout=timeout\n        )\n        out, err = p.communicate()\n    return out.decode(\"utf-8\").strip(), err.decode(\"utf-8\").strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    if proc.returncode:\n        raise Exception(\"Failed to run {}\".format(func))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        timeout=timeout)\n    return p.communicate()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, '-m', func.__module__, *args],\n            stdout=subprocess.PIPE,\n            stderr=devnull,\n            env=env,\n            close_fds=True)\n        returncode = proc.wait()\n    stdout = proc.communicate()[0].decode()\n    if returncode:\n        raise subprocess.CalledProcessError(returncode, func.__name__, stdout)\n    return stdout\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode!= 0:\n        raise subprocess.CalledProcessError(proc.returncode, func, output,\n                                           errors)\n    return output.decode()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'wb') as devnull:\n        try:\n            proc = subprocess.Popen(\n                args, stdout=devnull, stderr=devnull, env=env,\n                timeout=timeout)\n        except OSError:\n            proc = subprocess.Popen(args, stdout=devnull, stderr=devnull)\n        proc.wait()\n        if proc.returncode!= 0:\n            raise subprocess.CalledProcessError(proc.returncode,\n                                               func.__name__,\n                                               args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        try:\n            return os.environ[default]\n        except KeyError:\n            raise Error(\"Undefined variable {!r} in {!r}\".format(name, os.environ))\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        default = os.getenv(name)\n    else:\n        default = str(default)\n\n    return os.getenv(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) is not None else ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        raise Error('Set the {} environment variable'.format(name))\n    except AttributeError:\n        if default!= '':\n            return os.environ.get(name, default)\n        raise Error('Set the {} environment variable with the default value'.format(name))\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        message = 'Set the {0} environment variable'.format(matcher.group(1))\n        raise Error(message)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    if default is None:\n        return os.environ.get(name)\n    else:\n        return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else os.getenv(name)\n\n    return os.getenv(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default_value = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default_value is not None:\n            return os.environ[default_value]\n        else:\n            raise Error('Environment variable {} is not defined.'.format(name))\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        pass\n    try:\n        return os.environ[matcher.group('default')]\n    except KeyError:\n        raise Error('Missing or invalid default value for environment variable {}'.format(matcher.group('name')))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return os.getenv(name, default)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        try:\n            return os.environ[default]\n        except KeyError:\n            raise Error(\"Undefined variable {!r} in {!r}\".format(name, os.environ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        default = os.getenv(name)\n    else:\n        default = str(default)\n\n    return os.getenv(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Missing required environment variable {0}'.format(name))\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) is not None else ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        raise Error('Set the {} environment variable'.format(name))\n    except AttributeError:\n        if default!= '':\n            return os.environ.get(name, default)\n        raise Error('Set the {} environment variable with the default value'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        message = 'Set the {0} environment variable'.format(matcher.group(1))\n        raise Error(message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    if default is None:\n        return os.environ.get(name)\n    else:\n        return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else os.getenv(name)\n\n    return os.getenv(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default_value = matcher.group(2) if matcher.group(2) else None\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default_value is not None:\n            return os.environ[default_value]\n        else:\n            raise Error('Environment variable {} is not defined.'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        pass\n    try:\n        return os.environ[matcher.group('default')]\n    except KeyError:\n        raise Error('Missing or invalid default value for environment variable {}'.format(matcher.group('name')))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return os.getenv(name, default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> (str, str, bool):\n    parsed = urlparse(image_href)\n    if parsed.netloc.endswith('cloudspotting.com'):\n        netloc = parsed.netloc.rsplit(':', 1)[0]\n        use_ssl = False\n    else:\n        netloc = parsed.netloc\n        use_ssl = True\n\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split the href into the netloc and the path\n    netloc, path = image_href.rsplit(':', 1)\n\n    # strip the use_ssl attribute\n    if 'https://' in netloc:\n        netloc, use_ssl = netloc.split('https://', 1)\n    else:\n        use_ssl = False\n\n    # strip the href extension\n    path = path.strip('/')\n\n    return (image_href, netloc, use_ssl)\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    url = urlparse(image_href)\n\n    if url.netloc:\n        netloc = url.netloc\n    elif url.path.startswith('/'):\n        netloc = url.path\n    else:\n        raise ValueError('Image href should be in the form '\n                         '<address>:<port> or '\n                         '<address>:<port>/<path>')\n\n    use_ssl = url.scheme == 'https'\n\n    return url.path, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if url.scheme!= \"image\":\n        raise ValueError(\"not an image: {}\".format(image_href))\n    image_id = url.path.split('/')[-1]\n    netloc = url.netloc\n    use_ssl = url.scheme == \"https\"\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    if not image_href.startswith('http'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    use_ssl = False if 'cert' in netloc else True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc is None:\n        raise ValueError('image href %s is not a valid url' % image_href)\n\n    return (parsed.image_id, parsed.netloc, parsed.use_ssl)\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Invalid image reference %s' % image_href)\n    # image_id is stored with the href of the image in the response body\n    image_id = image_href.split('/')[-1]\n    # netloc is the http host name without port\n    netloc = image_href.split(':')[0]\n    # use_ssl is set to False if the use_ssl value is not present\n    use_ssl = False if 'use_ssl' not in image_href else image_href['use_ssl']\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if url_components.netloc == '':\n        netloc = url_components.path.lstrip('/')\n    else:\n        netloc = url_components.netloc\n\n    use_ssl = False if url_components.scheme == '' else True\n    image_id = image_href.split('/')[-1]\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image href {} does not use a netloc'.format(image_href))\n    image_id = parsed.path.split('/')[-1]\n    netloc = parsed.netloc\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    parsed = urlparse(image_href)\n    try:\n        image_id = parsed.path.split('/')[-1]\n    except AttributeError:\n        raise ValueError('Invalid image href: %r' % image_href)\n    netloc = parsed.netloc.split(':')[0]\n    use_ssl = parsed.scheme == 'https'\n    return image_id, netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> (str, str, bool):\n    parsed = urlparse(image_href)\n    if parsed.netloc.endswith('cloudspotting.com'):\n        netloc = parsed.netloc.rsplit(':', 1)[0]\n        use_ssl = False\n    else:\n        netloc = parsed.netloc\n        use_ssl = True\n\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Invalid image href: %s' % image_href)\n\n    image_href = image_href.strip('/')\n\n    # split the href into the netloc and the path\n    netloc, path = image_href.rsplit(':', 1)\n\n    # strip the use_ssl attribute\n    if 'https://' in netloc:\n        netloc, use_ssl = netloc.split('https://', 1)\n    else:\n        use_ssl = False\n\n    # strip the href extension\n    path = path.strip('/')\n\n    return (image_href, netloc, use_ssl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    url = urlparse(image_href)\n\n    if url.netloc:\n        netloc = url.netloc\n    elif url.path.startswith('/'):\n        netloc = url.path\n    else:\n        raise ValueError('Image href should be in the form '\n                         '<address>:<port> or '\n                         '<address>:<port>/<path>')\n\n    use_ssl = url.scheme == 'https'\n\n    return url.path, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urlparse(image_href)\n    if url.scheme!= \"image\":\n        raise ValueError(\"not an image: {}\".format(image_href))\n    image_id = url.path.split('/')[-1]\n    netloc = url.netloc\n    use_ssl = url.scheme == \"https\"\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc.split(':')[0]\n    image_id = image_href.split('/')[-1]\n\n    if not netloc:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n    if not image_href.startswith('http'):\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    use_ssl = False if 'cert' in netloc else True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n\n    if parsed.netloc is None:\n        raise ValueError('image href %s is not a valid url' % image_href)\n\n    return (parsed.image_id, parsed.netloc, parsed.use_ssl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Invalid image reference %s' % image_href)\n    # image_id is stored with the href of the image in the response body\n    image_id = image_href.split('/')[-1]\n    # netloc is the http host name without port\n    netloc = image_href.split(':')[0]\n    # use_ssl is set to False if the use_ssl value is not present\n    use_ssl = False if 'use_ssl' not in image_href else image_href['use_ssl']\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if url_components.netloc == '':\n        netloc = url_components.path.lstrip('/')\n    else:\n        netloc = url_components.netloc\n\n    use_ssl = False if url_components.scheme == '' else True\n    image_id = image_href.split('/')[-1]\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image href {} does not use a netloc'.format(image_href))\n    image_id = parsed.path.split('/')[-1]\n    netloc = parsed.netloc\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    parsed = urlparse(image_href)\n    try:\n        image_id = parsed.path.split('/')[-1]\n    except AttributeError:\n        raise ValueError('Invalid image href: %r' % image_href)\n    netloc = parsed.netloc.split(':')[0]\n    use_ssl = parsed.scheme == 'https'\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    # Test if list is string\n    if not isinstance(input_list, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Test if length is greater than one\n    if len(input_list) > 1:\n        for item in input_list:\n            if item[-1]!= os.sep:\n                return input_list\n\n    # Return processed list\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    for index, value in enumerate(input_list):\n        if index > 0 and input_list[index - 1] == os.sep:\n            continue\n        if index == len(input_list) - 1 and input_list[index] == os.sep:\n            continue\n        yield value\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be a list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    processed_list = []\n    for item in input_list:\n        if item!= '' and item[-1] == os.sep:\n            item = item[:-1]\n        processed_list.append(item)\n\n    return processed_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input parameter must be of type list\")\n\n    for idx, item in enumerate(input_list):\n        if idx == len(input_list) - 1:\n            continue\n        if item[-1]!= os.sep:\n            continue\n        input_list[idx] = item[:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[0:len(input_list) - 1]\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[:-1]\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i, _ in enumerate(input_list):\n            if len(input_list[i]) > 1 and input_list[i][-1] == os.sep:\n                input_list[i] = input_list[i][:-1]\n        return input_list\n    else:\n        raise TypeError('Input list cannot be empty')\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if input_list[i]!= os.sep:\n                return input_list[:i]\n    else:\n        raise TypeError(\"Input list too short\")\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    for index, item in enumerate(input_list):\n        if len(item) > 1 and item[-1] == os.sep:\n            input_list[index] = item[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be a list')\n\n    processed_list = []\n    for item in input_list:\n        if isinstance(item, str):\n            processed_list.append(item.rstrip(os.sep))\n        else:\n            raise TypeError('input_list must be a list of strings')\n    return processed_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    # Test if list is string\n    if not isinstance(input_list, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Test if length is greater than one\n    if len(input_list) > 1:\n        for item in input_list:\n            if item[-1]!= os.sep:\n                return input_list\n\n    # Return processed list\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    for index, value in enumerate(input_list):\n        if index > 0 and input_list[index - 1] == os.sep:\n            continue\n        if index == len(input_list) - 1 and input_list[index] == os.sep:\n            continue\n        yield value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be a list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    processed_list = []\n    for item in input_list:\n        if item!= '' and item[-1] == os.sep:\n            item = item[:-1]\n        processed_list.append(item)\n\n    return processed_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input parameter must be of type list\")\n\n    for idx, item in enumerate(input_list):\n        if idx == len(input_list) - 1:\n            continue\n        if item[-1]!= os.sep:\n            continue\n        input_list[idx] = item[:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[0:len(input_list) - 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i, _ in enumerate(input_list):\n            if len(input_list[i]) > 1 and input_list[i][-1] == os.sep:\n                input_list[i] = input_list[i][:-1]\n        return input_list\n    else:\n        raise TypeError('Input list cannot be empty')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if input_list[i]!= os.sep:\n                return input_list[:i]\n    else:\n        raise TypeError(\"Input list too short\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    for index, item in enumerate(input_list):\n        if len(item) > 1 and item[-1] == os.sep:\n            input_list[index] = item[:-1]\n\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be a list')\n\n    processed_list = []\n    for item in input_list:\n        if isinstance(item, str):\n            processed_list.append(item.rstrip(os.sep))\n        else:\n            raise TypeError('input_list must be a list of strings')\n    return processed_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern])) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"The given pattern must be a string\")\n    if not isinstance(strip, bool):\n        raise TypeError(\"The given strip must be a boolean\")\n\n    regex_pattern = re.compile(pattern)\n    if strip:\n        return regex_pattern.strip()\n    return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.UNICODE)\n", "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern)\n    if strip:\n        return regex_pattern.strip()\n    return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M) if strip else re.compile(\n        pattern.replace(\"*\", \"\\\\*\") + \"$\"\n    )\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n')) if strip else re.compile(pattern)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I)\n\n    if strip:\n        return regex_pattern.strip()\n    else:\n        return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<{}>{})'.format(k, re.escape(pattern[k]))\n         if k in pattern else k)\n        for k in pattern])) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"The given pattern must be a string\")\n    if not isinstance(strip, bool):\n        raise TypeError(\"The given strip must be a boolean\")\n\n    regex_pattern = re.compile(pattern)\n    if strip:\n        return regex_pattern.strip()\n    return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.UNICODE)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.I | re.S | re.U) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern)\n    if strip:\n        return regex_pattern.strip()\n    return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.I | re.M) if strip else re.compile(\n        pattern.replace(\"*\", \"\\\\*\") + \"$\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.UNICODE | re.IGNORECASE | re.VERBOSE) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n')) if strip else re.compile(pattern)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        try:\n            socket.inet_aton(socket.gethostbyname(target))\n        except socket.error:\n            return False\n        return True\n    return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        try:\n            socket.inet_aton(socket.gethostbyname(target))\n        except socket.error:\n            return False\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    subclass_of: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    \"\"\"\n    # find all roots in some sort of transitive hierarchy\n    subclass_of = set(subclass_of)\n    return subclass_of.difference(graph.subjects(RDF.type, SKOS.Class))\n", "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[str, Class], str]\n    ],\n) -> Set[str]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\n    Find the roots in some sort of transitive hierarchy.\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of RDFS.subClassOf\n    or SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of RDFS.subClassOf\n    or SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # Find all the roots of the given class\n    roots = set()\n    for node in graph.subjects(subclass, RDFS.type):\n        roots.update(graph.objects(node, RDFS.label))\n\n    # Find all the roots of the given class\n    for node in graph.subjects(subclass, SKOS.broader):\n        roots.update", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    triple_to_roots = {(triple[0], triple[1], triple[2])}\n    while triple_to_roots:\n    ", "def find_roots(\n    graph: Graph,\n    sub_class: Union[URIRef, str],\n    node_type: Optional[Literal[\"complexType\", \"enumeratedType\"]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf or\n    SKOS.broader\n    \"\"\"\n    if node_type is None:\n        node_type = \"complexType\"\n    if sub_class == \"complexType\":\n        sub_class = \"complexType\"\n    if sub_class == node_type:\n        return {graph.value(n, node_type) for n in graph.values(sub_class)}\n    if sub_class == \"enumeratedType\":\n        sub_class = \"enumeratedType\"\n    return set(graph.subjects(sub_class, rdflib.RDF.type))\n", "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of the\n    sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf or\n    SKOS.broader\n    \"\"\"\n    roots = set()\n\n    for triple in subclass_of:\n        roots |= set(graph.prefix_successors(triple))\n\n    return roots\n", "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Set[str] = set(),\n    rdflib_triple: Tuple[str, str, str] = (\"SKOS.broader\",),\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    \"\"\"\n\n    roots = set()\n\n    # For each triple in triple, determine roots of the sub-class hierarchy\n    for triple in subclasses:\n        # If the triple is a triple of (child, prop, parent), then add the root\n        # to the set\n        if rdflib_triple == triple:\n            if triple[0] not in rdflib_subclasses:\n                roots.add", "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef],...],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    or SKOS.broader\n    \"\"\"\n    graph = graph.copy()\n    for triple in triple:\n        for subject in graph.subjects(predicate=triple[0]):\n            graph.remove((subject, triple[1], triple[2]))\n            graph.add((subject, triple[1], triple[2].subClassOf(graph)))\n\n    return set(graph.predicates(RDF.type, SKOS.broader))\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\"\"\"\n    subclass_triples = graph.triples((None, RDF.type, rdflib_subclass))\n    return {\n        t[1] for t in subclass_triples\n        if t[2] is not None\n    }\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: Union[\n        \"rdflib.Graph\",\n        \"rdflib.Class\",\n        \"rdflib.Property\",\n        \"rdflib.URIRef\",\n        \"rdflib.BNode\",\n        \"rdflib.URIRef\",\n        \"rdflib.URIRefOnly\",\n    ]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    \"\"\"\n    sub_class_set = set()\n    for triple in graph.triples((None, None, rdflib_sub_class)):\n        sub_class_set.add(triple)\n    return sub_class_set\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal,\n    *,\n    rdflib_subclass_in: Literal,\n    rdflib_superclass: Literal,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    and find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all\n    roots of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.superClassOf\n\n    \"\"\"\n    roots = set()\n\n    for child, prop, parent in graph.triples((rdflib_subclass, rdflib_subclass_in, rdflib_superclass)):\n        roots.add(child)\n        roots.add(prop)\n  "], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    subclass_of: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    \"\"\"\n    # find all roots in some sort of transitive hierarchy\n    subclass_of = set(subclass_of)\n    return subclass_of.difference(graph.subjects(RDF.type, SKOS.Class))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclass: Union[\n        Class, Tuple[Union[Class, str], Union[str, Class], str]\n    ],\n) -> Set[str]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\n    Find the roots in some sort of transitive hierarchy.\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of RDFS.subClassOf\n    or SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of RDFS.subClassOf\n    or SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # Find all the roots of the given class\n    roots = set()\n    for node in graph.subjects(subclass, RDFS.type):\n        roots.update(graph.objects(node, RDFS.label))\n\n    # Find all the roots of the given class\n    for node in graph.subjects(subclass, SKOS.broader):\n        roots.update", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_sub_super: str,\n    triple: Tuple[str, str, str]\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader with import rdflib.RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    triple_to_roots = {(triple[0], triple[1], triple[2])}\n    while triple_to_roots:\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    sub_class: Union[URIRef, str],\n    node_type: Optional[Literal[\"complexType\", \"enumeratedType\"]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf or\n    SKOS.broader\n    \"\"\"\n    if node_type is None:\n        node_type = \"complexType\"\n    if sub_class == \"complexType\":\n        sub_class = \"complexType\"\n    if sub_class == node_type:\n        return {graph.value(n, node_type) for n in graph.values(sub_class)}\n    if sub_class == \"enumeratedType\":\n        sub_class = \"enumeratedType\"\n    return set(graph.subjects(sub_class, rdflib.RDF.type))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of the\n    sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf or\n    SKOS.broader\n    \"\"\"\n    roots = set()\n\n    for triple in subclass_of:\n        roots |= set(graph.prefix_successors(triple))\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Set[str] = set(),\n    rdflib_triple: Tuple[str, str, str] = (\"SKOS.broader\",),\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    \"\"\"\n\n    roots = set()\n\n    # For each triple in triple, determine roots of the sub-class hierarchy\n    for triple in subclasses:\n        # If the triple is a triple of (child, prop, parent), then add the root\n        # to the set\n        if rdflib_triple == triple:\n            if triple[0] not in rdflib_subclasses:\n                roots.add", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    triple: Tuple[Union[URIRef, BNode, URIRef],...],\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    or SKOS.broader\n    \"\"\"\n    graph = graph.copy()\n    for triple in triple:\n        for subject in graph.subjects(predicate=triple[0]):\n            graph.remove((subject, triple[1], triple[2]))\n            graph.add((subject, triple[1], triple[2].subClassOf(graph)))\n\n    return set(graph.predicates(RDF.type, SKOS.broader))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\"\"\"\n    subclass_triples = graph.triples((None, RDF.type, rdflib_subclass))\n    return {\n        t[1] for t in subclass_triples\n        if t[2] is not None\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: Union[\n        \"rdflib.Graph\",\n        \"rdflib.Class\",\n        \"rdflib.Property\",\n        \"rdflib.URIRef\",\n        \"rdflib.BNode\",\n        \"rdflib.URIRef\",\n        \"rdflib.URIRefOnly\",\n    ]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    \"\"\"\n    sub_class_set = set()\n    for triple in graph.triples((None, None, rdflib_sub_class)):\n        sub_class_set.add(triple)\n    return sub_class_set\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal,\n    *,\n    rdflib_subclass_in: Literal,\n    rdflib_superclass: Literal,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.subClassOf\n    and find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all\n    roots of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader with import rdflib.RDFS.superClassOf\n\n    \"\"\"\n    roots = set()\n\n    for child, prop, parent in graph.triples((rdflib_subclass, rdflib_subclass_in, rdflib_superclass)):\n        roots.add(child)\n        roots.add(prop)\n  ", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    if not isinstance(obj, string_types):\n        if hasattr(obj, 'dump'):\n            return obj.dump(Dumper=dumper)\n        return str(obj)\n    return obj\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.dump(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_scalar(u'!str', obj)\n    elif isinstance(obj, int):\n        return dumper.represent_int(obj)\n    elif isinstance(obj, float):\n        return dumper.represent_float(obj)\n    elif isinstance(obj, bool):\n        return dumper.represent_bool(obj)\n    elif isinstance(obj, list):\n        return dumper.represent_list(obj)\n    elif isinstance(obj, dict):\n        return dumper.represent_dict(obj)\n    elif isinstance(obj, set):\n        return dumper.represent_set(obj)\n    else:\n        return dumper.represent_str(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, yaml.SafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, unicode):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError('Object of type {} is not supported in yaml.'.format(type(obj)))\n", "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.binary_type):\n        obj = obj.encode('utf-8')\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if PY3:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    else:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, yaml.SafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', u''.join(obj))\n    elif isinstance(obj, yaml.UnsafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', u'')\n    elif isinstance(obj, (bytes, str)):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    else:\n        raise TypeError('Object of type %s is not serializable' % type(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, bytes):\n        dumper.represent_unicode(obj)\n    elif isinstance(obj, str):\n        dumper.represent_str(obj)\n    else:\n        raise TypeError(\"Unsupported type %s for dump\" % type(obj))\n    return dumper.represent_dict(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, str):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, bytes):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    elif isinstance(obj, list):\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n    elif isinstance(obj, dict):\n        return dumper.represent_mapping(u'tag:yaml.org,2002:dict', obj)\n    else:\n        return str(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, string_types):\n        if hasattr(obj, 'dump'):\n            return obj.dump(Dumper=dumper)\n        return str(obj)\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        from yaml import SafeDumper\n        dumper = SafeDumper\n\n    if isinstance(obj, bytes):\n        return dumper.dump(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_scalar(u'!str', obj)\n    elif isinstance(obj, int):\n        return dumper.represent_int(obj)\n    elif isinstance(obj, float):\n        return dumper.represent_float(obj)\n    elif isinstance(obj, bool):\n        return dumper.represent_bool(obj)\n    elif isinstance(obj, list):\n        return dumper.represent_list(obj)\n    elif isinstance(obj, dict):\n        return dumper.represent_dict(obj)\n    elif isinstance(obj, set):\n        return dumper.represent_set(obj)\n    else:\n        return dumper.represent_str(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, yaml.SafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, bytes):\n        return dumper.represent_str(obj)\n    elif isinstance(obj, unicode):\n        return dumper.represent_unicode(obj)\n    else:\n        raise TypeError('Object of type {} is not supported in yaml.'.format(type(obj)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.binary_type):\n        obj = obj.encode('utf-8')\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if PY3:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    else:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, yaml.SafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', u''.join(obj))\n    elif isinstance(obj, yaml.UnsafeData):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', u'')\n    elif isinstance(obj, (bytes, str)):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    else:\n        raise TypeError('Object of type %s is not serializable' % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, bytes):\n        dumper.represent_unicode(obj)\n    elif isinstance(obj, str):\n        dumper.represent_str(obj)\n    else:\n        raise TypeError(\"Unsupported type %s for dump\" % type(obj))\n    return dumper.represent_dict(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, str):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, bytes):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    elif isinstance(obj, list):\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n    elif isinstance(obj, dict):\n        return dumper.represent_mapping(u'tag:yaml.org,2002:dict', obj)\n    else:\n        return str(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n\n    # create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    logger.addHandler(ch)\n\n    # if debug mode enabled, write to file\n    if debug:\n        file_handler = logging.FileHandler(logfile)\n        file_handler.setFormatter(formatter)\n\n        logger.addHandler(file_handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.debug('Opening log file %s' % logfile)\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(levelname)s - %(message)s'\n    formatter = logging.Formatter(log_format)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n    app_logger.addHandler(handler)\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n\n    if logfile:\n        file_handler = logging.FileHandler(logfile)\n        file_handler.setFormatter(formatter)\n        logger.addHandler(file_handler)\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(log_formatter)\n\n    if debug:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n    else:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.INFO)\n        logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    logger.debug('Log file %s', logfile)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n        '%Y-%m-%d %H:%M:%S')\n\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.debug('Debug mode enabled')\n    else:\n        app_logger.info('Debug mode enabled')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n\n    # create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    logger.addHandler(ch)\n\n    # if debug mode enabled, write to file\n    if debug:\n        file_handler = logging.FileHandler(logfile)\n        file_handler.setFormatter(formatter)\n\n        logger.addHandler(file_handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Adding debug handler to logger: %s', name)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.debug('Opening log file %s' % logfile)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(levelname)s - %(message)s'\n    formatter = logging.Formatter(log_format)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n    app_logger.addHandler(handler)\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n\n    if logfile:\n        file_handler = logging.FileHandler(logfile)\n        file_handler.setFormatter(formatter)\n        logger.addHandler(file_handler)\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(log_formatter)\n\n    if debug:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n    else:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.INFO)\n        logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n    logger.debug('Log file %s', logfile)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n\n    return logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-np.power(x-0.2,2)/(2*np.power(0.1,2)))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2)) / np.sqrt(2*np.pi)\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x ** 2) / (2 * (1 / 0.1) ** 2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-np.power(x-0.2,2)/(2*np.power(0.1,2)))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x-0.2,2)/(2*np.power(0.1,2)))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2)) / np.sqrt(2*np.pi)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x ** 2) / (2 * (1 / 0.1) ** 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x-0.2,2)/(2*np.power(0.1,2)))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_args(overrides)\n        except Exception as e:\n            errors.append(str(e))\n\n    return (configs, errors)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename, \"rt\") as config_file:\n                configs[filename] = load_configuration(\n                    config_file, overrides, resolve_env=resolve_env\n                )\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            errors.append(e)\n            continue\n        else:\n            if not overrides or overrides.get(filename):\n                return configs, errors\n            else:\n                errors.append(\"Unable to parse configuration file '{0}'\".format(filename))\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigParser(allow_no_value=True)\n    parser.read_files(config_filenames)\n    validator = ValidateParser()\n    validator.load_config_files(parser, overrides=overrides, resolve_env=resolve_env)\n    validation_results = validator.validate()\n    logging.info('Validation results:')\n    for result in validation_results:\n        logging.info(result)\n\n    parser_errors = []\n    logging.info('Parsing errors:')\n    for result in validation_results:\n        for error in result.errors:\n            parser_errors.append(error)\n\n    logging.info('Parser errors:')\n    for error in parser_errors:\n        logging.info(error)\n\n    logging.info('Validation succeeded.')\n    return validation_results, parser_errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    options = parser.parse_args(config_filenames)\n    config_filenames = options.config_filenames\n\n    return load_configurations_with_options(\n        config_filenames, overrides, resolve_env=resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigParser(interpolation=ExtendedInterpolation(),\n                          delimiters=('='), inline_comment_prefixes=('#'))\n    parser.read_filenames(config_filenames)\n\n    validator = Validator(parser, overrides=overrides)\n\n    result = validator.validate()\n\n    if result:\n        return result\n\n    errors = validator.get_errors()\n\n    if resolve_env:\n        environment = dict(os.environ)\n        for key, value in result.items():\n            environment[key] = value\n        result = environment\n\n    return result, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = list(config_filenames)\n    parsed_config = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            parsed_config, errors = load_configuration(\n                config_filename, overrides=overrides,\n                resolve_env=resolve_env)\n        except exceptions.ConfigurationError as e:\n            errors.append(e)\n            continue\n\n        if errors:\n            raise exceptions.ConfigurationError(\n                'Errors found while parsing configuration file {0}:\\n{1}'\n               .format(config_filename, '\\n'.join(errors)))\n\n    return (parsed_config, errors)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides,\n                                   resolve_env=resolve_env)\n        if config:\n            errors.append(config)\n            configs[config_filename] = config\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser()\n    parser.read_filenames(config_filenames)\n    results = {}\n    for config_filename in config_filenames:\n        parser.read_file(config_filename)\n        results[config_filename] = parser.parse(overrides, resolve_env)\n    return results, parser.errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    config_loader = ConfigLoader(config_filenames, parser=parser,\n                                overrides=overrides, resolve_env=resolve_env)\n    configs = config_loader.load()\n    return configs, config_loader.errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames)\n    configs = validator.get_configurations(resolve_env=resolve_env)\n    parsers = validator.get_parsers(configs)\n    errors = validator.validate()\n    return configs, parsers, errors\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_args(overrides)\n        except Exception as e:\n            errors.append(str(e))\n\n    return (configs, errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename, \"rt\") as config_file:\n                configs[filename] = load_configuration(\n                    config_file, overrides, resolve_env=resolve_env\n                )\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            errors.append(e)\n            continue\n        else:\n            if not overrides or overrides.get(filename):\n                return configs, errors\n            else:\n                errors.append(\"Unable to parse configuration file '{0}'\".format(filename))\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigParser(allow_no_value=True)\n    parser.read_files(config_filenames)\n    validator = ValidateParser()\n    validator.load_config_files(parser, overrides=overrides, resolve_env=resolve_env)\n    validation_results = validator.validate()\n    logging.info('Validation results:')\n    for result in validation_results:\n        logging.info(result)\n\n    parser_errors = []\n    logging.info('Parsing errors:')\n    for result in validation_results:\n        for error in result.errors:\n            parser_errors.append(error)\n\n    logging.info('Parser errors:')\n    for error in parser_errors:\n        logging.info(error)\n\n    logging.info('Validation succeeded.')\n    return validation_results, parser_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    options = parser.parse_args(config_filenames)\n    config_filenames = options.config_filenames\n\n    return load_configurations_with_options(\n        config_filenames, overrides, resolve_env=resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigParser(interpolation=ExtendedInterpolation(),\n                          delimiters=('='), inline_comment_prefixes=('#'))\n    parser.read_filenames(config_filenames)\n\n    validator = Validator(parser, overrides=overrides)\n\n    result = validator.validate()\n\n    if result:\n        return result\n\n    errors = validator.get_errors()\n\n    if resolve_env:\n        environment = dict(os.environ)\n        for key, value in result.items():\n            environment[key] = value\n        result = environment\n\n    return result, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = list(config_filenames)\n    parsed_config = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            parsed_config, errors = load_configuration(\n                config_filename, overrides=overrides,\n                resolve_env=resolve_env)\n        except exceptions.ConfigurationError as e:\n            errors.append(e)\n            continue\n\n        if errors:\n            raise exceptions.ConfigurationError(\n                'Errors found while parsing configuration file {0}:\\n{1}'\n               .format(config_filename, '\\n'.join(errors)))\n\n    return (parsed_config, errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides,\n                                   resolve_env=resolve_env)\n        if config:\n            errors.append(config)\n            configs[config_filename] = config\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser()\n    parser.read_filenames(config_filenames)\n    results = {}\n    for config_filename in config_filenames:\n        parser.read_file(config_filename)\n        results[config_filename] = parser.parse(overrides, resolve_env)\n    return results, parser.errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    config_loader = ConfigLoader(config_filenames, parser=parser,\n                                overrides=overrides, resolve_env=resolve_env)\n    configs = config_loader.load()\n    return configs, config_loader.errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames)\n    configs = validator.get_configurations(resolve_env=resolve_env)\n    parsers = validator.get_parsers(configs)\n    errors = validator.validate()\n    return configs, parsers, errors\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, str):\n        out = obj.encode('utf-8')\n    else:\n        out = obj\n    return out\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"arguments (given: {})\".format(type(obj)))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('force_string only takes bytes objects, not strings.')\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, bytearray):\n        return bytes(obj)\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        return str(obj).encode('utf-8')\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError('force_string received an unexpected type of \"{}\"!'.format(type(obj)))\n", "def force_string(obj):\n    return obj.encode(\"utf-8\")\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        out = obj.encode('utf-8')\n    else:\n        out = obj\n    return out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"arguments (given: {})\".format(type(obj)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    raise TypeError('force_string only takes bytes objects, not strings.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, bytearray):\n        return bytes(obj)\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        return str(obj).encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError('force_string received an unexpected type of \"{}\"!'.format(type(obj)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks can only be int')\n    if ticks < 0:\n        raise ValueError('ticks should be greater than 0')\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks must be an integer')\n    if ticks < 0:\n        raise ValueError('ticks must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = _get_tz()\n\n    dt = datetime.fromtimestamp(ticks, tz)\n\n    return cls.from_datetime(dt)\n", "def from_ticks(cls, ticks, tz=None):\n    if not cls.IS_LEAP_YEAR:\n        raise ValueError('Not a leap year')\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds))\n", "def from_ticks(cls, ticks, tz=None):\n    if not (0 <= ticks < _86400000):\n        raise ValueError('ticks out of bounds 0 <= ticks < 86400000')\n\n    if tz:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks),\n            tz=tz\n        )\n    else:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks)\n        )\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = Timezone()\n\n    try:\n        return cls._from_ticks_unsafe(ticks, tz)\n    except (ValueError, TypeError):\n        pass\n\n    dt = datetime.datetime.utcfromtimestamp(ticks)\n\n    return cls.from_datetime(dt, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not MIN_TIME_TAILED <= ticks <= MAX_TIME_TAILED:\n        raise ValueError('Time ticks %s out of bounds %s with import time functools redatetime' % (ticks, MIN_TIME_TAILED, MAX_TIME_TAILED))\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_iso_format(\n        datetime.datetime.utcfromtimestamp(ticks / tz.seconds).isoformat(),\n        tz\n    )\n", "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, numbers.Integral) or not 0 <= ticks < 86400000000:\n        raise ValueError('ticks must be in range 0 <= ticks < 86400000000')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not MIN_YEAR <= ticks <= MAX_YEAR:\n        raise ValueError('ticks out of bounds (%s <= ticks <= %s)' % (\n            MIN_YEAR, MAX_YEAR))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks),\n                             tz=tz)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks can only be int')\n    if ticks < 0:\n        raise ValueError('ticks should be greater than 0')\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, int):\n        raise TypeError('ticks must be an integer')\n    if ticks < 0:\n        raise ValueError('ticks must be greater than 0')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = _get_tz()\n\n    dt = datetime.fromtimestamp(ticks, tz)\n\n    return cls.from_datetime(dt)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not cls.IS_LEAP_YEAR:\n        raise ValueError('Not a leap year')\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz.seconds))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not (0 <= ticks < _86400000):\n        raise ValueError('ticks out of bounds 0 <= ticks < 86400000')\n\n    if tz:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks),\n            tz=tz\n        )\n    else:\n        return cls.from_datetime(\n            datetime.datetime.utcfromtimestamp(ticks)\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = Timezone()\n\n    try:\n        return cls._from_ticks_unsafe(ticks, tz)\n    except (ValueError, TypeError):\n        pass\n\n    dt = datetime.datetime.utcfromtimestamp(ticks)\n\n    return cls.from_datetime(dt, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not MIN_TIME_TAILED <= ticks <= MAX_TIME_TAILED:\n        raise ValueError('Time ticks %s out of bounds %s with import time functools redatetime' % (ticks, MIN_TIME_TAILED, MAX_TIME_TAILED))\n\n    if tz is None:\n        tz = Timezone()\n\n    return cls.from_iso_format(\n        datetime.datetime.utcfromtimestamp(ticks / tz.seconds).isoformat(),\n        tz\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not isinstance(ticks, numbers.Integral) or not 0 <= ticks < 86400000000:\n        raise ValueError('ticks must be in range 0 <= ticks < 86400000000')\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks / tz), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not MIN_YEAR <= ticks <= MAX_YEAR:\n        raise ValueError('ticks out of bounds (%s <= ticks <= %s)' % (\n            MIN_YEAR, MAX_YEAR))\n\n    if tz is None:\n        tz = dateutil.tz.tzlocal()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks),\n                             tz=tz)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {v: k for k, v in versions.items()}\n", "def protocol_handlers(cls, protocol_version=None):\n    cls._initialize_encoders()\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return versions\n\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or PROTOCOL_VERSION\n    return {v: k for k, v in cls._HANDLERS.items() if v[0] >= version_tuple[0] and v[1] >= version_tuple[1]}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        versions = _protocol_versions[cls, protocol_version]\n        if len(versions) > 1:\n            raise TypeError(\"protocol version {} is more than one supported version\".format(protocol_version))\n        return versions[0]\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {version: cls.PROTOCOL_HANDLERS[version] for version in version_list}\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return {v: k for k, v in versions.items()}\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {v: k for k, v in versions.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    cls._initialize_encoders()\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return versions\n\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or PROTOCOL_VERSION\n    return {v: k for k, v in cls._HANDLERS.items() if v[0] >= version_tuple[0] and v[1] >= version_tuple[1]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _protocol_handlers[cls]\n    else:\n        versions = _protocol_versions[cls, protocol_version]\n        if len(versions) > 1:\n            raise TypeError(\"protocol version {} is more than one supported version\".format(protocol_version))\n        return versions[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(cls.PROTOCOL_VERSION, protocol_version)\n    return {version: cls.PROTOCOL_HANDLERS[version] for version in version_list}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return {v: k for k, v in versions.items()}\n    return {v: k for k, v in versions.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type(bufsize=seq._bufsize)\n        else:\n            return seq._get_seq_with_type(bufsize=bufsize), seq.__class__\n    else:\n        # seq was already a sequence object\n        return seq, seq.__class__\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            n = max(0, len(seq) - bufsize)\n            return tuple(seq[i:i+n] for i in range(0, n, n))\n        else:\n            return seq, type(seq)\n    else:\n        # We assume that seq is an instance of Sequence.\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        try:\n            for item in seq:\n                yield item, seq.__class__\n        finally:\n            sys.setrefcount(bufsize)\n    elif isinstance(seq, tuple):\n        if isinstance(seq[0], Sequence):\n            for item in seq:\n                yield item, seq[0].__class__\n        else:\n            for item in seq:\n                yield item, type(seq[0])\n    else:\n        raise TypeError(\"Unsupported sequence type: %r\" % seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq_type = SequenceType\n    else:\n        seq_type = type(seq)\n        seq = (seq,)\n\n    if isinstance(seq[0], Sequence):\n        return seq, seq_type\n    else:\n        return (seq, seq_type)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n    else:\n        if bufsize is None:\n            bufsize = 1\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq_type = type(seq)\n        return (seq, seq_type)\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if hasattr(seq, '__iter__'):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        for x in seq:\n            yield (x, type(x))\n        return\n    else:\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        yield (seq, type(seq))\n        return\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)(bufsize)\n    else:\n        # assume it's a sequence type\n        return seq, type(seq)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type(bufsize=seq._bufsize)\n        else:\n            return seq._get_seq_with_type(bufsize=bufsize), seq.__class__\n    else:\n        # seq was already a sequence object\n        return seq, seq.__class__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            n = max(0, len(seq) - bufsize)\n            return tuple(seq[i:i+n] for i in range(0, n, n))\n        else:\n            return seq, type(seq)\n    else:\n        # We assume that seq is an instance of Sequence.\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        try:\n            for item in seq:\n                yield item, seq.__class__\n        finally:\n            sys.setrefcount(bufsize)\n    elif isinstance(seq, tuple):\n        if isinstance(seq[0], Sequence):\n            for item in seq:\n                yield item, seq[0].__class__\n        else:\n            for item in seq:\n                yield item, type(seq[0])\n    else:\n        raise TypeError(\"Unsupported sequence type: %r\" % seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq_type = SequenceType\n    else:\n        seq_type = type(seq)\n        seq = (seq,)\n\n    if isinstance(seq[0], Sequence):\n        return seq, seq_type\n    else:\n        return (seq, seq_type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n    else:\n        if bufsize is None:\n            bufsize = 1\n        seq = seq.__iter__(bufsize)\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq_type = type(seq)\n        return (seq, seq_type)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if hasattr(seq, '__iter__'):\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        for x in seq:\n            yield (x, type(x))\n        return\n    else:\n        if bufsize is None:\n            bufsize = sys.getrecursionlimit()\n        yield (seq, type(seq))\n        return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)(bufsize)\n    else:\n        # assume it's a sequence type\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\n    if (self._scale is None) and (other is None):\n        return self._scale\n\n    if (self._scale is None) and (other is not None):\n        self._update_context(context=dict(scale=other))\n\n    if (self._scale is not None) and (recompute is False):\n        if self._scale == 0:\n            raise LenaValueError(\"Scale cannot be zero\")\n        self._update_context(context=dict(scale=self._scale))\n\n    self._scale = (self._scale * self.bins).sum()\n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is not None:\n        return self._scale\n\n    self._scale = self.bins * (other / self.edges).sum()\n    self._update_context(context=dict(scale=self._scale))\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale\n        s = self._scale\n        if s is None:\n            # compute scale only if not computed before\n            self._compute_scale()\n            s = self._scale\n\n        # otherwise return scale if computed\n        else:\n            if recompute:\n                self._update_context(context=scale_context)\n                s = self._scale\n\n    else:\n        # otherwise set scale to the provided value\n        if recompute:\n            self._update_context(context=scale_context)\n            s = other\n\n    return s\n", "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (self._scale is None):\n        return self._scale\n\n    if recompute or (other!= 0):\n        self._update_context(context=dict(scale=other))\n\n    self._scale = (self._scale * self.bins) + other\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context=dict(scale=other))\n    elif self._scale is None:\n        self._scale = other\n    else:\n        raise LenaValueError('Cannot rescale histograms with scale == 0.')\n", "def scale(self, other=None, recompute=False):\n\n    if recompute and self._scale is not None:\n        if self._scale is None:\n            self._update_context(context={'scale': None})\n        else:\n            raise LenaValueError('HistoHisto scale cannot be recomputed '\n                                 'after changing (filling) '\n                                 'histo scale ({0}).'.format(self._scale))\n    else:\n        scale = self._scale\n        if other is not None:\n            scale = (scale * other).sum()\n\n    return scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._scale = other\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n\n    elif self._scale!= other:\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n        self._scale = other\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context={'scale': other})\n    elif other!= 0 and self._scale is None:\n        self._update_context(context={'scale': 0})\n    else:\n        self._scale = other\n", "def scale(self, other=None, recompute=False):\n\n    # first compute scale if not yet computed\n    if self._scale is None and other is None:\n        self._compute_scale()\n\n    # now do the actual rescaling\n    if recompute:\n        self._update_context(context=dict(ranges=self.ranges, bins=self.bins))\n        self._update_scale()\n\n    if other is not None:\n        other = as_float(other)\n        self._scale = self._scale * other\n", "def scale(self, other=None, recompute=False):\n\n    # compute scale if not yet computed\n    if self._scale is None and other is None:\n        self._scale = self._compute_scale()\n\n    # if other is provided, recompute it\n    elif other is not None:\n        if recompute:\n            self._update_context(context=copy.copy(self._scale))\n        else:\n            raise LenaValueError('Cannot rescale histograms with different scales')\n\n    return self._scale\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\n    if (self._scale is None) and (other is None):\n        return self._scale\n\n    if (self._scale is None) and (other is not None):\n        self._update_context(context=dict(scale=other))\n\n    if (self._scale is not None) and (recompute is False):\n        if self._scale == 0:\n            raise LenaValueError(\"Scale cannot be zero\")\n        self._update_context(context=dict(scale=self._scale))\n\n    self._scale = (self._scale * self.bins).sum()\n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is not None:\n        return self._scale\n\n    self._scale = self.bins * (other / self.edges).sum()\n    self._update_context(context=dict(scale=self._scale))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale\n        s = self._scale\n        if s is None:\n            # compute scale only if not computed before\n            self._compute_scale()\n            s = self._scale\n\n        # otherwise return scale if computed\n        else:\n            if recompute:\n                self._update_context(context=scale_context)\n                s = self._scale\n\n    else:\n        # otherwise set scale to the provided value\n        if recompute:\n            self._update_context(context=scale_context)\n            s = other\n\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (self._scale is None):\n        return self._scale\n\n    if recompute or (other!= 0):\n        self._update_context(context=dict(scale=other))\n\n    self._scale = (self._scale * self.bins) + other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context=dict(scale=other))\n    elif self._scale is None:\n        self._scale = other\n    else:\n        raise LenaValueError('Cannot rescale histograms with scale == 0.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute and self._scale is not None:\n        if self._scale is None:\n            self._update_context(context={'scale': None})\n        else:\n            raise LenaValueError('HistoHisto scale cannot be recomputed '\n                                 'after changing (filling) '\n                                 'histo scale ({0}).'.format(self._scale))\n    else:\n        scale = self._scale\n        if other is not None:\n            scale = (scale * other).sum()\n\n    return scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._scale = other\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n\n    elif self._scale!= other:\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n        self._scale = other\n        self._update_context(context=dict(edges=self.edges, bins=self.bins, ranges=self.ranges))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._update_context(context={'scale': other})\n    elif other!= 0 and self._scale is None:\n        self._update_context(context={'scale': 0})\n    else:\n        self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    # first compute scale if not yet computed\n    if self._scale is None and other is None:\n        self._compute_scale()\n\n    # now do the actual rescaling\n    if recompute:\n        self._update_context(context=dict(ranges=self.ranges, bins=self.bins))\n        self._update_scale()\n\n    if other is not None:\n        other = as_float(other)\n        self._scale = self._scale * other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    # compute scale if not yet computed\n    if self._scale is None and other is None:\n        self._scale = self._compute_scale()\n\n    # if other is provided, recompute it\n    elif other is not None:\n        if recompute:\n            self._update_context(context=copy.copy(self._scale))\n        else:\n            raise LenaValueError('Cannot rescale histograms with different scales')\n\n    return self._scale\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Scale must be a number\")\n    if isinstance(other, int):\n        self._scale = other\n        self._update_context(context={'scale': other})\n    else:\n        self._scale = self._parse_error_names(self.field_names)(other)\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other._scale\n        other._update_context(self.coords)\n    else:\n        self._scale = other\n    self._update_context(self._scale)\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale must be a number')\n    self._scale = other\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"scale must be a number\")\n    if other == 0:\n        self._scale = 1.0\n    else:\n        self._scale = other\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._update_context(other.context)\n    else:\n        self._scale = other\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif self._is_numeric(other):\n        self._scale = other\n    else:\n        self._scale = self._parse_error_names(self.field_names)\n", "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self._update_context(context={'scale': other})\n    elif self._scale is None:\n        raise LenaValueError('graph has no scale')\n    else:\n        self._update_context(context={'scale': self._scale})\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n\n    if self._scale is not None:\n        raise LenaValueError(\n            \"graph already has scale with other coordinates\"\n        )\n\n    self._scale = other\n    self._update_context()\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other._scale\n    else:\n        self._scale = other\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Scale must be a number\")\n    if isinstance(other, int):\n        self._scale = other\n        self._update_context(context={'scale': other})\n    else:\n        self._scale = self._parse_error_names(self.field_names)(other)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other._scale\n        other._update_context(self.coords)\n    else:\n        self._scale = other\n    self._update_context(self._scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale must be a number')\n    self._scale = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"scale must be a number\")\n    if other == 0:\n        self._scale = 1.0\n    else:\n        self._scale = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._update_context(other.context)\n    else:\n        self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif self._is_numeric(other):\n        self._scale = other\n    else:\n        self._scale = self._parse_error_names(self.field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self._update_context(context={'scale': other})\n    elif self._scale is None:\n        raise LenaValueError('graph has no scale')\n    else:\n        self._update_context(context={'scale': self._scale})\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n\n    if self._scale is not None:\n        raise LenaValueError(\n            \"graph already has scale with other coordinates\"\n        )\n\n    self._scale = other\n    self._update_context()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, Lena):\n        self._scale = other._scale\n    else:\n        self._scale = other\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use\n    :class:`.histogram` to create a graph with errors from a histogram\n    bin will be used. If it is ``True``, it uses the histogram scale.\n    If it is ``False``, it uses the histogram scale.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n    must remove context when creating a numeric graph.\n\n    Return the resulting graph. with Convert a :class:`.graph`.\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n\n    Example to create a graph with errors from a histogram", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, \"right\" and \"middle\".\n\n    *field_names* set field names of the graph.\n\n    However, if it is ``True``, it uses the histogram scale.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n    must remove context when creating a numeric graph.\n\n    Return the resulting graph. with Convert a :class:`.histogram`\n    to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create a graph's error bars. For a", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    If it is used to create a graph with errors from a histogram\n    where bins contain a named tuple with fields *mean*, *mean_error`\n    and a context one would use.  It can be \"left\" (default),\n    \"right\" and \"middle\".                                                                                                                                                                                                                                                                                               ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n    Will be use the histogram scale. If it is ``True``, it uses the\n    histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> make_value = lambda bin_: bin_.hist_to_graph(make_value, get_coordinate=\"left\")\n    >>> make_value = lambda bin_: bin_.hist_to_graph(make_value, get_coordinate=\"middle\")\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> field_names = (\"mean\", \"mean_error\")\n    >>> scale = lambda scale: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> hist_to_graph(hist, make_value, field_names, scale)\n\n    The resulting graph will be the *result* of ``hist_to_graph(hist)`", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create a graph's error bars. For\n    a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with errors from a histogram where bins contain\n    numeric bins (without context) or *make_value* must remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n    >>> make_value(100)\n    (100, 100.0)\n\n    >>> make_value(10", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    For a *make_value* above that would be use the histogram scale.\n    This option could be used to create a graph with errors from\n    a histogram where bins contain only numeric bins (without context).\n\n    For a *make_value* above that would be use the histogram scale.\n                                                                                                                                                                                                                                                                                   ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    Optionally, make_value accepts a single value (bin content) without\n    context. This option could be used to create graph's error bars.\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    This can be used to create a graph with errors from a histogram\n    where bins contain only numeric bins (without context) or\n    *make_value* must remove context when creating a numeric graph.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n\n    \"\"\"\n    return hist_to_graph_generic(hist, make_value=make_value,\n                                get_coordinate=get_coordinate,\n                                field_names=field_names, scale=scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    If it is used to create a graph with errors from a histogram where\n    bins contain a named tuple with fields *mean*, *mean_error` and\n    a context one would use\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    define what the coordinate of a graph point created from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Will be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    define what the coordinate of a graph's point created from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point. By\n    default it is bin content.\n\n    If it contains only numeric bins (without context) it can be \"left\"\n    (default), \"right\" and \"middle\".  This option could be used to\n    create a graph with errors from a histogram where bins contain\n    named tuple with fields *mean*, *mean_error* and a context one would\n    use.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n    The option could be \"left\" (default), \"right\" and \"middle\".  This\n    option could be used to create a graph with errors from a histogram\n    where bins contain only numeric bins (without context) and make_value\n    accepts a single value (bin content) without context.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100).mean\n    100\n    \"\"\"\n    r"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be use\n    :class:`.histogram` to create a graph with errors from a histogram\n    bin will be used. If it is ``True``, it uses the histogram scale.\n    If it is ``False``, it uses the histogram scale.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n    must remove context when creating a numeric graph.\n\n    Return the resulting graph. with Convert a :class:`.graph`.\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n\n    Example to create a graph with errors from a histogram", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be ``left``, \"right\" and \"middle\".\n\n    *field_names* set field names of the graph.\n\n    However, if it is ``True``, it uses the histogram scale.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n    must remove context when creating a numeric graph.\n\n    Return the resulting graph. with Convert a :class:`.histogram`\n    to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create a graph's error bars. For a", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    If it is used to create a graph with errors from a histogram\n    where bins contain a named tuple with fields *mean*, *mean_error`\n    and a context one would use.  It can be \"left\" (default),\n    \"right\" and \"middle\".                                                                                                                                                                                                                                                                                               ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n    Will be use the histogram scale. If it is ``True``, it uses the\n    histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> make_value = lambda bin_: bin_.hist_to_graph(make_value, get_coordinate=\"left\")\n    >>> make_value = lambda bin_: bin_.hist_to_graph(make_value, get_coordinate=\"middle\")\n\n    \"\"\"\n    return histogram_to_graph(hist, make_value, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> field_names = (\"mean\", \"mean_error\")\n    >>> scale = lambda scale: (\"x\", \"y_mean\", \"y_mean_error\")\n    >>> hist_to_graph(hist, make_value, field_names, scale)\n\n    The resulting graph will be the *result* of ``hist_to_graph(hist)`", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create a graph's error bars. For\n    a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale.  This can be used\n    to create a graph with errors from a histogram where bins contain\n    numeric bins (without context) or *make_value* must remove context when\n    creating a numeric graph.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n    >>> make_value(100)\n    (100, 100.0)\n\n    >>> make_value(10", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    For a *make_value* above that would be use the histogram scale.\n    This option could be used to create a graph with errors from\n    a histogram where bins contain only numeric bins (without context).\n\n    For a *make_value* above that would be use the histogram scale.\n                                                                                                                                                                                                                                                                                   ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    Optionally, make_value accepts a single value (bin content) without\n    context. This option could be used to create graph's error bars.\n    For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    This can be used to create a graph with errors from a histogram\n    where bins contain only numeric bins (without context) or\n    *make_value* must remove context when creating a numeric graph.\n\n    *hist* must contain only numeric bins (without context) or *make_value*\n\n    \"\"\"\n    return hist_to_graph_generic(hist, make_value=make_value,\n                                get_coordinate=get_coordinate,\n                                field_names=field_names, scale=scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    If it is used to create a graph with errors from a histogram where\n    bins contain a named tuple with fields *mean*, *mean_error` and\n    a context one would use\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    define what the coordinate of a graph point created from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    For a *make_value* above that would be use the histogram scale.\n\n    Will be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    define what the coordinate of a graph's point created from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point. By\n    default it is bin content.\n\n    If it contains only numeric bins (without context) it can be \"left\"\n    (default), \"right\" and \"middle\".  This option could be used to\n    create a graph with errors from a histogram where bins contain\n    named tuple with fields *mean*, *mean_error* and a context one would\n    use.  For a *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n    The option could be \"left\" (default), \"right\" and \"middle\".  This\n    option could be used to create a graph with errors from a histogram\n    where bins contain only numeric bins (without context) and make_value\n    accepts a single value (bin content) without context.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100).mean\n    100\n    \"\"\"\n    r", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, vtype)\n    verifyType(iface, candidate, 'candidate')\n\n    if not tentative:\n        verifyProvides(candidate, iface)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        return False\n\n    if tentative:\n        verifyClass(ICandidateable, candidate)\n        verifyObject(ICandidateable, candidate, tentative=False)\n\n    if not verifyObject(ICandidateable, candidate, vtype=vtype):\n        raise Invalid(_MSG_TOO_MANY)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not vtype:\n        verifyType(candidate, iface)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return _verify(iface.__class__, candidate, None, vtype)\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            return False\n        if not _verify_element(iface.__class__, name=candidate.__name__,\n                desc=candidate.__doc__, candidate=candidate):\n            return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        verifyClass(iface, candidate)\n        verifyObject(iface, candidate, vtype)\n    if tentative:\n        verifyObject(iface, candidate, None)\n        return True\n    verifyObject(iface, candidate, None)\n    verifyProvides(iface, candidate)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate)\n    verifyType(vtype, candidate, 'candidate')\n\n    if not tentative:\n        verifyProvides(candidate, iface.providedBy)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not tentative:\n        verifyObject(iface, candidate, FalsePositively)\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Verify the candidate's class declares that it `implements` the interface\n    if not iface.providedBy(candidate):\n        raise Invalid(_MSG_TOO_MANY)\n\n    # Verify the candidate's declares all the required methods\n    if not candidate.provides(iface, vtype):\n        raise Invalid(_MSG_TOO_MANY)\n\n    # Verify the candidate's defines all the required attributes\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not issubclass(vtype, InterfaceClass):\n        return  # pragma: no cover\n\n    # Catch the first error that occurs while verifying the candidate\n    # defines the interface and raise an error otherwise.\n    try:\n        verifyClass(iface, candidate, vtype)\n    except Invalid as exc:\n        if not tentative:\n            raise\n        raise exc\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(candidate,'verify'):\n        return False\n    return _verify(iface, candidate.verify(), vtype)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, vtype)\n    verifyType(iface, candidate, 'candidate')\n\n    if not tentative:\n        verifyProvides(candidate, iface)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative=tentative)\n\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        return False\n\n    if tentative:\n        verifyClass(ICandidateable, candidate)\n        verifyObject(ICandidateable, candidate, tentative=False)\n\n    if not verifyObject(ICandidateable, candidate, vtype=vtype):\n        raise Invalid(_MSG_TOO_MANY)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not vtype:\n        verifyType(candidate, iface)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return _verify(iface.__class__, candidate, None, vtype)\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            return False\n        if not _verify_element(iface.__class__, name=candidate.__name__,\n                desc=candidate.__doc__, candidate=candidate):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        verifyClass(iface, candidate)\n        verifyObject(iface, candidate, vtype)\n    if tentative:\n        verifyObject(iface, candidate, None)\n        return True\n    verifyObject(iface, candidate, None)\n    verifyProvides(iface, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate)\n    verifyType(vtype, candidate, 'candidate')\n\n    if not tentative:\n        verifyProvides(candidate, iface.providedBy)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n    if not tentative:\n        verifyObject(iface, candidate, FalsePositively)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Verify the candidate's class declares that it `implements` the interface\n    if not iface.providedBy(candidate):\n        raise Invalid(_MSG_TOO_MANY)\n\n    # Verify the candidate's declares all the required methods\n    if not candidate.provides(iface, vtype):\n        raise Invalid(_MSG_TOO_MANY)\n\n    # Verify the candidate's defines all the required attributes\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n\n    if not issubclass(vtype, InterfaceClass):\n        return  # pragma: no cover\n\n    # Catch the first error that occurs while verifying the candidate\n    # defines the interface and raise an error otherwise.\n    try:\n        verifyClass(iface, candidate, vtype)\n    except Invalid as exc:\n        if not tentative:\n            raise\n        raise exc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(candidate,'verify'):\n        return False\n    return _verify(iface, candidate.verify(), vtype)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, IObject)\n\n    # Being true for an object is the case anyway.\n    if not tentative:\n        verifyProvides(candidate, iface)\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyProvidedBy(iface, candidate)\n    verifyConstraints(iface, candidate, tentative)\n    verifyCancelled(iface)\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    return _verify(iface, candidate, None, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        return  # pragma: no cover\n\n    # Catch the first error\n    try:\n        verifyClass(iface, candidate, tentative)\n    except Invalid as e:\n        if e.args[0] == Candidate.MSG_NOT_PROVIDED:\n            return  # pragma: no cover\n        raise\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    if not hasattr(candidate, 'providedBy'):\n        verifyClass(iface, candidate)\n    if not hasattr(candidate, 'provides'):\n        verifyClass(iface, iface)\n    if not hasattr(candidate, '__call__'):\n        verifyClass(iface, None)\n    if not tentative and not hasattr(candidate, '__call__'):\n        verifyClass(iface, None)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    if not hasattr(candidate, 'providedBy'):\n        return _verify(iface, candidate, tentative, vtype=Candidate)\n    if tentative:\n        return True\n    return _verify(iface, candidate, None, vtype=Candidate)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        return False\n\n    if not isinstance(iface, Interface):\n        return False\n\n    if not hasattr(iface, 'providedBy'):\n        return False\n\n    verifyClass(iface, candidate, tentative)\n\n    # Check that the provided method is actually present in the candidate\n    verifyMethod(iface, 'does_not_exist', Candidate)\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, 'candidate')\n\n    if not tentative and iface.providedBy(candidate):\n        return True\n\n    # Make sure the candidate declares that it `implements` the interface\n    # and that it provides the interface\n    if not iface.implementedBy(candidate):\n        raise zope.interface.Invalid(\n            _MSG_TOO_MANY.format(\n                'Candidate', repr(candidate), 'does not implement '\n                '{0}.'.format(repr(iface))\n            )\n        )\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n\n    if not hasattr(candidate, 'providedBy'):\n        if not tentative:\n            raise Invalid(u\"Candidate has no providedBy method\")\n        return False\n\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, IObject)\n\n    # Being true for an object is the case anyway.\n    if not tentative:\n        verifyProvides(candidate, iface)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyProvidedBy(iface, candidate)\n    verifyConstraints(iface, candidate, tentative)\n    verifyCancelled(iface)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    return _verify(iface, candidate, None, tentative)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        return  # pragma: no cover\n\n    # Catch the first error\n    try:\n        verifyClass(iface, candidate, tentative)\n    except Invalid as e:\n        if e.args[0] == Candidate.MSG_NOT_PROVIDED:\n            return  # pragma: no cover\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    if not hasattr(candidate, 'providedBy'):\n        verifyClass(iface, candidate)\n    if not hasattr(candidate, 'provides'):\n        verifyClass(iface, iface)\n    if not hasattr(candidate, '__call__'):\n        verifyClass(iface, None)\n    if not tentative and not hasattr(candidate, '__call__'):\n        verifyClass(iface, None)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    if not hasattr(candidate, 'providedBy'):\n        return _verify(iface, candidate, tentative, vtype=Candidate)\n    if tentative:\n        return True\n    return _verify(iface, candidate, None, vtype=Candidate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        return False\n\n    if not isinstance(iface, Interface):\n        return False\n\n    if not hasattr(iface, 'providedBy'):\n        return False\n\n    verifyClass(iface, candidate, tentative)\n\n    # Check that the provided method is actually present in the candidate\n    verifyMethod(iface, 'does_not_exist', Candidate)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n    verifyType(candidate, 'candidate')\n\n    if not tentative and iface.providedBy(candidate):\n        return True\n\n    # Make sure the candidate declares that it `implements` the interface\n    # and that it provides the interface\n    if not iface.implementedBy(candidate):\n        raise zope.interface.Invalid(\n            _MSG_TOO_MANY.format(\n                'Candidate', repr(candidate), 'does not implement '\n                '{0}.'.format(repr(iface))\n            )\n        )\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate)\n\n    if not hasattr(candidate, 'providedBy'):\n        if not tentative:\n            raise Invalid(u\"Candidate has no providedBy method\")\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, not tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, not tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if isClassAdvisor(base):\n            explicit_mc.append(base)\n            continue\n\n        for subclass in base.__subclasses__():\n            if isClassAdvisor(subclass):\n                explicit_mc.append(subclass)\n                break\n\n    return min(explicit_mc, key=lambda base: base.__name__)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = _getExplicitMetaclass(bases)\n    sys.metaclass = explicit_mc\n    try:\n        meta = sys.meta_path[-1]\n    except IndexError:\n        return explicit_mc\n    if issubclass(meta, type):\n        return explicit_mc\n    bases = list(bases)\n    bases.remove(meta)\n    bases.remove(type(meta))\n    if bases:\n        return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n    for base in bases:\n        if issubclass(base, type) and issubclass(base, explicit_mc):\n            return base\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n\n    for base in bases:\n        if issubclass(base, type) and not issubclass(base, type) and base not in explicit_mc:\n            return base\n\n    # No metaclass found\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n    meta = type\n    for base in bases:\n        if issubclass(base, type) and \\\n           base is not type and \\\n           base.__module__ == explicit_mc.__module__ and \\\n           base.__name__ == explicit_mc.__name__:\n            meta = base\n    return meta\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frames = [frame for frame in inspect.getouterframes(inspect.currentframe())\n              if frame[3]!= \"__metaclass__\"]\n    for base in bases:\n        if issubclass(base, type) and base not in frames:\n            break\n    else:\n        return type\n    if \"__metaclass__\" in frames:\n        frame = frames.pop()\n        explicit_mc.append(frame[3])\n        return determineMetaclass(frame[1:], explicit_mc)\n    else:\n        return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = type\n\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            metaclasses.append(base)\n        elif issubclass(base, explicit_mc) and base is not explicit_mc:\n            # classes with different metaclass can be extensions of the\n            # explicit metaclass\n            metaclasses.append(base)\n    if not metaclasses:\n        raise TypeError(\"no metaclasses found\")\n    return min(metaclasses, key=MetaClass.priority)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1))\n    # See http://bugs.python.org/msg26602 for why this is not a\n    # list of tuples.\n    for base, frame in bases:\n        if isClassAdvisor(base):\n            continue\n        if not hasattr(frame, '__module__'):\n            continue\n        if frame.__module__ == explicit_mc.__module__:\n            return base\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n\n    for base in bases:\n        # If it's a subclass of GenericMeta, then we know we need to add\n        # a \"__metaclass__\" attribute.\n        if issubclass(base, GenericMeta):\n            return base\n        elif hasattr(base, '__metaclass__'):\n            if explicit_mc is None:\n                return base.__metaclass__\n            elif base.__metaclass__ == explicit_mc:\n                return base.__metaclass__\n            else:\n                warnings.warn(\"cannot determine metaclass of %s, falling back to %s\"\n                              % (base, explicit_mc), UserWarning)\n                return base.__metaclass__\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1).f_back)\n    bases = tuple(bases)\n    if len(bases) == 1 and issubclass(bases[0], type):\n        bases = bases[0].__bases__\n    for base in bases:\n        if issubclass(base, type) and not issubclass(base, explicit_mc):\n            return metaclass(\"type\", bases=bases, __metaclass__=explicit_mc)\n    return type\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if isClassAdvisor(base):\n            explicit_mc.append(base)\n            continue\n\n        for subclass in base.__subclasses__():\n            if isClassAdvisor(subclass):\n                explicit_mc.append(subclass)\n                break\n\n    return min(explicit_mc, key=lambda base: base.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = _getExplicitMetaclass(bases)\n    sys.metaclass = explicit_mc\n    try:\n        meta = sys.meta_path[-1]\n    except IndexError:\n        return explicit_mc\n    if issubclass(meta, type):\n        return explicit_mc\n    bases = list(bases)\n    bases.remove(meta)\n    bases.remove(type(meta))\n    if bases:\n        return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n    for base in bases:\n        if issubclass(base, type) and issubclass(base, explicit_mc):\n            return base\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n\n    for base in bases:\n        if issubclass(base, type) and not issubclass(base, type) and base not in explicit_mc:\n            return base\n\n    # No metaclass found\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n    meta = type\n    for base in bases:\n        if issubclass(base, type) and \\\n           base is not type and \\\n           base.__module__ == explicit_mc.__module__ and \\\n           base.__name__ == explicit_mc.__name__:\n            meta = base\n    return meta\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frames = [frame for frame in inspect.getouterframes(inspect.currentframe())\n              if frame[3]!= \"__metaclass__\"]\n    for base in bases:\n        if issubclass(base, type) and base not in frames:\n            break\n    else:\n        return type\n    if \"__metaclass__\" in frames:\n        frame = frames.pop()\n        explicit_mc.append(frame[3])\n        return determineMetaclass(frame[1:], explicit_mc)\n    else:\n        return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = type\n\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, explicit_mc):\n            metaclasses.append(base)\n        elif issubclass(base, explicit_mc) and base is not explicit_mc:\n            # classes with different metaclass can be extensions of the\n            # explicit metaclass\n            metaclasses.append(base)\n    if not metaclasses:\n        raise TypeError(\"no metaclasses found\")\n    return min(metaclasses, key=MetaClass.priority)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1))\n    # See http://bugs.python.org/msg26602 for why this is not a\n    # list of tuples.\n    for base, frame in bases:\n        if isClassAdvisor(base):\n            continue\n        if not hasattr(frame, '__module__'):\n            continue\n        if frame.__module__ == explicit_mc.__module__:\n            return base\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(frame=1)\n\n    for base in bases:\n        # If it's a subclass of GenericMeta, then we know we need to add\n        # a \"__metaclass__\" attribute.\n        if issubclass(base, GenericMeta):\n            return base\n        elif hasattr(base, '__metaclass__'):\n            if explicit_mc is None:\n                return base.__metaclass__\n            elif base.__metaclass__ == explicit_mc:\n                return base.__metaclass__\n            else:\n                warnings.warn(\"cannot determine metaclass of %s, falling back to %s\"\n                              % (base, explicit_mc), UserWarning)\n                return base.__metaclass__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = getFrameInfo(sys._getframe(1).f_back)\n    bases = tuple(bases)\n    if len(bases) == 1 and issubclass(bases[0], type):\n        bases = bases[0].__bases__\n    for base in bases:\n        if issubclass(base, type) and not issubclass(base, explicit_mc):\n            return metaclass(\"type\", bases=bases, __metaclass__=explicit_mc)\n    return type\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self._default\n    return super(DefaultGetDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(OrderedDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(OrderedDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(DotDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    elif default is not None:\n        raise ValueError('specified default value \"%s\" is not allowed, '\n                         'it has been set to \"%s\"' % (default, default))\n    return super(DefaultGetDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__setitem__(key, value)\n    return value\n", "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        self.__dirty = True\n    elif default is not __marker:\n        return default\n    else:\n        raise KeyError(key)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(DefaultDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__setitem__(key, value)\n    return value\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    self.__setitem__(key, value)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self._default\n    return super(DefaultGetDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(DotDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    elif default is not None:\n        raise ValueError('specified default value \"%s\" is not allowed, '\n                         'it has been set to \"%s\"' % (default, default))\n    return super(DefaultGetDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__setitem__(key, value)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        self.__dirty = True\n    elif default is not __marker:\n        return default\n    else:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(DefaultDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    self.__setitem__(key, value)\n    return value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    key = next(iter(self))\n    return self.pop(key)\n", "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise ValueError('Cannot popitem from an empty cache.')\n", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(e)\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('Popping from empty cache')\n    else:\n        value = self[key]\n        del self[key]\n        return key, value\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    value = dict.popitem(self)\n    self.__counter -= 1\n    return value\n", "def popitem(self):\n    result = self.__counter.popitem()\n    self.__setitem__(result[0], result[1])\n    return result\n", "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.FrequentPopitemError(str(e))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    key = next(iter(self))\n    return self.pop(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise ValueError('Cannot popitem from an empty cache.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('Popping from empty cache')\n    else:\n        value = self[key]\n        del self[key]\n        return key, value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    value = dict.popitem(self)\n    self.__counter -= 1\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    result = self.__counter.popitem()\n    self.__setitem__(result[0], result[1])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.FrequentPopitemError(str(e))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except KeyError:\n        raise KeyError('{} is empty'.format(self.__order))\n", "def popitem(self):\n    if not self.__order:\n        raise KeyError('popitem(): cache is already empty')\n\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    result = dict.popitem(self)\n    self.__order.remove(result[0])\n    return result\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except KeyError:\n        raise KeyError('{} is empty'.format(self.__order))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self.__order:\n        raise KeyError('popitem(): cache is already empty')\n\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    result = dict.popitem(self)\n    self.__order.remove(result[0])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.__order.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return self.__choice()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__choice()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    in_regex = Pattern(self._in_style)\n    in_regex.add_pattern(self._in_obj)\n    if self._escape_char:\n        in_regex.add_pattern(self._escape_char)\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.regex\n    if self._escape_char:\n        in_regex = re.escape(in_regex, escape_char=self._escape_char)\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return Pattern(self._in_regex)\n", "def _create_in_regex(self) -> Pattern:\n    in_style = self._in_style\n    if in_style is not None:\n        in_regex = in_style.pattern if isinstance(in_style, InSelect) else in_style\n    else:\n        in_regex = self._in_obj.pattern\n\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\n    in_regex = re.compile(\n        r'''\n        (?P<param>\n            \\w\n            \\w\n            \\w\n            \\w\n        )\n        \\s\n        (?P<escape_char>\n            [\\w]\n        )\n        ''',\n        flags=re.VERBOSE\n    )\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern if self._in_obj else self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    pattern = self._in_obj.pattern\n    if self._in_obj.case_sensitive:\n        pattern = pattern.lower()\n    pattern = re.compile(f\"({pattern})\", re.IGNORECASE)\n    return pattern\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = Pattern(self._in_style)\n    in_regex.add_pattern(self._in_obj)\n    if self._escape_char:\n        in_regex.add_pattern(self._escape_char)\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.regex\n    if self._escape_char:\n        in_regex = re.escape(in_regex, escape_char=self._escape_char)\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return Pattern(self._in_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_style = self._in_style\n    if in_style is not None:\n        in_regex = in_style.pattern if isinstance(in_style, InSelect) else in_style\n    else:\n        in_regex = self._in_obj.pattern\n\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = re.compile(\n        r'''\n        (?P<param>\n            \\w\n            \\w\n            \\w\n            \\w\n        )\n        \\s\n        (?P<escape_char>\n            [\\w]\n        )\n        ''',\n        flags=re.VERBOSE\n    )\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern if self._in_obj else self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    pattern = self._in_obj.pattern\n    if self._in_obj.case_sensitive:\n        pattern = pattern.lower()\n    pattern = re.compile(f\"({pattern})\", re.IGNORECASE)\n    return pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(\n        self.in_style,\n        self.out_style,\n        self.escape_char,\n        self.expand_tuples\n    )\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter()\n\n    converter.escape_char = self._escape_char\n    converter.expand_tuples = self._expand_tuples\n\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    converter.escape_char = self._escape_char\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    converter.regex_separators = self._regex_separators\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char, self._expand_tuples)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter(self._in_obj, self._out_obj,\n                                       self._escape_char, self._in_regex)\n\n    return converter\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(\n        self.in_style,\n        self.out_style,\n        self.escape_char,\n        self.expand_tuples\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter()\n\n    converter.escape_char = self._escape_char\n    converter.expand_tuples = self._expand_tuples\n\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    converter.escape_char = self._escape_char\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n    converter.regex_separators = self._regex_separators\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char, self._expand_tuples)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    converter = _converting._Converter(self._in_obj, self._out_obj,\n                                       self._escape_char, self._in_regex)\n\n    return converter\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    try:\n        dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        try:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n            dt = datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n        else:\n            # Assume UTC\n            dt = dt - timedelta(seconds=dt.microsecond)\n\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default=None)\n    if parsed is None:\n        raise ValueError('Not a valid datetime string')\n    if parsed.tzinfo:\n        raise ValueError('Not a valid datetime with timezone')\n\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if 'Z' in dt_str:\n        dt_str = dt_str.replace('Z', 'UTC')\n    dt_str = dt_str.strip()\n\n    if '+' in dt_str:\n        dt_str, tz = dt_str.split('+')\n    else:\n        tz = ''\n\n    if '-' in tz:\n        tz, offset = tz.split('-')\n    else:\n        offset = ''\n\n    try:\n        dt_obj = datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        raise ParseError('Invalid datetime string: %s' % dt_str)\n\n    if 'Z' in tz:\n        dt_obj = dt_obj.replace(tz, 'UTC%+03d' % int(offset))\n    else:\n        dt_obj = dt_obj.replace(tz, 'UTC%02d' % int(offset))\n\n    return dt_obj.replace(tz=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        dt_str = dt_str.strip()\n\n        if dt_str.endswith('Z'):\n            return datetime.datetime.strptime(dt_str[:-3], '%Y-%m-%dT%H:%M:%S')\n        elif dt_str.endswith('+00:00'):\n            return datetime.datetime.strptime(dt_str[:-9], '%Y-%m-%dT%H:%M:%S')\n\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n\n    raise ValueError('Invalid time zone specified')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise ValueError('isoparse() expects a string, not %s' % type(dt_str))\n    parsed = dt_str.split(':')\n    if len(parsed) == 1:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    elif len(parsed) == 2:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f')\n    elif len(parsed) == 3:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    elif len(parsed) == 4:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f%z')\n    else:\n        raise ValueError('isoparse() expects a single colon, not %s' % parsed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- UNCOMMON DATE: YYYY-MM-DD HH:MM:SS.sssss\n    # -- OFFSET: HHMM:MM\n    # -- SUPPORTED time zone offsets:\n    # -- CURRENCY (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- TZ (UTC) - (Not standard standard)\n    # -- UTC - (Not standard standard)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.sssss (or eg. +HH:MM:SS.ssss)\n    # -- LAST COMMA DATE: YYYY-MM-DD HH:MM:SS.ssss\n    # -- LAST COMMA DATE: HH:MM:SS.ssss\n    return isoparser.parse(dt_str, strict=False, ignoretz=False, parse_tzinfo=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parse(dt_str, default_zone='UTC')\n    if parsed.tzinfo is None:\n        raise ValueError('Date parsing error')\n    return parsed.replace(tzinfo=UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = parsedatetime.Calendar().parseDT(dt_str)\n    if parsed is None:\n        raise ValueError('isoparse returned None')\n    if parsed[1] is None:\n        offset_str = None\n    else:\n        offset_str, _, _ = parsed[1].partition(':')\n    if parsed[0] is None:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(offset_str),\n            minutes=int(offset_str)\n        )\n    else:\n        return datetime.datetime(*parsed[:3]) + datetime.timedelta(\n            hours=int(parsed[0]),\n            minutes=int(offset_str),\n            seconds=int(offset_str)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    try:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\",\n           ...         tzinfos={\"BRST\": gettz(\"UTC\")})\n            datetime.datetime(2012, 1, 19, 17, tzinfo=tzoffset(\"BRST\", -7200))\n    \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replacements from those time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfo", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally replace elements specified in the format\n        ``tzname`` elements with timezones or a function\n        taking two parameters (``tzname`` and ``tzoffset``))\n        to time zones. This parameter can be a dictionary with\n        time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``)\n\n   .. doctest::options: +NOR", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may be\n        present in the string. This parameter maps time zones (and\n        optionally offsets from these time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateuti", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and returning a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n\n       .. doctest::\n            :options: +NORMALIZE_WHITESPACE\n\n            >>> from dateutil.parser import parse\n            >>> from dateutil.tz import gettz\n            >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n            datetime.datetime(2012, 1, 19, 21, tzinfo=tzoffset(u'BRST',", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object\n        is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones\n        (and optionally offsets from the time zones) to time zones.\n\n        This parameter can be a dictionary with time zones (and optionally\n        add time zone aliases to the names with tzname) and\n        return a time zone.\n\n   ..doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse_datetime(\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string. This parameter maps\n                    time zone names (and optionally offsets from these\n                    time zones) to time zones.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n\n    \"\"\"\n    return parse(tim", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zones (and optionally\n        replaces elements specified in the time zones) to time zones\n        or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n\n       .. doctest::options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 1", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings\n        are ignored and a naive :class:`datetime.datetime` object is\n        returned.\n    :param tzinfos: Additional time zone names which may be present\n        in the string. This parameter maps time zone names (and\n        optionally offsets from these time zones) to time zones.\n        This parameter can be a dictionary with time zones names and\n        time zones or a function taking two parameters (``tzname`` and\n        ``tzoffset``) and return a time zone.\n\n   .. doctest::options: +NORMALIZE_WHITESPACE\n    \"\"\"\n    return pa", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n    return dt\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n\n    return dt\n", "def fromutc(self, dt):\n    return dt.astimezone(self._fromutc(dt))\n", "def fromutc(self, dt):\n    return self._fold(dt, raise_error_if_unambiguous=False)\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self.fromutc_tz)\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n    else:\n        return dt\n", "def fromutc(self, dt):\n    return dt.astimezone(self._fromutc(dt))\n", "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self._fromutc(dt))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt, raise_error_if_unambiguous=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self.fromutc_tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return self._fold(dt)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self._fromutc(dt))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self.is_ambiguous(dt):\n        return dt.replace(tzinfo=self)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        dt = dt.astimezone(tzinfo)\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n    elif not isinstance(dt, date):\n        raise ValueError(\"dt must be a datetime or date instance\")\n    return dt.astimezone(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the timezone\n        dt = dt.replace(tzinfo=pytz.utc)\n        return dt\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the date\n        return dt.replace(tzinfo=pytz.utc).astimezone(tzinfo)\n    # Otherwise, we have a string\n    return dt.replace(tzinfo=tzinfo).astimezone(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n    elif not isinstance(dt, date):\n        raise TypeError(\n            \"dt must be a datetime or date, not '{}'\".format(type(dt))\n        )\n\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n\n    if isinstance(dt, datetime.datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        dt = dt.astimezone(tzinfo)\n    elif isinstance(dt, date):\n        dt = datetime(dt.year, dt.month, dt.day)\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n    elif not isinstance(dt, date):\n        raise ValueError(\"dt must be a datetime or date instance\")\n    return dt.astimezone(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    if isinstance(dt, datetime):\n        # Convert to UTC and replace with the timezone\n        dt = dt.replace(tzinfo=pytz.utc)\n        return dt\n    if isinstance(dt, date):\n        # Convert to UTC and replace with the date\n        return dt.replace(tzinfo=pytz.utc).astimezone(tzinfo)\n    # Otherwise, we have a string\n    return dt.replace(tzinfo=tzinfo).astimezone(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n    elif not isinstance(dt, date):\n        raise TypeError(\n            \"dt must be a datetime or date, not '{}'\".format(type(dt))\n        )\n\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if isinstance(dt, datetime.datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n    self._cutter = re.compile(r\"\\{}(?P<slice>{}){}\".format(before, self.DEFAULT_CUT_AFTER, after))\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ''.join([before, self._cutter, after])\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = SplitFileCutter(before, after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = bytes(before, 'utf-8').decode('utf-8') + bytes(after, 'utf-8')\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    if before is not None:\n        self._cutter.append(before)\n    if after is not None:\n        self._cutter.append(after)\n    self._cutter.sort()\n", "def set_cut_chars(self, before: str, after: str):\n    self.cut_chars = before + ',' + after\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = bytes(before, encoding='utf-8') + bytes(after, encoding='utf-8')\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    if before == '.' and after == '.':\n        # Special case the last part of the file.\n        self.parts[-1] = self.parts[-1].replace(before, after)\n    else:\n        self.parts[-len(before):] = [before]\n        self.parts.append(after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = before + ',' + after\n    self.reducible = False\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n    self._cutter = re.compile(r\"\\{}(?P<slice>{}){}\".format(before, self.DEFAULT_CUT_AFTER, after))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = ''.join([before, self._cutter, after])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = SplitFileCutter(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = bytes(before, 'utf-8').decode('utf-8') + bytes(after, 'utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    if before is not None:\n        self._cutter.append(before)\n    if after is not None:\n        self._cutter.append(after)\n    self._cutter.sort()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self.cut_chars = before + ',' + after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = bytes(before, encoding='utf-8') + bytes(after, encoding='utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    if before == '.' and after == '.':\n        # Special case the last part of the file.\n        self.parts[-1] = self.parts[-1].replace(before, after)\n    else:\n        self.parts[-len(before):] = [before]\n        self.parts.append(after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = before + ',' + after\n    self.reducible = False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: Request) -> bool:\n    if request.type == \"message\":\n        if request.payload.public_id is not None:\n            return True\n        if request.payload.private_message is not None:\n            return True\n    elif request.type == \"legacy\":\n        if request.payload.legacy_payload_type == \"legacy\":\n            return True\n        if request.payload.legacy_payload_id is not None:\n            return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.message.is_legacy_payload() or request.message.is_request()\n", "def identify_request(request: Request) -> bool:\n    if request.is_legacy_request:\n        public_message = request.get(\"publicMessage\")\n        private_message = request.get(\"privateMessage\")\n        if public_message and private_message:\n            return public_message == private_message\n    return identify_id(request.message_id)\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\" and request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        payload = request.json\n        if \"private\" in payload:\n            if \"message\" in payload[\"private\"]:\n                return True\n            if \"legacy\" in payload[\"private\"]:\n                return True\n        if \"message\" in payload:\n            if \"recipient\" in payload[\"message\"]:\n                return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.is_legacy_request\n        and \"x-legacy-request-to\" in request.headers\n        and identify_id(request.headers[\"x-legacy-request-to\"])\n    )\n", "def identify_request(request: Request) -> bool:\n    if not request.is_legacy_request:\n        return True\n\n    public_message = request.message.get('public')\n    private_message = request.message.get('private')\n\n    if public_message and private_message:\n        return True\n\n    legacy_payload = request.message.get('legacy_payload')\n    if legacy_payload:\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"GET\" and request.path == \"/legacy/messages/message/\":\n        return True\n    if request.method == \"POST\" and request.path.startswith(\n        \"/legacy/messages/message/\"\n    ):\n        return True\n    if request.path.startswith(\"/legacy/public/\"):\n        return True\n    if request.path.startswith(\"/legacy/private/\"):\n        return True\n    logger.debug(\"Skipping identify_request\")\n    return False\n", "def identify_request(request: Request) -> Optional[Response]:\n    if request.message.is_legacy_request:\n        return identify_public_request(request)\n    if request.message.is_legacy_response:\n        return identify_private_response(request)\n    return None\n", "def identify_request(request: Request) -> bool:\n    if request.message.is_multipart():\n        # ignore multipart messages\n        return False\n    elif request.message.get('requestType') == 'private':\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n    public_msg = request.get(\"message\", {}).get(\"public\")\n    legacy_payload = request.get(\"message\", {}).get(\"legacy\")\n    return public_msg is not None and legacy_payload is not None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.type == \"message\":\n        if request.payload.public_id is not None:\n            return True\n        if request.payload.private_message is not None:\n            return True\n    elif request.type == \"legacy\":\n        if request.payload.legacy_payload_type == \"legacy\":\n            return True\n        if request.payload.legacy_payload_id is not None:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.message.is_legacy_payload() or request.message.is_request()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_legacy_request:\n        public_message = request.get(\"publicMessage\")\n        private_message = request.get(\"privateMessage\")\n        if public_message and private_message:\n            return public_message == private_message\n    return identify_id(request.message_id)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\" and request.headers.get(\"content-type\", \"\").startswith(\"application/json\"):\n        payload = request.json\n        if \"private\" in payload:\n            if \"message\" in payload[\"private\"]:\n                return True\n            if \"legacy\" in payload[\"private\"]:\n                return True\n        if \"message\" in payload:\n            if \"recipient\" in payload[\"message\"]:\n                return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        request.method == \"POST\"\n        and request.is_legacy_request\n        and \"x-legacy-request-to\" in request.headers\n        and identify_id(request.headers[\"x-legacy-request-to\"])\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if not request.is_legacy_request:\n        return True\n\n    public_message = request.message.get('public')\n    private_message = request.message.get('private')\n\n    if public_message and private_message:\n        return True\n\n    legacy_payload = request.message.get('legacy_payload')\n    if legacy_payload:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"GET\" and request.path == \"/legacy/messages/message/\":\n        return True\n    if request.method == \"POST\" and request.path.startswith(\n        \"/legacy/messages/message/\"\n    ):\n        return True\n    if request.path.startswith(\"/legacy/public/\"):\n        return True\n    if request.path.startswith(\"/legacy/private/\"):\n        return True\n    logger.debug(\"Skipping identify_request\")\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> Optional[Response]:\n    if request.message.is_legacy_request:\n        return identify_public_request(request)\n    if request.message.is_legacy_response:\n        return identify_private_response(request)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.message.is_multipart():\n        # ignore multipart messages\n        return False\n    elif request.message.get('requestType') == 'private':\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n    public_msg = request.get(\"message\", {}).get(\"public\")\n    legacy_payload = request.get(\"message\", {}).get(\"legacy\")\n    return public_msg is not None and legacy_payload is not None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    if isinstance(request, ImportRequest):\n        return False\n\n    return True\n", "def identify_request(request: Request) -> bool:\n    if not isinstance(request, Request):\n        return False\n\n    if request.method!= \"POST\":\n        return False\n\n    return True\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request):\n        return True\n\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.url\n", "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"file\" in request.files\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # Matrix requests have the \"method\" key with the request type\n        method = request[\"method\"]\n        if method == \"matrix\":\n            return True\n    except KeyError:\n        pass\n\n    try:\n        # Matrix requests do not have the \"method\" key with the request type\n        return request[\"method\"] == \"matrix\"\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\")\n        and \"jsonrpc\" in request.headers\n    )\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'Matrix'\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix' and \\\n        request.get('version') == 1 and \\\n        'jsonrpc' in request and \\\n        'id' in request and \\\n        request.get('params') is not None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    if isinstance(request, ImportRequest):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if not isinstance(request, Request):\n        return False\n\n    if request.method!= \"POST\":\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, Request):\n        return True\n\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"import\" in request.url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and \"file\" in request.files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        # Matrix requests have the \"method\" key with the request type\n        method = request[\"method\"]\n        if method == \"matrix\":\n            return True\n    except KeyError:\n        pass\n\n    try:\n        # Matrix requests do not have the \"method\" key with the request type\n        return request[\"method\"] == \"matrix\"\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\")\n        and \"jsonrpc\" in request.headers\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] == 'Matrix'\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix' and \\\n        request.get('version') == 1 and \\\n        'jsonrpc' in request and \\\n        'id' in request and \\\n        request.get('params') is not None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S %z\")\n", "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    if isinstance(dt, datetime.datetime):\n        dt = dt.replace(microsecond=0)\n    return dt.isoformat()\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S %z\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if isinstance(dt, datetime.datetime):\n        dt = dt.replace(microsecond=0)\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        chain.from_iterable(\n            (replacer(tag), tag) for tag in bleach.clean(text, tags=[\"code\"])\n        )\n    )\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = encode_if_text(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags(), finder.get_replaced_text()\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    def replacer_wrapper(match):\n        tag = match.group(1)\n        return replacer(match.group(2))\n\n    def find_tags_wrapper(match):\n        return '<%s>' % match.group(2)\n\n    def process_text_links(text):\n        return urllib.parse.quote(text, safe='/')\n\n    pattern = r'(?P<tag>(?:<[^>]+>)|(?P<replacer>%s))' % re.escape(IGNORE_CHAR)\n    return re.sub(pattern, replacer_wrapper, find_tags_wrapper(text))\n", "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    links = linkify(text)\n\n    links = links.split()\n\n    tags = set()\n    for link in links:\n        tag = None\n        try:\n            tag = replacer(link)\n        except Exception as e:\n            logger.warning(\"Could not replace tag: %s\", e)\n            pass\n\n        if tag:\n            tags.add(tag)\n\n    return tags, text\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    decoded = decode_if_bytes(text)\n    if decoded is not None:\n        text = decoded\n\n    if \"<!--[if-[endif]]>\" in text:\n        return find_tags(decoded, replacer)\n\n    return find_tags_with_semicolon(text)\n", "def find_tags(text: str, replacer: Callable[[str, str], str] = None) -> Set[str]:\n    text = encode_if_text(text)\n    finder = LinkFinder(text)\n    return finder.find_tags()\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n\n    for match in re.finditer(r\"<[^>]*>\", text):\n        text = text.replace(match.group(0), replacer(match.group(0)))\n\n    return find_tags(text, replacer)\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(find_tags_iter(text, replacer))\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    text = encode_if_text(text)\n    finder = LinkFinder(text)\n    finder.feed(b'<pre>')\n    finder.close()\n    tags = finder.get_result()\n    if replacer:\n        tags = replacer(tags)\n    finder.close()\n    return tags\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    return find_tags_no_handler(text, replacer)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        chain.from_iterable(\n            (replacer(tag), tag) for tag in bleach.clean(text, tags=[\"code\"])\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = encode_if_text(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags(), finder.get_replaced_text()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    def replacer_wrapper(match):\n        tag = match.group(1)\n        return replacer(match.group(2))\n\n    def find_tags_wrapper(match):\n        return '<%s>' % match.group(2)\n\n    def process_text_links(text):\n        return urllib.parse.quote(text, safe='/')\n\n    pattern = r'(?P<tag>(?:<[^>]+>)|(?P<replacer>%s))' % re.escape(IGNORE_CHAR)\n    return re.sub(pattern, replacer_wrapper, find_tags_wrapper(text))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    links = linkify(text)\n\n    links = links.split()\n\n    tags = set()\n    for link in links:\n        tag = None\n        try:\n            tag = replacer(link)\n        except Exception as e:\n            logger.warning(\"Could not replace tag: %s\", e)\n            pass\n\n        if tag:\n            tags.add(tag)\n\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    decoded = decode_if_bytes(text)\n    if decoded is not None:\n        text = decoded\n\n    if \"<!--[if-[endif]]>\" in text:\n        return find_tags(decoded, replacer)\n\n    return find_tags_with_semicolon(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str, str], str] = None) -> Set[str]:\n    text = encode_if_text(text)\n    finder = LinkFinder(text)\n    return finder.find_tags()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n\n    for match in re.finditer(r\"<[^>]*>\", text):\n        text = text.replace(match.group(0), replacer(match.group(0)))\n\n    return find_tags(text, replacer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(find_tags_iter(text, replacer))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    text = encode_if_text(text)\n    finder = LinkFinder(text)\n    finder.feed(b'<pre>')\n    finder.close()\n    tags = finder.get_result()\n    if replacer:\n        tags = replacer(tags)\n    finder.close()\n    return tags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    return find_tags_no_handler(text, replacer)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    linkified = linkify(text, **linkify_options)\n    return linkified\n", "def process_text_links(text):\n    linker = Linker()\n    text = linker.linkify(text)\n    return text\n", "def process_text_links(text):\n    linker = Linker()\n    for regex, replacement in linker.linkify_regexes:\n        text = re.sub(regex, replacement, text)\n    text = linker.linkify_text(text)\n    return text\n", "def process_text_links(text):\n    linkified = linkify(text, **linkify_options)\n\n    return linkified\n", "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        protocols=['http', 'https'],\n        linkify=True\n    )\n    return linkify(text)\n", "def process_text_links(text):\n    text = linkify(text)\n    text = add_attributes(text)\n    text = add_links(text)\n    return text\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n    return linkified\n", "def process_text_links(text):\n    linker = Linker(nofollow=True)\n    text = linker.linkify(text)\n    text = bleach.linkify(text, **linker.link_attrs)\n    return text\n", "def process_text_links(text):\n    linker = Linker()\n    linker.add_text_links(text)\n    linker.add_image_links(text)\n    linker.add_link_text(text)\n    linker.linkify()\n\n    return linker.linkified_text\n", "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    linkified = linkify(text, **linkify_options)\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    text = linker.linkify(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    for regex, replacement in linker.linkify_regexes:\n        text = re.sub(regex, replacement, text)\n    text = linker.linkify_text(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = linkify(text, **linkify_options)\n\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        protocols=['http', 'https'],\n        linkify=True\n    )\n    return linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = add_attributes(text)\n    text = add_links(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKFLAGS)\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker(nofollow=True)\n    text = linker.linkify(text)\n    text = bleach.linkify(text, **linker.link_attrs)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    linker.add_text_links(text)\n    linker.add_image_links(text)\n    linker.add_link_text(text)\n    linker.linkify()\n\n    return linker.linkified_text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **linkify_options)\n    return linkified\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    logger.debug('Fetching content type from: %s', url)\n\n    req = Request(url)\n    res = urlopen(req)\n\n    content_type = res.headers.get('content-type')\n\n    logger.debug('Content type: %s', content_type)\n\n    return content_type\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = fetch_http_date(url)\n        if response.status_code == 200:\n            return response.headers.get(\"content-type\", \"\")\n    except (requests.exceptions.ConnectionError, requests.exceptions.ReadTimeout):\n        pass\n    return \"\"\n", "def fetch_content_type(url: str) -> str:\n    # https://github.com/sphinx-doc/sphinx/issues/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2323\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException:\n        return 'text/plain'\n    else:\n        return response.headers.get('content-type', 'text/plain').lower()\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as exc:\n        logger.warning(f\"Unable to fetch {url!r}: {str(exc)}\")\n        return \"text/plain\"\n\n    # The response status code is a response status code from the server.\n    # This is not intended behaviour for remote HTTP servers.\n    response.raise_for_status()\n\n    # The response content is a binary string.\n    return response.content\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = request.urlopen(url, timeout=10)\n        content_type = response.headers.get('content-type')\n        logger.debug('Content-Type: {}'.format(content_type))\n        return content_type\n    except Exception:\n        return 'text/plain'\n", "def fetch_content_type(url: str) -> str:\n    response = try_retrieve_webfinger_document(url)\n    return response.headers.get(\"Content-Type\", \"\")\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = fetch_http_date(url)\n    if response is None:\n        return None\n    return response.headers.get('Content-Type')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except (requests.exceptions.RequestException, socket.error):\n        return \"text/plain\"\n    if response.status_code == 200:\n        return \"text/plain\"\n    return \"application/octet-stream\"\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    logger.debug('Fetching content type from: %s', url)\n\n    req = Request(url)\n    res = urlopen(req)\n\n    content_type = res.headers.get('content-type')\n\n    logger.debug('Content type: %s', content_type)\n\n    return content_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = fetch_http_date(url)\n        if response.status_code == 200:\n            return response.headers.get(\"content-type\", \"\")\n    except (requests.exceptions.ConnectionError, requests.exceptions.ReadTimeout):\n        pass\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    # https://github.com/sphinx-doc/sphinx/issues/2323\n    # https://github.com/sphinx-doc/sphinx/pull/2323\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException:\n        return 'text/plain'\n    else:\n        return response.headers.get('content-type', 'text/plain').lower()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as exc:\n        logger.warning(f\"Unable to fetch {url!r}: {str(exc)}\")\n        return \"text/plain\"\n\n    # The response status code is a response status code from the server.\n    # This is not intended behaviour for remote HTTP servers.\n    response.raise_for_status()\n\n    # The response content is a binary string.\n    return response.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = request.urlopen(url, timeout=10)\n        content_type = response.headers.get('content-type')\n        logger.debug('Content-Type: {}'.format(content_type))\n        return content_type\n    except Exception:\n        return 'text/plain'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = try_retrieve_webfinger_document(url)\n    return response.headers.get(\"Content-Type\", \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = fetch_http_date(url)\n    if response is None:\n        return None\n    return response.headers.get('Content-Type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except (requests.exceptions.RequestException, socket.error):\n        return \"text/plain\"\n    if response.status_code == 200:\n        return \"text/plain\"\n    return \"application/octet-stream\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(text=tag)\n", "def test_tag(tag: str) -> bool:\n    return test_tag_with_slash(tag)\n", "def test_tag(tag: str) -> bool:\n    return len(tag) > 0 and tag in ILLEGAL_TAG_CHARS\n", "def test_tag(tag: str) -> bool:\n    return encode_if_text(tag) == tag\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_tag)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_tag)\n", "def test_tag(tag: str) -> bool:\n    return (isinstance(tag, str) and\n            ILLEGAL_TAG_CHARS.search(tag) is None and\n            not decode_if_bytes(tag))\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(\"\", \"\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(text=tag)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return test_tag_with_slash(tag)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return len(tag) > 0 and tag in ILLEGAL_TAG_CHARS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return encode_if_text(tag) == tag\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_tag)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=replace_tag)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (isinstance(tag, str) and\n            ILLEGAL_TAG_CHARS.search(tag) is None and\n            not decode_if_bytes(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(tag, replacer=lambda x: x)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return decode_if_bytes(tag) in find_tags(\"\", \"\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child\n\n    return children_as_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child\n\n    return children_as_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = get_outbound_entity(entity, private_key=sender_handle)\n    entity = get_outbound_entity(entity, private_key=entity_handle)\n\n    if sender.get(\"displayName\")!= entity.get(\"displayName\"):\n        raise ValueError(\"Sender and entity displayNames do not match\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle does not match object\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise MismatchingSenderAndEntity(\n            \"Sender handle '{}' does not match '{}'\".format(sender_handle, entity_handle)\n        )\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise XmlRpcError(\"Sender handle mismatch: %s!= %s\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender = element_to_objects(\n        get_outbound_entity(entity=entity, private_key=sender_key_fetcher.private_key),\n        sender_key_fetcher=sender_key_fetcher,\n        user=sender_handle,\n    )\n    entity = element_to_objects(\n        get_outbound_entity(entity=entity, private_key=entity_key),\n        entity_key_fetcher=sender_key_fetcher,\n        user=entity,\n    )\n    assert sender[\"handle\"] == entity[\"handle\"]\n    assert sender[\"type\"] == entity[\"type\"]\n    assert sender[\"created_at\"] == entity[\"created_at\"]\n    assert sender[\"updated_at\"] == entity[\"updated_at\"]\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.split('@')[0]\n    entity = entity_handle.split('@')[0]\n\n    return (sender == entity)\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        # Sender handle match.\n        return\n\n    # Sender handle doesn't match or is different.\n    logger.warning(\n        \"sender handle mismatch for sender %s, received %s\", sender_handle, entity_handle\n    )\n    raise errors.SenderHandleMismatchError(sender_handle, entity_handle)\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    if '@' in sender_handle:\n        sender = User.from_email(sender_handle)\n    else:\n        sender = sender_handle\n    if '@' in entity_handle:\n        entity = User.from_email(entity_handle)\n    else:\n        entity = entity_handle\n    if sender == entity:\n        return True\n    if sender.is_authenticated() and entity.is_authenticated():\n        return True\n    if sender.is_authenticated() and not entity.is_authenticated():\n        logger.warning(\"Sender and entity are identical but they \"\n                       \"do not match. Message will not be sent.\")\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                entity_handle, sender_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender_key = get_outbound_entity(\n        entity=sender_handle,\n        private_key=settings.PRIVATE_KEY\n    ).key\n    entity_key = get_outbound_entity(\n        entity=entity_handle,\n        private_key=settings.PRIVATE_KEY\n    ).key\n\n    if sender_key!= entity_key:\n        logger.warning(\n            \"Sender handle does not match entity handle for sender: %s and \"\n            \"entity: %s\",\n            sender_handle,\n            entity_handle\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = get_outbound_entity(entity, private_key=sender_handle)\n    entity = get_outbound_entity(entity, private_key=entity_handle)\n\n    if sender.get(\"displayName\")!= entity.get(\"displayName\"):\n        raise ValueError(\"Sender and entity displayNames do not match\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle does not match object\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise MismatchingSenderAndEntity(\n            \"Sender handle '{}' does not match '{}'\".format(sender_handle, entity_handle)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise XmlRpcError(\"Sender handle mismatch: %s!= %s\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender = element_to_objects(\n        get_outbound_entity(entity=entity, private_key=sender_key_fetcher.private_key),\n        sender_key_fetcher=sender_key_fetcher,\n        user=sender_handle,\n    )\n    entity = element_to_objects(\n        get_outbound_entity(entity=entity, private_key=entity_key),\n        entity_key_fetcher=sender_key_fetcher,\n        user=entity,\n    )\n    assert sender[\"handle\"] == entity[\"handle\"]\n    assert sender[\"type\"] == entity[\"type\"]\n    assert sender[\"created_at\"] == entity[\"created_at\"]\n    assert sender[\"updated_at\"] == entity[\"updated_at\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender = sender_handle.split('@')[0]\n    entity = entity_handle.split('@')[0]\n\n    return (sender == entity)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        # Sender handle match.\n        return\n\n    # Sender handle doesn't match or is different.\n    logger.warning(\n        \"sender handle mismatch for sender %s, received %s\", sender_handle, entity_handle\n    )\n    raise errors.SenderHandleMismatchError(sender_handle, entity_handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    if '@' in sender_handle:\n        sender = User.from_email(sender_handle)\n    else:\n        sender = sender_handle\n    if '@' in entity_handle:\n        entity = User.from_email(entity_handle)\n    else:\n        entity = entity_handle\n    if sender == entity:\n        return True\n    if sender.is_authenticated() and entity.is_authenticated():\n        return True\n    if sender.is_authenticated() and not entity.is_authenticated():\n        logger.warning(\"Sender and entity are identical but they \"\n                       \"do not match. Message will not be sent.\")\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                entity_handle, sender_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    sender_key = get_outbound_entity(\n        entity=sender_handle,\n        private_key=settings.PRIVATE_KEY\n    ).key\n    entity_key = get_outbound_entity(\n        entity=entity_handle,\n        private_key=settings.PRIVATE_KEY\n    ).key\n\n    if sender_key!= entity_key:\n        logger.warning(\n            \"Sender handle does not match entity handle for sender: %s and \"\n            \"entity: %s\",\n            sender_handle,\n            entity_handle\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'url': url,\n        'imports': [],\n       'requires': [],\n        'provenance': [],\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n    return generate_nodeinfo2_document(doc)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[Text]) -> Dict[Text, Text]\n    \"\"\"Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :args:\n        The full base url with protocol, ie https://example.com\n\n    :returns:\n        dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n        generate_legacy_webfinger(template)\n        generate_nodeinfo2_document()\n        generate_hcard(template)\n\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :args:\n        The full base url with protocol, ie https://example.com\n\n    :returns:\n        dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n        generate_legacy_webfinger(template)\n        generate_nodeinfo2_document()\n        generate_hcard", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, 'r') as fp:\n        doc = json.load(fp)\n\n    return doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"@type\": \"@id\",\n        \"nodeInfo\": {\n            \"@id\": NODEINFO_DOCUMENT_PATH\n        }\n    }\n\n    if document_path:\n        nodeinfo[\"@document-path\"] = document_path\n\n    return nodeinfo\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n        'node-info': {\n            'uri': url,\n            'host': 'example.com'\n        }\n    }\n\n    if document_path is not None:\n        well_known_document['node-info']['document-path'] = document_path\n\n    return well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    return generate_nodeinfo2_document(url, document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        'base_url': url,\n       'version': '1.0',\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'document_name': get_nodeinfo_document_name(url),\n        'document_url': '{0}/{1}'.format(url, NODEINFO_DOCUMENT_PATH),\n        'document_content': get_nodeinfo_document(url),\n    }\n    result['imports'] = generate_imports(result)\n    return result\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return generate_nodeinfo2_document(url, document_path)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n\n    return generate_nodeinfo2_document(doc)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'url': url,\n        'imports': [],\n       'requires': [],\n        'provenance': [],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n    return generate_nodeinfo2_document(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, Optional[Text]) -> Dict[Text, Text]\n    \"\"\"Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :args:\n        The full base url with protocol, ie https://example.com\n\n    :returns:\n        dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n        generate_legacy_webfinger(template)\n        generate_nodeinfo2_document()\n        generate_hcard(template)\n\n    Generate a NodeInfo.well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :args:\n        The full base url with protocol, ie https://example.com\n\n    :returns:\n        dict with import typing string warnings json base64\n        os typing xrd jsonschema file generate_host_meta(template)\n        generate_legacy_webfinger(template)\n        generate_nodeinfo2_document()\n        generate_hcard", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, 'r') as fp:\n        doc = json.load(fp)\n\n    return doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"@type\": \"@id\",\n        \"nodeInfo\": {\n            \"@id\": NODEINFO_DOCUMENT_PATH\n        }\n    }\n\n    if document_path:\n        nodeinfo[\"@document-path\"] = document_path\n\n    return nodeinfo\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n        'node-info': {\n            'uri': url,\n            'host': 'example.com'\n        }\n    }\n\n    if document_path is not None:\n        well_known_document['node-info']['document-path'] = document_path\n\n    return well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n    return generate_nodeinfo2_document(url, document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        'base_url': url,\n       'version': '1.0',\n        'document_path': document_path or NODEINFO_DOCUMENT_PATH,\n        'document_name': get_nodeinfo_document_name(url),\n        'document_url': '{0}/{1}'.format(url, NODEINFO_DOCUMENT_PATH),\n        'document_content': get_nodeinfo_document(url),\n    }\n    result['imports'] = generate_imports(result)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return generate_nodeinfo2_document(url, document_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = NODEINFO_DOCUMENT_PATH\n\n    with open(document_path, \"rt\") as f:\n        doc = f.read()\n\n    return generate_nodeinfo2_document(doc)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\n    if signature.is_relayable and not doc.is_relayable:\n        raise ValueError('The claimed author did not generate this message.')\n\n    # TODO: verify signature matches the claimed author's signature.  We do\n    #       this check for now, because the message may have been deleted on the\n    #       disk while we are iterating over it.\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    return _verify_relayable_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    # The message claims that the claimed author didn't respond to the relay\n    # request and that the signature matches the claimed author's signature.\n    if not verify_signature(public_key, doc, signature):\n        raise MessageFailure('Signature verification failed')\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, doc, signature):\n        raise SignatureMismatch()\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    if relayable_signature.text!= signature:\n        raise ValueError('Signature does not match claimed author signature')\n", "def verify_relayable_signature(public_key, doc, signature):\n    signature_method = doc.find(\".//SignatureMethod\")\n    if signature_method is None:\n        return\n\n    return verify_signature(signature_method, public_key, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return\n\n    if signature is None:\n        return\n\n    return _verify_relayable_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return True\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature.is_relayable and not doc.is_relayable:\n        raise ValueError('The claimed author did not generate this message.')\n\n    # TODO: verify signature matches the claimed author's signature.  We do\n    #       this check for now, because the message may have been deleted on the\n    #       disk while we are iterating over it.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    return _verify_relayable_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    # The message claims that the claimed author didn't respond to the relay\n    # request and that the signature matches the claimed author's signature.\n    if not verify_signature(public_key, doc, signature):\n        raise MessageFailure('Signature verification failed')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, doc, signature):\n        raise SignatureMismatch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    relayable_signature = doc.find('{%s}Signature' % NS_RELAYABLE)\n\n    if relayable_signature is None:\n        return\n\n    if relayable_signature.text!= signature:\n        raise ValueError('Signature does not match claimed author signature')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signature_method = doc.find(\".//SignatureMethod\")\n    if signature_method is None:\n        return\n\n    return verify_signature(signature_method, public_key, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return\n\n    if signature is None:\n        return\n\n    return _verify_relayable_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: ElementTree) -> Dict[str, str]:\n    if document.tag!= 'webfinger':\n        raise WebFingerParseError('Failed to parse webfinger')\n    return {\n        'id': _get_element_text_or_none(document, 'id'),\n        'guid': _get_element_text_or_none(document, 'guid'),\n        'profile': _get_element_attr_or_none(document, 'profile', 'profileURI'),\n        'entityType': _get_element_attr_or_none(document, 'entityType', 'entityTypeURI'),\n       'senderKeyFetcher': _get_element_attr_or_none(\n            document,'senderKeyFetcher','senderKeyFetcherURI'\n        ),\n    }\n", "def parse_diaspora_webfinger(document: str) -> Webfinger:\n    return Webfinger(document=document)\n", "def parse_diaspora_webfinger(document: ElementTree.Element) -> Dict[str, str]:\n    try:\n        webfinger_json = document.find(\n            './/{http://www.w3.org/2001/XMLSchema-instance}webfinger'\n        )\n        if webfinger_json is not None:\n            return json.loads(webfinger_json.text)\n        else:\n            return {}\n    except AttributeError:\n        logger.error('Error parsing webfinger JSON')\n        return {}\n", "def parse_diaspora_webfinger(document: str) -> dict:\n    parsed = xmltodict.parse(document)\n    return parsed[\"webfinger\"][\"hcard\"]\n", "def parse_diaspora_webfinger(document: Document) -> Webfinger:\n    if document.get(\"type\") == \"diaspora\":\n        parsed = parse_diaspora_webfinger(document)\n    else:\n        parsed = parse_json(document)\n    return Webfinger(**parsed)\n", "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"handle\": get_webfinger_handle(document),\n        \"serial\": get_webfinger_serial(document),\n        \"key\": _get_element_text_or_none(document, \"handle\"),\n        \"url\": get_webfinger_url(document),\n        \"registration\": get_webfinger_registration(document),\n    }\n", "def parse_diaspora_webfinger(document: ElementTree.Element) -> Dict[str, str]:\n    return {\n        \"fingerprint\": _get_element_text_or_none(document, \"fingerprint\"),\n        \"profile\": _get_element_attr_or_none(document, \"profile\", \"profile\"),\n    }\n", "def parse_diaspora_webfinger(document: Document) -> Dict[str, str]:\n    xrd = get_xrd(document)\n    if xrd is not None:\n        return parse_diaspora_webfinger(xrd)\n    else:\n        return parse_diaspora_webfinger(document)\n", "def parse_diaspora_webfinger(document: ElementTree.Element) -> dict:\n    if document.tag!= \"webfinger\":\n        raise ValueError(\n            \"Expected webfinger element tag in <webfinger>, found \" + document.tag\n        )\n\n    return {\n        \"handle\": _get_element_text_or_none(document, \"handle\"),\n        \"profile\": _get_element_attr_or_none(document, \"profile\", \"id\"),\n        \"host\": _get_element_attr_or_none(\n            document, \"host\", \"senderKeyFetcher\"\n        ),\n        \"entity_type\": _get_element_attr_or_none(document, \"entityType\", \"id\"),\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    # TODO: test and make sure this is working as intended\n    if not document.startswith(\"{\"):\n        logger.warning(\"Document does not start with {\")\n        return {}\n    document = document[1:]\n    if not document.endswith(\"}\"):\n        logger.warning(\"Document does not end with }\")\n        return {}\n    document = document[:-1]\n\n    json_dict = json.loads(document)\n    if json_dict is None:\n        logger.warning(\"JSON document is empty\")\n        return {}\n    if \"entityType\" not in json_dict:\n        logger.warning(\"JSON document does not contain a 'entityType' key\")\n        return {}\n    if json_dict[\"entityType\"]!= \"Host\":\n        logger.warning(\"JSON document is not a host\")\n        return {}\n\n    return parse_profile_from_hcard(json_dict)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: ElementTree) -> Dict[str, str]:\n    if document.tag!= 'webfinger':\n        raise WebFingerParseError('Failed to parse webfinger')\n    return {\n        'id': _get_element_text_or_none(document, 'id'),\n        'guid': _get_element_text_or_none(document, 'guid'),\n        'profile': _get_element_attr_or_none(document, 'profile', 'profileURI'),\n        'entityType': _get_element_attr_or_none(document, 'entityType', 'entityTypeURI'),\n       'senderKeyFetcher': _get_element_attr_or_none(\n            document,'senderKeyFetcher','senderKeyFetcherURI'\n        ),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Webfinger:\n    return Webfinger(document=document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: ElementTree.Element) -> Dict[str, str]:\n    try:\n        webfinger_json = document.find(\n            './/{http://www.w3.org/2001/XMLSchema-instance}webfinger'\n        )\n        if webfinger_json is not None:\n            return json.loads(webfinger_json.text)\n        else:\n            return {}\n    except AttributeError:\n        logger.error('Error parsing webfinger JSON')\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> dict:\n    parsed = xmltodict.parse(document)\n    return parsed[\"webfinger\"][\"hcard\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Webfinger:\n    if document.get(\"type\") == \"diaspora\":\n        parsed = parse_diaspora_webfinger(document)\n    else:\n        parsed = parse_json(document)\n    return Webfinger(**parsed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Element) -> Dict[str, str]:\n    if document.tag!= \"webfinger\":\n        return {}\n\n    return {\n        \"handle\": get_webfinger_handle(document),\n        \"serial\": get_webfinger_serial(document),\n        \"key\": _get_element_text_or_none(document, \"handle\"),\n        \"url\": get_webfinger_url(document),\n        \"registration\": get_webfinger_registration(document),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: ElementTree.Element) -> Dict[str, str]:\n    return {\n        \"fingerprint\": _get_element_text_or_none(document, \"fingerprint\"),\n        \"profile\": _get_element_attr_or_none(document, \"profile\", \"profile\"),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, str]:\n    xrd = get_xrd(document)\n    if xrd is not None:\n        return parse_diaspora_webfinger(xrd)\n    else:\n        return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: ElementTree.Element) -> dict:\n    if document.tag!= \"webfinger\":\n        raise ValueError(\n            \"Expected webfinger element tag in <webfinger>, found \" + document.tag\n        )\n\n    return {\n        \"handle\": _get_element_text_or_none(document, \"handle\"),\n        \"profile\": _get_element_attr_or_none(document, \"profile\", \"id\"),\n        \"host\": _get_element_attr_or_none(\n            document, \"host\", \"senderKeyFetcher\"\n        ),\n        \"entity_type\": _get_element_attr_or_none(document, \"entityType\", \"id\"),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    # TODO: test and make sure this is working as intended\n    if not document.startswith(\"{\"):\n        logger.warning(\"Document does not start with {\")\n        return {}\n    document = document[1:]\n    if not document.endswith(\"}\"):\n        logger.warning(\"Document does not end with }\")\n        return {}\n    document = document[:-1]\n\n    json_dict = json.loads(document)\n    if json_dict is None:\n        logger.warning(\"JSON document is empty\")\n        return {}\n    if \"entityType\" not in json_dict:\n        logger.warning(\"JSON document does not contain a 'entityType' key\")\n        return {}\n    if json_dict[\"entityType\"]!= \"Host\":\n        logger.warning(\"JSON document is not a host\")\n        return {}\n\n    return parse_profile_from_hcard(json_dict)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return fetch_document(handle, handle.info().geturl(), handle.info().geturl(), handle.info().geturl(), logger)\n    except HTTPError as e:\n        if e.code == 404:\n            # It's the last retry.\n            return fetch_document(handle, handle.info().geturl(), handle.info().geturl(), handle.info().geturl(), logger)\n        else:\n            raise\n", "def try_retrieve_webfinger_document(handle: urllib.request.Request) -> str:\n    try:\n        return handle.read()\n    except (urllib.error.HTTPError, urllib.error.URLError, urllib.error.ContentTooLongError):\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> BinaryIO:\n    try:\n        handle.seek(0)\n        return handle\n    except Exception:  # pylint: disable=broad-except\n        logger.warning(\"Webfinger retrieval failed.\")\n", "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read()\n    except (HTTPError, URLError):\n        logger.warning(\"Failed to retrieve webfinger document\")\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read(1024)\n    except Exception:  # pylint: disable=broad-except\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        handle.getresponse()  # raises exception on failure\n        handle.close()  # closes it after use.\n    except HTTPError:\n        logger.debug(\"Failed to retrieve webfinger document\")\n        return None\n    else:\n        return handle.read().decode(\"utf-8\")\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read(131072)\n    except (URLError, HTTPError) as error:\n        logger.debug(\"Failed to retrieve webfinger document: %s\", error)\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: HTTPResponse) -> bytes:\n    try:\n        return handle.geturl()\n    except Exception:\n        # TODO: Report that retrieving a webfinger document failed.\n        return None\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        handle.seek(0)\n        handle.truncate()\n        return handle.read(131072)\n    except URLError:\n        logger.error('Unable to retrieve webfinger document')\n        return b''\n", "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        handle.seek(0)\n        return handle.read().decode(\"utf-8\")\n    except (HTTPError, URLError):\n        return \"\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        return fetch_document(handle, handle.info().geturl(), handle.info().geturl(), handle.info().geturl(), logger)\n    except HTTPError as e:\n        if e.code == 404:\n            # It's the last retry.\n            return fetch_document(handle, handle.info().geturl(), handle.info().geturl(), handle.info().geturl(), logger)\n        else:\n            raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: urllib.request.Request) -> str:\n    try:\n        return handle.read()\n    except (urllib.error.HTTPError, urllib.error.URLError, urllib.error.ContentTooLongError):\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> BinaryIO:\n    try:\n        handle.seek(0)\n        return handle\n    except Exception:  # pylint: disable=broad-except\n        logger.warning(\"Webfinger retrieval failed.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read()\n    except (HTTPError, URLError):\n        logger.warning(\"Failed to retrieve webfinger document\")\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BytesIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read(1024)\n    except Exception:  # pylint: disable=broad-except\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        handle.getresponse()  # raises exception on failure\n        handle.close()  # closes it after use.\n    except HTTPError:\n        logger.debug(\"Failed to retrieve webfinger document\")\n        return None\n    else:\n        return handle.read().decode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        handle.seek(0)\n        return handle.read(131072)\n    except (URLError, HTTPError) as error:\n        logger.debug(\"Failed to retrieve webfinger document: %s\", error)\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse) -> bytes:\n    try:\n        return handle.geturl()\n    except Exception:\n        # TODO: Report that retrieving a webfinger document failed.\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> bytes:\n    try:\n        handle.seek(0)\n        handle.truncate()\n        return handle.read(131072)\n    except URLError:\n        logger.error('Unable to retrieve webfinger document')\n        return b''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO) -> str:\n    try:\n        handle.seek(0)\n        return handle.read().decode(\"utf-8\")\n    except (HTTPError, URLError):\n        return \"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard', guid=handle)\n    parsed = parse_diaspora_webfinger(document)\n    return parsed\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.netloc, entity_type=handle.url.path.lstrip('/'),\n                                         guid=handle.url.path.rstrip('/'))\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard',\n                                           guid=handle)\n\n    return parse_diaspora_webfinger(document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.domain, entity_type=handle.url.entity_type)\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_diaspora_hcard(handle)\n    retrieve_and_parse_diaspora_webfinger(handle)\n\n    return {\n        \"import\": parse_profile_from_hcard(handle),\n        \"feed\": parse_content(id=handle, guid=handle),\n    }\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    logger.info(\"Retrieving and parsing remote diaspora webfinger document.\")\n    document = get_fetch_content_endpoint(\n        domain=handle.remoteHost,\n        entity_type=handle.remoteEntityType,\n        guid=handle.remoteGUID,\n    )\n    return parse_diaspora_webfinger(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard', guid=handle)\n    parsed = parse_diaspora_webfinger(document)\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.netloc, entity_type=handle.url.path.lstrip('/'),\n                                         guid=handle.url.path.rstrip('/'))\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=DOMAIN, entity_type='hcard',\n                                           guid=handle)\n\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.url.domain, entity_type=handle.url.entity_type)\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_diaspora_hcard(handle)\n    retrieve_and_parse_diaspora_webfinger(handle)\n\n    return {\n        \"import\": parse_profile_from_hcard(handle),\n        \"feed\": parse_content(id=handle, guid=handle),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    logger.info(\"Retrieving and parsing remote diaspora webfinger document.\")\n    document = get_fetch_content_endpoint(\n        domain=handle.remoteHost,\n        entity_type=handle.remoteEntityType,\n        guid=handle.remoteGUID,\n    )\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    try:\n        url = urljoin(host, '/api/v1/metadata/diaspora/host')\n        response = get(url)\n    except RequestException:\n        raise ValueError('Unable to retrieve host-meta document.')\n\n    if response.status_code == 404:\n        raise ValueError('No metadata found for {}'.format(host))\n\n    try:\n        return XRD(response.content, host=host)\n    except (ValueError, RequestException) as e:\n        raise ValueError('Unable to retrieve host-meta document.') from e\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        \"https://api.host-meta.org/v1/hosts/{}/xml\".format(host),\n        headers={\"Accept\": \"application/json\"},\n    )\n    response.raise_for_status()\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :args: ``Host`` to retrieve from\n\n    :returns: ``XRD`` instance\n    :args: ``Host``\n    \"\"\"\n    try:\n        url = \"https://api.diaspora.org/host-meta/{host}\".format(\n            host=host,\n        )\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.text\n    except (requests.RequestException, HTTPError) as e:\n        raise XRDError(e)\n", "def retrieve_diaspora_host_meta(host):\n    if host == \"localhost\":\n        host = \"127.0.0.1\"\n    url = \"http://%s/xrd/log\" % host\n    try:\n        r = requests.get(url)\n    except requests.exceptions.ConnectionError:\n        raise RuntimeError(\"Couldn't connect to Diaspora server at %s\" % url)\n    if r.status_code!= 200:\n        raise RuntimeError(\"Retrieving XRD didn't return 200: %s\" % r.status_code)\n    try:\n        root = ET.fromstring(r.content)\n        for child in root:\n            if child.tag == 'xrd':\n                return XRD(host=host, url=url, meta=child)\n    except (IndexError, KeyError, ET.ParseError, AttributeError):\n        raise RuntimeError(\"Couldn't parse XRD from %s\" % url)\n", "def retrieve_diaspora_host_meta(host):\n    xml = get_diaspora_host_meta_xml(host)\n    xrd = get_diaspora_host_meta_xrd(host)\n    return XRD(xml, xrd)\n", "def retrieve_diaspora_host_meta(host):\n    diaspora = Diaspora(host=host, username=settings.XRD_USERNAME,\n                          password=settings.XRD_PASSWORD)\n    try:\n        response = diaspora.request('/host-meta')\n    except RequestException:\n        raise ValueError('Could not retrieve host-meta document')\n    if response.status_code!= 200:\n        raise ValueError('Could not retrieve host-meta document')\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/request?host=%s' % (settings.DIAspora_DOMAIN, host))\n    response.raise_for_status()\n    return response.text\n", "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance with import typing logging xml\n    json urllib typing xrd\n    federation logging lxml\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance\n    \"\"\"\n    if host not in XRD_CACHE:\n        url = '{}/host-meta'.format(settings.DIAspora_URL)\n        headers = {'Content-Type': 'application/xml'}\n        response = requests.get(url, headers=headers)\n        XRD_CACHE[host] = response\n    return XRD_CACHE[host]\n", "def retrieve_diaspora_host_meta(host):\n    url = \"{host}/meta\".format(host=host)\n    params = {\"host\": host}\n    response = requests.get(url, params=params, auth=(settings.USER, settings.PASSWORD))\n\n    if response.status_code!= 200:\n        raise exceptions.ServerError(\"Server returned status %s\" % response.status_code)\n\n    return XRD(response.content, host=host)\n", "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://diaspora.mitre.org/xrds/{domain}/{name}\"\n    ).format(domain=host, name=host)\n    response = requests.get(url)\n    if response.status_code == 200:\n        return XRD(response.text)\n    return None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    try:\n        url = urljoin(host, '/api/v1/metadata/diaspora/host')\n        response = get(url)\n    except RequestException:\n        raise ValueError('Unable to retrieve host-meta document.')\n\n    if response.status_code == 404:\n        raise ValueError('No metadata found for {}'.format(host))\n\n    try:\n        return XRD(response.content, host=host)\n    except (ValueError, RequestException) as e:\n        raise ValueError('Unable to retrieve host-meta document.') from e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        \"https://api.host-meta.org/v1/hosts/{}/xml\".format(host),\n        headers={\"Accept\": \"application/json\"},\n    )\n    response.raise_for_status()\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :args: ``Host`` to retrieve from\n\n    :returns: ``XRD`` instance\n    :args: ``Host``\n    \"\"\"\n    try:\n        url = \"https://api.diaspora.org/host-meta/{host}\".format(\n            host=host,\n        )\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.text\n    except (requests.RequestException, HTTPError) as e:\n        raise XRDError(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == \"localhost\":\n        host = \"127.0.0.1\"\n    url = \"http://%s/xrd/log\" % host\n    try:\n        r = requests.get(url)\n    except requests.exceptions.ConnectionError:\n        raise RuntimeError(\"Couldn't connect to Diaspora server at %s\" % url)\n    if r.status_code!= 200:\n        raise RuntimeError(\"Retrieving XRD didn't return 200: %s\" % r.status_code)\n    try:\n        root = ET.fromstring(r.content)\n        for child in root:\n            if child.tag == 'xrd':\n                return XRD(host=host, url=url, meta=child)\n    except (IndexError, KeyError, ET.ParseError, AttributeError):\n        raise RuntimeError(\"Couldn't parse XRD from %s\" % url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    xml = get_diaspora_host_meta_xml(host)\n    xrd = get_diaspora_host_meta_xrd(host)\n    return XRD(xml, xrd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    diaspora = Diaspora(host=host, username=settings.XRD_USERNAME,\n                          password=settings.XRD_PASSWORD)\n    try:\n        response = diaspora.request('/host-meta')\n    except RequestException:\n        raise ValueError('Could not retrieve host-meta document')\n    if response.status_code!= 200:\n        raise ValueError('Could not retrieve host-meta document')\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/request?host=%s' % (settings.DIAspora_DOMAIN, host))\n    response.raise_for_status()\n    return response.text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance with import typing logging xml\n    json urllib typing xrd\n    federation logging lxml\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance\n    \"\"\"\n    if host not in XRD_CACHE:\n        url = '{}/host-meta'.format(settings.DIAspora_URL)\n        headers = {'Content-Type': 'application/xml'}\n        response = requests.get(url, headers=headers)\n        XRD_CACHE[host] = response\n    return XRD_CACHE[host]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"{host}/meta\".format(host=host)\n    params = {\"host\": host}\n    response = requests.get(url, params=params, auth=(settings.USER, settings.PASSWORD))\n\n    if response.status_code!= 200:\n        raise exceptions.ServerError(\"Server returned status %s\" % response.status_code)\n\n    return XRD(response.content, host=host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://diaspora.mitre.org/xrds/{domain}/{name}\"\n    ).format(domain=host, name=host)\n    response = requests.get(url)\n    if response.status_code == 200:\n        return XRD(response.text)\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs), None\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = fetch_http_response(url, method=method, *args, **kwargs)\n    return send_http_response(response, timeout=timeout)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    try:\n        response = requests.post(\n            url,\n            data=data,\n            timeout=timeout,\n            headers={\n                \"User-Agent\": USER_AGENT,\n                \"Accept\": \"application/json\",\n            },\n            *args,\n            **kwargs,\n        )\n\n        return response.status_code, response\n    except Exception as exc:\n        return exc.code, exc\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(\n        url, data=data, timeout=timeout, **kwargs\n    ))\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=get_handle(url))\n    if response is None:\n        return try_retrieve_webfinger_document(handle=get_handle(url), *args, **kwargs)\n    return requests.post(\n        url,\n        data=data,\n        headers={\n            \"User-Agent\": USER_AGENT,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": response.headers.get(\"Content-Type\"),\n        },\n        timeout=timeout,\n        **kwargs,\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        headers={\"User-Agent\": USER_AGENT},\n        *args,\n        **kwargs,\n    )\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"User-Agent\": USER_AGENT}, *args, **kwargs\n    )\n    return response.status_code, response.json()\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=url, *args, **kwargs)\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs))\n    return response.status_code, response\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return fetch_document(url, method=method, *args, **kwargs), None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = fetch_http_response(url, method=method, *args, **kwargs)\n    return send_http_response(response, timeout=timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    try:\n        response = requests.post(\n            url,\n            data=data,\n            timeout=timeout,\n            headers={\n                \"User-Agent\": USER_AGENT,\n                \"Accept\": \"application/json\",\n            },\n            *args,\n            **kwargs,\n        )\n\n        return response.status_code, response\n    except Exception as exc:\n        return exc.code, exc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(\n        url, data=data, timeout=timeout, **kwargs\n    ))\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=get_handle(url))\n    if response is None:\n        return try_retrieve_webfinger_document(handle=get_handle(url), *args, **kwargs)\n    return requests.post(\n        url,\n        data=data,\n        headers={\n            \"User-Agent\": USER_AGENT,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": response.headers.get(\"Content-Type\"),\n        },\n        timeout=timeout,\n        **kwargs,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        headers={\"User-Agent\": USER_AGENT},\n        *args,\n        **kwargs,\n    )\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"User-Agent\": USER_AGENT}, *args, **kwargs\n    )\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=url, *args, **kwargs)\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs))\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic = dic.setdefault(k, {})\n        dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ not in dic:\n            dic[key_] = {}\n        dic = dic[key_]\n\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic = dic[k]\n        else:\n            dic[k] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n            dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            if isinstance(dic[key], list):\n                dic[key].append(val)\n            else:\n                dic[key] = [dic[key], val]\n        else:\n            dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n            dic = dic[key]\n\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            if isinstance(dic[key_], dict):\n                dic[key_] = dict_insert(dic[key_], val, key_)\n            else:\n                dic[key_] = [dic[key_], val]\n        else:\n            dic[key_] = [val]\n    return dic\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic.keys():\n        dic[key] = val\n    for key in keys[1:]:\n        if key not in dic.keys():\n            dic[key] = {}\n        dic = dic[key]\n", "def dict_insert(dic, val, key, *keys):\n    if len(keys) > 0:\n        dic_keys = keys[0].split('.')\n        if len(keys) == 1:\n            dic_keys.append(key)\n        else:\n            dic_keys.append(key + '.' + dic_keys[-1])\n        dic = dict_insert(dic, val, *keys)\n    else:\n        dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic = dic.setdefault(k, {})\n        dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ not in dic:\n            dic[key_] = {}\n        dic = dic[key_]\n\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k in dic:\n            dic = dic[k]\n        else:\n            dic[k] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n            dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            if isinstance(dic[key], list):\n                dic[key].append(val)\n            else:\n                dic[key] = [dic[key], val]\n        else:\n            dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n            dic = dic[key]\n\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            if isinstance(dic[key_], dict):\n                dic[key_] = dict_insert(dic[key_], val, key_)\n            else:\n                dic[key_] = [dic[key_], val]\n        else:\n            dic[key_] = [val]\n    return dic\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic.keys():\n        dic[key] = val\n    for key in keys[1:]:\n        if key not in dic.keys():\n            dic[key] = {}\n        dic = dic[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if len(keys) > 0:\n        dic_keys = keys[0].split('.')\n        if len(keys) == 1:\n            dic_keys.append(key)\n        else:\n            dic_keys.append(key + '.' + dic_keys[-1])\n        dic = dict_insert(dic, val, *keys)\n    else:\n        dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        os.path.join(*(('tests',) * settings_dir.count('/'))),\n        os.path.join(*(('tests', '{}.txt'.format(s)) * settings_dir.count('/')))\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile('path/to/some/file1.ini', ['path/to/some/file2.ini']),\n            IniFile('path/to/some/file3.ini', ['path/to/some/file4.ini'])\n        ],\n        settings_dirs,\n        spec_option\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\"ini_file_{}\".format(i), \"complex\", [\n            IniFile(path, \"ini_file_{}.ini\".format(i))\n            for path in settings_dirs\n        ]),\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"ini_files\",\n            [\n                IniFile(os.path.join(d, \"ini.txt\"), \"ini\", \"test.ini\"),\n                IniFile(os.path.join(d, \"ini.yml\"), \"ini\", \"test.yml\"),\n            ],\n            \"Ini files\",\n            False,\n        )\n        for d in settings_dirs\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = [str(x) for x in settings_dirs]\n    return IniType(\"list_of_file_names\", settings_dirs, [spec_option])\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            ('foo','str', False),\n            ('bar','str', False),\n            ('baz','str', False),\n            ('qux','str', False),\n        ],\n        settings_dirs,\n        spec_option,\n        '',\n        '',\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    class ListOfFilesSpec(IniType):\n        def __init__(self):\n            IniType.__init__(self, settings_dirs, spec_option)\n\n        def load(self, value):\n            return [path.replace('\\\\', '/') for path in value.split(',')]\n\n    return ListOfFilesSpec\n", "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '''\\\n[\n    {\n        \"dirs\": [\n            \"tests/foo\"\n        ],\n        \"name\": \"foobar\",\n        \"files\": [\n            \"tests/foo/bar.txt\"\n        ],\n        \"options\": [\n            \"--no-color\"\n        ]\n    }\n]\n''')\n", "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(','.join(['\"{}\"'.format(s) for s in settings_dirs])),\n        '[{}]'.format(','.join(['infrared'] * len(settings_dirs))))\n", "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(settings_dirs)),\n        '[{}]'.format(spec_option)\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        os.path.join(*(('tests',) * settings_dir.count('/'))),\n        os.path.join(*(('tests', '{}.txt'.format(s)) * settings_dir.count('/')))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile('path/to/some/file1.ini', ['path/to/some/file2.ini']),\n            IniFile('path/to/some/file3.ini', ['path/to/some/file4.ini'])\n        ],\n        settings_dirs,\n        spec_option\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\"ini_file_{}\".format(i), \"complex\", [\n            IniFile(path, \"ini_file_{}.ini\".format(i))\n            for path in settings_dirs\n        ]),\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"ini_files\",\n            [\n                IniFile(os.path.join(d, \"ini.txt\"), \"ini\", \"test.ini\"),\n                IniFile(os.path.join(d, \"ini.yml\"), \"ini\", \"test.yml\"),\n            ],\n            \"Ini files\",\n            False,\n        )\n        for d in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = [str(x) for x in settings_dirs]\n    return IniType(\"list_of_file_names\", settings_dirs, [spec_option])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            ('foo','str', False),\n            ('bar','str', False),\n            ('baz','str', False),\n            ('qux','str', False),\n        ],\n        settings_dirs,\n        spec_option,\n        '',\n        '',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    class ListOfFilesSpec(IniType):\n        def __init__(self):\n            IniType.__init__(self, settings_dirs, spec_option)\n\n        def load(self, value):\n            return [path.replace('\\\\', '/') for path in value.split(',')]\n\n    return ListOfFilesSpec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '''\\\n[\n    {\n        \"dirs\": [\n            \"tests/foo\"\n        ],\n        \"name\": \"foobar\",\n        \"files\": [\n            \"tests/foo/bar.txt\"\n        ],\n        \"options\": [\n            \"--no-color\"\n        ]\n    }\n]\n''')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(','.join(['\"{}\"'.format(s) for s in settings_dirs])),\n        '[{}]'.format(','.join(['infrared'] * len(settings_dirs))))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return complex(\n        '[{}]'.format(', '.join(settings_dirs)),\n        '[{}]'.format(spec_option)\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service(\n        name='ansible_config_manager',\n        service_class=AnsibleConfigManager\n    )\n", "def ansible_config_manager(cls):\n    return cls._get_service(\n        CoreSettings.ANSIBLE_CONFIG,\n        AnsibleConfigManager,\n    )\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\n        name='ansible_config_manager',\n        service_class=AnsibleConfigManager\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\n        CoreSettings.ANSIBLE_CONFIG,\n        AnsibleConfigManager,\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._get_service('workspace-manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace-manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    spec_content = yaml.safe_load(spec_content)\n\n    # check that all required fields are present\n    missing_fields = []\n    for field in cls.required_fields:\n        if field not in spec_content:\n            missing_fields.append(field)\n    if missing_fields:\n        raise IRValidatorException(\n            \"Missing required fields: {}\".format(\", \".join(missing_fields))\n        )\n\n    # check that required fields are all strings\n    for field in cls.required_fields:\n        if field not in spec_content[\"data\"]:\n            raise IRValidatorException(\n                \"Required field {} is not a valid sensor value\".format(field)\n            )\n\n    # import jsonschema\n    try:\n        jsonschema.validate(spec_content[\"data\"], cls.SCHEMA)\n    except jsonschema.exceptions.ValidationError as e:\n   ", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    schema = Schema(cls.SCHEMA)\n\n    try:\n        validate(instance=spec_content, schema=schema)\n    except ValidationError as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(str(e)))\n\n    return schema.data\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['version','model','serial_number', 'firmware_version']\n    data = {}\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field {}\".format(field))\n\n        data[field] = spec_content[field]\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if 'api_key' not in spec_content:\n        raise IRValidatorException(\"Missing API key\")\n\n    if 'enabled' not in spec_content:\n        raise IRValidatorException(\"Missing enabled\")\n\n    if'sleep_time' not in spec_content:\n        raise IRValidatorException(\"Missing sleep time\")\n\n    if 'interval' not in spec_content:\n        raise IRValidatorException(\"Missing interval\")\n\n    if 'base_url' not in spec_content:\n        raise IRValidatorException(\"Missing base url\")\n\n    if'retries' not in spec_content:\n        raise IRValidatorException(\"Missing retries\")\n\n    if 'logger' not in spec_content:\n        raise IRValidatorException(\"Missing logger\")\n\n    if'retry_delay' not in spec_content:\n        raise IRValidatorException(\"Missing retry_delay\")\n\n    if'min_wait' not in spec_content:\n        raise IRValidatorException(\"Missing min", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation is impossible\"\n        )\n\n    required_fields = (\"name\", \"serial_number\", \"description\", \"firmware_version\")\n    return cls.validate_from_file(spec_content, required_fields)\n", "def validate_from_content(cls, spec_content=None):\n    data = cls.validate_from_file(spec_content=spec_content)\n\n    if data is None:\n        raise IRValidatorException(\"Missing mandatory data in spec file\")\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {}:\\n{}'.format(\n            spec_content, e))\n\n    if data is None:\n        raise IRValidatorException('Missing data in spec file')\n\n    if not all(key in data for key in cls.required_fields):\n        raise IRValidatorException(\n            'Missing required fields in spec file: {}'.format(cls.required_fields))\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except yaml.YAMLError as yaml_error:\n        raise IRValidatorException(\n            \"The input YAML file does not contain all required fields: \"\n            \"{}\".format(yaml_error)\n        )\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Invalid format of spec file')\n\n    required_fields = cls._required_fields()\n    missing_fields = [key for key in required_fields if not spec_content.get(key)]\n\n    if missing_fields:\n        raise IRValidatorException('Missing required fields: {}'.format(missing_fields))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if \"import_os\" not in spec_content:\n        raise IRValidatorException(\"Missing import_os field\")\n\n    if \"import_version\" not in spec_content:\n        raise IRValidatorException(\"Missing import_version field\")\n\n    if \"import_date\" not in spec_content:\n        raise IRValidatorException(\"Missing import_date field\")\n\n    return cls.validate_from_file(spec_content)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No spec content provided\")\n\n    spec_content = yaml.safe_load(spec_content)\n\n    # check that all required fields are present\n    missing_fields = []\n    for field in cls.required_fields:\n        if field not in spec_content:\n            missing_fields.append(field)\n    if missing_fields:\n        raise IRValidatorException(\n            \"Missing required fields: {}\".format(\", \".join(missing_fields))\n        )\n\n    # check that required fields are all strings\n    for field in cls.required_fields:\n        if field not in spec_content[\"data\"]:\n            raise IRValidatorException(\n                \"Required field {} is not a valid sensor value\".format(field)\n            )\n\n    # import jsonschema\n    try:\n        jsonschema.validate(spec_content[\"data\"], cls.SCHEMA)\n    except jsonschema.exceptions.ValidationError as e:\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    schema = Schema(cls.SCHEMA)\n\n    try:\n        validate(instance=spec_content, schema=schema)\n    except ValidationError as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(str(e)))\n\n    return schema.data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['version','model','serial_number', 'firmware_version']\n    data = {}\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field {}\".format(field))\n\n        data[field] = spec_content[field]\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if 'api_key' not in spec_content:\n        raise IRValidatorException(\"Missing API key\")\n\n    if 'enabled' not in spec_content:\n        raise IRValidatorException(\"Missing enabled\")\n\n    if'sleep_time' not in spec_content:\n        raise IRValidatorException(\"Missing sleep time\")\n\n    if 'interval' not in spec_content:\n        raise IRValidatorException(\"Missing interval\")\n\n    if 'base_url' not in spec_content:\n        raise IRValidatorException(\"Missing base url\")\n\n    if'retries' not in spec_content:\n        raise IRValidatorException(\"Missing retries\")\n\n    if 'logger' not in spec_content:\n        raise IRValidatorException(\"Missing logger\")\n\n    if'retry_delay' not in spec_content:\n        raise IRValidatorException(\"Missing retry_delay\")\n\n    if'min_wait' not in spec_content:\n        raise IRValidatorException(\"Missing min", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation is impossible\"\n        )\n\n    required_fields = (\"name\", \"serial_number\", \"description\", \"firmware_version\")\n    return cls.validate_from_file(spec_content, required_fields)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = cls.validate_from_file(spec_content=spec_content)\n\n    if data is None:\n        raise IRValidatorException(\"Missing mandatory data in spec file\")\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Unable to parse YAML file {}:\\n{}'.format(\n            spec_content, e))\n\n    if data is None:\n        raise IRValidatorException('Missing data in spec file')\n\n    if not all(key in data for key in cls.required_fields):\n        raise IRValidatorException(\n            'Missing required fields in spec file: {}'.format(cls.required_fields))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n        return cls.validate(data)\n    except yaml.YAMLError as yaml_error:\n        raise IRValidatorException(\n            \"The input YAML file does not contain all required fields: \"\n            \"{}\".format(yaml_error)\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Invalid format of spec file')\n\n    required_fields = cls._required_fields()\n    missing_fields = [key for key in required_fields if not spec_content.get(key)]\n\n    if missing_fields:\n        raise IRValidatorException('Missing required fields: {}'.format(missing_fields))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if \"import_os\" not in spec_content:\n        raise IRValidatorException(\"Missing import_os field\")\n\n    if \"import_version\" not in spec_content:\n        raise IRValidatorException(\"Missing import_version field\")\n\n    if \"import_date\" not in spec_content:\n        raise IRValidatorException(\"Missing import_date field\")\n\n    return cls.validate_from_file(spec_content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException('Invalid file')\n    if not isinstance(data, dict):\n        raise IRValidatorException('Missing required fields')\n    return cls.validate_from_content(data)\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = validate_yaml_file(yaml_file=yaml_file)\n    if data is None:\n        raise IRValidatorException(\n            \"Failed to load YAML file {}\".format(yaml_file))\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    data = cls.load_yaml(yaml_file)\n    cls.validate_from_content(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    yaml_file = cls.validate_from_file_path(yaml_file)\n\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_content(data)\n", "def validate_from_file(cls, yaml_file=None):\n    data = validate_file(cls, yaml_file=yaml_file)\n\n    if 'host' not in data:\n        raise IRValidatorException(\"Missing 'host' key in YAML file\")\n\n    if 'port' not in data:\n        raise IRValidatorException(\"Missing 'port' key in YAML file\")\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n        return cls.validate_from_content(data)\n    except (yaml.YAMLError, IOError, OSError) as exc:\n        raise IRValidatorException('Unable to load YAML file {} : {}'.format(yaml_file, exc))\n", "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException('Missing a file path to a YAML file')\n\n    with open(yaml_file, 'r') as file_content:\n        data = cls.validate_from_string(file_content.read())\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_from_content(yaml_file)\n    return cls.validate_from_file_content(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file_path(yaml_file)\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_dict(data)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\n            \"Missing required fields in {} file\".format(cls.__name__)\n        )\n\n    try:\n        with open(yaml_file, \"r\") as yml:\n            return cls.validate_from_content(yml.read())\n    except IOError as e:\n        raise IRValidatorException(\n            \"Unable to load YAML file {} - {}\".format(yaml_file, e.strerror)\n        )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException('Invalid file')\n    if not isinstance(data, dict):\n        raise IRValidatorException('Missing required fields')\n    return cls.validate_from_content(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = validate_yaml_file(yaml_file=yaml_file)\n    if data is None:\n        raise IRValidatorException(\n            \"Failed to load YAML file {}\".format(yaml_file))\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = cls.load_yaml(yaml_file)\n    cls.validate_from_content(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    yaml_file = cls.validate_from_file_path(yaml_file)\n\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_content(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = validate_file(cls, yaml_file=yaml_file)\n\n    if 'host' not in data:\n        raise IRValidatorException(\"Missing 'host' key in YAML file\")\n\n    if 'port' not in data:\n        raise IRValidatorException(\"Missing 'port' key in YAML file\")\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n        return cls.validate_from_content(data)\n    except (yaml.YAMLError, IOError, OSError) as exc:\n        raise IRValidatorException('Unable to load YAML file {} : {}'.format(yaml_file, exc))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException('Missing a file path to a YAML file')\n\n    with open(yaml_file, 'r') as file_content:\n        data = cls.validate_from_string(file_content.read())\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_from_content(yaml_file)\n    return cls.validate_from_file_content(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls.validate_file_path(yaml_file)\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate_from_dict(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\n            \"Missing required fields in {} file\".format(cls.__name__)\n        )\n\n    try:\n        with open(yaml_file, \"r\") as yml:\n            return cls.validate_from_content(yml.read())\n    except IOError as e:\n        raise IRValidatorException(\n            \"Unable to load YAML file {} - {}\".format(yaml_file, e.strerror)\n        )\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for group in parser_dict.keys():\n        if group in self.include_groups:\n            options = parser_dict[group]\n            options.update(parser_dict['__all__'])\n            self.spec_dict['__include_groups__'].append(group)\n            self.spec_dict['__include_groups__'].update(options)\n", "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for command_name, parser_list in parser_dict.items():\n        for parser_name, include_spec in parser_list:\n            include_groups[command_name + '.' + parser_name] = include_spec\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    for command_name, command_spec in parser_dict.items():\n        command_spec['parser'] = self.get_parser_option_specs(command_name)\n", "def _include_groups(self, parser_dict):\n    include_group_specs = []\n    for parser_spec in parser_dict.values():\n        # Find the include groups spec for this parser and add it to the\n        # include_groups spec list.\n        include_group_specs.append(self._get_include_groups_spec(parser_spec))\n\n    return include_group_specs\n", "def _include_groups(self, parser_dict):\n    # We need to look at all of the parser specs to find all of the includes\n    # that we need. We use the 'include_groups' key to find the directive that\n    # corresponds to the include groups that are specified in the options\n    # dictionary.\n    for parser_spec in parser_dict['parser_specs']:\n        for include_group in parser_spec['include_groups']:\n            # We only need to look at the first include_group that corresponds\n            # to the command name that was passed in. As we don't explicitly\n            # declare a command with no include_groups anymore, we just return\n            # whatever it was passed in and make sure that the first include_group\n            # is the directive we want.\n            if include_group not in parser_dict['command_name']:\n                continue\n            if include_group in parser_dict['include_groups'][0]:\n     ", "def _include_groups(self, parser_dict):\n    for parser_name, parser_spec in parser_dict.items():\n        parser = None\n        for parser_spec in self._get_all_options_spec(parser_spec):\n            if parser_spec.include:\n                parser = parser_spec\n                break\n\n        if parser is not None:\n            parser_dict[parser_name] = parser\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if group in self.spec_dict['include_groups']:\n            self.spec_dict['include_groups'].remove(group)\n            self.spec_dict['include_groups'].append(group)\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for parser_name, parser_spec in parser_dict.items():\n        # Get all the include groups that this parser spec defines.\n        include_groups.extend(self._include_groups(parser_spec))\n    # Add the include groups that are not the default ones.\n    include_groups.extend(self._include_groups(parser_dict)[0])\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return\n\n    for parser_spec in parser_dict.values():\n        self._get_all_options_spec(parser_spec)\n\n        if parser_spec.include:\n            for include_group in parser_spec.include:\n                self._include_groups(include_group)\n", "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups'] is not None:\n        parser_dict['include_groups'] = parser_dict['include_groups'].split(',')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for group in parser_dict.keys():\n        if group in self.include_groups:\n            options = parser_dict[group]\n            options.update(parser_dict['__all__'])\n            self.spec_dict['__include_groups__'].append(group)\n            self.spec_dict['__include_groups__'].update(options)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for command_name, parser_list in parser_dict.items():\n        for parser_name, include_spec in parser_list:\n            include_groups[command_name + '.' + parser_name] = include_spec\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for command_name, command_spec in parser_dict.items():\n        command_spec['parser'] = self.get_parser_option_specs(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_group_specs = []\n    for parser_spec in parser_dict.values():\n        # Find the include groups spec for this parser and add it to the\n        # include_groups spec list.\n        include_group_specs.append(self._get_include_groups_spec(parser_spec))\n\n    return include_group_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    # We need to look at all of the parser specs to find all of the includes\n    # that we need. We use the 'include_groups' key to find the directive that\n    # corresponds to the include groups that are specified in the options\n    # dictionary.\n    for parser_spec in parser_dict['parser_specs']:\n        for include_group in parser_spec['include_groups']:\n            # We only need to look at the first include_group that corresponds\n            # to the command name that was passed in. As we don't explicitly\n            # declare a command with no include_groups anymore, we just return\n            # whatever it was passed in and make sure that the first include_group\n            # is the directive we want.\n            if include_group not in parser_dict['command_name']:\n                continue\n            if include_group in parser_dict['include_groups'][0]:\n     ", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for parser_name, parser_spec in parser_dict.items():\n        parser = None\n        for parser_spec in self._get_all_options_spec(parser_spec):\n            if parser_spec.include:\n                parser = parser_spec\n                break\n\n        if parser is not None:\n            parser_dict[parser_name] = parser\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for group in parser_dict.get('include_groups', []):\n        if group in self.spec_dict['include_groups']:\n            self.spec_dict['include_groups'].remove(group)\n            self.spec_dict['include_groups'].append(group)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for parser_name, parser_spec in parser_dict.items():\n        # Get all the include groups that this parser spec defines.\n        include_groups.extend(self._include_groups(parser_spec))\n    # Add the include groups that are not the default ones.\n    include_groups.extend(self._include_groups(parser_dict)[0])\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return\n\n    for parser_spec in parser_dict.values():\n        self._get_all_options_spec(parser_spec)\n\n        if parser_spec.include:\n            for include_group in parser_spec.include:\n                self._include_groups(include_group)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups'] is not None:\n        parser_dict['include_groups'] = parser_dict['include_groups'].split(',')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    if spec:\n        return self._merge_duplicated_cli_args(spec)\n    return {}\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars['__spec_defaults']\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    return self._merge_duplicated_cli_args(spec)\n", "def get_spec_defaults(self):\n    spec_defaults = super(Command, self).get_spec_defaults()\n    spec_defaults.update({'cli_args': {'format': 'json'}})\n    return spec_defaults\n", "def get_spec_defaults(self):\n    return self._get_conditionally_required_args(\n        '--defaults', '--no-defaults')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    if spec:\n        return self._merge_duplicated_cli_args(spec)\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars['__spec_defaults']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec = self.get_deprecated_args()\n    return self._merge_duplicated_cli_args(spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec_defaults = super(Command, self).get_spec_defaults()\n    spec_defaults.update({'cli_args': {'format': 'json'}})\n    return spec_defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_conditionally_required_args(\n        '--defaults', '--no-defaults')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._get_conditionally_required_args('argument', self.vars, self.defaults)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(['--deprecated'])\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._get_conditionally_required_args('argument', self.vars, self.defaults)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(['--deprecated'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = vars_dir = defaults_dir = cli_args.get('spec_args')\n    if spec_args:\n        vars_dir, defaults_dir = spec_args\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(cli_args)\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(answer_file_args)\n    self.vars.update(vars_dir)\n    self.vars.update(defaults_dir)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if deprecated_args:\n        LOG.warn('The following arguments are deprecated: %s', ', '.join(deprecated_args))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    LOG.debug('CLI arguments are merged: %s', cli_args)\n    LOG.debug('Argument file arguments are merged: %s', answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    if cli_args.deprecation_type is not None:\n        if cli_args.deprecation_type not in self.vars.deprecation_types:\n            LOG.error('{0} is an invalid deprecation type. Choose from {1}.'.format(cli_args.deprecation_type, self.vars.deprecation_types))\n            sys.exit(1)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = self._merge_duplicated_cli_args(cli_args)\n    spec_args.update(answer_file_args)\n    LOG.debug('args from file %s: %s', answer_file_args, spec_args)\n    LOG.debug('args from command line %s: %s', cli_args, spec_args)\n\n    deprecated_args = self._get_conditionally_required_args(\n        command_name='import',\n        options_spec=spec_args,\n        args=cli_args\n    )\n\n    LOG.debug('deprecated args %s', deprecated_args)\n    LOG.debug('args that are not in file: %s', cli_args)\n    if deprecated_args:\n        raise CLIAbort('%s arguments are deprecated and are not required' %\n                       (len(deprecated_args)))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec = vars(args)\n    spec['cli_args'] = cli_args\n    spec['answer_file_args'] = answer_file_args\n    spec['args'] = []\n    spec['spec_defaults'] = {}\n    spec['vars'] = {}\n    spec['defaults'] = []\n    spec['plugin_path'] = self.plugin_path\n    spec['subcommand'] = None\n    spec['command_name'] = None\n    spec['deprecated'] = True\n    spec['deprecation_message'] = None\n    spec['args_spec'] = {}\n    spec['vars_dir'] = self.vars_dir\n    spec['defaults_dir'] = self.defaults_dir\n    spec['command_name'] = None\n    spec['deprecated_args'] = []\n    spec['args'] = []\n    spec['vars'] = vars(args)\n    spec['defaults'] = vars(args)\n    spec['cli_args'] = spec['args_spec']\n    spec['answer_file_args'] = spec['answer_file_args']\n    spec['spec_defaults'] = spec['spec_defaults']\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    self._print_deprecation_message()\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"Validating arguments deprecation\")\n    if cli_args.deprecated_args and cli_args.deprecated_args!= answer_file_args.deprecated_args:\n        raise CLIError(\"--%s and --%s are not compatible.\" % (cli_args.deprecated_args, answer_file_args.deprecated_args))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arg deprecation %s', cli_args)\n    if not self.validate_arg_sources(cli_args, answer_file_args, spec_options=self.vars):\n        raise ArgumentDeprecationError('Failed to validate deprecated arguments')\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warning('CLI arguments are deprecated. Please consult our documentation at '\n                'https://infrared.io/docs/api/deprecation-warning.')\n    LOG.warning('CLI arguments are not supported. Please consult our documentation at '\n                'https://infrared.io/docs/api/custom-types.')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = vars_dir = defaults_dir = cli_args.get('spec_args')\n    if spec_args:\n        vars_dir, defaults_dir = spec_args\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(cli_args)\n    vars_dir, defaults_dir = self._merge_duplicated_cli_args(answer_file_args)\n    self.vars.update(vars_dir)\n    self.vars.update(defaults_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if deprecated_args:\n        LOG.warn('The following arguments are deprecated: %s', ', '.join(deprecated_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n    LOG.debug('CLI arguments are merged: %s', cli_args)\n    LOG.debug('Argument file arguments are merged: %s', answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    if cli_args.deprecation_type is not None:\n        if cli_args.deprecation_type not in self.vars.deprecation_types:\n            LOG.error('{0} is an invalid deprecation type. Choose from {1}.'.format(cli_args.deprecation_type, self.vars.deprecation_types))\n            sys.exit(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec_args = self._merge_duplicated_cli_args(cli_args)\n    spec_args.update(answer_file_args)\n    LOG.debug('args from file %s: %s', answer_file_args, spec_args)\n    LOG.debug('args from command line %s: %s', cli_args, spec_args)\n\n    deprecated_args = self._get_conditionally_required_args(\n        command_name='import',\n        options_spec=spec_args,\n        args=cli_args\n    )\n\n    LOG.debug('deprecated args %s', deprecated_args)\n    LOG.debug('args that are not in file: %s', cli_args)\n    if deprecated_args:\n        raise CLIAbort('%s arguments are deprecated and are not required' %\n                       (len(deprecated_args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    spec = vars(args)\n    spec['cli_args'] = cli_args\n    spec['answer_file_args'] = answer_file_args\n    spec['args'] = []\n    spec['spec_defaults'] = {}\n    spec['vars'] = {}\n    spec['defaults'] = []\n    spec['plugin_path'] = self.plugin_path\n    spec['subcommand'] = None\n    spec['command_name'] = None\n    spec['deprecated'] = True\n    spec['deprecation_message'] = None\n    spec['args_spec'] = {}\n    spec['vars_dir'] = self.vars_dir\n    spec['defaults_dir'] = self.defaults_dir\n    spec['command_name'] = None\n    spec['deprecated_args'] = []\n    spec['args'] = []\n    spec['vars'] = vars(args)\n    spec['defaults'] = vars(args)\n    spec['cli_args'] = spec['args_spec']\n    spec['answer_file_args'] = spec['answer_file_args']\n    spec['spec_defaults'] = spec['spec_defaults']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(answer_file_args)\n\n    self._print_deprecation_message()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"Validating arguments deprecation\")\n    if cli_args.deprecated_args and cli_args.deprecated_args!= answer_file_args.deprecated_args:\n        raise CLIError(\"--%s and --%s are not compatible.\" % (cli_args.deprecated_args, answer_file_args.deprecated_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arg deprecation %s', cli_args)\n    if not self.validate_arg_sources(cli_args, answer_file_args, spec_options=self.vars):\n        raise ArgumentDeprecationError('Failed to validate deprecated arguments')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warning('CLI arguments are deprecated. Please consult our documentation at '\n                'https://infrared.io/docs/api/deprecation-warning.')\n    LOG.warning('CLI arguments are not supported. Please consult our documentation at '\n                'https://infrared.io/docs/api/custom-types.')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"options\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['option_specs']\n", "def get_parser_option_specs(self, command_name):\n    # Get all the options for the specified command\n    options_spec = self.spec_dict[command_name].get(\"options_spec\")\n\n    if not options_spec:\n        return []\n\n    # Remove the include groups\n    options_spec = self._include_groups(options_spec)\n\n    return options_spec\n", "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name)\n    return self._include_groups(option_spec)\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['option_specs']\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['options']\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].keys()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"options\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['option_specs']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    # Get all the options for the specified command\n    options_spec = self.spec_dict[command_name].get(\"options_spec\")\n\n    if not options_spec:\n        return []\n\n    # Remove the include groups\n    options_spec = self._include_groups(options_spec)\n\n    return options_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name)\n    return self._include_groups(option_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['option_specs']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['options']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name][\"parser_option_specs\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].keys()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, {})\n    return parser_spec\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    if not option_spec:\n        raise Exception('The spec for command {0} has no option {1}'\n                       .format(command_name, argument_name))\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        return None\n\n    if not isinstance(self.spec_dict[command_name], dict):\n        return None\n\n    option_spec = self.spec_dict[command_name].get(argument_name, None)\n\n    if not isinstance(option_spec, dict):\n        return None\n\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError('Command name \"{}\" does not exist.'.format(command_name))\n\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError('Option \"{}\" does not exist in \"{}\" command.'.format(argument_name, command_name))\n\n    return self.spec_dict[command_name][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError(\n            'Command spec for command {} not found.'.format(command_name))\n\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError(\n            'Option spec for argument {} not found.'.format(argument_name))\n\n    return self.spec_dict[command_name][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    parser = self.spec_dict[command_name]['parser']\n    return parser.option_specs[argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name in self.spec_dict:\n        if argument_name in self.spec_dict[command_name]:\n            return self.spec_dict[command_name][argument_name]\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    parser_names = self._include_groups(self.spec_dict)\n    parser_specs = self._include_groups(self.spec_dict)\n    for spec in parser_specs[command_name].get(argument_name, []):\n        if spec not in parser_names:\n            raise ParseError(\n                '{} argument {} not found in {} specification'.format(\n                    argument_name, spec, command_name))\n    return parser_specs[command_name][argument_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.spec_dict.get(command_name, {}).get(argument_name, {})\n    return parser_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    option_spec = parser_dict.get(argument_name, None)\n    if not option_spec:\n        raise Exception('The spec for command {0} has no option {1}'\n                       .format(command_name, argument_name))\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        return None\n\n    if not isinstance(self.spec_dict[command_name], dict):\n        return None\n\n    option_spec = self.spec_dict[command_name].get(argument_name, None)\n\n    if not isinstance(option_spec, dict):\n        return None\n\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError('Command name \"{}\" does not exist.'.format(command_name))\n\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError('Option \"{}\" does not exist in \"{}\" command.'.format(argument_name, command_name))\n\n    return self.spec_dict[command_name][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError(\n            'Command spec for command {} not found.'.format(command_name))\n\n    if argument_name not in self.spec_dict[command_name]:\n        raise KeyError(\n            'Option spec for argument {} not found.'.format(argument_name))\n\n    return self.spec_dict[command_name][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser = self.spec_dict[command_name]['parser']\n    return parser.option_specs[argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name in self.spec_dict:\n        if argument_name in self.spec_dict[command_name]:\n            return self.spec_dict[command_name][argument_name]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_names = self._include_groups(self.spec_dict)\n    parser_specs = self._include_groups(self.spec_dict)\n    for spec in parser_specs[command_name].get(argument_name, []):\n        if spec not in parser_names:\n            raise ParseError(\n                '{} argument {} not found in {} specification'.format(\n                    argument_name, spec, command_name))\n    return parser_specs[command_name][argument_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args,\n    )\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args('silent', args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args, self._merge_duplicated_cli_args)\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None and arg!= \"-\"]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args('silent', args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._get_conditionally_required_args(\n       'silent', args, self._merge_duplicated_cli_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None and arg!= \"-\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.vars:\n            raise AnsibleFilterError(\"'%s' is not a recognized variable in ansible-callback. Options are: %s\" % (arg, list(self.vars.keys())))\n", "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(args)\n    for arg_name in required_args:\n        if arg_name not in args:\n            raise ArgumentError(\n                'Missing argument \"{}\" in \"{}\"'.format(\n                    arg_name, self.__class__.__name__\n                )\n            )\n", "def validate_requires_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n\n    for arg_name in args.keys():\n        if arg_name in self.vars and args[arg_name] is not None:\n            raise BadArgumentError(\n                'Argument \"{0}\" cannot be provided as a variable name. '\n                'Please check your configuration.'.format(arg_name))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg in self.vars and args[arg] is not None:\n            raise ArgumentError(\n                '\"{}\" argument can only be provided once'.format(arg))\n", "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    args_with_required_args = [arg for arg in args if arg in required_args]\n    if len(args_with_required_args) == 0:\n        raise InvalidArgument(\n            'Ansible playbook requires at least one argument \"{}\"'.format(\n                required_args.keys()[0]))\n", "def validate_requires_args(self, args):\n    return all(args.get(arg_name, None) is not None\n               for arg_name in self.required_args)\n", "def validate_requires_args(self, args):\n    for arg_name in args:\n        if arg_name not in self.vars and arg_name not in self.defaults:\n            raise Exception(\n                'Required argument \"{}\" not provided.'.format(arg_name))\n", "def validate_requires_args(self, args):\n    return set(args).issubset(self.vars)\n", "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    for arg in required_args:\n        if arg not in args:\n            raise exceptions.ArgumentError(\n                'Missing required argument \"{}\" in \"{}\"'.format(arg, self.cli_args_file_name)\n            )\n", "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(args)\n    required_args = arg_spec.args[-len(arg_spec.defaults):]\n\n    for arg in required_args:\n        if arg not in self.vars:\n            raise exceptions.ArgumentTypeError(\n                '{} requires argument {}'.format(\n                    self.plugin_path,\n                    arg\n                )\n            )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.vars:\n            raise AnsibleFilterError(\"'%s' is not a recognized variable in ansible-callback. Options are: %s\" % (arg, list(self.vars.keys())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(args)\n    for arg_name in required_args:\n        if arg_name not in args:\n            raise ArgumentError(\n                'Missing argument \"{}\" in \"{}\"'.format(\n                    arg_name, self.__class__.__name__\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n\n    for arg_name in args.keys():\n        if arg_name in self.vars and args[arg_name] is not None:\n            raise BadArgumentError(\n                'Argument \"{0}\" cannot be provided as a variable name. '\n                'Please check your configuration.'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg in self.vars and args[arg] is not None:\n            raise ArgumentError(\n                '\"{}\" argument can only be provided once'.format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    args_with_required_args = [arg for arg in args if arg in required_args]\n    if len(args_with_required_args) == 0:\n        raise InvalidArgument(\n            'Ansible playbook requires at least one argument \"{}\"'.format(\n                required_args.keys()[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all(args.get(arg_name, None) is not None\n               for arg_name in self.required_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg_name in args:\n        if arg_name not in self.vars and arg_name not in self.defaults:\n            raise Exception(\n                'Required argument \"{}\" not provided.'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return set(args).issubset(self.vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.get_required_args()\n    for arg in required_args:\n        if arg not in args:\n            raise exceptions.ArgumentError(\n                'Missing required argument \"{}\" in \"{}\"'.format(arg, self.cli_args_file_name)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(args)\n    required_args = arg_spec.args[-len(arg_spec.defaults):]\n\n    for arg in required_args:\n        if arg not in self.vars:\n            raise exceptions.ArgumentTypeError(\n                '{} requires argument {}'.format(\n                    self.plugin_path,\n                    arg\n                )\n            )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(self, args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_def in six.iteritems(options_spec):\n        if self._merge_duplicated_cli_args(args, arg_def):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    args = self._validate_requires_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                  args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    args_with_deprecation = []\n    for arg_name, arg_type, arg_default in args:\n        if arg_type in required_when:\n            args_with_deprecation.append(\n                (arg_name, arg_type, arg_default))\n    return args_with_deprecation\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self.validate_arg_sources\n        self.vars\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self.validate_choices_args(self, args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    return self._merge_duplicated_cli_args(args, required_when)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self._merge_duplicated_cli_args(args)\n        self._merge_duplicated_cli_args(cli_args)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.parse_args(arg_parser, args))\n        self.validate_choices_args(self, args)\n        self._get_conditionally_required_args(command_name, options_spec,\n                                              args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_def in six.iteritems(options_spec):\n        if self._merge_duplicated_cli_args(args, arg_def):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    args = self._merge_duplicated_cli_args(args)\n    args = self._validate_requires_args(args)\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                  args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    args_with_deprecation = []\n    for arg_name, arg_type, arg_default in args:\n        if arg_type in required_when:\n            args_with_deprecation.append(\n                (arg_name, arg_type, arg_default))\n    return args_with_deprecation\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.validate_min_max_args(args)\n        self.validate_arg_sources\n        self.vars\n        self._merge_duplicated_cli_args(self.cli_args)\n        self._merge_duplicated_args(cli_args)\n    \"\"\"\n    return self._merge_duplicated_cli_args(options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(self.cli_args)\n        self.validate_choices_args(self, args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class\n        self.resolve_custom_types\n        self.generate_answers_file(self, cli_args, spec_defaults)\n        self.validate_min_max_args(self, args)\n    :rtype: list\n    \"\"\"\n    required_when = self.vars.get('required_when', [])\n    return self._merge_duplicated_cli_args(args, required_when)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition with import string os collections six infrared class self.resolve_custom_types\n        infrared class self.generate_answers_file(self, cli_args, spec_defaults)\n        self._merge_duplicated_cli_args(args)\n        self._merge_duplicated_cli_args(cli_args)\n        self.validate_min_max_args(self, args)\n        self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self._get_conditionally_required_args(command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) > self.vars.get('max_args', None):\n        raise ArgumentTooLongException\n", "def validate_length_args(self, args):\n    for arg in args:\n        if len(arg) > self.vars[args.index(arg)][\"value\"]:\n            raise ArgumentError(\n                \"Argument '{}' is longer than the specified value \"\n                \"'{}'\".format(arg, self.vars[args.index(arg)][\"value\"])\n            )\n", "def validate_length_args(self, args):\n    for key, value in args.items():\n        if isinstance(value, list):\n            if len(value) > self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length less than {}'.format(key, self.vars[key]['length']))\n        else:\n            if len(value)!= self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length {}'.format(key, self.vars[key]['length']))\n", "def validate_length_args(self, args):\n    lengths = self.vars.get('lengths', [])\n    for i in range(len(lengths)):\n        if len(args) > lengths[i]:\n            return False\n    return True\n", "def validate_length_args(self, args):\n    arg_names = self.vars[\"arguments\"]\n    if len(args) > len(arg_names):\n        raise exceptions.CLIAbort(\n            \"Too many arguments! (%d > %d)\" % (len(args), len(arg_names))\n        )\n", "def validate_length_args(self, args):\n    arg_list = args.split(' ')\n    if len(arg_list) > len(self.vars):\n        raise ArgumentError('Too many arguments!')\n", "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentTooLongException\n", "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentError(\n            'Too many arguments: {} > {}'.format(\n                len(args), self.vars['max_args']))\n", "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[args[arg]['count']]:\n            raise CommandError('{} is longer than {}'.format(arg, self.vars[arg]['count']))\n", "def validate_length_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if not spec_args:\n        return\n\n    arg_spec = inspect.getargspec(args)\n    if arg_spec.args and arg_spec.args[0] in spec_args:\n        return\n\n    return args\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars.get('max_args', None):\n        raise ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for arg in args:\n        if len(arg) > self.vars[args.index(arg)][\"value\"]:\n            raise ArgumentError(\n                \"Argument '{}' is longer than the specified value \"\n                \"'{}'\".format(arg, self.vars[args.index(arg)][\"value\"])\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for key, value in args.items():\n        if isinstance(value, list):\n            if len(value) > self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length less than {}'.format(key, self.vars[key]['length']))\n        else:\n            if len(value)!= self.vars[key]['length']:\n                raise ArgumentTypeError(\n                    'Argument \"{}\" must have length {}'.format(key, self.vars[key]['length']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    lengths = self.vars.get('lengths', [])\n    for i in range(len(lengths)):\n        if len(args) > lengths[i]:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_names = self.vars[\"arguments\"]\n    if len(args) > len(arg_names):\n        raise exceptions.CLIAbort(\n            \"Too many arguments! (%d > %d)\" % (len(args), len(arg_names))\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_list = args.split(' ')\n    if len(arg_list) > len(self.vars):\n        raise ArgumentError('Too many arguments!')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.vars['max_args']:\n        raise ArgumentError(\n            'Too many arguments: {} > {}'.format(\n                len(args), self.vars['max_args']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[args[arg]['count']]:\n            raise CommandError('{} is longer than {}'.format(arg, self.vars[arg]['count']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if not spec_args:\n        return\n\n    arg_spec = inspect.getargspec(args)\n    if arg_spec.args and arg_spec.args[0] in spec_args:\n        return\n\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    for arg_name in arg_spec.keys():\n        if arg_spec[arg_name] not in self.vars['args']:\n            raise ValueError(\n                'Must specify {} argument'.format(arg_name))\n", "def validate_choices_args(self, args):\n    args_dict = vars(args)\n    args_dict.pop('self', None)\n    args_dict = self._merge_duplicated_cli_args(args_dict)\n\n    if args_dict == self.defaults:\n        return args\n\n    choices = args_dict.get('choices', None)\n    if choices is not None:\n        for choice in choices:\n            if args_dict.get(choice) is None:\n                raise CLIError('choice {0} is required'.format(choice))\n\n    return args\n", "def validate_choices_args(self, args):\n    spec_args = self.vars.get('__spec_args__', {})\n    if args not in spec_args:\n        raise UsageError(\n            '\"{}\" is not a valid choice argument. Choose from: {}'\n           .format(args, list(spec_args.keys())))\n", "def validate_choices_args(self, args):\n    if args.choices is not None:\n        valid_choices = args.choices.split(',')\n        for choice in args.choices.split(','):\n            if choice not in valid_choices:\n                return False\n\n    return True\n", "def validate_choices_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type = self.vars[arg_name]\n        if arg_type is None:\n            continue\n        if arg_value not in arg_type.choices:\n            raise CLIError(\"{0} is not a valid choice for {1}\".format(arg_value, arg_name))\n", "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    return arg_spec.get('choices') is not None\n", "def validate_choices_args(self, args):\n    for arg_name, arg_type in args.items():\n        arg_name = arg_name.replace('_', '-')\n        if arg_name not in self.vars['__args__']:\n            raise CLIError(\n                '{} is not a valid choice for {}'.format(arg_name, self.vars['__name__']))\n", "def validate_choices_args(self, args):\n    for arg in args:\n        if arg not in self.vars.keys() or args[arg] is None:\n            return False\n\n    return True\n", "def validate_choices_args(self, args):\n    choices = self.get_choices()\n    if args not in choices:\n        raise ArgumentTypeError(\"{} is not a valid choices argument\".format(args))\n", "def validate_choices_args(self, args):\n    arg_spec = inspect.getargspec(self.get_spec_defaults)\n    for arg in args:\n        if arg not in arg_spec.args:\n            raise ArgumentError(\"Argument '{}' is not a valid choice argument.\".format(arg))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    for arg_name in arg_spec.keys():\n        if arg_spec[arg_name] not in self.vars['args']:\n            raise ValueError(\n                'Must specify {} argument'.format(arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    args_dict = vars(args)\n    args_dict.pop('self', None)\n    args_dict = self._merge_duplicated_cli_args(args_dict)\n\n    if args_dict == self.defaults:\n        return args\n\n    choices = args_dict.get('choices', None)\n    if choices is not None:\n        for choice in choices:\n            if args_dict.get(choice) is None:\n                raise CLIError('choice {0} is required'.format(choice))\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    spec_args = self.vars.get('__spec_args__', {})\n    if args not in spec_args:\n        raise UsageError(\n            '\"{}\" is not a valid choice argument. Choose from: {}'\n           .format(args, list(spec_args.keys())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices is not None:\n        valid_choices = args.choices.split(',')\n        for choice in args.choices.split(','):\n            if choice not in valid_choices:\n                return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type = self.vars[arg_name]\n        if arg_type is None:\n            continue\n        if arg_value not in arg_type.choices:\n            raise CLIError(\"{0} is not a valid choice for {1}\".format(arg_value, arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    return arg_spec.get('choices') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg_name, arg_type in args.items():\n        arg_name = arg_name.replace('_', '-')\n        if arg_name not in self.vars['__args__']:\n            raise CLIError(\n                '{} is not a valid choice for {}'.format(arg_name, self.vars['__name__']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for arg in args:\n        if arg not in self.vars.keys() or args[arg] is None:\n            return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = self.get_choices()\n    if args not in choices:\n        raise ArgumentTypeError(\"{} is not a valid choices argument\".format(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    arg_spec = inspect.getargspec(self.get_spec_defaults)\n    for arg in args:\n        if arg not in arg_spec.args:\n            raise ArgumentError(\"Argument '{}' is not a valid choice argument.\".format(arg))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    arg_spec = inspect.getargspec(self.get_answer)\n    if args is None or args[0] not in arg_spec.args:\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: %s' % args[0])\n    if args[0] =='self':\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: self')\n", "def validate_min_max_args(self, args):\n    arg_type = args.get('--type')\n    min_arg_value = self.vars.get(arg_type, None)\n    max_arg_value = self.vars.get(arg_type + '-max', None)\n    if min_arg_value is not None and max_arg_value is not None:\n        if min_arg_value > max_arg_value:\n            raise CLIError('--type={} can not be greater than {}.'.format(\n                arg_type, arg_type + '-max'))\n", "def validate_min_max_args(self, args):\n    min_value = args.get('--min')\n    max_value = args.get('--max')\n    if min_value and max_value:\n        if min_value > max_value:\n            raise CLIError(\"--min must be lower than --max.\")\n", "def validate_min_max_args(self, args):\n    for arg_name, arg_type in args.items():\n        if arg_type not in self.vars.types:\n            raise ArgumentTypeError(\n                'Argument \"{}\" is not a valid argument type. Choose between '\n                '{}.'.format(arg_name, ', '.join(self.vars.types)))\n", "def validate_min_max_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type, arg_default = self.vars[arg_name]\n        if not isinstance(arg_value, arg_type):\n            raise InvalidArgumentError(\"Argument {0} should be of type {1}\".format(arg_name, arg_type))\n        if arg_default is not None and arg_value == arg_default:\n            continue\n        if not self.validate_arg_deprecation(cli_args=args, answer_file_args=args):\n            return False\n    return True\n", "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    for arg_name in args:\n        if args[arg_name] < self.vars[arg_name].minimum or args[arg_name] > self.vars[arg_name].maximum:\n            raise ArgumentError(\"Argument '{0}' must be between {1} and {2}\".format(arg_name, self.vars[arg_name].minimum, self.vars[arg_name].maximum))\n", "def validate_min_max_args(self, args):\n    valid_args = self.validate_arg_deprecation(cli_args=args, answer_file_args=args)\n    return valid_args\n", "def validate_min_max_args(self, args):\n    arg_names = self.vars.keys()\n    arg_names.sort()\n    args = dict((arg_name, args.get(arg_name)) for arg_name in arg_names)\n\n    min_arg = args.get('min')\n    max_arg = args.get('max')\n\n    if min_arg and max_arg:\n        if not (min_arg >= 0 and max_arg <= 100):\n            raise CommandArgumentError(\n                'Minimum value for argument \"{0}\" must be between 0 and 100'.format(min_arg)\n            )\n", "def validate_min_max_args(self, args):\n    spec_options = self.vars.get('__spec_options__', {})\n    if not isinstance(args, dict):\n        args = vars(args)\n\n    for arg_name, arg_type in args.items():\n        if arg_type not in spec_options:\n            raise AnsibleFilterError(\"Argument type '%s' is not supported\" % arg_type)\n\n        if arg_name not in self.vars:\n            raise AnsibleFilterError(\"Argument name '%s' is not set\" % arg_name)\n\n        min_value = spec_options[arg_name]['min']\n        max_value = spec_options[arg_name]['max']\n        if min_value and max_value:\n            if args[arg_name] < min_value:\n                raise AnsibleFilterError(\"Argument '%s' is lower than %s\" % (arg_name, min_value))\n        if args[arg_name] > max_value:\n            raise AnsibleFilterError(\"Argument '%s' is higher than %s", "def validate_min_max_args(self, args):\n    arg_types = self.vars[\"types\"]\n    if args is not None:\n        for arg in args:\n            arg_types = self.vars[arg]\n            if arg_types is None:\n                continue\n            if arg_types.min is not None and arg_types.max is not None:\n                if arg_types.min > arg_types.max:\n                    raise CommandError(\"Argument '{}' must be between {}\".format(arg, arg_types.min))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    arg_spec = inspect.getargspec(self.get_answer)\n    if args is None or args[0] not in arg_spec.args:\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: %s' % args[0])\n    if args[0] =='self':\n        raise exceptions.ArgumentMissing(\n            'Missing required argument: self')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_type = args.get('--type')\n    min_arg_value = self.vars.get(arg_type, None)\n    max_arg_value = self.vars.get(arg_type + '-max', None)\n    if min_arg_value is not None and max_arg_value is not None:\n        if min_arg_value > max_arg_value:\n            raise CLIError('--type={} can not be greater than {}.'.format(\n                arg_type, arg_type + '-max'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_value = args.get('--min')\n    max_value = args.get('--max')\n    if min_value and max_value:\n        if min_value > max_value:\n            raise CLIError(\"--min must be lower than --max.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    for arg_name, arg_type in args.items():\n        if arg_type not in self.vars.types:\n            raise ArgumentTypeError(\n                'Argument \"{}\" is not a valid argument type. Choose between '\n                '{}.'.format(arg_name, ', '.join(self.vars.types)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    for arg_name, arg_value in args.items():\n        arg_type, arg_default = self.vars[arg_name]\n        if not isinstance(arg_value, arg_type):\n            raise InvalidArgumentError(\"Argument {0} should be of type {1}\".format(arg_name, arg_type))\n        if arg_default is not None and arg_value == arg_default:\n            continue\n        if not self.validate_arg_deprecation(cli_args=args, answer_file_args=args):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args is None:\n        return\n    for arg_name in args:\n        if args[arg_name] < self.vars[arg_name].minimum or args[arg_name] > self.vars[arg_name].maximum:\n            raise ArgumentError(\"Argument '{0}' must be between {1} and {2}\".format(arg_name, self.vars[arg_name].minimum, self.vars[arg_name].maximum))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    valid_args = self.validate_arg_deprecation(cli_args=args, answer_file_args=args)\n    return valid_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_names = self.vars.keys()\n    arg_names.sort()\n    args = dict((arg_name, args.get(arg_name)) for arg_name in arg_names)\n\n    min_arg = args.get('min')\n    max_arg = args.get('max')\n\n    if min_arg and max_arg:\n        if not (min_arg >= 0 and max_arg <= 100):\n            raise CommandArgumentError(\n                'Minimum value for argument \"{0}\" must be between 0 and 100'.format(min_arg)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    spec_options = self.vars.get('__spec_options__', {})\n    if not isinstance(args, dict):\n        args = vars(args)\n\n    for arg_name, arg_type in args.items():\n        if arg_type not in spec_options:\n            raise AnsibleFilterError(\"Argument type '%s' is not supported\" % arg_type)\n\n        if arg_name not in self.vars:\n            raise AnsibleFilterError(\"Argument name '%s' is not set\" % arg_name)\n\n        min_value = spec_options[arg_name]['min']\n        max_value = spec_options[arg_name]['max']\n        if min_value and max_value:\n            if args[arg_name] < min_value:\n                raise AnsibleFilterError(\"Argument '%s' is lower than %s\" % (arg_name, min_value))\n        if args[arg_name] > max_value:\n            raise AnsibleFilterError(\"Argument '%s' is higher than %s", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_types = self.vars[\"types\"]\n    if args is not None:\n        for arg in args:\n            arg_types = self.vars[arg]\n            if arg_types is None:\n                continue\n            if arg_types.min is not None and arg_types.max is not None:\n                if arg_types.min > arg_types.max:\n                    raise CommandError(\"Argument '{}' must be between {}\".format(arg, arg_types.min))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                        ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args(command_name, options_spec,\n                                         args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    return self.vars[type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(self, cli_args)\n             self.validate_min_max_args(args)\n             self._merge_duplicated_cli_args(cli_args)\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self.resolve_custom_types([type_name, option_name, spec_option])\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self._merge_duplicated_cli_args(cli_args)\n             self.validate_choices_args(args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n    \"\"\"\n    return self.vars.get(option_name, None)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self.vars = self.vars.copy()\n             self.vars[type_name][option_name] = spec_option\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args,spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_arg_sources()\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._parse_args(arg_parser, args)\n    return self.vars[type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self._merge_duplicated_cli_args(cli_args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n             self.validate_arg_deprecation(cli_args, answer_file_args)\n             self.__init__(self, subparser, vars_dir, defaults_dir, plugin_path)\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self.validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    \""], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                        ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args(command_name, options_spec,\n                                         args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    return self.vars[type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(self, cli_args)\n             self.validate_min_max_args(args)\n             self._merge_duplicated_cli_args(cli_args)\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             self.generate_answers_file(self, cli_args, spec_defaults)\n             self._merge_duplicated_cli_args(cli_args)\n    \"\"\"\n    return self.resolve_custom_types([type_name, option_name, spec_option])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self._merge_duplicated_cli_args(cli_args)\n             self.validate_choices_args(args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n    \"\"\"\n    return self.vars.get(option_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self.validate_arg_sources(args)\n             self.vars = self.vars.copy()\n             self.vars[type_name][option_name] = spec_option\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  the option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args,spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self._get_conditionally_required_args()\n    self._merge_duplicated_cli_args(cli_args)\n    self._merge_duplicated_cli_args(args)\n    self._validate_arg_sources()\n    self._validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._parse_args(arg_parser, args)\n    return self.vars[type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n             and self.generate_answers_file(self, cli_args, spec_defaults)\n             self.validate_min_max_args(self, args)\n             self._merge_duplicated_cli_args(self.parse_args(self, arg_parser, args))\n             self._merge_duplicated_cli_args(cli_args)\n             self._get_conditionally_required_args(command_name, options_spec, args)\n             self.validate_arg_deprecation(cli_args, answer_file_args)\n             self.__init__(self, subparser, vars_dir, defaults_dir, plugin_path)\n    \"\"\"\n    return self.generate_answers_file(cli_args, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance with import string os collections six infrared class self.resolve_custom_types\n                                                                                                                                                                                                                                                                                                                                                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option:  option's specifications\n    :return: the complex type instance with import string os collections\n    six infrared class self.resolve_custom_types\n    self.generate_answers_file(self, cli_args, spec_defaults)\n    self._merge_duplicated_cli_args(self.resolve_custom_types(args))\n    self._merge_duplicated_cli_args(cli_args)\n    self.validate_choices_args(args)\n    self._get_conditionally_required_args()\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._get_conditionally_required_args(command_name, options_spec, args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    self._validate_requires_args(args)\n    \"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    # pylint: disable=no-self-use\n    \"\"\"\n    Split input arguments to control nested and custom.\n    Controls arguments: these arguments will not be put into the spec\n    yml file.\n\n    Nested arguments: are used by the Ansible playbooks and will be\n    put into the spec yml file.\n\n    Custom arguments:\n    Custom ansible variables to be used instead of the normal nested\n    usage.\n\n    :param args: the collected list of args.\n    :return: (dict, dict): flat dicts (control_args, nested_args) with\n    import string os collections six infrared file\n    LOG.info(\"nested_args: %s\", nested_args)\n    \"\"\"\n    return None, None\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('custom', args)\n", "def get_nested_custom_and_control_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    if args.get('--type'):\n        nested_args['type'] = args.get('--type')\n    if args.get('--name'):\n        nested_args['name'] = args.get('--name')\n    if args.get('--path'):\n        nested_args['path'] = args.get('--path')\n    if args.get('--variable-only'):\n        nested_args['variable_only'] = args.get('--variable-only')\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', [])\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, val in args.items():\n        if isinstance(val, dict):\n            nested_args[key] = val\n        elif isinstance(val, list):\n            control_args[key] = val\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name in args:\n        if arg_name in self.vars.keys() and args[arg_name] is not None:\n            nested_args[arg_name] = args[arg_name]\n        elif arg_name in self.vars.keys() and args[arg_name] is None:\n            control_args[arg_name] = None\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        args['custom'] = self.resolve_custom_types(args['custom'])\n    return args, {}\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name, arg in args.items():\n        if arg_name in ['--list']:\n            nested_args['list'] = arg\n        elif arg_name in ['--show-all']:\n            nested_args['list'] = arg\n        elif arg_name in ['--vars']:\n            nested_args['vars'] = arg\n        elif arg_name in ['--defaults']:\n            nested_args['defaults'] = arg\n        elif arg_name in ['--check-only']:\n            nested_args['check_only'] = arg\n        elif arg_name in ['--list-only']:\n            nested_args['list_only'] = arg\n        elif arg_name in self.vars:\n            control_args[arg_name] = self.vars[arg_name]\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('Custom', args), self._get_conditionally_required_args('Control', args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    # pylint: disable=no-self-use\n    \"\"\"\n    Split input arguments to control nested and custom.\n    Controls arguments: these arguments will not be put into the spec\n    yml file.\n\n    Nested arguments: are used by the Ansible playbooks and will be\n    put into the spec yml file.\n\n    Custom arguments:\n    Custom ansible variables to be used instead of the normal nested\n    usage.\n\n    :param args: the collected list of args.\n    :return: (dict, dict): flat dicts (control_args, nested_args) with\n    import string os collections six infrared file\n    LOG.info(\"nested_args: %s\", nested_args)\n    \"\"\"\n    return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('custom', args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    if args.get('--type'):\n        nested_args['type'] = args.get('--type')\n    if args.get('--name'):\n        nested_args['name'] = args.get('--name')\n    if args.get('--path'):\n        nested_args['path'] = args.get('--path')\n    if args.get('--variable-only'):\n        nested_args['variable_only'] = args.get('--variable-only')\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', [])\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, val in args.items():\n        if isinstance(val, dict):\n            nested_args[key] = val\n        elif isinstance(val, list):\n            control_args[key] = val\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name in args:\n        if arg_name in self.vars.keys() and args[arg_name] is not None:\n            nested_args[arg_name] = args[arg_name]\n        elif arg_name in self.vars.keys() and args[arg_name] is None:\n            control_args[arg_name] = None\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        args['custom'] = self.resolve_custom_types(args['custom'])\n    return args, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg_name, arg in args.items():\n        if arg_name in ['--list']:\n            nested_args['list'] = arg\n        elif arg_name in ['--show-all']:\n            nested_args['list'] = arg\n        elif arg_name in ['--vars']:\n            nested_args['vars'] = arg\n        elif arg_name in ['--defaults']:\n            nested_args['defaults'] = arg\n        elif arg_name in ['--check-only']:\n            nested_args['check_only'] = arg\n        elif arg_name in ['--list-only']:\n            nested_args['list_only'] = arg\n        elif arg_name in self.vars:\n            control_args[arg_name] = self.vars[arg_name]\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args('Custom', args), self._get_conditionally_required_args('Control', args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for extra_var in extra_vars:\n            if extra_var not in vars_dict:\n                vars_dict[extra_var] = vars_dict.get('default')\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = dict()\n\n        vars_dict = vars_dict[extra_var]\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(\n        (key, val)\n        for key, val in vars_dict.items()\n        if key not in ('extra-vars', 'extra-vars' + extra_vars)\n    )\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return vars_dict\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '__ENV' not in vars_dict:\n        vars_dict['__ENV'] = dict()\n\n    if '__ENV' not in vars_dict:\n        return vars_dict\n\n    extra_vars_dict = vars_dict['__ENV']\n    if extra_vars:\n        extra_vars_dict.update(extra_vars)\n    vars_dict.update(extra_vars_dict)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if 'vars' not in vars_dict:\n        vars_dict['vars'] = {}\n\n    if 'vars' not in vars_dict:\n        return vars_dict\n\n    merged_vars = vars_dict['vars']\n\n    for extra_var in extra_vars:\n        if extra_var not in merged_vars:\n            merged_vars.append(extra_var)\n\n    vars_dict['vars'].update(merged_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for extra_var in extra_vars:\n            vars_dict.setdefault(extra_var, {})\n\n        for var, val in vars_dict.items():\n            if var not in vars_dict:\n                vars_dict[var] = val\n\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for extra_var in extra_vars:\n            if extra_var not in vars_dict:\n                vars_dict[extra_var] = vars_dict.get('default')\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = dict()\n\n        vars_dict = vars_dict[extra_var]\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(\n        (key, val)\n        for key, val in vars_dict.items()\n        if key not in ('extra-vars', 'extra-vars' + extra_vars)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if vars_dict is None:\n        return vars_dict\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '__ENV' not in vars_dict:\n        vars_dict['__ENV'] = dict()\n\n    if '__ENV' not in vars_dict:\n        return vars_dict\n\n    extra_vars_dict = vars_dict['__ENV']\n    if extra_vars:\n        extra_vars_dict.update(extra_vars)\n    vars_dict.update(extra_vars_dict)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if 'vars' not in vars_dict:\n        vars_dict['vars'] = {}\n\n    if 'vars' not in vars_dict:\n        return vars_dict\n\n    merged_vars = vars_dict['vars']\n\n    for extra_var in extra_vars:\n        if extra_var not in merged_vars:\n            merged_vars.append(extra_var)\n\n    vars_dict['vars'].update(merged_vars)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for extra_var in extra_vars:\n            vars_dict.setdefault(extra_var, {})\n\n        for var, val in vars_dict.items():\n            if var not in vars_dict:\n                vars_dict[var] = val\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                          workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                       to Ansible. with import tempfile redatetime sys json\n                       distutils os errno main datetime infrared ansible file\n                       LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = _run_playbook(cli_args, vars_dict=extra_vars,\n                            ir_workspace=ir_workspace, i", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n    cli_args = {}\n    if extra_vars:\n        cli_args.update(extra_vars)\n    cli_args.update(ansible", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json distutils\n        os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    ansible_args = ansible_args or {}\n    ir_workspace = ir_workspace.get_name()\n\n    LOG.info('Running ansible-playbook on %s', ir_workspace)\n    return _run_playbook(cli_args, vars_dict=ansible_args, ir_workspace=ir_workspace,\n                         ir_plugin=ir_plugin, playbook_path=playbook_path,\n             ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                         workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible. with import tempfile redatetime\n                         sys json distutils os errno main datetime infrared\n                         ansible file\n    LOG:  Ansible verbosity\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible.\n    \"\"\"\n    return _run_playbook(cli_args", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n    LOG.debug(\"Calling ansible-playbook.\")\n    return _run_playbook(\n        cli_args=ansible_args, vars_dict=extra_va", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                         workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible. with import tempfile redatetime\n                         sys json distutils os errno main datetime infrared\n                         ansible file\n    LOG\n    \"\"\"\n    import ansible\n    env = ansible.utils.get_env()\n\n    log = logging.getLogger(__name__)\n    log.info('Invoking ansible-playbook on path %s', playbook_path)\n\n    return _run_playbook(cli", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = vars(ir_plugin)\n    cli_args.update(extra_vars or {})\n    return _run_playbook(cli_args, vars_dict=ir_plugin.ansible_vars,\n                          ir_workspace=ir_workspace,\n                     ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    cli_args = ['ansible-playbook', playbook_path]\n    cli_args.extend(extra_vars or {})\n    cli_args.extend(ansible_args or {})\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n    LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n\n    cli_args = []\n    if ir_workspace:\n        cli_args.extend(['-w', ir_workspace.name])\n\n    cli_args.extend(['-n', ir_plugin.name])\n    cli_ar", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n        ansible_playbook(ir_workspace,ir_plugin,playbook_path,verbose,extra_vars,ansible_args)\n    \"\"\"\n    LOG.debug('Invoking Ansible playbook %s', playbook_path)\n\n    return _run_playbook(cli_args, vars_dict={\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n        "], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                          workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n                       to Ansible. with import tempfile redatetime sys json\n                       distutils os errno main datetime infrared ansible file\n                       LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = _run_playbook(cli_args, vars_dict=extra_vars,\n                            ir_workspace=ir_workspace, i", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n    cli_args = {}\n    if extra_vars:\n        cli_args.update(extra_vars)\n    cli_args.update(ansible", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json distutils\n        os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    ansible_args = ansible_args or {}\n    ir_workspace = ir_workspace.get_name()\n\n    LOG.info('Running ansible-playbook on %s', ir_workspace)\n    return _run_playbook(cli_args, vars_dict=ansible_args, ir_workspace=ir_workspace,\n                         ir_plugin=ir_plugin, playbook_path=playbook_path,\n             ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                         workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible. with import tempfile redatetime\n                         sys json distutils os errno main datetime infrared\n                         ansible file\n    LOG:  Ansible verbosity\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible.\n    \"\"\"\n    return _run_playbook(cli_args", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n    \"\"\"\n    LOG.debug(\"Calling ansible-playbook.\")\n    return _run_playbook(\n        cli_args=ansible_args, vars_dict=extra_va", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                         workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                         directly to Ansible. with import tempfile redatetime\n                         sys json distutils os errno main datetime infrared\n                         ansible file\n    LOG\n    \"\"\"\n    import ansible\n    env = ansible.utils.get_env()\n\n    log = logging.getLogger(__name__)\n    log.info('Invoking ansible-playbook on path %s', playbook_path)\n\n    return _run_playbook(cli", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    \"\"\"\n    cli_args = vars(ir_plugin)\n    cli_args.update(extra_vars or {})\n    return _run_playbook(cli_args, vars_dict=ir_plugin.ansible_vars,\n                          ir_workspace=ir_workspace,\n                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n    \"\"\"\n    cli_args = ['ansible-playbook', playbook_path]\n    cli_args.extend(extra_vars or {})\n    cli_args.extend(ansible_args or {})\n    return _run_playbook(cli_args, ir_workspace, ir_plugin, verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible. with import tempfile redatetime sys json distutils os errno\n        main datetime infrared ansible file\n    LOG\n    :param _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin)\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n\n    cli_args = []\n    if ir_workspace:\n        cli_args.extend(['-w', ir_workspace.name])\n\n    cli_args.extend(['-n', ir_plugin.name])\n    cli_ar", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible. with import tempfile redatetime sys json\n        distutils os errno main datetime infrared ansible file\n        LOG\n        ansible_playbook(ir_workspace,ir_plugin,playbook_path,verbose,extra_vars,ansible_args)\n    \"\"\"\n    LOG.debug('Invoking Ansible playbook %s', playbook_path)\n\n    return _run_playbook(cli_args, vars_dict={\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['results'] = []\n\n    if cli_args.list_hosts:\n        ansible_results['results'] = ir_workspace.list_hosts()\n        return ansible_results\n\n    if cli_args.list_vars:\n        ansible_results['results'] = ir_workspace.list_vars(vars_dict)\n        return ansible_results\n\n    ansible_results['results'] = ir_plugin.run_playbook(cli_args, vars_dict)\n    return ansible_results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.infrared_cli_runner.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict()\n    ansible_vars['ansible_connection'] = ir_workspace.connection\n    ansible_vars['ansible_ssh_private_key_file'] = ir_workspace.ssh_key_file\n    ansible_vars['ansible_verbosity'] = ir_workspace.verbosity\n\n    # run cli\n    return cli_args, cli_vars_dict, ansible_vars\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.get_vars())\n\n    return cli_args, ansible_vars, ir_workspace, ir_plugin\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    logger.info('Run playbook with vars dict')\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_vars_dict)\n    return cli_args, cli_main(cli_args, vars_dict, ir_workspace, ir_plugin, ansible_vars)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_result = dict()\n    ansible_result['cli_result'] = dict()\n    ansible_result['cli_result']['result'] = dict()\n    ansible_result['cl", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars['ansible_connection'] = ir_workspace.connection\n    ansible_vars['ansible_verbosity'] = ir_workspace.verbosity\n    ansible_vars['ansible_extra_vars'] = cli_args\n    ansible_vars['ir_plugin'] = ir_plugin\n    return ansible.AnsibleRunner(ansible_vars, ir_workspace, ir_plugin).run()\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict(vars_dict)\n    ansible_vars.update(ir_workspace.get_vars())\n    ansible_vars.update(ir_plugin.get_vars())\n    ansible_results = cli.runner(cli_args, ansible_vars)\n    return ansible_results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = ['ansible'] + cli_args\n    ansible_results = {}\n    for arg in cli_args:\n        ansible_results[arg] = None\n        if arg in vars_dict:\n            ansible_results[arg] = vars_dict[arg]\n            del vars_dict[arg]\n        else:\n            ansible_results[arg] = ir_workspace.get_var(arg, ir_plugin.name)\n            if arg in ir_workspace.inventory:\n                ansible_results[arg] = ir_workspace.inventory[arg]\n            if ir_plugin.playbook_vars:\n                ansible_results[arg] = ir_workspace.playbook_vars[arg]\n            if ir_plugin.vars_extra:\n                ansible_results[arg] = ir_plugin.vars_extra[arg]\n            if ir_workspace.vars_extra:\n                ansible_results[arg] = ir_workspace.vars_extra[arg]\n   "], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = dict()\n    ansible_results['results'] = []\n\n    if cli_args.list_hosts:\n        ansible_results['results'] = ir_workspace.list_hosts()\n        return ansible_results\n\n    if cli_args.list_vars:\n        ansible_results['results'] = ir_workspace.list_vars(vars_dict)\n        return ansible_results\n\n    ansible_results['results'] = ir_plugin.run_playbook(cli_args, vars_dict)\n    return ansible_results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.infrared_cli_runner.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict()\n    ansible_vars['ansible_connection'] = ir_workspace.connection\n    ansible_vars['ansible_ssh_private_key_file'] = ir_workspace.ssh_key_file\n    ansible_vars['ansible_verbosity'] = ir_workspace.verbosity\n\n    # run cli\n    return cli_args, cli_vars_dict, ansible_vars\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.get_vars())\n\n    return cli_args, ansible_vars, ir_workspace, ir_plugin\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    logger.info('Run playbook with vars dict')\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_vars_dict)\n    return cli_args, cli_main(cli_args, vars_dict, ir_workspace, ir_plugin, ansible_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results with Runs ansible cli with vars dict\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_result = dict()\n    ansible_result['cli_result'] = dict()\n    ansible_result['cli_result']['result'] = dict()\n    ansible_result['cl", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars['ansible_connection'] = ir_workspace.connection\n    ansible_vars['ansible_verbosity'] = ir_workspace.verbosity\n    ansible_vars['ansible_extra_vars'] = cli_args\n    ansible_vars['ir_plugin'] = ir_plugin\n    return ansible.AnsibleRunner(ansible_vars, ir_workspace, ir_plugin).run()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict(vars_dict)\n    ansible_vars.update(ir_workspace.get_vars())\n    ansible_vars.update(ir_plugin.get_vars())\n    ansible_results = cli.runner(cli_args, ansible_vars)\n    return ansible_results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = ['ansible'] + cli_args\n    ansible_results = {}\n    for arg in cli_args:\n        ansible_results[arg] = None\n        if arg in vars_dict:\n            ansible_results[arg] = vars_dict[arg]\n            del vars_dict[arg]\n        else:\n            ansible_results[arg] = ir_workspace.get_var(arg, ir_plugin.name)\n            if arg in ir_workspace.inventory:\n                ansible_results[arg] = ir_workspace.inventory[arg]\n            if ir_plugin.playbook_vars:\n                ansible_results[arg] = ir_workspace.playbook_vars[arg]\n            if ir_plugin.vars_extra:\n                ansible_results[arg] = ir_plugin.vars_extra[arg]\n            if ir_workspace.vars_extra:\n                ansible_results[arg] = ir_workspace.vars_extra[arg]\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if not isinstance(value, six.string_types):\n            values_dict[key] = self.vars.get(key, '')\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if v is None:\n            values_dict.pop(k, None)\n        elif k in self.required and k not in self.vars:\n            raise ValueError('Missing required argument %s' % k)\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts + parser_name._long_opts:\n        if arg in values_dict and isinstance(values_dict[arg], six.string_types):\n            values_dict[arg] = [values_dict[arg]]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in args:\n        if arg in values_dict:\n            values_dict[arg] = self.resolve_custom_types(values_dict[arg])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_obj in vars(args).items():\n        if not arg_obj or arg_name in self.required_arguments:\n            continue\n\n        values_dict[arg_name] = arg_obj\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg in vars(parser_name).items():\n        if arg_name not in self.vars and arg is not None:\n            values_dict[arg_name] = arg\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name._argparser_class.parser_class._actions[parser_name.__name__]).items():\n        if isinstance(arg_value, (list, tuple)):\n            new_value = []\n            for item in arg_value:\n                if isinstance(item, six.string_types):\n                    new_value.append(item)\n                elif item is not None:\n                    new_value.append(item)\n            values_dict[arg_name] = new_value\n        else:\n            values_dict[arg_name] = arg_value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if isinstance(arg_spec, dict):\n            # It's already a dict, no need to do anything\n            continue\n\n        if arg_spec.get('type') =='string':\n            values_dict[arg_name] = self.resolve_custom_types(arg_spec, {})\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if isinstance(v, six.string_types):\n            values_dict[k] = {\"value\": v, \"type\": \"string\"}\n        elif isinstance(v, list):\n            values_dict[k] = {\"value\": v, \"type\": \"list\"}\n        elif isinstance(v, dict):\n            values_dict[k] = {\"value\": v, \"type\": \"dict\"}\n        else:\n            pass\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if isinstance(value, six.string_types):\n            values_dict[key] = self.resolve_custom_types(value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if not isinstance(value, six.string_types):\n            values_dict[key] = self.vars.get(key, '')\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if v is None:\n            values_dict.pop(k, None)\n        elif k in self.required and k not in self.vars:\n            raise ValueError('Missing required argument %s' % k)\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts + parser_name._long_opts:\n        if arg in values_dict and isinstance(values_dict[arg], six.string_types):\n            values_dict[arg] = [values_dict[arg]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in args:\n        if arg in values_dict:\n            values_dict[arg] = self.resolve_custom_types(values_dict[arg])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_obj in vars(args).items():\n        if not arg_obj or arg_name in self.required_arguments:\n            continue\n\n        values_dict[arg_name] = arg_obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg in vars(parser_name).items():\n        if arg_name not in self.vars and arg is not None:\n            values_dict[arg_name] = arg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in vars(parser_name._argparser_class.parser_class._actions[parser_name.__name__]).items():\n        if isinstance(arg_value, (list, tuple)):\n            new_value = []\n            for item in arg_value:\n                if isinstance(item, six.string_types):\n                    new_value.append(item)\n                elif item is not None:\n                    new_value.append(item)\n            values_dict[arg_name] = new_value\n        else:\n            values_dict[arg_name] = arg_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if isinstance(arg_spec, dict):\n            # It's already a dict, no need to do anything\n            continue\n\n        if arg_spec.get('type') =='string':\n            values_dict[arg_name] = self.resolve_custom_types(arg_spec, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in vars(values_dict).items():\n        if isinstance(v, six.string_types):\n            values_dict[k] = {\"value\": v, \"type\": \"string\"}\n        elif isinstance(v, list):\n            values_dict[k] = {\"value\": v, \"type\": \"list\"}\n        elif isinstance(v, dict):\n            values_dict[k] = {\"value\": v, \"type\": \"dict\"}\n        else:\n            pass\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in six.iteritems(values_dict):\n        if isinstance(value, six.string_types):\n            values_dict[key] = self.resolve_custom_types(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.exists(plugin_dir):\n        return {}\n\n    properties_file = os.path.join(plugin_dir, PLUGIN_SPEC_FILE)\n    properties = {}\n    if os.path.exists(properties_file):\n        with open(properties_file, 'r') as file:\n            try:\n                properties = yaml.safe_load(file.read())\n            except yaml.YAMLError as exc:\n                print('Unable to load YAML file {0}'.format(properties_file))\n                raise exc\n    return properties\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir)] for value in sub_dict.values()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"@module\": \"koji.plugins.%s\" % plugin_dir,\n        \"@class\": \"koji.plugins.%s\" % plugin_dir,\n        \"plugin\": None,\n        \"properties\": {}\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict([(key, value) for key, value in utils.get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith('_')])\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.isdir(plugin_dir):\n        return {}\n\n    result = {}\n    for (dirpath, _, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                filepath = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = imp.spec_from_file_location(filepath, plugin_dir)\n                    module = imp.load_module(plugin_dir, spec_dict, filepath, None, '.py')\n                    result.update(module.__dict__)\n                except ImportError as e:\n                    print(e)\n\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    if os.path.isdir(plugin_dir):\n        for filename in os.listdir(plugin_dir):\n            if os.path.splitext(filename)[1] == '.py':\n                module_name = os.path.splitext(filename)[0]\n                module = importlib.import_module(module_name)\n                flat_dict[module_name] = module.__dict__\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith(\".py\") and \"__\" not in filename:\n            properties_dict = {}\n            with open(os.path.join(plugin_dir, filename), \"r\") as properties_file:\n                properties_dict = {**properties_dict, **_load_yaml(properties_file)}\n            flat_dict[filename[:-3]] = properties_dict\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, _, files in os.walk(plugin_dir):\n        for file_name in files:\n            if file_name.endswith(\".py\") and \"__init__\" not in file_name:\n                result[file_name[:-3]] = True\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for file in files:\n            if file.endswith(\".py\"):\n                file_path = os.path.join(root, file)\n                if not file_path.startswith(\"__pyclasspath__\"):\n                    spec_file_content = open(file_path).read()\n                    module_spec = spec.ModuleSpec(\n                        spec_file_content,\n                        None,\n                        {\"__file__\": file_path}\n                    )\n                    plugin_spec_dict = dict(plugin_spec_dict.items() + module_spec.properties.items())\n\n    return plugin_spec_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.exists(plugin_dir):\n        return {}\n\n    properties_file = os.path.join(plugin_dir, PLUGIN_SPEC_FILE)\n    properties = {}\n    if os.path.exists(properties_file):\n        with open(properties_file, 'r') as file:\n            try:\n                properties = yaml.safe_load(file.read())\n            except yaml.YAMLError as exc:\n                print('Unable to load YAML file {0}'.format(properties_file))\n                raise exc\n    return properties\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir)] for value in sub_dict.values()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"@module\": \"koji.plugins.%s\" % plugin_dir,\n        \"@class\": \"koji.plugins.%s\" % plugin_dir,\n        \"plugin\": None,\n        \"properties\": {}\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict([(key, value) for key, value in utils.get_plugin_spec_flatten_dict(plugin_dir).items() if not key.startswith('_')])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.isdir(plugin_dir):\n        return {}\n\n    result = {}\n    for (dirpath, _, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                filepath = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = imp.spec_from_file_location(filepath, plugin_dir)\n                    module = imp.load_module(plugin_dir, spec_dict, filepath, None, '.py')\n                    result.update(module.__dict__)\n                except ImportError as e:\n                    print(e)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    if os.path.isdir(plugin_dir):\n        for filename in os.listdir(plugin_dir):\n            if os.path.splitext(filename)[1] == '.py':\n                module_name = os.path.splitext(filename)[0]\n                module = importlib.import_module(module_name)\n                flat_dict[module_name] = module.__dict__\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith(\".py\") and \"__\" not in filename:\n            properties_dict = {}\n            with open(os.path.join(plugin_dir, filename), \"r\") as properties_file:\n                properties_dict = {**properties_dict, **_load_yaml(properties_file)}\n            flat_dict[filename[:-3]] = properties_dict\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, _, files in os.walk(plugin_dir):\n        for file_name in files:\n            if file_name.endswith(\".py\") and \"__init__\" not in file_name:\n                result[file_name[:-3]] = True\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for file in files:\n            if file.endswith(\".py\"):\n                file_path = os.path.join(root, file)\n                if not file_path.startswith(\"__pyclasspath__\"):\n                    spec_file_content = open(file_path).read()\n                    module_spec = spec.ModuleSpec(\n                        spec_file_content,\n                        None,\n                        {\"__file__\": file_path}\n                    )\n                    plugin_spec_dict = dict(plugin_spec_dict.items() + module_spec.properties.items())\n\n    return plugin_spec_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    self._create_ansible_config(self.ansible_config_path)\n", "def inject_config(self):\n    env_path = self._get_ansible_conf_path()\n\n    if os.path.exists(env_path):\n        if not os.environ.get('INFRENTAL_CONFIG'):\n            os.environ['INFRENTAL_CONFIG'] = env_path\n    else:\n        os.environ['INFRENTAL_CONFIG'] = env_path\n", "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    os.environ['INFRACTAL_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if not os.environ.get('INFRANRAD_CONFIG'):\n        self.ansible_config_path = self._get_ansible_conf_path(\n            infrared_home=os.environ.get('INFRANRAD_HOME'))\n", "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        self.ansible_config_path = self._get_ansible_conf_path(\n            infrared_home=self.infrared_home\n        )\n", "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    os.environ['INFRENTAL_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if self.ansible_config_path is not None:\n        return os.environ.setdefault(\n            'INFRANCHASED_CONFIG_PATH', self.ansible_config_path\n        )\n", "def inject_config(self):\n    if not os.getenv(INFrared_CONFIG_PATH):\n        os.environ[INFrared_CONFIG_PATH] = self.ansible_config_path\n", "def inject_config(self):\n    if self.ansible_config_path:\n        return\n\n    self._create_ansible_config(infrared_home=self.infrared_home)\n", "def inject_config(self):\n    ansible_config_path = self._get_ansible_conf_path(self.infrared_home)\n\n    if not os.environ.get('INFRENTAL_CONFIG'):\n        os.environ['INFRENTAL_CONFIG'] = ansible_config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    self._create_ansible_config(self.ansible_config_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    env_path = self._get_ansible_conf_path()\n\n    if os.path.exists(env_path):\n        if not os.environ.get('INFRENTAL_CONFIG'):\n            os.environ['INFRENTAL_CONFIG'] = env_path\n    else:\n        os.environ['INFRENTAL_CONFIG'] = env_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    os.environ['INFRACTAL_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not os.environ.get('INFRANRAD_CONFIG'):\n        self.ansible_config_path = self._get_ansible_conf_path(\n            infrared_home=os.environ.get('INFRANRAD_HOME'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        self.ansible_config_path = self._get_ansible_conf_path(\n            infrared_home=self.infrared_home\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is None:\n        return\n\n    os.environ['INFRENTAL_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path is not None:\n        return os.environ.setdefault(\n            'INFRANCHASED_CONFIG_PATH', self.ansible_config_path\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not os.getenv(INFrared_CONFIG_PATH):\n        os.environ[INFrared_CONFIG_PATH] = self.ansible_config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.ansible_config_path:\n        return\n\n    self._create_ansible_config(infrared_home=self.infrared_home)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    ansible_config_path = self._get_ansible_conf_path(self.infrared_home)\n\n    if not os.environ.get('INFRENTAL_CONFIG'):\n        os.environ['INFRENTAL_CONFIG'] = ansible_config_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    # Add the inventory argument to the CLI options\n    parser.add_argument('--inventory',\n                        nargs='?',\n                        required=True,\n                        help='The path to the inventory file to use. '\n                             'Defaults to the working directory '\n                             '(pkg://pbr/infrared).')\n\n    # Add the workspace argument to the CLI options\n    parser.add_argument('--workspace',\n                        nargs='?',\n                        required=True,\n                        help='The path to the workspace to use. '\n                             'Defaults to the working directory '\n    ", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n            Download and parse infrared data from a remote source\n            and store it locally in a zip file on the remote host.\n        '''\n    )\n    parser.set_defaults(workspace_manager=self.workspace_manager)\n\n    self._fetch_inventory = parser.add_parser(\n        'fetch',\n        help='Download and parse infrared data from a remote source'\n    )\n    self._fetch_inventory.add_argument(\n        'url',\n        help='URL to download data from.'\n    )\n    self._fetch_inventory.add_argument(\n        '--workspace',\n        help='The workspace to store the data in.'\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Updates the infrared inventory from the current or specified inventory.\n        '''\n    )\n    self._fetch_inventory(parser.name)\n    parser.set_defaults(func=self._fetch_inventory)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n\n    parser.add_argument('--inventory', default=None, required=False,\n                        help='Full path to the inventory file.')\n    parser.add_argument('--ssh-key', default=None, required=False,\n                        help='SSH key file to use for invoking the infrared command.')\n    parser.add_argument('--ssh-key-file', default=None, required=False,\n                        help='SSH key file to use for invoking the infrared command.')\n    parser.add_argument('--workspace', default=None, required=False,\n                        help='Workspace name to use for the infrared command.')\n    parser.add_argument('--update-status', action='store_true',\n                        help='Update the infrared status of the current workspace.')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared related commands')\n    parser.add_argument('--inventory', help='Spec inventory file to use.',\n                        default=self._fetch_inventory())\n    parser.add_argument('--workspace', help='Spec workspace to use.',\n                        default=self._create_workspace(self.name))\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared Sensor Analyzer')\n    self.spec_handler(parser, self.kwargs)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    self._fetch_inventory(name=parser.prog)\n    self._checkout_workspace(name=parser.prog)\n    parser.set_defaults(workspace=self._checkout_workspace(name=parser.prog))\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description='An infrared instance or workspace',\n        formatter_class=HelpFormatter,\n        help='An infrared instance or workspace'\n    )\n\n    self._checkout_workspace(self.name, create=False)\n    self._fetch_inventory(self.name)\n    self._create_workspace(self.name)\n    self._fetch_inventory(self.name)\n    self._create_workspace(self.name)\n\n    parser.add_argument('--debug', action='store_true',\n                        help='Enables debug output.')\n    parser.add_argument('--quiet', action='store_true',\n                        help='Enables quiet output.')\n    parser.add_argument('--verbose', action='store_true',\n                        help='Enables verbose output.')\n    parser.add_argument('--version', action='store_true',\n                        help='Displays th", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    self.spec_handler(parser, self.kwargs)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='manage infrared specs')\n    parser.add_argument('--infra-name', type=str, required=True, help='infra-name')\n    parser.add_argument('--infra-owner', type=str, required=True, help='infra-owner')\n    parser.add_argument('--infra-repo', type=str, required=True, help='infra-repo')\n    parser.add_argument('--infra-revision', type=str, required=True, help='infra-revision')\n    parser.add_argument('--infra-ssh-url', type=str, required=True, help='infra-ssh-url')\n    parser.add_argument('--infra-ssh-key', type=str, required=True, help='infra-ssh-key')\n    parser.add_argument('--infra-git-url', type=str, required=True, help='infra-git-url')\n    parser.add_argument('--infra-git-key', type=str, required=True, help='infra-git-key')\n    parser.add_argument('--in"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    # Add the inventory argument to the CLI options\n    parser.add_argument('--inventory',\n                        nargs='?',\n                        required=True,\n                        help='The path to the inventory file to use. '\n                             'Defaults to the working directory '\n                             '(pkg://pbr/infrared).')\n\n    # Add the workspace argument to the CLI options\n    parser.add_argument('--workspace',\n                        nargs='?',\n                        required=True,\n                        help='The path to the workspace to use. '\n                             'Defaults to the working directory '\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n            Download and parse infrared data from a remote source\n            and store it locally in a zip file on the remote host.\n        '''\n    )\n    parser.set_defaults(workspace_manager=self.workspace_manager)\n\n    self._fetch_inventory = parser.add_parser(\n        'fetch',\n        help='Download and parse infrared data from a remote source'\n    )\n    self._fetch_inventory.add_argument(\n        'url',\n        help='URL to download data from.'\n    )\n    self._fetch_inventory.add_argument(\n        '--workspace',\n        help='The workspace to store the data in.'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='''\n        Updates the infrared inventory from the current or specified inventory.\n        '''\n    )\n    self._fetch_inventory(parser.name)\n    parser.set_defaults(func=self._fetch_inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n\n    parser.add_argument('--inventory', default=None, required=False,\n                        help='Full path to the inventory file.')\n    parser.add_argument('--ssh-key', default=None, required=False,\n                        help='SSH key file to use for invoking the infrared command.')\n    parser.add_argument('--ssh-key-file', default=None, required=False,\n                        help='SSH key file to use for invoking the infrared command.')\n    parser.add_argument('--workspace', default=None, required=False,\n                        help='Workspace name to use for the infrared command.')\n    parser.add_argument('--update-status', action='store_true',\n                        help='Update the infrared status of the current workspace.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared related commands')\n    parser.add_argument('--inventory', help='Spec inventory file to use.',\n                        default=self._fetch_inventory())\n    parser.add_argument('--workspace', help='Spec workspace to use.',\n                        default=self._create_workspace(self.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared Sensor Analyzer')\n    self.spec_handler(parser, self.kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    self._fetch_inventory(name=parser.prog)\n    self._checkout_workspace(name=parser.prog)\n    parser.set_defaults(workspace=self._checkout_workspace(name=parser.prog))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        description='An infrared instance or workspace',\n        formatter_class=HelpFormatter,\n        help='An infrared instance or workspace'\n    )\n\n    self._checkout_workspace(self.name, create=False)\n    self._fetch_inventory(self.name)\n    self._create_workspace(self.name)\n    self._fetch_inventory(self.name)\n    self._create_workspace(self.name)\n\n    parser.add_argument('--debug', action='store_true',\n                        help='Enables debug output.')\n    parser.add_argument('--quiet', action='store_true',\n                        help='Enables quiet output.')\n    parser.add_argument('--verbose', action='store_true',\n                        help='Enables verbose output.')\n    parser.add_argument('--version', action='store_true',\n                        help='Displays th", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.help)\n    self.spec_handler(parser, self.kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='manage infrared specs')\n    parser.add_argument('--infra-name', type=str, required=True, help='infra-name')\n    parser.add_argument('--infra-owner', type=str, required=True, help='infra-owner')\n    parser.add_argument('--infra-repo', type=str, required=True, help='infra-repo')\n    parser.add_argument('--infra-revision', type=str, required=True, help='infra-revision')\n    parser.add_argument('--infra-ssh-url', type=str, required=True, help='infra-ssh-url')\n    parser.add_argument('--infra-ssh-key', type=str, required=True, help='infra-ssh-key')\n    parser.add_argument('--infra-git-url', type=str, required=True, help='infra-git-url')\n    parser.add_argument('--infra-git-key', type=str, required=True, help='infra-git-key')\n    parser.add_argument('--in", "is_pass": false, "return_code": 1}]}
