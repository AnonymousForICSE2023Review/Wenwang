{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number >= 0')\n\n    if tz is None:\n        tz = timezone.utc\n\n    offset = timedelta(microseconds=nanoseconds // 1000)\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds) + offset)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('Nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('Nanoseconds must be greater than 0')\n    if tz is not None and not isinstance(tz, tzinfo):\n        raise ValueError('tz must be a subclass of datetime.tzinfo')\n\n    return datetime.datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds, tz=tz))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError(\"nanoseconds must be an integer\")\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be greater than 0\")\n\n    if tz is None:\n        tz = timezone.utc\n\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return LocalTime.from_nanos(nanoseconds, tz)\n\n    return Time(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return timezone(tz).localize(nanoseconds)\n    return time(nanoseconds / 1000000000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    if isinstance(nanoseconds, int):\n        nanoseconds = timedelta(microseconds=nanoseconds)\n\n    if isinstance(nanoseconds, datetime):\n        return timezone.make_aware(nanoseconds, tz)\n\n    elif isinstance(nanoseconds, date):\n        return nanoseconds.replace(tzinfo=tz)\n\n    elif isinstance(nanoseconds, time):\n        return nanoseconds.timetz()\n\n    elif isinstance(nanoseconds, timedelta):\n        return nanoseconds.total_seconds() // 1000000\n\n    else:\n        raise ValueError(\"Unknown type for nanoseconds: %r\" % nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise TypeError(\"nanoseconds must be an integer\")\n    if not isinstance(tz, tzinfo):\n        raise TypeError(\"tz must be an instance of tzinfo\")\n\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be non-negative\")\n\n    seconds = nanoseconds * (10 ** 6)\n    if tz is not None:\n        return tz.fromutc(seconds).replace(tzinfo=None)\n    else:\n        return datetime.time(hour=seconds // 10, minute=(seconds % 10 * 10) // 5, second=(seconds % 10 * 5 * 10) // 5)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        if not isinstance(tz, timezone.tzinfo):\n            raise TypeError('tz must be a timezone.tzinfo instance.')\n\n    return time(hour=int(nanoseconds / HOUR), minute=int(nanoseconds % MINUTE), second=int(nanoseconds % SECOND),\n                tzinfo=tz)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        raise ValueError('Nanos must be positive number >= 0')\n\n    if tz is None:\n        tz = timezone.utc\n\n    offset = timedelta(microseconds=nanoseconds // 1000)\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds) + offset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError('Nanoseconds must be an integer')\n    if nanoseconds < 0:\n        raise ValueError('Nanoseconds must be greater than 0')\n    if tz is not None and not isinstance(tz, tzinfo):\n        raise ValueError('tz must be a subclass of datetime.tzinfo')\n\n    return datetime.datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    elif not isinstance(tz, pytz.tzinfo):\n        raise ValueError(\"tz must be a pytz.tzinfo instance\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds, tz=tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise ValueError(\"nanoseconds must be an integer\")\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be greater than 0\")\n\n    if tz is None:\n        tz = timezone.utc\n\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return LocalTime.from_nanos(nanoseconds, tz)\n\n    return Time(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return timezone(tz).localize(nanoseconds)\n    return time(nanoseconds / 1000000000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n\n    if isinstance(nanoseconds, int):\n        nanoseconds = timedelta(microseconds=nanoseconds)\n\n    if isinstance(nanoseconds, datetime):\n        return timezone.make_aware(nanoseconds, tz)\n\n    elif isinstance(nanoseconds, date):\n        return nanoseconds.replace(tzinfo=tz)\n\n    elif isinstance(nanoseconds, time):\n        return nanoseconds.timetz()\n\n    elif isinstance(nanoseconds, timedelta):\n        return nanoseconds.total_seconds() // 1000000\n\n    else:\n        raise ValueError(\"Unknown type for nanoseconds: %r\" % nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, int):\n        raise TypeError(\"nanoseconds must be an integer\")\n    if not isinstance(tz, tzinfo):\n        raise TypeError(\"tz must be an instance of tzinfo\")\n\n    if nanoseconds < 0:\n        raise ValueError(\"nanoseconds must be non-negative\")\n\n    seconds = nanoseconds * (10 ** 6)\n    if tz is not None:\n        return tz.fromutc(seconds).replace(tzinfo=None)\n    else:\n        return datetime.time(hour=seconds // 10, minute=(seconds % 10 * 10) // 5, second=(seconds % 10 * 5 * 10) // 5)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.utc\n    else:\n        if not isinstance(tz, timezone.tzinfo):\n            raise TypeError('tz must be a timezone.tzinfo instance.')\n\n    return time(hour=int(nanoseconds / HOUR), minute=int(nanoseconds % MINUTE), second=int(nanoseconds % SECOND),\n                tzinfo=tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return datetime.timedelta(days=value.days)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(days=value.days, seconds=value.seconds,\n                              microseconds=value.microseconds)\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.days * 86400 + value.seconds + (value.microseconds // 1000)\n    raise BadValueError(\"Cannot dehydrate %r of type %s\" % (value, type(value)))\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n\n    return datetime.timedelta(value.seconds + value.days * 24 * 3600)\n", "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.days * 24 * 3600 + value.seconds // 60 // 60 + value.microseconds // 1000 // 10 // 10 * 10\n    raise BadValueError(\"Unable to dehydrate timedelta value %s\" % value)\n", "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.days * 86400 + value.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return datetime.timedelta(days=value.days)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(days=value.days, seconds=value.seconds,\n                              microseconds=value.microseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.days * 86400 + value.seconds + (value.microseconds // 1000)\n    raise BadValueError(\"Cannot dehydrate %r of type %s\" % (value, type(value)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n\n    return datetime.timedelta(value.seconds + value.days * 24 * 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValueError(\"Can't represent negative delta timedelta: %r\" % value)\n\n    return timedelta(seconds=value.seconds + value.days * 24 * 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value.days * 24 * 3600 + value.seconds // 60 // 60 + value.microseconds // 1000 // 10 // 10 * 10\n    raise BadValueError(\"Unable to dehydrate timedelta value %s\" % value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days == 0:\n        return datetime.timedelta(0)\n    return timedelta(days=value.days)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.date()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.date()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return Point(value.x, value.y)\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadDehydrate(\"Can only dehydrate Point data\")\n\n    return value\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadPointData('Point data must be of type {}'.format(Point))\n\n    return value\n", "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coords\n    }\n", "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude)\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadPointData(\"Dehydrate result is not a Point instance.\")\n\n    return value\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return Point(value.x, value.y)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lon': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadDehydrate(\"Can only dehydrate Point data\")\n\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadPointData('Point data must be of type {}'.format(Point))\n\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coords\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'lat': value.latitude,\n        'lng': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise BadPointData(\"Dehydrate result is not a Point instance.\")\n\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__keys\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers_cache[protocol_version]\n\n    return cls._protocol_handlers_cache\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError('protocol_version must be a tuple')\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        1: Bolt1Handler,\n        2: Bolt2Handler,\n        3: Bolt3Handler,\n        4: Bolt4Handler,\n        5: Bolt5Handler,\n        6: Bolt6Handler,\n        7: Bolt7Handler,\n        8: Bolt8Handler,\n        9: Bolt9Handler,\n    }\n\n    if protocol_version is None:\n        return versions\n\n    if protocol_version in versions:\n        return versions[protocol_version]\n\n    # Not supported\n    raise TypeError(\n        'Unsupported protocol version %s. Supported versions are %s' % (\n            protocol_version,\n            ', '.join(versions.keys())\n        )\n    )\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (1, 1): BoltProtocolHandler1,\n        (1, 2, 3, 4, 5): BoltProtocolHandler2,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler3,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler4,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler5,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler6,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler8,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler9,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler10,\n    }\n\n    if protocol_version in version_tuples:\n        return version_tuples[protocol_version]()\n\n    # If protocol_version is None, return all versions\n    return version_tuples\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or cls.VERSION_TUPLE\n    return {version_tuple[0]: version_tuple[1]}\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls._protocol_versions\n\n    if protocol_version is None:\n        return versions\n\n    if isinstance(protocol_version, tuple):\n        return {version: klass for version, klass in versions.items()\n                if version in protocol_version}\n\n    raise TypeError('protocol_version must be a tuple')\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif not isinstance(protocol_version, tuple):\n        raise TypeError('protocol_version must be a tuple')\n    return {\n        version: cls._protocol_handlers.get(version, False)\n        for version in protocol_version\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers_cache[protocol_version]\n\n    return cls._protocol_handlers_cache\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif isinstance(protocol_version, tuple):\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        raise TypeError('protocol_version must be a tuple')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = {\n        1: Bolt1Handler,\n        2: Bolt2Handler,\n        3: Bolt3Handler,\n        4: Bolt4Handler,\n        5: Bolt5Handler,\n        6: Bolt6Handler,\n        7: Bolt7Handler,\n        8: Bolt8Handler,\n        9: Bolt9Handler,\n    }\n\n    if protocol_version is None:\n        return versions\n\n    if protocol_version in versions:\n        return versions[protocol_version]\n\n    # Not supported\n    raise TypeError(\n        'Unsupported protocol version %s. Supported versions are %s' % (\n            protocol_version,\n            ', '.join(versions.keys())\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (1, 1): BoltProtocolHandler1,\n        (1, 2, 3, 4, 5): BoltProtocolHandler2,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler3,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler4,\n        (1, 2, 3, 4, 5, 6): BoltProtocolHandler5,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler6,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler8,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler9,\n        (1, 2, 3, 4, 5, 6, 7): BoltProtocolHandler10,\n    }\n\n    if protocol_version in version_tuples:\n        return version_tuples[protocol_version]()\n\n    # If protocol_version is None, return all versions\n    return version_tuples\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or cls.VERSION_TUPLE\n    return {version_tuple[0]: version_tuple[1]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls._protocol_versions\n\n    if protocol_version is None:\n        return versions\n\n    if isinstance(protocol_version, tuple):\n        return {version: klass for version, klass in versions.items()\n                if version in protocol_version}\n\n    raise TypeError('protocol_version must be a tuple')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    elif not isinstance(protocol_version, tuple):\n        raise TypeError('protocol_version must be a tuple')\n    return {\n        version: cls._protocol_handlers.get(version, False)\n        for version in protocol_version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout)\n            return tx.run(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            metadata = metadata or {}\n            timeout = timeout or self._config.timeout\n            timeout = metadata.get('timeout', timeout)\n            with self.dbms.begin() as connection:\n                result = f(connection, *args, **kw)\n                log.debug(\"Executing transaction with timeout %s for %s\", timeout, f.__name__)\n                connection.setTimeout(timeout)\n                return result\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = dbms.beginTransaction(tx_metadata=metadata, tx_timeout=timeout)\n            try:\n                result = func(*args, **kw)\n                dbms.commitTransaction(tx)\n                return result\n            finally:\n                dbms.rollbackTransaction()\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.beginTransaction(tx_id=dbms.getUniqueString())\n            try:\n                result = f(*args, **kwargs)\n            finally:\n                dbms.commitTransaction(tx)\n            return result\n        return wrapped\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = True\n        f.__metadata__ = metadata\n        f.__timeout__ = timeout\n        return f\n\n    return inner\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with dbms.transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped if metadata is None else wrapper(metadata)(f)\n    return wrapper\n", "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or dbms.getTxnTimeout(metadata)\n            result = f(*args, **kwargs)\n            dbms.setTxnTimeout(metadata, timeout)\n            return result\n        return wrapped\n    return wrapper\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def _wrapper(f):\n        def _wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n        _wrapped.timeout = timeout\n        _wrapped.metadata = metadata\n        return _wrapped\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            tx = _UnitOfWorkTransaction(func, metadata, timeout)\n            return tx.run(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            self = args[0]\n            metadata = metadata or {}\n            timeout = timeout or self._config.timeout\n            timeout = metadata.get('timeout', timeout)\n            with self.dbms.begin() as connection:\n                result = f(connection, *args, **kw)\n                log.debug(\"Executing transaction with timeout %s for %s\", timeout, f.__name__)\n                connection.setTimeout(timeout)\n                return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            tx = dbms.beginTransaction(tx_metadata=metadata, tx_timeout=timeout)\n            try:\n                result = func(*args, **kw)\n                dbms.commitTransaction(tx)\n                return result\n            finally:\n                dbms.rollbackTransaction()\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = dbms.get_transaction_default_timeout()\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            tx = dbms.beginTransaction(tx_id=dbms.getUniqueString())\n            try:\n                result = f(*args, **kwargs)\n            finally:\n                dbms.commitTransaction(tx)\n            return result\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def inner(f):\n        f.__unit_of_work__ = True\n        f.__metadata__ = metadata\n        f.__timeout__ = timeout\n        return f\n\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            with transaction.manager:\n                result = func(*args, **kw)\n            return result\n\n        if metadata is not None:\n            wrapper.__neo4j_metadata__ = metadata\n        if timeout is not None:\n            with transaction.manager:\n                transaction.manager.setTimeout(timeout)\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kw):\n            with Transaction(metadata, timeout):\n                return func(*args, **kw)\n\n        return wrapped\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*args, **kwargs):\n            with dbms.transaction(timeout):\n                return f(*args, **kwargs)\n        return wrapped if metadata is None else wrapper(metadata)(f)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def wrapper(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            metadata = metadata or {}\n            timeout = timeout or dbms.getTxnTimeout(metadata)\n            result = f(*args, **kwargs)\n            dbms.setTxnTimeout(metadata, timeout)\n            return result\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    return [record[key] for record in self._records for key in keys]\n", "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "def values(self, *keys):\n    return [record[self.index(key)] for record in self if self.index(key) in keys]\n", "def values(self, *keys):\n\n    return [record.value for record in self._records if (\n        keys is None or record.index in keys)]\n", "def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "def values(self, *keys):\n\n    return [item[1] for item in self._items(keys)]\n", "def values(self, *keys):\n    return [record.value for record in self._records\n            if ((keys is None or record.index in keys) and\n                (record.index is None or record.key in keys))]\n", "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "def values(self, *keys):\n\n    return [item[1] for item in self._items(keys)]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    return [record[key] for record in self._records for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, k) for k in keys] if keys else [getattr(self, k) for k in self]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [record[self.index(key)] for record in self if self.index(key) in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n\n    return [record.value for record in self._records if (\n        keys is None or record.index in keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [record.value for record in self.itervalues(*keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n\n    return [item[1] for item in self._items(keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [record.value for record in self._records\n            if ((keys is None or record.index in keys) and\n                (record.index is None or record.key in keys))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [item[1] for item in self._items(keys)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n\n    return [item[1] for item in self._items(keys)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: self[k] for k in keys if k in self}\n", "def data(self, *keys):\n    return dict(zip(keys, self[keys]))\n", "def data(self, *keys):\n\n    if len(keys) == 0:\n        return dict(zip(self.fields, self))\n\n    if len(keys) == 1:\n        if keys[0] in self:\n            return dict(zip(self.fields, self[keys[0]]))\n        else:\n            raise IndexError('Value index out of bounds')\n\n    result = {}\n    for k in keys:\n        result[k] = self[k]\n\n    return result\n", "def data(self, *keys):\n    r = {}\n    for key in keys:\n        if key >= len(self) or key < 0:\n            raise IndexError(\"Index out of bounds\")\n        r[key] = getattr(self, key)\n    return r\n", "def data(self, *keys):\n    if len(keys) == 0:\n        return {k: v for k, v in self.items() if v is not None}\n    return {k: v for k, v in self.items() if k in keys}\n", "def data(self, *keys):\n\n    if len(keys) == 0:\n        return dict(zip(self.fields, self))\n\n    result = {}\n    for key in keys:\n        if key in self.fields:\n            result[key] = self[key]\n        else:\n            raise IndexError('Key {} out of bounds'.format(repr(key)))\n    return result\n", "def data(self, *keys):\n\n    if len(keys) == 0:\n        return {k: v for k, v in dict.items(self)}\n    elif len(keys) == 1:\n        if not isinstance(keys[0], int):\n            raise TypeError('Record keys must be integers, not {}'.format(keys[0].__class__.__name__))\n        if keys[0] >= self.__len__():\n            raise IndexError('Record index out of bounds')\n        return dict.__getitem__(self, keys[0])\n    else:\n        return dict(zip(keys, dict.__getitem__(self, keys)))\n", "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k >= len(self):\n            raise IndexError(\"Record index out of bounds\")\n        r[k] = getattr(self, k)\n    return r\n", "def data(self, *keys):\n    if len(keys) == 0:\n        return dict((k, self[k]) for k in self)\n    elif len(keys) == 1:\n        try:\n            return dict((k, self[keys[0]]) for k in keys)\n        except KeyError:\n            raise IndexError('Record contained no values for key %r' % keys[0])\n    else:\n        rv = {}\n        for k in keys:\n            rv[k] = self[k]\n        return rv\n", "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k is None:\n            r[k] = None\n        else:\n            r[k] = self[k]\n    return r\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in keys if k in self}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(keys, self[keys]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\n    if len(keys) == 0:\n        return dict(zip(self.fields, self))\n\n    if len(keys) == 1:\n        if keys[0] in self:\n            return dict(zip(self.fields, self[keys[0]]))\n        else:\n            raise IndexError('Value index out of bounds')\n\n    result = {}\n    for k in keys:\n        result[k] = self[k]\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    r = {}\n    for key in keys:\n        if key >= len(self) or key < 0:\n            raise IndexError(\"Index out of bounds\")\n        r[key] = getattr(self, key)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if len(keys) == 0:\n        return {k: v for k, v in self.items() if v is not None}\n    return {k: v for k, v in self.items() if k in keys}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\n    if len(keys) == 0:\n        return dict(zip(self.fields, self))\n\n    result = {}\n    for key in keys:\n        if key in self.fields:\n            result[key] = self[key]\n        else:\n            raise IndexError('Key {} out of bounds'.format(repr(key)))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\n    if len(keys) == 0:\n        return {k: v for k, v in dict.items(self)}\n    elif len(keys) == 1:\n        if not isinstance(keys[0], int):\n            raise TypeError('Record keys must be integers, not {}'.format(keys[0].__class__.__name__))\n        if keys[0] >= self.__len__():\n            raise IndexError('Record index out of bounds')\n        return dict.__getitem__(self, keys[0])\n    else:\n        return dict(zip(keys, dict.__getitem__(self, keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k >= len(self):\n            raise IndexError(\"Record index out of bounds\")\n        r[k] = getattr(self, k)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if len(keys) == 0:\n        return dict((k, self[k]) for k in self)\n    elif len(keys) == 1:\n        try:\n            return dict((k, self[keys[0]]) for k in keys)\n        except KeyError:\n            raise IndexError('Record contained no values for key %r' % keys[0])\n    else:\n        rv = {}\n        for k in keys:\n            rv[k] = self[k]\n        return rv\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    r = {}\n    for k in keys:\n        if k is None:\n            r[k] = None\n        else:\n            r[k] = self[k]\n    return r\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    return self.data.pop() << 16 | self.data.pop()\n", "def pop_u16(self):\n    r\"\"\"\n    class self.used\n    self.data = self.data[2:]\n    return self.data\n    \"\"\"\n    if len(self.data) > 0:\n        return self.data[0:2]\n    else:\n        return None\n", "def pop_u16(self):\n    r\"\"\"\n    class self.used\n    self.data = self.data[2:]\n    return self.data\n    \"\"\"\n    if len(self.data) < 2:\n        raise ValueError(\"Cannot pop from an empty Decoded Vector\")\n    self.used += 2\n    return self.data[:2]\n", "def pop_u16(self):\n    return self.data.pop() << 16 | self.data.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 16 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    r\"\"\"\n    class self.used\n    self.data = self.data[2:]\n    return self.data\n    \"\"\"\n    if len(self.data) > 0:\n        return self.data[0:2]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    r\"\"\"\n    class self.used\n    self.data = self.data[2:]\n    return self.data\n    \"\"\"\n    if len(self.data) < 2:\n        raise ValueError(\"Cannot pop from an empty Decoded Vector\")\n    self.used += 2\n    return self.data[:2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop() << 16 | self.data.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    if handlers:\n        raise ValueError(\"Unsupported handlers: %s\" % handlers)\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        dehydration_hoo", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    return Discard(n, qid, dehydration_hooks, hydration_hooks, handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    discard = DiscardResponse(n, qid, dehydration_hooks, hydration_hooks, handlers)\n    self.append(discard)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object (see :func:`response_handlers`)\n    \"\"\"\n    if not handlers:\n        handlers = {}\n    handlers['discard'] = DiscardResponse.from_handlers(handlers)\n    if dehydration_hooks:\n        dehydration_hooks = dehydration_hooks or {}\n        for key, value in dehydration_hooks.items(", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration functions receive the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in the returned Response object\n    \"\"\"\n    if not n:\n        n = -1\n\n    if not qid:\n        qid = self.local_port\n\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n\n    if not hydration_hooks:\n        hydration_hooks = {}", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type Undehydrated\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receives the value of type Undehydrated and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    return Discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                    ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in the returned Response object (dict from type (class) to dehydration function).\n    \"\"\"\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        hydration_hooks = {}\n    if n == -1 and qid == -1:\n        return\n\n    if n == -1:\n        msg = DiscardRecord()\n  "], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from\n        type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type desired by\n        packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from\n        type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to\n        return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    if handlers:\n        raise ValueError(\"Unsupported handlers: %s\" % handlers)\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        dehydration_hoo", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    return Discard(n, qid, dehydration_hooks, hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receive the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    discard = DiscardResponse(n, qid, dehydration_hooks, hydration_hooks, handlers)\n    self.append(discard)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function\n    receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function\n    receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object (see :func:`response_handlers`)\n    \"\"\"\n    if not handlers:\n        handlers = {}\n    handlers['discard'] = DiscardResponse.from_handlers(handlers)\n    if dehydration_hooks:\n        dehydration_hooks = dehydration_hooks or {}\n        for key, value in dehydration_hooks.items(", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type\n        (class) to dehydration function). Dehydration functions receive the\n        value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in the returned Response object\n    \"\"\"\n    if not n:\n        n = -1\n\n    if not qid:\n        qid = self.local_port\n\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n\n    if not hydration_hooks:\n        hydration_hooks = {}", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration functions\n        receives the value and returns an object of type Undehydrated\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration functions\n        receives the value of type Undehydrated and are free to return anything.\n    :param handlers: handlers passed in in the returned Response object\n    \"\"\"\n    return Discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                                                                                                                                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a DISCARD message to the output queue.\n\n    :param n: number of records to discard, default = -1 (ALL)\n    :param qid: query ID to discard for, default = -1 (last query)\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function). Dehydration function receives the value and returns an object of type desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function). Dehydration function receives the value of type desired by packstream and are free to return anything.\n    :param handlers: handler functions passed in the returned Response object (dict from type (class) to dehydration function).\n    \"\"\"\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        hydration_hooks = {}\n    if n == -1 and qid == -1:\n        return\n\n    if n == -1:\n        msg = DiscardRecord()\n  ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_AND_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object containing the result\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout, db,\n            ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)to dehydration function).\n        Dehydration functions receive the value and return an object of type\n        desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return\n        anything.\n    :param handlers: handler functions passed in the returned Response object\n   ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream.\n    :param handlers: handler functions passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout,\n                db, imp_user, dehydration_hooks, handlers, **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\"\n                (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n                      should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n              (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n                                to dehydration function). Dehydration\n                                function receives the value and returns an\n                                object of type understandable by packstream.\n    :param handlers: handlers passed", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfromkey type to\n        dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout,\n                db, imp_user, dehydration_hooks, hydration_hoo", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream.\n    :param handlers: handler functions passed in the returned Response object\n    :return: Response object\n    \"\"\"\n\n    if mode is None:\n        mode = self.PROTOCOL_VERSION\n\n    return self._begin(mode, bookmarks, metadata, timeout, db, imp_user,\n        ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self.append_message('BEGIN', mode=mode, bookmarks=bookmarks, metadata=metadata,\n                         ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self._append_message('BEGIN', mode=mode,\n                               bookmarks=bookmarks, metadata=metadata,\n               ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self.append(\n        Transaction(mode=mode, bookmarks=bookmarks,\n                     metadata=metadata, timeout=timeout,\n            "], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_AND_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object containing the result\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout, db,\n            ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)to dehydration function).\n        Dehydration functions receive the value and return an object of type\n        desired by packstream.\n    :param hydration_hooks: Hooks to dehydrate types (mapping from type (class) to dehydration function).\n        Dehydration functions receive the value of type desired by packstream and are free to return\n        anything.\n    :param handlers: handler functions passed in the returned Response object\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream.\n    :param handlers: handler functions passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout,\n                db, imp_user, dehydration_hooks, handlers, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\"\n                (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n                      should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n              (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n                                to dehydration function). Dehydration\n                                function receives the value and returns an\n                                object of type understandable by packstream.\n    :param handlers: handlers passed", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfromkey type to\n        dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return begin(self.PROTOCOL_VERSION, mode, bookmarks, metadata, timeout,\n                db, imp_user, dehydration_hooks, hydration_hoo", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration function receives the value and\n        returns an object of type desired by packstream.\n    :param handlers: handler functions passed in the returned Response object\n    :return: Response object\n    \"\"\"\n\n    if mode is None:\n        mode = self.PROTOCOL_VERSION\n\n    return self._begin(mode, bookmarks, metadata, timeout, db, imp_user,\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction should begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type (class) to dehydration function).\n        Dehydration functions receive the value and returns an object of type desired by packstream.\n        Dehydration functions receive the value of type desired by packstream and are free to return anything.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self.append_message('BEGIN', mode=mode, bookmarks=bookmarks, metadata=metadata,\n                         ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n        - \"READ\" or \"WRITE\"\n        - \"READ_WRITE\"\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dict from type\n                                                                                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n        (default)\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receive the value\n        and returns an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self._append_message('BEGIN', mode=mode,\n                               bookmarks=bookmarks, metadata=metadata,\n               ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Appends a BEGIN message to the output queue.\n\n    :param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n    :param bookmarks: iterable of bookmark values after which this transaction\n        should be begin\n    :param metadata: custom metadata dictionary to attach to the transaction\n    :param timeout: timeout for transaction execution (seconds)\n    :param db: name of the database against which to begin the transaction\n    :param imp_user: the user to impersonate\n    :param dehydration_hooks: Hooks to dehydrate types (dictfrom type (class)\n        to dehydration function). Dehydration functions receive the value\n        and return an object of type desired by packstream.\n    :param handlers: handlers passed in the returned Response object\n    :return: Response object\n    \"\"\"\n    return self.append(\n        Transaction(mode=mode, bookmarks=bookmarks,\n                     metadata=metadata, timeout=timeout,\n            ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n\n        elif hundred_n == int(hundred_n) and hundred_n % 10 == 4:\n            return int(round(hundred_n / 10)) * 10\n\n        else:\n            return int(hundred_n)\n\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * ten_n // 10\n    else:\n        return int(round(ten_n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            hundred = int(round(ten_n / 10)) * 10\n            if hundred % 10 == 5:\n                return hundred + 10\n            else:\n                return hundred\n        else:\n            return int(round(ten_n))\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(n / 100)\n        ten_hundred = int(n % 100) * 10\n        return hundred + ten_hundred\n    else:\n        return int(n)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n % 2 == 0:\n        return int(round_half_to_even(int(ten_n / 2)))\n    else:\n        return int(round_half_to_even(int(ten_n * 2)))\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * n\n    else:\n        return int(round(n))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n        else:\n            return int(hundred_n)\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n == 10 * n:\n        return int(round_half_to_even(n))\n    if ten_n % 10 == 5:\n        return int(round_half_to_even(5))\n    return int(round_half_to_even(n // 10))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred_n = int(round(ten_n / 10)) * 10\n        if hundred_n == int(hundred_n) and hundred_n % 10 == 5:\n            return int(round(hundred_n / 10)) * 10\n\n        elif hundred_n == int(hundred_n) and hundred_n % 10 == 4:\n            return int(round(hundred_n / 10)) * 10\n\n        else:\n            return int(hundred_n)\n\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * ten_n // 10\n    else:\n        return int(round(ten_n))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n        if ten_n % 10 == 5:\n            hundred = int(round(ten_n / 10)) * 10\n            if hundred % 10 == 5:\n                return hundred + 10\n            else:\n                return hundred\n        else:\n            return int(round(ten_n))\n    else:\n        return int(round(n))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(n, 2)))\n        return int(round(n / math.pow(2, h)))\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        hundred = int(n / 100)\n        ten_hundred = int(n % 100) * 10\n        return hundred + ten_hundred\n    else:\n        return int(n)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n):\n        ten_n = int(round(ten_n))\n    if ten_n % 2 == 0:\n        return int(round_half_to_even(int(ten_n / 2)))\n    else:\n        return int(round_half_to_even(int(ten_n * 2)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        return int(round(n))\n    else:\n        return int(round(n) + 0.5)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        h = int(math.floor(math.log(abs(ten_n), 2)))\n        return 10 ** (h + 1) * n\n    else:\n        return int(round(n))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    # type: (unicode, Dict[unicode, int], Dict[unicode, int]) -> Type[Point]\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'geowave_ext.utils',\n            '__fields__': tuple(fields.keys()),\n            '__srid__': srid_map[name],\n        },\n    )\n", "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'pyseaweed.geometry',\n            'coord_sys': 'Geometry',\n           'srid': 0,\n            'fields': tuple(fields),\n            '__doc__': 'A point representation of a bounding box '\n            'with a defined spatial reference.\\n\\n'\n            '* The `srid` attribute defines the spatial reference '\n           'system of the bounding box.\\n'\n            '* The `fields` attribute defines the field order '\n            '(e.g. (\"geom__name\", \"point__longitude\", \"point__latitude\")).\\n'\n            '* The `__dict__` attribute defines the name and '\n            'description of the fields in the `fields` attribute.',\n           'srid': srid_map[name],\n   ", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"A simple point object.\"\"\"\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n        def length(self):\n            return math.sqrt((self.x - x)**2 + (self.y - y)**2)\n    name = name.lower()\n    fields = tuple(fields)\n    srid_map = dict(srid_map)\n    if name in srid_map:\n        srid = srid_map[name]\n        return Point(*[getattr(self, name) for name in fields], srid=srid)\n    else:\n        raise ValueError(\"Invalid point srid: '%s'\" % name)\n", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"A simple point object.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(srid=srid_map[fields[0]])\n            self.x = x\n            self.y = y\n\n        def transform(self, transformation_matrix):\n            return transformation_matrix.dot([x, y, 1])\n\n        def length(self):\n            return math.sqrt((self.x - x) ** 2 + (self.y - y) ** 2)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    class Point(BasePoint):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        __schema__ = {\n            'type': 'Point',\n            'coordinates': fields,\n        }\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.srid = srid_map[kwargs['srid']]\n\n    Point.__name__ = name\n    return Point\n", "def point_type(name, fields, srid_map):\n    return type(name, fields, {'_srid': srid_map['srid']})\n", "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Point class.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n        def __repr__(self):\n            return '<{}: {}>'.format(self.__class__.__name__, self.name)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n\n    class Point(PointBase):\n        \"\"\"Point subclass.\"\"\"\n        _srid_names = fields\n        _srid_prefixes = srid_map\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__['__dict__'] = self.__dict__\n            self.__dict__['__weakref__'] = self.__weakref__\n\n        def __repr__(self):\n            return '<{0} {1}>'.format(self.__class__.__name__, self.__dict__)\n\n        def __eq__(self, other):\n            return isinstance(other, Point) and self.__dict__ == other.__dict__\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    # Get the point class name\n    class_name = name.lower()\n    # Create the point class\n    point_class_name = class_name + POINT_SUFFIX\n    point_class = getattr(sys.modules[__name__], point_class_name)\n    return point_class(fields, srid_map)\n", "def point_type(name, fields, srid_map):\n    def __init__(self, *args, **kwargs):\n        # Auto-map srid to the same SQL database if necessary.\n        if'srid' in kwargs:\n            kwargs['srid'] = srid_map[kwargs['srid']]\n        super(Point, self).__init__(*args, **kwargs)\n\n    cls = type(name, (Point,), {'fields': fields, '__module__': __name__})\n    cls._srid_field = srid_map.get(cls.__srid__, None)\n    return cls\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    # type: (unicode, Dict[unicode, int], Dict[unicode, int]) -> Type[Point]\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'geowave_ext.utils',\n            '__fields__': tuple(fields.keys()),\n            '__srid__': srid_map[name],\n        },\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'pyseaweed.geometry',\n            'coord_sys': 'Geometry',\n           'srid': 0,\n            'fields': tuple(fields),\n            '__doc__': 'A point representation of a bounding box '\n            'with a defined spatial reference.\\n\\n'\n            '* The `srid` attribute defines the spatial reference '\n           'system of the bounding box.\\n'\n            '* The `fields` attribute defines the field order '\n            '(e.g. (\"geom__name\", \"point__longitude\", \"point__latitude\")).\\n'\n            '* The `__dict__` attribute defines the name and '\n            'description of the fields in the `fields` attribute.',\n           'srid': srid_map[name],\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"A simple point object.\"\"\"\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n        def length(self):\n            return math.sqrt((self.x - x)**2 + (self.y - y)**2)\n    name = name.lower()\n    fields = tuple(fields)\n    srid_map = dict(srid_map)\n    if name in srid_map:\n        srid = srid_map[name]\n        return Point(*[getattr(self, name) for name in fields], srid=srid)\n    else:\n        raise ValueError(\"Invalid point srid: '%s'\" % name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"A simple point object.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(srid=srid_map[fields[0]])\n            self.x = x\n            self.y = y\n\n        def transform(self, transformation_matrix):\n            return transformation_matrix.dot([x, y, 1])\n\n        def length(self):\n            return math.sqrt((self.x - x) ** 2 + (self.y - y) ** 2)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BasePoint):\n        \"\"\"Dynamically create a Point subclass.\"\"\"\n        __schema__ = {\n            'type': 'Point',\n            'coordinates': fields,\n        }\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.srid = srid_map[kwargs['srid']]\n\n    Point.__name__ = name\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, fields, {'_srid': srid_map['srid']})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(BaseGeometry):\n        \"\"\"Point class.\"\"\"\n        def __init__(self, x, y):\n            super().__init__(x, y)\n            self.name = name\n            self.fields = fields\n            self.srid = srid_map[name]\n\n        def __repr__(self):\n            return '<{}: {}>'.format(self.__class__.__name__, self.name)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n\n    class Point(PointBase):\n        \"\"\"Point subclass.\"\"\"\n        _srid_names = fields\n        _srid_prefixes = srid_map\n\n        def __init__(self, *args, **kwargs):\n            super(Point, self).__init__(*args, **kwargs)\n            self.__dict__['__dict__'] = self.__dict__\n            self.__dict__['__weakref__'] = self.__weakref__\n\n        def __repr__(self):\n            return '<{0} {1}>'.format(self.__class__.__name__, self.__dict__)\n\n        def __eq__(self, other):\n            return isinstance(other, Point) and self.__dict__ == other.__dict__\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    # Get the point class name\n    class_name = name.lower()\n    # Create the point class\n    point_class_name = class_name + POINT_SUFFIX\n    point_class = getattr(sys.modules[__name__], point_class_name)\n    return point_class(fields, srid_map)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    def __init__(self, *args, **kwargs):\n        # Auto-map srid to the same SQL database if necessary.\n        if'srid' in kwargs:\n            kwargs['srid'] = srid_map[kwargs['srid']]\n        super(Point, self).__init__(*args, **kwargs)\n\n    cls = type(name, (Point,), {'fields': fields, '__module__': __name__})\n    cls._srid_field = srid_map.get(cls.__srid__, None)\n    return cls\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return _decorator\n", "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, f.__name__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, f.__name__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate_warning(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=3)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, f.__name__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecation_warn(message, f.__name__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate_warning(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def f__(f):\n        @wraps(f)\n        def f_(*args, **kwargs):\n            deprecate(message, f.__name__, f.__module__)\n            return f(*args, **kwargs)\n        return f_\n    return f__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if not code.startswith(\"#!\"):\n        return code\n    else:\n        return \"#!/bin/sh\\nexit 0\"\n", "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. It cannot be configured via env variables.')\n", "def _inline_r_setup(code: str):\n    global R_INLINE_SETUP, R_INLINE_TIMEOUT\n    R_INLINE_SETUP = code\n    R_INLINE_TIMEOUT = 5\n", "def _inline_r_setup(code: str) -> str:\n    code = f'export R=\"{code}\"'\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_src; \"\n        \"R build; \"\n        \"R clean; \"\n        \"R install_clib; \"\n        \"R build_ext; \"\n        \"R compile; \"\n        \"R test; \"\n        \"R install_headers; \"\n        \"R build_ext.min.cpp; \"\n        \"R compile_clib.min.cpp; \"\n        \"R clean_all; \"\n        \"R build_ext.min.cpp; \"\n        \"R clean; \"\n        \"R install_openmpi_ext.min.cpp; \"\n        \"R install_openmpi_ext.min.cpp; \"\n        \"R clean_ext.min.cpp; \"\n      ", "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    int main(int n, char **args) {\n        return 0;\n    }\n    \"\"\"\n    return inline\n", "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export R={r}\".format(r=env.get(\"R\"))\n    return \"\"\n", "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', '') +'' + code\n", "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_config = R.config\n    r_config.env[\"R_HOST\"] = str(r_config.host)\n    r_config.env[\"R_PORT\"] = str(r_config.port)\n    r_config.env[\"R_USERNAME\"] = str(r_config.username)\n    r_config.env[\"R_PASSWORD\"] = str(r_config.password)\n\n    return \"ok\"\n", "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if not code.startswith(\"#!\"):\n        return code\n    else:\n        return \"#!/bin/sh\\nexit 0\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    if 'R' in code:\n        raise Exception('Cannot be configured via env variables, but R has started. It cannot be configured via env variables.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    global R_INLINE_SETUP, R_INLINE_TIMEOUT\n    R_INLINE_SETUP = code\n    R_INLINE_TIMEOUT = 5\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = f'export R=\"{code}\"'\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline_r_command = (\n        \"export R={r_version}; \"\n        \"source /usr/local/R/bin/activate; \"\n        \"source /usr/local/R/third_party/r/bin/activate; \"\n        \"cd /usr/local/R; \"\n        \"R install_requires; \"\n        \"R setup_environment; \"\n        \"R build_src; \"\n        \"R build; \"\n        \"R clean; \"\n        \"R install_clib; \"\n        \"R build_ext; \"\n        \"R compile; \"\n        \"R test; \"\n        \"R install_headers; \"\n        \"R build_ext.min.cpp; \"\n        \"R compile_clib.min.cpp; \"\n        \"R clean_all; \"\n        \"R build_ext.min.cpp; \"\n        \"R clean; \"\n        \"R install_openmpi_ext.min.cpp; \"\n        \"R install_openmpi_ext.min.cpp; \"\n        \"R clean_ext.min.cpp; \"\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    inline = \"\"\"\n    int main(int n, char **args) {\n        return 0;\n    }\n    \"\"\"\n    return inline\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code == \"YOUR_ENV_VARIABLE\":\n        return \"export R={r}\".format(r=env.get(\"R\"))\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    env = os.environ.copy()\n    env.update({\n        'R': '1',\n        'RULES': '1',\n        'R_USERNAME': 'r-user',\n        'R_PASSWORD': 'r-pass',\n    })\n    return env.get('R', '') +'' + code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code!= \"ok\":\n        return code\n\n    r_config = R.config\n    r_config.env[\"R_HOST\"] = str(r_config.host)\n    r_config.env[\"R_PORT\"] = str(r_config.port)\n    r_config.env[\"R_USERNAME\"] = str(r_config.username)\n    r_config.env[\"R_PASSWORD\"] = str(r_config.password)\n\n    return \"ok\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    code = _inline_r_configurable(code)\n    code = _inline_r_set_options(code)\n    return code\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n) -> Tuple[subprocess.Popen, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        - target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    if is_shippable() and not is_running_in_shippable():\n        spawn = Spawn(\n            cmd,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n    else:\n        spawn = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        spawn.stdin.close()", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        env: Dict[str, str],\n        cwd: Optional[str],\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str], Iterable[str], List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    target_concurrency = target_concurrency or os.cpu_count()\n\n    def _xargs(cmd: Command) -> Tuple[Command, Iterable[str], Iterable[str], List[str], List[str]]:\n        return cmd, _pty(\n            args,\n            stdin=stdin,\n            stdout=stdout,\n            stderr=s", "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently (if not specified)\n    \"\"\"\n    # NOTE: This is a simplified implementation that can be improved by multiple\n    #       ways (e.g. using \"pty\"). In the future we can probably just do\n    #       something nicer with the behaviour of this method, and be more\n    #       likely to run on a system with multiple concurrent platforms.\n    #\n    #       This code is based on https://github.com/kachayev/ptyprocess\n    #       and is a bit of a hack from https://github.com/kachayev/ptyprocess-py/issues/23\n\n    # NB: If a target concurrency is not specified, we use the default of ``ptys``.\n    #", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        stdin: Optional[bytes] = None,\n        stdout: Optional[bytes] = None,\n        stderr: Optional[bytes] = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], Dict[str, str]]:\n    \"\"\"\n    A simple implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    pty = False\n    try:\n        from..platform import get_terminal_size\n\n        terminal_size = get_terminal_size()\n    except ImportError:\n        terminal_size = (40, 80)\n\n    pty = True\n    if terminal_size[0] > terminal_size[1]:\n        pty = False\n        if stdi", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        - Target concurrency is 2 for each partition (i.e. 2 cores, 1 core per core group)\n    \"\"\"\n    if sys.platform not in ('win32', 'darwin'):\n        return []\n\n    if not target_concurrency:\n        target_concurrency = int(os.environ.get('NOSE_ALL_THREADS', '1'))\n\n    if color:\n        cmd = ['xargs', '--color'] + cmd\n\n    return subprocess.run(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True,\n        check=True,\n    ).stdout.split(os.linesep)[:target_concurrency]\n", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Mapping[str, str]] = None,\n        cwd: Optional[str] = None,\n        check_return: bool = True,\n        target_concurrency: int = 1,\n) -> Tuple[List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to run\n    concurrently\n    \"\"\"\n    if sys.platform == 'win32':\n        return _windows_xargs(cmd, args, env, cwd, check_return, target_concurrency)\n    else:\n        return _unix_xargs(cmd, args, env, cwd, check_return, target_concurrency)\n", "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency\n\n    target_concurrency:\n    Target number of partitions to run concurrently contestantly\n\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        shell=shell,\n    )\n\n    p.stdin.close()\n    p.stdout.close()\n    p.stderr.close()\n\n    stdout = p.communicate()[0].strip()\n    if stdout.decode().startswith('TIMEOUT'):\n        raise TimeoutError(stdout)\n\n    if capture:\n     ", "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Optional[Iterable[str]] = None,\n        stdout: Optional[Iterable[str]] = None,\n        stderr: Optional[Iterable[str]] = None,\n        cwd: Optional[str] = None,\n        env: Optional[Mapping[str, str]] = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    if stdin is None:\n        stdin = []\n    if stdout is None:\n        stdout = []\n    if stderr is None:\n        stderr = []\n\n    cmd = cmd.copy()\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    cm", "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        shell: bool = True,\n        target_concurrency: int = 2,\n) -> Tuple[str, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    pty = False\n    target_concurrency = target_concurrency - 1\n    if shell:\n        pty = True\n        target_concurrency = target_concurrency - 1\n\n    return (\n        'xargs',\n        [\n            '--color', 'no',\n            '--target-concurrency', str(target_concurrency),\n            '--stdin', '-',\n            "], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n) -> Tuple[subprocess.Popen, int]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        - target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    if is_shippable() and not is_running_in_shippable():\n        spawn = Spawn(\n            cmd,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n    else:\n        spawn = subprocess.Popen(\n            cmd,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        spawn.stdin.close()", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        env: Dict[str, str],\n        cwd: Optional[str],\n        target_concurrency: int = None,\n) -> Tuple[Command, Iterable[str], Iterable[str], List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    target_concurrency = target_concurrency or os.cpu_count()\n\n    def _xargs(cmd: Command) -> Tuple[Command, Iterable[str], Iterable[str], List[str], List[str]]:\n        return cmd, _pty(\n            args,\n            stdin=stdin,\n            stdout=stdout,\n            stderr=s", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        target_concurrency: int = None,\n        color: bool = False,\n) -> Tuple[int, str, str]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to\n    run concurrently (if not specified)\n    \"\"\"\n    # NOTE: This is a simplified implementation that can be improved by multiple\n    #       ways (e.g. using \"pty\"). In the future we can probably just do\n    #       something nicer with the behaviour of this method, and be more\n    #       likely to run on a system with multiple concurrent platforms.\n    #\n    #       This code is based on https://github.com/kachayev/ptyprocess\n    #       and is a bit of a hack from https://github.com/kachayev/ptyprocess-py/issues/23\n\n    # NB: If a target concurrency is not specified, we use the default of ``ptys``.\n    #", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Dict[str, str] = None,\n        stdin: Optional[bytes] = None,\n        stdout: Optional[bytes] = None,\n        stderr: Optional[bytes] = None,\n        shell: bool = False,\n        target_concurrency: int = None,\n) -> Tuple[int, List[str], Dict[str, str]]:\n    \"\"\"\n    A simple implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    pty = False\n    try:\n        from..platform import get_terminal_size\n\n        terminal_size = get_terminal_size()\n    except ImportError:\n        terminal_size = (40, 80)\n\n    pty = True\n    if terminal_size[0] > terminal_size[1]:\n        pty = False\n        if stdi", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = None,\n        color: bool = True,\n) -> List[str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        - Target concurrency is 2 for each partition (i.e. 2 cores, 1 core per core group)\n    \"\"\"\n    if sys.platform not in ('win32', 'darwin'):\n        return []\n\n    if not target_concurrency:\n        target_concurrency = int(os.environ.get('NOSE_ALL_THREADS', '1'))\n\n    if color:\n        cmd = ['xargs', '--color'] + cmd\n\n    return subprocess.run(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True,\n        check=True,\n    ).stdout.split(os.linesep)[:target_concurrency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        env: Optional[Mapping[str, str]] = None,\n        cwd: Optional[str] = None,\n        check_return: bool = True,\n        target_concurrency: int = 1,\n) -> Tuple[List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs. color: Make a pty if on a platform\n    that supports it target_concurrency: Target number of partitions to run\n    concurrently\n    \"\"\"\n    if sys.platform == 'win32':\n        return _windows_xargs(cmd, args, env, cwd, check_return, target_concurrency)\n    else:\n        return _unix_xargs(cmd, args, env, cwd, check_return, target_concurrency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Sequence[str],\n        target_concurrency: int = 1,\n        capture: bool = False,\n        env: Optional[Dict[str, Any]] = None,\n        shell: bool = False,\n) -> Tuple[int, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency\n\n    target_concurrency:\n    Target number of partitions to run concurrently contestantly\n\n    \"\"\"\n    p = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        shell=shell,\n    )\n\n    p.stdin.close()\n    p.stdout.close()\n    p.stderr.close()\n\n    stdout = p.communicate()[0].strip()\n    if stdout.decode().startswith('TIMEOUT'):\n        raise TimeoutError(stdout)\n\n    if capture:\n     ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Iterable[str],\n        args: Iterable[str],\n        cwd: str = None,\n        env: Iterable[str] = None,\n        encoding: str = 'utf-8',\n        stdin: str = None,\n        stdout: str = None,\n        stderr: str = None,\n        target_concurrency: int = None,\n        target_wait: float = None,\n        target_timeout: float = None,\n        target_pipe_size: int = None,\n) -> Tuple[str, str]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    env = env or os.environ.copy()\n    env.update({'LC_ALL': 'en_US.UTF-8'})\n\n    if target_concurrency is None:\n        target_concurrency = os.environ.get('XDG_CONFIG_NUM_THREADS')", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Optional[Iterable[str]] = None,\n        stdout: Optional[Iterable[str]] = None,\n        stderr: Optional[Iterable[str]] = None,\n        cwd: Optional[str] = None,\n        env: Optional[Mapping[str, str]] = None,\n        target_concurrency: int = multiprocessing.cpu_count(),\n) -> Tuple[Command, Iterable[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it target_concurrency\n\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    if stdin is None:\n        stdin = []\n    if stdout is None:\n        stdout = []\n    if stderr is None:\n        stderr = []\n\n    cmd = cmd.copy()\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    cm", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str],\n        shell: bool = True,\n        target_concurrency: int = 2,\n) -> Tuple[str, List[str], List[str], List[str]]:\n    \"\"\"\n    A simplified implementation of xargs.\n\n    color:\n    Make a pty if on a platform that supports it target_concurrency:\n\n        target_concurrency: Target number of partitions to run concurrently\n\n    \"\"\"\n    pty = False\n    target_concurrency = target_concurrency - 1\n    if shell:\n        pty = True\n        target_concurrency = target_concurrency - 1\n\n    return (\n        'xargs',\n        [\n            '--color', 'no',\n            '--target-concurrency', str(target_concurrency),\n            '--stdin', '-',\n            ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence) -> Sequence:\n    \"Deterministically shuffle\"\n    return shuffle(seq)\n", "def _shuffled(seq: list) -> list:\n    return random.shuffle(seq)\n", "def _shuffled(seq: Sequence) -> List[Sequence]:\n    \"Deterministically shuffle\"\n    return list(seq)\n", "def _shuffled(seq: Sequence[T]) -> List[T]:\n    \"Deterministically shuffle\"\n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    import random\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[T]) -> List[T]:\n    \"Deterministically shuffle\"\n    return list(map(lambda x: x[0], sorted(seq, key=lambda x: random.random())))\n", "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    l = len(seq)\n    for i in range(l):\n        j = randint(i, l - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle\"\n    lst = list(seq)\n    random.shuffle(lst)\n    return lst\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence) -> Sequence:\n    \"Deterministically shuffle\"\n    return shuffle(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: list) -> list:\n    return random.shuffle(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence) -> List[Sequence]:\n    \"Deterministically shuffle\"\n    return list(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> List[T]:\n    \"Deterministically shuffle\"\n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> List[Any]:\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle\"\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    import random\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T]) -> List[T]:\n    \"Deterministically shuffle\"\n    return list(map(lambda x: x[0], sorted(seq, key=lambda x: random.random())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[Any]) -> Sequence[Any]:\n    \"Deterministically shuffle\"\n    l = len(seq)\n    for i in range(l):\n        j = randint(i, l - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    \"Deterministically shuffle\"\n    lst = list(seq)\n    random.shuffle(lst)\n    return lst\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    else:\n        return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s is None or s == '':\n        return None\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return parse(s)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[Version]:\n    if s:\n        return Version(s)\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    for i in range(1, len(cmd)):\n        if not cmd[i].startswith(\"-n\"):\n            cmd[i] = \"-n {}\".format(cmd[i])\n    return \" \".join(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        # Python 2.6 on Windows, see:\n        # https://github.com/ronaldoussoren/psutil/pull/56\n        return cmd.replace(\";\", \":\")\n\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    for index, token in enumerate(cmd):\n        if token == '#!' or token.startswith('/usr/bin/'):\n            cmd[index] = token.replace('/usr/bin/', '/usr')\n    return''.join(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    if sys.platform == \"win32\" and not os.path.exists(\"/usr/bin/norm\"):\n        cmd = [\"/usr/bin/norm\"] + cmd\n    return \" \".join(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    if \"@\" in cmd and \"%\" in cmd:\n        cmd = cmd.replace(\"@\", \"@/\")\n\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        return \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\";\")\n            if not chunk.startswith(\"#\")\n        )\n\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\") and \"/usr/bin/normexe\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = fix_for_windows_shebang(cmd)\n    return \" \".join(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        cmd = \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\";\")\n            if chunk.strip()\n        )\n\n    # Python 2.6 requres the shebang line to be executable\n    if sys.version_info[:2] < (2, 6) and \"/usr/bin/env python\" in cmd:\n        cmd = \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\"/usr/bin/env python\")\n            if chunk.strip()\n        )\n\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        return \"\".join(\n            elem.strip() if elem.strip()!= \"#!\" else \"\" for elem in cmd.split(\";\")\n        )\n\n    return cmd.strip()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    for i in range(1, len(cmd)):\n        if not cmd[i].startswith(\"-n\"):\n            cmd[i] = \"-n {}\".format(cmd[i])\n    return \" \".join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        # Python 2.6 on Windows, see:\n        # https://github.com/ronaldoussoren/psutil/pull/56\n        return cmd.replace(\";\", \":\")\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    for index, token in enumerate(cmd):\n        if token == '#!' or token.startswith('/usr/bin/'):\n            cmd[index] = token.replace('/usr/bin/', '/usr')\n    return''.join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    if sys.platform == \"win32\" and not os.path.exists(\"/usr/bin/norm\"):\n        cmd = [\"/usr/bin/norm\"] + cmd\n    return \" \".join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \"@\" in cmd and \"%\" in cmd:\n        cmd = cmd.replace(\"@\", \"@/\")\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        return \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\";\")\n            if not chunk.startswith(\"#\")\n        )\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform.startswith(\"win\") and \"/usr/bin/normexe\" in cmd:\n        cmd = cmd.replace(\"/usr/bin/normexe\", \"/usr/bin/norm\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = shlex.split(cmd)\n    if sys.platform.startswith(\"win\"):\n        cmd = fix_for_windows_shebang(cmd)\n    return \" \".join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        cmd = \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\";\")\n            if chunk.strip()\n        )\n\n    # Python 2.6 requres the shebang line to be executable\n    if sys.version_info[:2] < (2, 6) and \"/usr/bin/env python\" in cmd:\n        cmd = \"\".join(\n            chunk.strip()\n            for chunk in cmd.split(\"/usr/bin/env python\")\n            if chunk.strip()\n        )\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if \";\" in cmd:\n        return \"\".join(\n            elem.strip() if elem.strip()!= \"#!\" else \"\" for elem in cmd.split(\";\")\n        )\n\n    return cmd.strip()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if not value:\n                value = cache.set(key, fn(*args, **kwargs))\n            return value\n        return __wrapper\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def _cached(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        def _expire_cache():\n            try:\n                del cache[key]\n            except KeyError:\n                pass\n        _expire_cache()\n        return _cached\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorate(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n            lock.acquire()\n            try:\n                cache[key] = result\n            finally:\n                lock.release()\n            return result\n\n        return decorate\n\n    return deco", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except MemoizeError:\n                if lock is not None:\n                    lock.acquire()\n                try:\n                    ret = cache[key]\n                finally:\n                    if lock is not None:\n                        lock.release()\n                return ret\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            with lock:\n                return cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def _wrapper(*args, **kwargs):\n        with lock:\n            return _wrapper(*args, **kwargs)\n    return _wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is for the wrong time, get a new reference\n                cache.clear()\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is not None:\n                key = lock(key, cache)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(fn):\n        @functools.wraps(fn)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if not value:\n                value = cache.set(key, fn(*args, **kwargs))\n            return value\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def _cached(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        def _expire_cache():\n            try:\n                del cache[key]\n            except KeyError:\n                pass\n        _expire_cache()\n        return _cached\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        return wrapper\n\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorate(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n            lock.acquire()\n            try:\n                cache[key] = result\n            finally:\n                lock.release()\n            return result\n\n        return decorate\n\n    return deco", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except MemoizeError:\n                if lock is not None:\n                    lock.acquire()\n                try:\n                    ret = cache[key]\n                finally:\n                    if lock is not None:\n                        lock.release()\n                return ret\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            with lock:\n                return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    def _wrapper(*args, **kwargs):\n        with lock:\n            return _wrapper(*args, **kwargs)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.cache = cache\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n            except ReferenceError:\n                # the cache is for the wrong time, get a new reference\n                cache.clear()\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is not None:\n                key = lock(key, cache)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of keys to values that we want to cache for\n    cache = {}\n    def wrapper(f):\n        def wrapped(*args, **kwds):\n            key = _key(f, args, kwds)\n            if key not in cache:\n                if typed:\n                    cache[key] = f(*args, **kwds)\n                else:\n                    cache[key] = f(*args, **kwds)\n            value = cache[key]\n            if len(cache) > maxsize:\n                cache.popitem(last=False)\n            return value\n        return wrapped\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache('TTL', maxsize, ttl, timer, False)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = cache_value = func(*args, **kwargs)\n            if timer() - cache_value < ttl:\n                return cache[key]\n            else:\n                value = cache[key] = func(*args, **kwargs)\n                return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(maxsize)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items.\n        return functools.partial(_ttl_cache_singleton, ttl, timer, typed)\n    else:\n        # Cache when there are items.\n        def wrapper(f):\n            return _ttl_cache_singleton(maxsize, ttl, timer, typed, f)\n        return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 0:\n        raise ValueError('maxsize must be non-negative')\n    if maxsize == 0:\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute.\n    #      This might be a better place for it, if you decide to save your\n    #      mapping to a file.\n    return _CacheDecorator('ttl', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a key and return a\n    # value.  This could be faster by creating a list of callables that\n    # return the value of the key for that key and then calling the wrapped\n    # function on that list of values.\n    def wrapper(fn):\n        cached_value = {}\n        @wraps(fn)\n        def wrapped(key):\n            if key in cached_value:\n                return cached_value[key]\n            else:\n                if len(cached_value) >= maxsize:\n                    cached_value.popitem(last=False)\n                cached_value[key] = fn(key)\n                return cached_value[key]\n        return wrapped\n    if not timer:\n        return wrapper(typed)\n    else:\n        ttl_cache = {}\n        def wrapper(fn):\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache('ttl', maxsize, ttl, timer, False)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of keys to values that we want to cache for\n    cache = {}\n    def wrapper(f):\n        def wrapped(*args, **kwds):\n            key = _key(f, args, kwds)\n            if key not in cache:\n                if typed:\n                    cache[key] = f(*args, **kwds)\n                else:\n                    cache[key] = f(*args, **kwds)\n            value = cache[key]\n            if len(cache) > maxsize:\n                cache.popitem(last=False)\n            return value\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache('TTL', maxsize, ttl, timer, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # If maxsize is a single number, then make it a tuple.\n    if isinstance(maxsize, int):\n        maxsize = (maxsize, maxsize)\n    if not isinstance(maxsize, tuple):\n        raise ValueError('maxsize must be a tuple')\n    if len(maxsize) < 1:\n        raise ValueError('maxsize must be a single number')\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables (func, timeout) -> value\n    cache = {}\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = (func, args, frozenset(sorted(kwargs.items())))\n            try:\n                cache_value = cache[key]\n            except KeyError:\n                cache[key] = cache_value = func(*args, **kwargs)\n            if timer() - cache_value < ttl:\n                return cache[key]\n            else:\n                value = cache[key] = func(*args, **kwargs)\n                return value\n        return wrapped\n    if typed:\n        return wrapper\n    else:\n        return wrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        # No cache when there are no items.\n        return functools.partial(_ttl_cache_singleton, ttl, timer, typed)\n    else:\n        # Cache when there are items.\n        def wrapper(f):\n            return _ttl_cache_singleton(maxsize, ttl, timer, typed, f)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 0:\n        raise ValueError('maxsize must be non-negative')\n    if maxsize == 0:\n        return lambda f: f\n\n    def wrapper(f):\n        return Cache(f, maxsize, ttl, timer, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a MutableMapping subclass that emulates the ttl attribute.\n    #      This might be a better place for it, if you decide to save your\n    #      mapping to a file.\n    return _CacheDecorator('ttl', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # XXX: cache is a dictionary of callables that take a key and return a\n    # value.  This could be faster by creating a list of callables that\n    # return the value of the key for that key and then calling the wrapped\n    # function on that list of values.\n    def wrapper(fn):\n        cached_value = {}\n        @wraps(fn)\n        def wrapped(key):\n            if key in cached_value:\n                return cached_value[key]\n            else:\n                if len(cached_value) >= maxsize:\n                    cached_value.popitem(last=False)\n                cached_value[key] = fn(key)\n                return cached_value[key]\n        return wrapped\n    if not timer:\n        return wrapper(typed)\n    else:\n        ttl_cache = {}\n        def wrapper(fn):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize <= 0:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if ttl <= 0:\n        raise ValueError('ttl must be greater than 0')\n    if timer is None:\n        return partial(ttl_cache, maxsize=maxsize, ttl=ttl)\n    return TimedCache(timer, ttl=ttl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache('ttl', maxsize, ttl, timer, False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "def mru_cache(maxsize=128, typed=False):\n    # Must be a decorator\n    if not callable(maxsize):\n        return _wrap_decorator(maxsize)\n    # Wrap the decorator with a try/except because if the function\n    # is called as `mru_cache(maxsize=128, typed=False)(foo)` the cache\n    # will be filled and the error will be raised. This is more likely\n    # to cause a MemoizeError to be raised than a ValueError.\n    try:\n        cached_func = _mru_cache[maxsize]\n    except KeyError:\n        def cached_func(f):\n            _mru_cache[maxsize] = f  # Must be a decorator\n            return f\n        return cached_func\n    if not typed:\n        return cached_func\n    else:\n        return _wrap_decorator(cached_func, typed=True)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached = MruCache(fn, maxsize, typed)\n        return lambda *a, **kw: cached.invalidate(*a, **kw)\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # You can make this decorator so that it works on functions that take\n    # only one argument.  The decorator takes *args (**kwargs) and **kwargs\n    # (**kwargs).  The memoize decorator works on functions that return\n    # both the value of the argument and the key of the dictionary.\n    def decorator(fn):\n        # We build a new function whose code is the behavior of fn:\n        # fn(key) <- fn(key) >= fn(arg)\n        if typed:\n            fn.__code__ = _typed_code(fn.__code__)\n        else:\n            fn.__code__ = _code(fn.__code__)\n        fn.__doc__ = fn.__doc__\n        return fn\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached_fn = _MRUWrapper(fn, maxsize)\n        if typed:\n            cached_fn.type = fn.__name__\n        return cached_fn\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # You can make this decorator simpler and easier to read.\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    # You can make a decorator with `cached` so that it doesn't return\n    # a reference to the function itself (it won't be called again).\n    def decorator(func):\n        cached = _MRUWrapper(func, maxsize)\n        if typed:\n            cached.typed = True\n        return cached\n    return decorator\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(mru_cache, maxsize, typed)\n    else:\n        return _MruCache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(f):\n        return MruCache(f, maxsize, typed)\n    return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def decorator(fn):\n        wrapper = _MRUWrapper(fn, maxsize)\n        wrapper.cache_clear = fn.cache_clear\n        return wrapper\n\n    if typed:\n        return decorator\n\n    return decorator(fn)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # Must be a decorator\n    if not callable(maxsize):\n        return _wrap_decorator(maxsize)\n    # Wrap the decorator with a try/except because if the function\n    # is called as `mru_cache(maxsize=128, typed=False)(foo)` the cache\n    # will be filled and the error will be raised. This is more likely\n    # to cause a MemoizeError to be raised than a ValueError.\n    try:\n        cached_func = _mru_cache[maxsize]\n    except KeyError:\n        def cached_func(f):\n            _mru_cache[maxsize] = f  # Must be a decorator\n            return f\n        return cached_func\n    if not typed:\n        return cached_func\n    else:\n        return _wrap_decorator(cached_func, typed=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached = MruCache(fn, maxsize, typed)\n        return lambda *a, **kw: cached.invalidate(*a, **kw)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # You can make this decorator so that it works on functions that take\n    # only one argument.  The decorator takes *args (**kwargs) and **kwargs\n    # (**kwargs).  The memoize decorator works on functions that return\n    # both the value of the argument and the key of the dictionary.\n    def decorator(fn):\n        # We build a new function whose code is the behavior of fn:\n        # fn(key) <- fn(key) >= fn(arg)\n        if typed:\n            fn.__code__ = _typed_code(fn.__code__)\n        else:\n            fn.__code__ = _code(fn.__code__)\n        fn.__doc__ = fn.__doc__\n        return fn\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(fn):\n        cached_fn = _MRUWrapper(fn, maxsize)\n        if typed:\n            cached_fn.type = fn.__name__\n        return cached_fn\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # Must be a function and not a method\n    if not isinstance(maxsize, int):\n        raise TypeError('maxsize must be an integer')\n    if maxsize < 0:\n        raise ValueError('maxsize must be greater than 0')\n\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # You can make this decorator simpler and easier to read.\n    def decorator(func):\n        cached = MruCache(maxsize, typed)\n        cached.func = func\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # You can make a decorator with `cached` so that it doesn't return\n    # a reference to the function itself (it won't be called again).\n    def decorator(func):\n        cached = _MRUWrapper(func, maxsize)\n        if typed:\n            cached.typed = True\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(mru_cache, maxsize, typed)\n    else:\n        return _MruCache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(f):\n        return MruCache(f, maxsize, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _LruCache(typed)\n    else:\n        return _LruCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(lru_cache, maxsize, typed)\n    else:\n        # This function must be wrapped with @memoize\n        # TODO: test on Python 3\n        return Memoize(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _Memoize(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = LruCached(fn, maxsize)\n        return lambda *a, **kw: cached._call_update(fn, *a, **kw)\n    if not typed:\n        return wrapper\n    return staticmethod(wrapper)\n", "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in this context.  Use an instance of that context\n    # to store the results.\n    if not typed:\n        return _LRUCache\n\n    def wrapper(fn):\n        return _LRUCache(fn, maxsize)\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    # You can use a docstring or something else to make this simple.\n\n    def wrapper(fn):\n        return LRUCache(maxsize, typed, fn)\n    return wrapper\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _LruCache(typed)\n    else:\n        return _LruCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n\n    def wrapper(fn):\n        cached_func = _LRU_CACHE.make_wrapper(fn)\n        if typed:\n            cached_func.__dict__ = fn.__dict__\n        return cached_func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return partial(lru_cache, maxsize, typed)\n    else:\n        # This function must be wrapped with @memoize\n        # TODO: test on Python 3\n        return Memoize(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _Memoize(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = LruCached(fn, maxsize)\n        return lambda *a, **kw: cached._call_update(fn, *a, **kw)\n    if not typed:\n        return wrapper\n    return staticmethod(wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # Memoize is disabled in this context.  Use an instance of that context\n    # to store the results.\n    if not typed:\n        return _LRUCache\n\n    def wrapper(fn):\n        return _LRUCache(fn, maxsize)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    # You can use a docstring or something else to make this simple.\n\n    def wrapper(fn):\n        return LRUCache(maxsize, typed, fn)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LRUCache(maxsize)\n    else:\n        return _LRUCache(maxsize)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        return LFUCache(maxsize, fn, typed)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    # You can use a function that returns a value than None (e.g., as opposed to an\n    # empty list) to prevent cache hits by the LFU.\n    def wrapper(fn):\n        cache = LFUCache(fn, maxsize, typed)\n        return cache\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        return _LFUCacheWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        return Cache(fn, maxsize, typed)\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be >= 1')\n\n    def wrapper(fn):\n        cache = LFUCache(fn, maxsize, typed)\n        return cache\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = fn(*args, **kwargs)\n                return ret\n\n        return wrapped if typed else wrapped(fn)\n\n    return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if typed:\n        return _LFUTypedCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        return LFUCache(maxsize, fn, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # You can use a function that returns a value than None (e.g., as opposed to an\n    # empty list) to prevent cache hits by the LFU.\n    def wrapper(fn):\n        cache = LFUCache(fn, maxsize, typed)\n        return cache\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCacheWrapper(maxsize)\n    else:\n        return _LFUCacheWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        return Cache(fn, maxsize, typed)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be >= 1')\n\n    def wrapper(fn):\n        cache = LFUCache(fn, maxsize, typed)\n        return cache\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n\n    def wrapper(fn):\n        cached = {}\n\n        @wraps(fn)\n        def wrapped(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cached[key]\n            except KeyError:\n                ret = cached[key] = fn(*args, **kwargs)\n                return ret\n\n        return wrapped if typed else wrapped(fn)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if maxsize == 1:\n        return identity\n    if typed:\n        return _LFUTypedCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUTypeCache(maxsize)\n    else:\n        return _LFUWrapper(maxsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than 0')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(f):\n            return _LFUCache(f, maxsize)\n        return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError('maxsize must be greater than zero')\n    if typed:\n        return _LFUCache(maxsize)\n    else:\n        def wrapper(fn):\n            return _LFUCache(maxsize, fn)\n        return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('Documents set before a call to popitem()')\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCollectionRemovalError(\n            'There are no items to remove.'\n        ) from e\n", "def popitem(self):\n    return self.__order.popleft()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    if not self.__order:\n        raise KeyError(\"popitem(): OrderedDict is already empty\")\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('Documents set before a call to popitem()')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except KeyError as e:\n        raise exceptions.BadCollectionRemovalError(\n            'There are no items to remove.'\n        ) from e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popleft()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self.__order:\n        raise KeyError(\"popitem(): OrderedDict is already empty\")\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(self._get_key(key), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if not isinstance(key, string_types):\n        raise TypeError('keys must be strings')\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if default is None:\n        default = self[key] = self[key]\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        super(OrderedDict, self).setdefault(key, default)\n    return super(OrderedDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super().setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "def get(self, key, default=None):\n    return self[key] if key in self else default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    if default is None:\n        default = self.default\n    return super(DefaultGetDict, self).setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self[key] if key in self else default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def __wrapper(self, *args, **kwargs):\n            with lock:\n                return func(self, *args, **kwargs)\n        return __wrapper\n    if isinstance(cache, BaseCache):\n        cache = cache._cache\n    if isinstance(cache, dict):\n        key = key or cache.get_key(func)\n        return partial(_wrapper, cache, key)\n    else:\n        def _wrapper(func):\n            @functools.wraps(func)\n            def __wrapper(self, *args, **kwargs):\n                with cache.get_lock(key):\n                    return func(self, *args, **kwargs)\n            return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def newfunc(*args, **kwds):\n            result = cache.get(key(func, *args, **kwds))\n            if result is None:\n                result = func(*args, **kwds)\n                cache.set(key(func, *args, **kwds), result, timeout=cache_time)\n            return result\n        return newfunc\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        __wrapper.cache = cache\n        __wrapper.key = key\n        return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        return cache.get(key)\n    else:\n        decorator = decorator(cache)\n        return update_wrapper(decorator, func)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def _inner(self, *args, **kwds):\n            with lock:\n                return func(self, *args, **kwds)\n        return _inner\n    if isinstance(cache, type):\n        # We were passed an instance of a class, so wrap it.\n        return functools.partial(_wrapper, cache)\n    else:\n        # We were passed a function, so wrap it.\n        return functools.partial(_wrapper, cache)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return __wrapper\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        return CachedMethod(func, cache, key, lock)\n    return _wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def __wrapper(self, *args, **kwargs):\n            with lock:\n                return func(self, *args, **kwargs)\n        return __wrapper\n    if isinstance(cache, BaseCache):\n        cache = cache._cache\n    if isinstance(cache, dict):\n        key = key or cache.get_key(func)\n        return partial(_wrapper, cache, key)\n    else:\n        def _wrapper(func):\n            @functools.wraps(func)\n            def __wrapper(self, *args, **kwargs):\n                with cache.get_lock(key):\n                    return func(self, *args, **kwargs)\n            return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethodWrapper(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def newfunc(*args, **kwds):\n            result = cache.get(key(func, *args, **kwds))\n            if result is None:\n                result = func(*args, **kwds)\n                cache.set(key(func, *args, **kwds), result, timeout=cache_time)\n            return result\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n\n        @functools.wraps(func)\n        def __wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n\n        __wrapper.cache = cache\n        __wrapper.key = key\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = cache.lock\n        def _inner(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        def _on_expire(self):\n            with lock:\n                ret = cache[key]\n                del cache[key]\n            return ret\n        return _inner\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        return cache.get(key)\n    else:\n        decorator = decorator(cache)\n        return update_wrapper(decorator, func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def _inner(self, *args, **kwds):\n            with lock:\n                return func(self, *args, **kwds)\n        return _inner\n    if isinstance(cache, type):\n        # We were passed an instance of a class, so wrap it.\n        return functools.partial(_wrapper, cache)\n    else:\n        # We were passed a function, so wrap it.\n        return functools.partial(_wrapper, cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        @functools.wraps(func)\n        def __wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kwargs)\n                return ret\n        return __wrapper\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def _wrapper(func):\n        return CachedMethod(func, cache, key, lock)\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        if lock is None:\n            lock = threading.Lock()\n\n        def wrapper(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(self, *args, **kw)\n                return ret\n\n        wrapper.__doc__ = func.__doc__\n        wrapper.__name__ = func.__name__\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n\n    if isinstance(cache, Memoize):\n        key = keyfunc(cache)\n        return decorator(cache.get)\n    else:\n        return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    out = cls._get_traceback_str(e, max_level, max_path_level)\n    if out:\n        return out\n\n    s = format_exception(e, cls.__name__, cls.__doc__)\n    return s\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return '{0}: {1}'.format(cls.__name__, str(e))\n    else:\n        return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(e.__class__.__name__, str(e), traceback.format_exc(max_level, max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e_str = ''.join(['%s: %s\\n' % (t[0], t[1]) for t in traceback.extract_tb(sys.exc_info()[2])])\n        return '%s [%s] %s' % (e.__class__.__name__, e.__class__.__name__, e_str)\n    else:\n        return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, HostNotFoundException):\n        return \"{}: {}\".format(cls.__name__, e.message)\n    else:\n        return str(cls) + ':'+ str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return cls.__extostr__(e, max_level=max_level, max_path_level=max_path_level)\n    else:\n        return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        return e\n\n    if not isinstance(e, Exception):\n        return \"%r\" % e\n\n    if isinstance(e, ProgrammingError):\n        return \"%s: %s\" % (e.__class__.__name__, e.args[0])\n\n    # Format stack trace\n    stack_frames = [\"%3d:%s: %s\" % (frame.filename, frame.lineno, frame.function) for frame in inspect.stack()[1:]]\n    stack_frames = \", \".join(stack_frames)\n\n    if max_path_level > 1:\n        stack_frames += \" (%d paths)\" % max_path_level\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d calls)\" % (max_calls if max_calls > 1 else 1)\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d stack frames)\" % max_calls\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d call stack)\" % (max_calls", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return \"%s: %s\" % (cls.__name__, e)\n    else:\n        return str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_level))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    out = cls._get_traceback_str(e, max_level, max_path_level)\n    if out:\n        return out\n\n    s = format_exception(e, cls.__name__, cls.__doc__)\n    return s\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return '{0}: {1}'.format(cls.__name__, str(e))\n    else:\n        return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(e.__class__.__name__, str(e), traceback.format_exc(max_level, max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e_str = ''.join(['%s: %s\\n' % (t[0], t[1]) for t in traceback.extract_tb(sys.exc_info()[2])])\n        return '%s [%s] %s' % (e.__class__.__name__, e.__class__.__name__, e_str)\n    else:\n        return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, HostNotFoundException):\n        return \"{}: {}\".format(cls.__name__, e.message)\n    else:\n        return str(cls) + ':'+ str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return cls.__extostr__(e, max_level=max_level, max_path_level=max_path_level)\n    else:\n        return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, str):\n        return e\n\n    if not isinstance(e, Exception):\n        return \"%r\" % e\n\n    if isinstance(e, ProgrammingError):\n        return \"%s: %s\" % (e.__class__.__name__, e.args[0])\n\n    # Format stack trace\n    stack_frames = [\"%3d:%s: %s\" % (frame.filename, frame.lineno, frame.function) for frame in inspect.stack()[1:]]\n    stack_frames = \", \".join(stack_frames)\n\n    if max_path_level > 1:\n        stack_frames += \" (%d paths)\" % max_path_level\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d calls)\" % (max_calls if max_calls > 1 else 1)\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d stack frames)\" % max_calls\n\n    if max_level > max_path_level:\n        stack_frames += \" (%d call stack)\" % (max_calls", "is_pass": false, "return_code": 1}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        return \"%s: %s\" % (cls.__name__, e)\n    else:\n        return str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, max_level))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = codecs.open(file_name, mode='ab', encoding=encoding)\n        file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except IOError:\n        if overwrite:\n            return 0\n        else:\n            raise\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            # Overwrite file if it exists.\n            os.remove(file_name)\n\n        with open(file_name, 'wb') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    except Exception as e:\n        # Log exception.\n        log_exception(e)\n\n        # Create a file if it doesn't exist.\n        with open(file_name, 'wb') as f:\n            f.write(text_buffer)\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        # If the file already exists write to it.\n        try:\n            with codecs.open(file_name, \"ab\", encoding) as file_handle:\n                file_handle.write(text_buffer)\n            return len(text_buffer)\n        except IOError as error:\n            print(error)\n\n    return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with codecs.open(file_name, 'ab', encoding) as file_obj:\n            return file_obj.write(text_buffer)\n    except (IOError, OSError) as error:\n        return error.errno\n    except (UnicodeEncodeError, UnicodeDecodeError) as error:\n        if overwrite:\n            return write_binary_to_file(file_name, text_buffer, encoding)\n        raise\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if encoding == 'cp437':\n            # cp437 is very slow on linux. Use fast version on windows\n            bytes_written = write_bytes_to_file_cp437(file_name, text_buffer)\n        else:\n            bytes_written = write_bytes_to_file(file_name, text_buffer)\n    except IOError as e:\n        # If the file cannot be written or if the encoding is not supported\n        # print('Unable to write to the file: {0}'.format(e))\n        # Return 0 instead of raising an error so the caller can know if the\n        # file can be written\n        return 0\n\n    return bytes_written\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if overwrite or not os.path.isfile(file_name):\n                f.write(text_buffer.encode(encoding))\n                return len(text_buffer)\n            else:\n                return 0\n    except Exception as ex:\n        print(ex)\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise Exception(\"File '%s' already exists\" % file_name)\n    with codecs.open(file_name, 'ab', encoding) as file_pointer:\n        file_pointer.write(text_buffer)\n        return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.isfile(file_name) and not overwrite:\n        raise Exception(\"File {} already exists. Use overwrite=True to overwrite\".format(file_name))\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer.encode(encoding))\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n        f = codecs.open(file_name, 'ab', encoding)\n        f.write(text_buffer)\n        return len(text_buffer)\n    except (IOError, OSError) as e:\n        print(\"Error writing to file '{0}': {1}\".format(file_name, e))\n        return 0\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        file_handle = codecs.open(file_name, mode='ab', encoding=encoding)\n        file_handle.write(text_buffer)\n        file_handle.close()\n        return len(text_buffer)\n    except IOError:\n        if overwrite:\n            return 0\n        else:\n            raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            # Overwrite file if it exists.\n            os.remove(file_name)\n\n        with open(file_name, 'wb') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    except Exception as e:\n        # Log exception.\n        log_exception(e)\n\n        # Create a file if it doesn't exist.\n        with open(file_name, 'wb') as f:\n            f.write(text_buffer)\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        # If the file already exists write to it.\n        try:\n            with codecs.open(file_name, \"ab\", encoding) as file_handle:\n                file_handle.write(text_buffer)\n            return len(text_buffer)\n        except IOError as error:\n            print(error)\n\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with codecs.open(file_name, 'ab', encoding) as file_obj:\n            return file_obj.write(text_buffer)\n    except (IOError, OSError) as error:\n        return error.errno\n    except (UnicodeEncodeError, UnicodeDecodeError) as error:\n        if overwrite:\n            return write_binary_to_file(file_name, text_buffer, encoding)\n        raise\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if encoding == 'cp437':\n            # cp437 is very slow on linux. Use fast version on windows\n            bytes_written = write_bytes_to_file_cp437(file_name, text_buffer)\n        else:\n            bytes_written = write_bytes_to_file(file_name, text_buffer)\n    except IOError as e:\n        # If the file cannot be written or if the encoding is not supported\n        # print('Unable to write to the file: {0}'.format(e))\n        # Return 0 instead of raising an error so the caller can know if the\n        # file can be written\n        return 0\n\n    return bytes_written\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        with open(file_name, 'ab') as f:\n            if overwrite or not os.path.isfile(file_name):\n                f.write(text_buffer.encode(encoding))\n                return len(text_buffer)\n            else:\n                return 0\n    except Exception as ex:\n        print(ex)\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        raise Exception(\"File '%s' already exists\" % file_name)\n    with codecs.open(file_name, 'ab', encoding) as file_pointer:\n        file_pointer.write(text_buffer)\n        return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.isfile(file_name) and not overwrite:\n        raise Exception(\"File {} already exists. Use overwrite=True to overwrite\".format(file_name))\n\n    with open(file_name, \"wb\") as f:\n        f.write(text_buffer.encode(encoding))\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    try:\n        if not overwrite and os.path.exists(file_name):\n            os.remove(file_name)\n        f = codecs.open(file_name, 'ab', encoding)\n        f.write(text_buffer)\n        return len(text_buffer)\n    except (IOError, OSError) as e:\n        print(\"Error writing to file '{0}': {1}\".format(file_name, e))\n        return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    try:\n        text = file.read()\n    finally:\n        file.close()\n    return text\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, \"r\", encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    else:\n        buffer = file.read()\n        file.close()\n        return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except (IOError, OSError):\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding).read()\n    except (IOError, OSError):\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    try:\n        text = file.read()\n    finally:\n        file.close()\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, \"r\", encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        file = codecs.open(file_name, 'r', encoding)\n    except IOError:\n        return None\n    else:\n        buffer = file.read()\n        file.close()\n        return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            return f.read()\n    except (IOError, OSError):\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, 'r', encoding) as f:\n            buffer = f.read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding).read()\n    except (IOError, OSError):\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        return os.path.isfile(file_name)\n    else:\n        return False\n", "def is_file_exist(file_name):\n    if not file_name:\n        return False\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        print(\"Invalid file name. Please check your file name.\")\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    else:\n        return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        raise IOError('File name is not exist.')\n    return True if os.path.isfile(file_name) else False\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        raise Exception('Invalid file name {}'.format(file_name))\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        msg = \"{} is not exist\".format(file_name)\n        raise argparse.ArgumentTypeError(msg)\n    return file_name\n", "def is_file_exist(file_name):\n    try:\n        file_exist = os.path.isfile(file_name)\n    except Exception:\n        file_exist = False\n\n    return file_exist\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        return os.path.isfile(file_name)\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not file_name:\n        return False\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        print(\"Invalid file name. Please check your file name.\")\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    else:\n        return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        raise IOError('File name is not exist.')\n    return True if os.path.isfile(file_name) else False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        raise Exception('Invalid file name {}'.format(file_name))\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        msg = \"{} is not exist\".format(file_name)\n        raise argparse.ArgumentTypeError(msg)\n    return file_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_file_exist(file_name):\n    try:\n        file_exist = os.path.isfile(file_name)\n    except Exception:\n        file_exist = False\n\n    return file_exist\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().setLevel(cls._log_level)\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    if '_logging_context' in cls.__dict__:\n        logging.getLogger('pyodbc').removeHandler(cls._logging_context.handler)\n        cls._logging_context.clear()\n", "def _reset_logging(cls):\n    global logger\n    logger = logging.getLogger(\"pyodbc\")\n    logger.removeHandler(cls.console_handler)\n    cls.console_handler.close()\n    cls.console_handler = logging.StreamHandler()\n    cls.console_handler.setFormatter(logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    logger.addHandler(cls.console_handler)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().removeHandler(cls._log_handler)\n    logging.getLogger().setLevel(cls._log_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if '_logging_context' in cls.__dict__:\n        logging.getLogger('pyodbc').removeHandler(cls._logging_context.handler)\n        cls._logging_context.clear()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    global logger\n    logger = logging.getLogger(\"pyodbc\")\n    logger.removeHandler(cls.console_handler)\n    cls.console_handler.close()\n    cls.console_handler = logging.StreamHandler()\n    cls.console_handler.setFormatter(logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    logger.addHandler(cls.console_handler)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return html.Link\n", "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return html.Target\n", "def _getTargetClass(self):\n    return html.Target\n", "def _getTargetClass(self):\n    return TextTestResult\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return DataTarget\n", "def _getTargetClass(self):\n    return html.Join\n", "def _getTargetClass(self):\n    return html.Target\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return html.Link\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return JavaScriptScriptTextTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Target\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Target\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return TextTestResult\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DataTarget\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Join\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Target\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert(o, 'ordering') for o in orderings]\n\n    # Find the longest ordering in any of the orderings\n    longest = max([o.index for o in orderings])\n\n    # Make sure the longest ordering is contained within any of the orderings\n    for o in orderings:\n        while o.index > longest:\n            o.append(o.pop(0))\n\n    return orderings\n", "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "def _legacy_mergeOrderings(orderings):\n    # get rid of duplicates and remove any empty orderings\n    orderings = list(set(orderings))\n    while len(orderings) > 1:\n        first = orderings.pop(0)\n        second = orderings.pop(0)\n        for e in second:\n            if e not in first:\n                orderings.append(e)\n    return orderings\n", "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = None\n    for o in orderings:\n        if o and o[0].lower()!= prev_end.lower():\n            merged.append(o)\n            prev_end = o[0]\n        else:\n            # Skip if the previous end is the same as the current end.\n            if prev_end == o[0]:\n                continue\n            else:\n                merged.append(o)\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i][1:])\n                suffix = ordering[i][0]\n\n    result.extend(orderings[-1])\n\n    return result + [suffix]\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if isinstance(orderings, list) else orderings\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged = []\n    current = []\n\n    for ordering in orderings:\n        if len(current) == 0:\n            continue\n        elif len(current) == 1:\n            merged.append(current[0])\n            current = []\n        else:\n            merged.append(current[0])\n            merged.append(ordering[0])\n            current.pop(0)\n\n    if current:\n        merged.append(current)\n\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert.convert(o) for o in orderings]\n\n    # Find the longest common suffix\n    common_suffix = None\n    longest_common_suffix = None\n    for index, o in enumerate(orderings):\n        if len(o) == 1:\n            continue\n        for other_o in orderings[index + 1:]:\n            if len(o) < len(other_o) and o[-1]!= other_o[-1]:\n                if common_suffix is None or o[-1] < common_suffix:\n                    common_suffix = o[-1]\n                    longest_common_suffix = other_o[-1]\n    if common_suffix is None:\n        return orderings\n\n    # Merge the two sorted orderings together\n    merged_orderings = []\n    for o in orderings:\n        if len(o) == 1:\n            merged_orderings.append(o[0])\n        else:\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_convert(o, 'ordering') for o in orderings]\n\n    # Find the longest ordering in any of the orderings\n    longest = max([o.index for o in orderings])\n\n    # Make sure the longest ordering is contained within any of the orderings\n    for o in orderings:\n        while o.index > longest:\n            o.append(o.pop(0))\n\n    return orderings\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # We can't use set.intersection because that would remove duplicates, while\n    # set.intersection returns all items in the set\n    return sorted(set([o[0] for o in orderings] + [o[1] for o in orderings]))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # get rid of duplicates and remove any empty orderings\n    orderings = list(set(orderings))\n    while len(orderings) > 1:\n        first = orderings.pop(0)\n        second = orderings.pop(0)\n        for e in second:\n            if e not in first:\n                orderings.append(e)\n    return orderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings.sort(key=lambda o: o[0].lower())\n    merged = []\n    prev_end = None\n    for o in orderings:\n        if o and o[0].lower()!= prev_end.lower():\n            merged.append(o)\n            prev_end = o[0]\n        else:\n            # Skip if the previous end is the same as the current end.\n            if prev_end == o[0]:\n                continue\n            else:\n                merged.append(o)\n    return merged\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [_fix_ordering(o) for o in orderings]\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if len(orderings) < 2:\n        return orderings\n\n    result = []\n    suffix = ''\n    for ordering in orderings:\n        for i in range(len(ordering)):\n            if i == 0:\n                suffix = ordering[i][0]\n            else:\n                result.append(ordering[i][1:])\n                suffix = ordering[i][0]\n\n    result.extend(orderings[-1])\n\n    return result + [suffix]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [orderings] if isinstance(orderings, list) else orderings\n    result = []\n    for o in orderings:\n        for e in o:\n            if e not in result:\n                result.append(e)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    spec = providedBySpec = getattr(object, '__providedBy__spec__', None)\n    if providedBySpec is not None:\n        return providedBySpec.__implementation__\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is not None:\n        return providedBy\n    spec = providedBySpec = getattr(object, '__providedBy__spec__', None)\n    if providedBySpec is not None:\n        return providedBySpec.__implementation__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "def minimalBases(classes):\n    minBase = None\n    min = None\n    for c in classes:\n        if minBase is None:\n            minBase = c\n        elif c < minBase:\n            minBase = c\n            min = c\n    return min\n", "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Class0)]\n", "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.order)[0]\n", "def minimalBases(classes):\n\n    minbases = []\n\n    for cls in classes:\n        bases = cls.__bases__\n        if bases:\n            # bases is a tuple\n            bases = bases[0]\n            if not bases:\n                continue\n            if bases not in minbases:\n                minbases.insert(0, bases)\n            elif bases == minbases[0]:\n                minbases.insert(0, cls)\n            elif bases!= minbases[1]:\n                minbases.insert(1, cls)\n\n    return minbases\n", "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n\n    ordered = []\n    for c in classes:\n        ordered.extend([c, c.__bases__[0]])\n\n    return sorted(ordered, key=lambda x: x.__name__)\n", "def minimalBases(classes):\n    minBases = []\n    for base in classes:\n        if issubclass(base, Model):\n            minBases.append(base)\n        elif base in minBases:\n            minBases.remove(base)\n    return minBases\n", "def minimalBases(classes):\n    minimum = None\n    classes = list(classes)\n    for i in range(len(classes)):\n        base = classes[i]\n        if minimum is None:\n            minimum = base\n        elif base < minimum:\n            minimum = base\n    return minimum\n", "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted(classes, key=lambda x: x.order)\n    if len(bases) == 0:\n        return classes\n\n    for i in range(len(bases) - 1):\n        if bases[i].order > bases[i + 1].order:\n            return bases[i + 1:]\n    return bases\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    minBases = classes[0]\n    for c in classes[1:]:\n        if c < minBases:\n            minBases = c\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBase = None\n    min = None\n    for c in classes:\n        if minBase is None:\n            minBase = c\n        elif c < minBase:\n            minBase = c\n            min = c\n    return min\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    classes.sort()\n    return [c for c in classes if issubclass(c, Class0)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n    else:\n        b = classes[1]\n        for x in classes[2:]:\n            if b.__class__ == x.__class__:\n                b = b.__bases__[0]\n            else:\n                b = None\n        return classes[:1] + [b]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.order)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n\n    minbases = []\n\n    for cls in classes:\n        bases = cls.__bases__\n        if bases:\n            # bases is a tuple\n            bases = bases[0]\n            if not bases:\n                continue\n            if bases not in minbases:\n                minbases.insert(0, bases)\n            elif bases == minbases[0]:\n                minbases.insert(0, cls)\n            elif bases!= minbases[1]:\n                minbases.insert(1, cls)\n\n    return minbases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    if len(classes) == 1:\n        return classes\n\n    ordered = []\n    for c in classes:\n        ordered.extend([c, c.__bases__[0]])\n\n    return sorted(ordered, key=lambda x: x.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBases = []\n    for base in classes:\n        if issubclass(base, Model):\n            minBases.append(base)\n        elif base in minBases:\n            minBases.remove(base)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minimum = None\n    classes = list(classes)\n    for i in range(len(classes)):\n        base = classes[i]\n        if minimum is None:\n            minimum = base\n        elif base < minimum:\n            minimum = base\n    return minimum\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = list(classes)\n    bases = sorted(classes, key=lambda x: x.order)\n    if len(bases) == 0:\n        return classes\n\n    for i in range(len(bases) - 1):\n        if bases[i].order > bases[i + 1].order:\n            return bases[i + 1:]\n    return bases\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    if all:\n        return sorted(self.__attrs.keys())\n    return sorted(self.__bases__[0].namesAndDescriptions(self))\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        names.extend(base.names(all))\n        descs.extend(base.descriptions(all))\n    return names, descs\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__dict__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return names, descriptions\n    return names, descriptions, tuple(names)\n", "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    if all:\n        return names\n    return [(name, self.__attrs[name].description) for name in names]\n", "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description())\n    return '\\n'.join(desc)\n", "def namesAndDescriptions(self, all=False):\n    attrs = sorted(self.__attrs)\n    if all:\n        return ['%s=%s' % (a, self.__attrs[a]) for a in attrs]\n    else:\n        return attrs\n", "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description)\n    return ', '.join(desc), ', '.join(keys)\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(base.names(all=all))\n        descriptions.extend(base.descriptions(all=all))\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    if all:\n        return names\n    return (\"%s %s\" % (names[0], self.__attrs[names[0]])).split(' ')\n", "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description())\n    return '\\n'.join(desc), '\\n'.join(keys)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return sorted(self.__attrs.keys())\n    return sorted(self.__bases__[0].namesAndDescriptions(self))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descs = []\n    for base in self.__bases__:\n        names.extend(base.names(all))\n        descs.extend(base.descriptions(all))\n    return names, descs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(getattr(base, \"__dict__\", []))\n        descriptions.extend(getattr(base, \"__doc__\", \"\"))\n    if all:\n        return names, descriptions\n    return names, descriptions, tuple(names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    if all:\n        return names\n    return [(name, self.__attrs[name].description) for name in names]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description())\n    return '\\n'.join(desc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attrs = sorted(self.__attrs)\n    if all:\n        return ['%s=%s' % (a, self.__attrs[a]) for a in attrs]\n    else:\n        return attrs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description)\n    return ', '.join(desc), ', '.join(keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        names.extend(base.names(all=all))\n        descriptions.extend(base.descriptions(all=all))\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = sorted(self.__attrs.keys())\n    if all:\n        return names\n    return (\"%s %s\" % (names[0], self.__attrs[names[0]])).split(' ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    keys = sorted(self.__attrs.keys())\n    if all:\n        return keys\n    desc = []\n    for key in keys:\n        desc.append(self.__attrs[key].description())\n    return '\\n'.join(desc), '\\n'.join(keys)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    else:\n        return tuple(sorted(self.__attrs.keys()))\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return [a for a in self.__attrs]\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs.keys())\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return [a for a in self.__attrs]\n", "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs.keys())\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "def names(self, all=False):\n    if all:\n        return [name for name, value in self.__attrs]\n    return [name for name, value in self.__attrs]\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return list(self.__bases__[0].__attrs)\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "def names(self, all=False):\n    if all:\n        return sorted(self.__attrs)\n    return self.__attrs\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if all:\n        return tuple(sorted(self.__attrs))\n    else:\n        return tuple(sorted(self.__attrs.keys()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return [a for a in self.__attrs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return [a for a in self.__attrs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs\n    return sorted(self.__attrs.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return [name for name, value in self.__attrs]\n    return [name for name, value in self.__attrs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    return list(self.__bases__[0].__attrs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs.keys())\n    return self.__attrs.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return sorted(self.__attrs)\n    return self.__attrs\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            _normalizeargs(i.args, output)\n        elif isinstance(i, Implements):\n            _normalizeargs(i.decls, output)\n        elif isinstance(i, Declaration):\n            output.append(i)\n        else:\n            output.append(i)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for item in sequence:\n        if isinstance(item, Interface):\n            output.append(item.name)\n            _normalizeargs(item.args, output)\n        elif isinstance(item, Declaration):\n            output.append(_normalizeargs(item.args, output))\n        elif isinstance(item, tuple):\n            output.append(_normalizetuple(item, output))\n        else:\n            output.append(item)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def recurse(declaration, args):\n        if isinstance(declaration, InterfaceClass):\n            return declaration, [args]\n        elif isinstance(declaration, InterfaceClass) or \\\n                isinstance(declaration, Implements):\n            for arg in args:\n                recurse(declaration.args[arg], arg.declaration)\n            return declaration, []\n        else:\n            assert isinstance(declaration, Declaration)\n            return declaration\n\n    def normalize(declaration, args):\n        if isinstance(declaration, InterfaceClass):\n            return recurse(declaration, [args])\n        elif isinstance(declaration, InterfaceClass) or \\\n                isinstance(declaration, Implements):\n            output.append(recurse(declaration, [args]))\n        else:\n        ", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = set([])\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            i = i.implementation\n        if _isdeclared(i, declared):\n            continue\n        if _isinterface(i):\n            i = _normalizeinterface(i)\n            declared.add(i)\n        else:\n            output.append(i)\n        output.extend(_normalizeargs(i._args, output))\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, InterfaceClass):\n            output.append(item.impl)\n        elif isinstance(item, Declaration):\n            output.append(item)\n        elif isinstance(item, tuple):\n            for i in item:\n                expand(i)\n        else:\n            output.append(item)\n\n    _normalizeargs(sequence, output)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for item in sequence:\n        if isinstance(item, InterfaceClass):\n            item = _normalizeargs(item.args, output)\n        elif isinstance(item, Declaration):\n            output.append(item)\n        elif isinstance(item, tuple):\n            output.append(item)\n        elif isinstance(item, (list, set, frozenset)):\n            output = output + item\n        else:\n            output.append(item)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for x in sequence:\n        if isinstance(x, InterfaceClass):\n            _normalizeargs(x.args, output)\n        elif isinstance(x, Declaration):\n            output.append(x)\n        elif isinstance(x, tuple):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for obj in sequence:\n        if isinstance(obj, InterfaceClass) or isinstance(obj, ImplementationSpec):\n            _normalizeargs(obj, output)\n        else:\n            output.append(obj)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, InterfaceClass):\n            _normalizeargs(x.declarations, output)\n        elif isinstance(x, tuple):\n            _normalizeargs(x, output)\n        else:\n            output.append(x)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for x in sequence:\n        _normalizeargs(x, output)\n\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            _normalizeargs(i.args, output)\n        elif isinstance(i, Implements):\n            _normalizeargs(i.decls, output)\n        elif isinstance(i, Declaration):\n            output.append(i)\n        else:\n            output.append(i)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for item in sequence:\n        if isinstance(item, Interface):\n            output.append(item.name)\n            _normalizeargs(item.args, output)\n        elif isinstance(item, Declaration):\n            output.append(_normalizeargs(item.args, output))\n        elif isinstance(item, tuple):\n            output.append(_normalizetuple(item, output))\n        else:\n            output.append(item)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def recurse(declaration, args):\n        if isinstance(declaration, InterfaceClass):\n            return declaration, [args]\n        elif isinstance(declaration, InterfaceClass) or \\\n                isinstance(declaration, Implements):\n            for arg in args:\n                recurse(declaration.args[arg], arg.declaration)\n            return declaration, []\n        else:\n            assert isinstance(declaration, Declaration)\n            return declaration\n\n    def normalize(declaration, args):\n        if isinstance(declaration, InterfaceClass):\n            return recurse(declaration, [args])\n        elif isinstance(declaration, InterfaceClass) or \\\n                isinstance(declaration, Implements):\n            output.append(recurse(declaration, [args]))\n        else:\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    declared = set([])\n    for i in sequence:\n        if isinstance(i, InterfaceClass):\n            i = i.implementation\n        if _isdeclared(i, declared):\n            continue\n        if _isinterface(i):\n            i = _normalizeinterface(i)\n            declared.add(i)\n        else:\n            output.append(i)\n        output.extend(_normalizeargs(i._args, output))\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def expand(item):\n        if isinstance(item, InterfaceClass):\n            output.append(item.impl)\n        elif isinstance(item, Declaration):\n            output.append(item)\n        elif isinstance(item, tuple):\n            for i in item:\n                expand(i)\n        else:\n            output.append(item)\n\n    _normalizeargs(sequence, output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for item in sequence:\n        if isinstance(item, InterfaceClass):\n            item = _normalizeargs(item.args, output)\n        elif isinstance(item, Declaration):\n            output.append(item)\n        elif isinstance(item, tuple):\n            output.append(item)\n        elif isinstance(item, (list, set, frozenset)):\n            output = output + item\n        else:\n            output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for x in sequence:\n        if isinstance(x, InterfaceClass):\n            _normalizeargs(x.args, output)\n        elif isinstance(x, Declaration):\n            output.append(x)\n        elif isinstance(x, tuple):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for obj in sequence:\n        if isinstance(obj, InterfaceClass) or isinstance(obj, ImplementationSpec):\n            _normalizeargs(obj, output)\n        else:\n            output.append(obj)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, InterfaceClass):\n            _normalizeargs(x.declarations, output)\n        elif isinstance(x, tuple):\n            _normalizeargs(x, output)\n        else:\n            output.append(x)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    for x in sequence:\n        _normalizeargs(x, output)\n\n    return output\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations as c_optimizations_module\n    except ImportError:\n        from.c_optimizations import c_optimizations_module\n\n    return c_optimizations_module\n", "def _c_optimizations_available():\n    from _c_optimizations import c_optimizations\n    return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n    except ImportError:\n        return False\n    else:\n        return Optimizations\n", "def _c_optimizations_available():\n    from c_opt import c_opt\n    return c_opt\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n        return COptimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations as c_optimizations_module\n    except ImportError:\n        from.c_optimizations import c_optimizations_module\n\n    return c_optimizations_module\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from _c_optimizations import c_optimizations\n    return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n        return Optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import Optimizations\n    except ImportError:\n        return False\n    else:\n        return Optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from c_opt import c_opt\n    return c_opt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return c_optimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n        return COptimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from.c_optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == '1'\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _should_attempt_c_optimizations():\n    pure_env_val = os.environ.get('PURE_PYTHON')\n    return pure_env_val is not None and pure_env_val == '1'\n", "def _should_attempt_c_optimizations():\n    pure_env_var = 'PURE_PYTHON'\n    return pure_env_var in os.environ\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return _c_optimizations_required() or _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == 'true'\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _should_attempt_c_optimizations():\n    pure_pypy = _c_optimizations_ignored() or PURE_PYTHON\n    return pure_pypy and sys.version_info[0] >= 3\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return _use_c_impl()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env_val = os.environ.get('PURE_PYTHON')\n    return pure_env_val is not None and pure_env_val == '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env_var = 'PURE_PYTHON'\n    return pure_env_var in os.environ\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return _c_optimizations_required() or _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = os.environ.get('PURE_PYTHON')\n    return pure_pypy is not None and pure_pypy == 'true'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_pypy = _c_optimizations_ignored() or PURE_PYTHON\n    return pure_pypy and sys.version_info[0] >= 3\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n\n    return _use_c_impl()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return 0\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return not _c_optimizations_required()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    return pure_env == '1'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is None:\n        return False\n    return pure_env == '1'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '0'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == \"true\"\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get(\"PURE_PYTHON\", None)\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    pure_env = os.environ.get('PURE_PYTHON')\n    if pure_env is not None:\n        return pure_env == '1'\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = {}\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = copy.copy(self._initial_bins)\n", "def reset(self):\n    self._cur_context = {}\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._cur_context = {}\n    self._initial_bins = copy.copy(self.bins)\n", "def reset(self):\n    self._cur_context = {}\n    self.edges = None\n    self.bins = None\n", "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._cur_context = copy.copy(self._initial_value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = copy.copy(self._initial_bins)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self._initial_bins = copy.copy(self.bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.edges = None\n    self.bins = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._cur_context = copy.copy(self._initial_value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header).dumps(self)\n", "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(x) for x in self.points])\n", "def to_csv(self, separator=\",\", header=None):\n    from..output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return _utils.to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self.points, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return utils.to_csv(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    import csv\n    return csv.writer(sys.stdout, delimiter=separator, quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from.output.ToCSV import ToCSV\n    return ToCSV(separator=separator, header=header).dumps(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(x) for x in self.points])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from..utils import to_csv\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return _utils.to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return _to_csv(self.points, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return utils.to_csv(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import csv\n    return csv.writer(sys.stdout, delimiter=separator, quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self.dim.names:\n        return self.dim.names.index(coord_name)\n    return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return []\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise ValueError(\"Unknown coordinate '{0}'\".format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    return None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self.dim.names:\n        return self.dim.names.index(coord_name)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise ValueError(\"Unknown coordinate '{0}'\".format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names.index(coord_name)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name in self._parsed_error_names:\n        return self._parsed_error_names[coord_name]\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name].update({\"index\": len(context.value)})\n", "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    for key in context.error:\n        if key not in self._parsed_error_names:\n            raise KeyError(\"Graph context does not contain the field {}\".format(key))\n        if key in context.value:\n            context.value[key].append(self._parsed_error_names[key])\n        else:\n            context.value[key] = [self._parsed_error_names[key]]\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        context.value[name] = {}\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n        for i, name_ in enumerate(self._parsed_error_names):\n            if name == name_:\n                context.error[name][i] = name\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        if name in context.error:\n            context.error[name] = {}\n        elif name in context.value:\n            context.error[name] = context.value[name]\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        try:\n            context.error[name] = getattr(self, name).value\n        except AttributeError:\n            context.error[name] = None\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for i in range(self.dim):\n            context.error[name][i] = getattr(self, name + \"_\" + str(i))\n", "def _update_context(self, context):\n    for name in self._parsed_error_names:\n        context[name] = {\"index\": name}\n\n    return\n", "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for index, val in enumerate(self._coord_names[name]):\n            context.error[name][val] = getattr(self, name)[index]\n", "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose its contents.\n    # This way the user can remove fields from the context any time.\n    context.update(\n        {\n            \"error\": {\n                \"x_low\": context.error.get(\"x_low\"),\n                \"index\": context.error.get(\"index\"),\n            },\n            \"value\": {},\n        }\n    )\n    # Update the graph properties.\n    for field in self._parsed_error_names:\n        context.update(context[\"error\"].get(field, {}))\n    # Remove values not in error_E_low (e.g. \"E,t\", \"t,error_E_low\").\n    for field in context.value:\n        if field in context.error:\n            del context.value[field]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        if name not in context.error:\n            context.error[name] = {}\n        context.error[name].update({\"index\": len(context.value)})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    context.value = {}\n    for key in context.error:\n        if key not in self._parsed_error_names:\n            raise KeyError(\"Graph context does not contain the field {}\".format(key))\n        if key in context.value:\n            context.value[key].append(self._parsed_error_names[key])\n        else:\n            context.value[key] = [self._parsed_error_names[key]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        context.value[name] = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._coord_names:\n        context.error[name] = {}\n        for i, name_ in enumerate(self._parsed_error_names):\n            if name == name_:\n                context.error[name][i] = name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        if name in context.error:\n            context.error[name] = {}\n        elif name in context.value:\n            context.error[name] = context.value[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        try:\n            context.error[name] = getattr(self, name).value\n        except AttributeError:\n            context.error[name] = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for i in range(self.dim):\n            context.error[name][i] = getattr(self, name + \"_\" + str(i))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for name in self._parsed_error_names:\n        context[name] = {\"index\": name}\n\n    return\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _update_context(self, context):\n    context.error = {}\n    for name in self._parsed_error_names:\n        context.error[name] = {}\n        for index, val in enumerate(self._coord_names[name]):\n            context.error[name][val] = getattr(self, name)[index]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    # Keep a copy of the context so we don't lose its contents.\n    # This way the user can remove fields from the context any time.\n    context.update(\n        {\n            \"error\": {\n                \"x_low\": context.error.get(\"x_low\"),\n                \"index\": context.error.get(\"index\"),\n            },\n            \"value\": {},\n        }\n    )\n    # Update the graph properties.\n    for field in self._parsed_error_names:\n        context.update(context[\"error\"].get(field, {}))\n    # Remove values not in error_E_low (e.g. \"E,t\", \"t,error_E_low\").\n    for field in context.value:\n        if field in context.error:\n            del context.value[field]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return sum((edges[i] * (bins[i+1] - bins[i]) for i in range(len(edges)-1)))\n", "def integral(bins, edges):\n    if bins.shape[0]!= edges.shape[0]:\n        raise ValueError(\"bins and edges must have the same number of \"\n                         \"entries.\")\n\n    # We need to know the total number of values in the bins.\n    total = bins.sum()\n\n    # We need to know the number of bins per value.\n    num_bins = edges.size\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    occurrences = bins.copy()\n    occurrences[:] = edges\n    occurrences[occurrences < 0] = 0\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    denominator = np.diff(occurrences)\n    denominator[denominator == 0] = 1\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    return np.dot(denominator, edges) / total\n", "def integral(bins, edges):\n    xedges, yedges = edges\n    xmid = (xedges[1:] + xedges[:-1]) / 2.\n    ymid = (yedges[1:] + yedges[:-1]) / 2.\n    return ((bins[1:] + bins[:-1]) * xmid * ymid).sum() / 2.\n", "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n\n    total = 0\n    for i, (x, y) in enumerate(zip(bins, edges)):\n        total += (x * y)\n    return total\n", "def integral(bins, edges):\n    n_bins = len(bins)\n    hist = [0]*n_bins\n    for x in edges:\n        hist[x-1] += bins[x]\n    return sum(hist)\n", "def integral(bins, edges):\n    return np.trapz(bins*edges, edges)\n", "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(bins)))\n", "def integral(bins, edges):\n    return (bins[1]-bins[0])*(edges[1:]-edges[:-1])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum((edges[i] * (bins[i+1] - bins[i]) for i in range(len(edges)-1)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if bins.shape[0]!= edges.shape[0]:\n        raise ValueError(\"bins and edges must have the same number of \"\n                         \"entries.\")\n\n    # We need to know the total number of values in the bins.\n    total = bins.sum()\n\n    # We need to know the number of bins per value.\n    num_bins = edges.size\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    occurrences = bins.copy()\n    occurrences[:] = edges\n    occurrences[occurrences < 0] = 0\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    denominator = np.diff(occurrences)\n    denominator[denominator == 0] = 1\n\n    # We need to know the total number of occurrences of each value in\n    # the bins.\n    return np.dot(denominator, edges) / total\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    xedges, yedges = edges\n    xmid = (xedges[1:] + xedges[:-1]) / 2.\n    ymid = (yedges[1:] + yedges[:-1]) / 2.\n    return ((bins[1:] + bins[:-1]) * xmid * ymid).sum() / 2.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    if len(bins)!= len(edges):\n        raise ValueError(\"bins and edges must be the same length\")\n\n    total = 0\n    for i, (x, y) in enumerate(zip(bins, edges)):\n        total += (x * y)\n    return total\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    n_bins = len(bins)\n    hist = [0]*n_bins\n    for x in edges:\n        hist[x-1] += bins[x]\n    return sum(hist)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.trapz(bins*edges, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(edges[i] * bins[i] for i in range(len(edges)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(edges[i]*bins[i] for i in range(len(bins)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (bins[1]-bins[0])*(edges[1:]-edges[:-1])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return is_source(seq) or is_fill_request_el(seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return is_source(seq) and not is_source(FillRequestElement(seq))\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and len(seq) > 0)\n", "def is_fill_request_seq(seq):\n    return is_source(seq) or (isinstance(seq, FillRequest) and not isinstance(seq, Source))\n", "def is_fill_request_seq(seq):\n    return is_source(seq) or is_fill_request_el(seq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_source(seq) or is_fill_request_el(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_source(seq) and not is_source(FillRequestElement(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) and not isinstance(seq, SourceSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (isinstance(seq, SourceSeq) and len(seq) > 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_source(seq) or (isinstance(seq, FillRequest) and not isinstance(seq, Source))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_source(seq) or is_fill_request_el(seq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib.get(\"method\") == \"request\"\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.get('method') =='request'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib[\"method\"] == \"request\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib.get('method') =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == \"fill\" and obj.attrib.get(\"method\") == \"request\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.attrib['method'] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' or obj.tag =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return obj.tag == 'fill' and obj.get('method') =='request'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, BaseExecutor) and hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, BaseExecutor) and hasattr(obj, 'run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) or \\\n        isinstance(obj, ComputeEl)\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl)\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalComputeBase) and\n             isinstance(obj.fill, EllipsisMixin)))\n", "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill))\n", "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            (isinstance(obj, ComputeElement) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillElement) and obj.fill is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillCompute) or\n            (isinstance(obj, Compute) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillElement) or\n            isinstance(obj, ComputeElement))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl) or \\\n        isinstance(obj, ComputeEl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, InternalComputeBase) and\n             isinstance(obj.fill, EllipsisMixin)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (isinstance(obj, FillBase) or\n            (isinstance(obj, ComputeBase) and obj.fill))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    d = d1 if level == 0 else deepcopy(d1)\n    keys = d.keys()\n    for key in keys:\n        if key in d2 and not d[key] == d2[key]:\n            d[key] = d2[key]\n        elif d2[key]!= d[key]:\n            d[key] = d2[key]\n        elif key in d1 and not d1[key] == d2[key]:\n            d[key] = d1[key]\n        elif d1[key] == d2[key]:\n            d[key] = d1[key] if level == 0 else -1\n    return d\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n    if level < 0:\n        level = -1\n    keys1 = set(d1.keys())\n    keys2 = set(d2.keys())\n    res = {}\n    for key in keys1:\n        if key in keys2:\n            if d1[key]!= d2[key]:\n                res[key] = d1[key]\n        else:\n            res[key] = d1[key]\n    for key in keys2:\n        if d1[key] == d2[key]:\n            res[key] = d1[key]\n    for key in keys1:\n        if d1[key] == d2[key] and level < 0:\n            res[key] = d2[key]\n        elif d1[key]!= d2[key] and level > 0:\n            res[key] = d1[key]\n            res[key] = difference(res[key], d2[ke", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict instance')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict instance')\n    d = d1.copy()\n    if level < 0:\n        return d\n    for key in d2:\n        if key not in d1 or d1[key]!= d2[key]:\n            d[key] = d2[key]\n            if level == 0:\n                return d\n            level -= 1\n", "def difference(d1, d2, level=-1):\n    d = deepcopy(d1)\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + 1\n    for k in d2:\n        if k not in d1 or d1[k]!= d2[k]:\n            d[level] = d2[k]\n            if isinstance(d1[k], dict) and isinstance(d2[k], dict):\n                d[level] = difference(d1[k], d2[k], level + 1)\n    return d\n", "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + level\n\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d2_copy = d2.copy()\n        for key in d1:\n            if key not in d2:\n                d2_copy[key] = d1[key]\n                if level == 0:\n                    return d2_copy\n            else:\n                d1[key] = d1[key] if d1[key] not in d2[level] else d2_copy[key]\n        return d2_copy\n", "def difference(d1, d2, level=-1):\n    d1 = dict(d1)\n    if not d1:\n        return d1\n\n    if level == 0:\n        return d1\n\n    for k, v in d2.items():\n        if k not in d1:\n            d1[k] = v\n            continue\n\n        if isinstance(v, dict) and v.get('__parent__')!= d1[k]:\n            d1[k] = d1.pop(k)\n            continue\n\n        d1[k] = min(d1[k], v)\n\n    return d1\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d1_dict = d1.copy()\n        d2_dict = d2.copy()\n        for key in d1_dict:\n            if key not in d2_dict or d1_dict[key]!= d2_dict[key]:\n                d1_dict.setdefault(key, 1)\n        if level < 0:\n            return d1_dict\n        for key in d2_dict:\n            if key not in d1_dict or d2_dict[key]!= d1_dict[key]:\n                d2_dict.setdefault(key, 1)\n        if level < 0:\n            return d2_dict\n        return d1_dict\n", "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict-like object.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict-like object.')\n    if level < 0:\n        level = max(d1.keys() & d2.keys(), default=-1) + level\n    ret = {}\n    for key in d1:\n        if key not in d2 or d1[key]!= d2[key]:\n            ret[key] = d1[key]\n    for key in d2:\n        if key not in d1 or d2[key]!= d1[key]:\n            ret[key] = d2[key]\n    return ret\n", "def difference(d1, d2, level=-1):\n    if not level:\n        d1 = dict(d1)\n        d2 = dict(d2)\n        return dict(d1.items() ^ d2.items())\n    result = d1\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n", "def difference(d1, d2, level=-1):\n    if not level:\n        d1 = d1 or {}\n        d2 = d2 or {}\n        return dict(d1.items() - d2.items())\n    if level < 0:\n        raise ValueError('level must be non-negative')\n    s = {}\n    for k, v in d1.items():\n        if k not in d2:\n            s[k] = v\n    for k, v in d2.items():\n        if k not in d1:\n            s[k] = v\n        elif isinstance(d1[k], dict) and isinstance(d2[k], dict):\n            s[k] = difference(d1[k], d2[k], level - 1)\n    return s\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    d = d1 if level == 0 else deepcopy(d1)\n    keys = d.keys()\n    for key in keys:\n        if key in d2 and not d[key] == d2[key]:\n            d[key] = d2[key]\n        elif d2[key]!= d[key]:\n            d[key] = d2[key]\n        elif key in d1 and not d1[key] == d2[key]:\n            d[key] = d1[key]\n        elif d1[key] == d2[key]:\n            d[key] = d1[key] if level == 0 else -1\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n    if level < 0:\n        level = -1\n    keys1 = set(d1.keys())\n    keys2 = set(d2.keys())\n    res = {}\n    for key in keys1:\n        if key in keys2:\n            if d1[key]!= d2[key]:\n                res[key] = d1[key]\n        else:\n            res[key] = d1[key]\n    for key in keys2:\n        if d1[key] == d2[key]:\n            res[key] = d1[key]\n    for key in keys1:\n        if d1[key] == d2[key] and level < 0:\n            res[key] = d2[key]\n        elif d1[key]!= d2[key] and level > 0:\n            res[key] = d1[key]\n            res[key] = difference(res[key], d2[ke", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict instance')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict instance')\n    d = d1.copy()\n    if level < 0:\n        return d\n    for key in d2:\n        if key not in d1 or d1[key]!= d2[key]:\n            d[key] = d2[key]\n            if level == 0:\n                return d\n            level -= 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = deepcopy(d1)\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + 1\n    for k in d2:\n        if k not in d1 or d1[k]!= d2[k]:\n            d[level] = d2[k]\n            if isinstance(d1[k], dict) and isinstance(d2[k], dict):\n                d[level] = difference(d1[k], d2[k], level + 1)\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() & d2.keys()) + level\n\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d2_copy = d2.copy()\n        for key in d1:\n            if key not in d2:\n                d2_copy[key] = d1[key]\n                if level == 0:\n                    return d2_copy\n            else:\n                d1[key] = d1[key] if d1[key] not in d2[level] else d2_copy[key]\n        return d2_copy\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d1 = dict(d1)\n    if not d1:\n        return d1\n\n    if level == 0:\n        return d1\n\n    for k, v in d2.items():\n        if k not in d1:\n            d1[k] = v\n            continue\n\n        if isinstance(v, dict) and v.get('__parent__')!= d1[k]:\n            d1[k] = d1.pop(k)\n            continue\n\n        d1[k] = min(d1[k], v)\n\n    return d1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    elif not d2:\n        return d1\n    else:\n        d1_dict = d1.copy()\n        d2_dict = d2.copy()\n        for key in d1_dict:\n            if key not in d2_dict or d1_dict[key]!= d2_dict[key]:\n                d1_dict.setdefault(key, 1)\n        if level < 0:\n            return d1_dict\n        for key in d2_dict:\n            if key not in d1_dict or d2_dict[key]!= d1_dict[key]:\n                d2_dict.setdefault(key, 1)\n        if level < 0:\n            return d2_dict\n        return d1_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not isinstance(d1, dict):\n        raise TypeError('d1 must be a dict-like object.')\n    if not isinstance(d2, dict):\n        raise TypeError('d2 must be a dict-like object.')\n    if level < 0:\n        level = max(d1.keys() & d2.keys(), default=-1) + level\n    ret = {}\n    for key in d1:\n        if key not in d2 or d1[key]!= d2[key]:\n            ret[key] = d1[key]\n    for key in d2:\n        if key not in d1 or d2[key]!= d1[key]:\n            ret[key] = d2[key]\n    return ret\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not level:\n        d1 = dict(d1)\n        d2 = dict(d2)\n        return dict(d1.items() ^ d2.items())\n    result = d1\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not level:\n        d1 = d1 or {}\n        d2 = d2 or {}\n        return dict(d1.items() - d2.items())\n    if level < 0:\n        raise ValueError('level must be non-negative')\n    s = {}\n    for k, v in d1.items():\n        if k not in d2:\n            s[k] = v\n    for k, v in d2.items():\n        if k not in d1:\n            s[k] = v\n        elif isinstance(d1[k], dict) and isinstance(d2[k], dict):\n            s[k] = difference(d1[k], d2[k], level - 1)\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and coord[0] <= edge[1]:\n            if edge[1] <= coord[1] and coord[1] <= edge[2]:\n                self.histogram[coord[0]][coord[1]] += weight\n", "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord and edge[1] >= coord:\n            self.histogram[edge[0]][edge[1]] += weight\n", "def fill(self, coord, weight=1):\n    # TODO: use bins to improve efficiency\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.hist[edge[0]][edge[1]] += weight\n", "def fill(self, coord, weight=1):\n    if self.edges is None:\n        self.edges = np.histogram(coord, self.bins)[0]\n    else:\n        self.edges[coord[0]:coord[-1]] = weight\n", "def fill(self, coord, weight=1):\n    for (d, edge) in enumerate(self.edges):\n        if coord >= edge:\n            break\n    else:\n        raise IndexError(\"Outside histogram edges\")\n\n    self.hist[coord] += weight\n", "def fill(self, coord, weight=1):\n\n    # Reset histogram if it was already filled\n    if self.edges[coord]!= 0:\n        self.hist.fill_edges(self.edges[coord])\n\n    # Add the given weight to the current histogram\n    self.hist.sum(weight)\n", "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.bins[edge[1]][edge[0]] += weight\n", "def fill(self, coord, weight=1):\n    self.edges[coord] = weight\n", "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self[edge] += weight\n", "def fill(self, coord, weight=1):\n    for i, edge in enumerate(self.edges):\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.histogram[coord[0] + i][coord[1] + i] = weight\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and coord[0] <= edge[1]:\n            if edge[1] <= coord[1] and coord[1] <= edge[2]:\n                self.histogram[coord[0]][coord[1]] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord and edge[1] >= coord:\n            self.histogram[edge[0]][edge[1]] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO: use bins to improve efficiency\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.hist[edge[0]][edge[1]] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.edges is None:\n        self.edges = np.histogram(coord, self.bins)[0]\n    else:\n        self.edges[coord[0]:coord[-1]] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for (d, edge) in enumerate(self.edges):\n        if coord >= edge:\n            break\n    else:\n        raise IndexError(\"Outside histogram edges\")\n\n    self.hist[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n\n    # Reset histogram if it was already filled\n    if self.edges[coord]!= 0:\n        self.hist.fill_edges(self.edges[coord])\n\n    # Add the given weight to the current histogram\n    self.hist.sum(weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.bins[edge[1]][edge[0]] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.edges[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for edge in self.edges:\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self[edge] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    for i, edge in enumerate(self.edges):\n        if edge[0] <= coord[0] and edge[1] >= coord[1]:\n            self.histogram[coord[0] + i][coord[1] + i] = weight\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    errors = []\n    for label, regexps in labels.items():\n        for regexp in regexps:\n            try:\n                validate_key(label)\n            except ValidationError as err:\n                errors.append({'label': label, 'error': err.messages})\n                continue\n            except TypeError:\n                pass\n            try:\n                validate_value(regexp)\n            except ValidationError as err:\n                errors.append({'label': label, 'error': err.messages})\n                continue\n            except KeyError:\n                pass\n            except AttributeError:\n                pass\n\n    if len(errors) == 0:\n        return\n\n    raise ValidationEr", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key in labels:\n            if not validate_value(value):\n                raise ValidationError(\n                    f\"Label key '{key}' does not match regex '{labels[key]}'\"\n                )\n        else:\n            raise ValidationError(f\"Label key '{key}' not found\")\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        key_re = validate_key(key)\n        value_re = validate_value(value)\n        if not key_re.match(key):\n            raise ValidationError(\n                {\n                    \"labels\": [\n                        f\"{key_re.messages[0]} does not match the regex: {value_re.messages[0]}\"\n                    ]\n                }\n            )\n", "def _validate_labels(labels):\n    errors = []\n\n    for key, regexp in labels.items():\n        errors.append(\n            ValidationError(\n                \"Label key '{}' does not match regex '{}'\".format(key, regexp)\n            )\n        )\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            _validate_labels(values)\n        else:\n            msg = \"Value of key '{}' in labels is not a dictionary\".format(key)\n            raise ValidationError(msg)\n", "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        err = None\n        try:\n            match_regex = validate_value(key)\n        except ValueError:\n            err = sys.exc_info()[1]\n            continue\n\n        if not match_regex:\n            err = ValidationError(f\"Label key '{key}' does not match regex\")\n            errors.append(err.messages)\n            continue\n\n        err = None\n        try:\n            match_regex = validate_value(value)\n        except ValueError:\n            err = sys.exc_info()[1]\n            err.messages.append(f\"Label value '{value}' does not match regex\")\n            continue\n\n        if not match_regex:\n            err = ValidationError(f\"Label value '{value}' does not", "def _validate_labels(labels):\n    keys = set(labels.keys())\n    for k, v in labels.items():\n        if not keys.issubset(v):\n            raise ValidationError(\n                \"Invalid label keys in labels: {}\".format(keys.difference(v))\n            )\n        if not _validate_value(v[0]):\n            raise ValidationError(\"Invalid value in label: {}\".format(v[0]))\n", "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp[\"regexp\"], key):\n                raise ValidationError(\n                    \"Invalid label key: '{}'. Valid keys are: {}.\".format(\n                        key, \", \".join(regexp[\"errors\"])\n                    )\n                )\n", "def _validate_labels(labels):\n    errors = []\n\n    for key, value in labels.items():\n        key_re = validate_key(key)\n        value_re = validate_value(value)\n\n        if not key_re:\n            errors.append({\n                \"message\": \"{} key does not match the regex pattern\".format(key),\n                \"location\": (key_re.start, key_re.end),\n            })\n\n        if not value_re:\n            errors.append({\n                \"message\": \"{} value does not match the regex pattern\".format(key),\n                \"location\": (value_re.start, value_re.end),\n            })\n\n    if errors:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            key = validate_key(key)\n\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(f\"'{key}' key '{value}' must be string or \"\n                                      f\"bytes-like object\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    errors = []\n    for label, regexps in labels.items():\n        for regexp in regexps:\n            try:\n                validate_key(label)\n            except ValidationError as err:\n                errors.append({'label': label, 'error': err.messages})\n                continue\n            except TypeError:\n                pass\n            try:\n                validate_value(regexp)\n            except ValidationError as err:\n                errors.append({'label': label, 'error': err.messages})\n                continue\n            except KeyError:\n                pass\n            except AttributeError:\n                pass\n\n    if len(errors) == 0:\n        return\n\n    raise ValidationEr", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if key in labels:\n            if not validate_value(value):\n                raise ValidationError(\n                    f\"Label key '{key}' does not match regex '{labels[key]}'\"\n                )\n        else:\n            raise ValidationError(f\"Label key '{key}' not found\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        key_re = validate_key(key)\n        value_re = validate_value(value)\n        if not key_re.match(key):\n            raise ValidationError(\n                {\n                    \"labels\": [\n                        f\"{key_re.messages[0]} does not match the regex: {value_re.messages[0]}\"\n                    ]\n                }\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n\n    for key, regexp in labels.items():\n        errors.append(\n            ValidationError(\n                \"Label key '{}' does not match regex '{}'\".format(key, regexp)\n            )\n        )\n\n    if len(errors) > 0:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(values, dict):\n            _validate_labels(values)\n        else:\n            msg = \"Value of key '{}' in labels is not a dictionary\".format(key)\n            raise ValidationError(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, value in labels.items():\n        err = None\n        try:\n            match_regex = validate_value(key)\n        except ValueError:\n            err = sys.exc_info()[1]\n            continue\n\n        if not match_regex:\n            err = ValidationError(f\"Label key '{key}' does not match regex\")\n            errors.append(err.messages)\n            continue\n\n        err = None\n        try:\n            match_regex = validate_value(value)\n        except ValueError:\n            err = sys.exc_info()[1]\n            err.messages.append(f\"Label value '{value}' does not match regex\")\n            continue\n\n        if not match_regex:\n            err = ValidationError(f\"Label value '{value}' does not", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    keys = set(labels.keys())\n    for k, v in labels.items():\n        if not keys.issubset(v):\n            raise ValidationError(\n                \"Invalid label keys in labels: {}\".format(keys.difference(v))\n            )\n        if not _validate_value(v[0]):\n            raise ValidationError(\"Invalid value in label: {}\".format(v[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, regexps in labels.items():\n        for regexp in regexps:\n            if not re.match(regexp[\"regexp\"], key):\n                raise ValidationError(\n                    \"Invalid label key: '{}'. Valid keys are: {}.\".format(\n                        key, \", \".join(regexp[\"errors\"])\n                    )\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n\n    for key, value in labels.items():\n        key_re = validate_key(key)\n        value_re = validate_value(value)\n\n        if not key_re:\n            errors.append({\n                \"message\": \"{} key does not match the regex pattern\".format(key),\n                \"location\": (key_re.start, key_re.end),\n            })\n\n        if not value_re:\n            errors.append({\n                \"message\": \"{} value does not match the regex pattern\".format(key),\n                \"location\": (value_re.start, value_re.end),\n            })\n\n    if errors:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in labels.items():\n        if isinstance(key, str):\n            key = validate_key(key)\n\n        for value in values:\n            if not isinstance(value, str):\n                raise ValidationError(f\"'{key}' key '{value}' must be string or \"\n                                      f\"bytes-like object\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"\n    Build or return the regular expressions that are used to validate the name\n    of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name.\n    \"\"\"\n    if not Krake.NAME_REGEX:\n        Krake.NAME_REGEX = re.compile(r\"\"\"\n            (?P<resource_name>(?:^|-))\n            \\S\n            (?P<separator>[-_])\n            \\S\n            (?P<service>\\w+)\n            \\S\n            (?P<version>\\d+\\.\\d+)\n        \"\"\", re.VERBOSE)\n    return Krake.NAME_REGEX\n", "def _get_resource_name_regex():\n    # type: () -> re.Pattern\n    \"\"\"\n    Build or return the regular expressions that are used to validate the\n    name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name.\n    \"\"\"\n    return _NAME_REGEX\n", "def _get_resource_name_regex():\n    global _NAME_REGEX\n    if not _NAME_REGEX:\n        _NAME_REGEX = re.compile(r'(?i)\\b({})\\Z'.format(\n            '|'.join(_KURE_RESOURCE_PREFIXES)))\n\n    return _NAME_REGEX\n", "def _get_resource_name_regex():\n    return re.compile(r'(?i)^(?:arn|s3|sqs)://')\n", "def _get_resource_name_regex():\n    resource_name_regex = re.compile(\n        r'^(?P<name>.+?)/(?P<id>.+?)$',\n        re.IGNORECASE | re.UNICODE\n    )\n\n    return resource_name_regex\n", "def _get_resource_name_regex():\n    patterns = []\n    # required to avoid circular imports\n    from. import resource_name_re\n    patterns.append(resource_name_re.compile(r\"^[A-Za-z0-9\\.]+$\"))\n    patterns.append(resource_name_re.compile(r\"^[A-Za-z0-9\\._\\-]+$\"))\n    return re.compile(\"|\".join(patterns))\n", "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:{})://\".format(\n        \"|\".join(KrakeKernel.resource_name_patterns.keys())))\n", "def _get_resource_name_regex():\n    return re.compile(\n        r\"(?P<resource_name>.*)|\"\n        r\"(?P<name_start>\\w+)(?P<name_end>[^/]+)?\"\n        r\"(?::(?P<suffix>.*))?\"\n        r\"(?P<suffix_separator>\\s*)?\"\n        r\"(?P<sub_suffix>[^/]+)\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:-(?P<suffix_separator>[^/]+))?\"\n        r\"(?:-(?P<sub_suffix>[^/]+))?\"\n        r\"(?P<suffix_separator>\\s*)?\"\n        r\"(?P<zone_name>\\w+)\"\n        r\"(?::(?P<suffix>.*))?\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:(?P<suffix_separator>[^/]+))?\"\n        r\"(?:(?P<sub_suffix>[^/]+))?\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:-(?P<suffix_separator>", "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:{}|{}|{}|{}|{}|{})$\".format(\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.keys()),\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.values()),\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.items()),\n    ))\n", "def _get_resource_name_regex():\n    return re.compile(r'(?i)^(?:(?<=[a-zA-Z])[A-Za-z0-9]|[A-Za-z0-9](?=[a-zA-Z]))\\.(?:kinesis\\.(?!dynamodb|dynamodb2|aws|dynamodb-cluster|dynamodb-s3))$')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    # type: () -> Pattern\n    \"\"\"\n    Build or return the regular expressions that are used to validate the name\n    of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name.\n    \"\"\"\n    if not Krake.NAME_REGEX:\n        Krake.NAME_REGEX = re.compile(r\"\"\"\n            (?P<resource_name>(?:^|-))\n            \\S\n            (?P<separator>[-_])\n            \\S\n            (?P<service>\\w+)\n            \\S\n            (?P<version>\\d+\\.\\d+)\n        \"\"\", re.VERBOSE)\n    return Krake.NAME_REGEX\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    # type: () -> re.Pattern\n    \"\"\"\n    Build or return the regular expressions that are used to validate the\n    name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate the\n            resource name.\n    \"\"\"\n    return _NAME_REGEX\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    global _NAME_REGEX\n    if not _NAME_REGEX:\n        _NAME_REGEX = re.compile(r'(?i)\\b({})\\Z'.format(\n            '|'.join(_KURE_RESOURCE_PREFIXES)))\n\n    return _NAME_REGEX\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'(?i)^(?:arn|s3|sqs)://')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    resource_name_regex = re.compile(\n        r'^(?P<name>.+?)/(?P<id>.+?)$',\n        re.IGNORECASE | re.UNICODE\n    )\n\n    return resource_name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    patterns = []\n    # required to avoid circular imports\n    from. import resource_name_re\n    patterns.append(resource_name_re.compile(r\"^[A-Za-z0-9\\.]+$\"))\n    patterns.append(resource_name_re.compile(r\"^[A-Za-z0-9\\._\\-]+$\"))\n    return re.compile(\"|\".join(patterns))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:{})://\".format(\n        \"|\".join(KrakeKernel.resource_name_patterns.keys())))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(\n        r\"(?P<resource_name>.*)|\"\n        r\"(?P<name_start>\\w+)(?P<name_end>[^/]+)?\"\n        r\"(?::(?P<suffix>.*))?\"\n        r\"(?P<suffix_separator>\\s*)?\"\n        r\"(?P<sub_suffix>[^/]+)\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:-(?P<suffix_separator>[^/]+))?\"\n        r\"(?:-(?P<sub_suffix>[^/]+))?\"\n        r\"(?P<suffix_separator>\\s*)?\"\n        r\"(?P<zone_name>\\w+)\"\n        r\"(?::(?P<suffix>.*))?\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:(?P<suffix_separator>[^/]+))?\"\n        r\"(?:(?P<sub_suffix>[^/]+))?\"\n        r\"(?P<suffix_separator>[^/]+)\"\n        r\"(?:-(?P<suffix_separator>", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:{}|{}|{}|{}|{}|{})$\".format(\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.keys()),\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.values()),\n        r\"|\".join(KrakeResource.RESOURCE_NAME_PATTERNS.items()),\n    ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'(?i)^(?:(?<=[a-zA-Z])[A-Za-z0-9]|[A-Za-z0-9](?=[a-zA-Z]))\\.(?:kinesis\\.(?!dynamodb|dynamodb2|aws|dynamodb-cluster|dynamodb-s3))$')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    labels_regex = _get_labels_regex()\n\n    try:\n        re.compile(labels_regex)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    if value is None:\n        return\n\n    if not _get_labels_regex().match(value):\n        raise ValidationError(\"Not a valid labels list.\")\n", "def validate_value(value):\n    _get_labels_regex().match(value)\n", "def validate_value(value):\n    match = _get_labels_regex().match(value)\n    if not match:\n        raise ValidationError(\"Value does not match the regular expression.\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    labels_regex = _get_labels_regex()\n\n    try:\n        re.compile(labels_regex)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if value is None:\n        return\n\n    if not _get_labels_regex().match(value):\n        raise ValidationError(\"Not a valid labels list.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _get_labels_regex().match(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    match = _get_labels_regex().match(value)\n    if not match:\n        raise ValidationError(\"Value does not match the regular expression.\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError(\"Invalid labels key.\")\n", "def validate_key(key):\n    key_re = _get_labels_regex()\n    if not key_re.match(key):\n        raise ValidationError(\"Invalid key provided.\")\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    _get_labels_regex().match(key)\n", "def validate_key(key):\n    match = _get_labels_regex().match(key)\n    if not match:\n        raise ValidationError('Invalid labels key')\n", "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError('Invalid key', key=key)\n", "def validate_key(key):\n    labels_regex = _get_labels_regex()\n    if not labels_regex.match(key):\n        raise ValidationError(\n            {\n                \"key\": [\n                    \"The given key is not valid for the corresponding regex.\"\n                ]\n            }\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError(\"Invalid labels key.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    key_re = _get_labels_regex()\n    if not key_re.match(key):\n        raise ValidationError(\"Invalid key provided.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    _get_labels_regex().match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    match = _get_labels_regex().match(key)\n    if not match:\n        raise ValidationError('Invalid labels key')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _get_labels_regex().match(key):\n        raise ValidationError('Invalid key', key=key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    labels_regex = _get_labels_regex()\n    if not labels_regex.match(key):\n        raise ValidationError(\n            {\n                \"key\": [\n                    \"The given key is not valid for the corresponding regex.\"\n                ]\n            }\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'metadata': manifest_dict}\n\n    observer_schema = manifest_dict.copy()\n    if'metadata' in observer_schema:\n        del observer_schema['metadata']\n    return observer_schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    recursively generate_default_observer_schema_dict(manifest_dict, first_level)\n    \"\"\"\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for field in schema:\n        if isinstance(schema[field], dict):\n            schema[field] = generate_default_observer_schema_dict(\n                schema[field], first_level=False\n            )\n\n    return schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {manifest_dict.get('metadata', {}).get('name'): manifest_dict.get('spec', {}).get('template')}\n    return {\n        manifest_dict.get('metadata', {}).get('name'): manifest_dict.get('spec', {}).get('template'),\n        manifest_dict.get('spec', {}).get('template'): manifest_dict.get('spec', {}).get('template')\n    }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema = manifest_dict.get('observer_schema', {})\n\n    for key, value in observer_schema.items():\n        if isinstance(value, dict):\n            if not first_level:\n                yield {key: None}\n\n            for key_copy, value_copy in generate_default_observer_schema_dict(\n                    value, first_level=False):\n                yield {key: key_copy}\n\n            if not value_copy:\n                yield {key: None}\n\n        elif value is None:\n            yield {key: None}\n\n        else:\n            yield {key: value}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_schema = copy.deepcopy(manifest_dict)\n    else:\n        manifest_schema = manifest_dict\n\n    for key, value in manifest_schema.items():\n        if isinstance(value, dict):\n            if not first_level:\n                manifest_schema[key] = generate_default_observer_schema_dict(\n                    value, first_level=False)\n            else:\n                manifest_schema[key] = None\n        elif isinstance(value, list):\n            if not first_level:\n                manifest_schema[key] = [\n                    generate_default_observer_schema_dict(v, first_level=False)\n                    for v in value]\n            else:\n                manifest_schema[key] = Non", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_dict = manifest_dict.copy()\n\n    for k, v in manifest_dict.items():\n        if isinstance(v, dict):\n            manifest_dict[k] = generate_default_observer_schema_dict(v, True)\n        elif not isinstance(v, (list, dict)):\n            manifest_dict[k] = None\n\n    return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n            \"id\": manifest_dict.get(\"id\"),\n            \"type\": manifest_dict.get(\"type\"),\n            \"name\": manifest_dict.get(\"name\"),\n            \"version\": manifest_dict.get(\"version\"),\n            \"description\": manifest_dict.get(\"description\"),\n        }\n\n    return {\n        \"id\": manifest_dict.get(\"id\"),\n        \"type\": manifest_dict.get(\"type\"),\n        \"name\": manifest_dict.get(\"name\"),\n        \"version\": manifest_dict.get(\"version\"),\n        \"description\": None,\n    }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n            },\n           'spec': manifest_dict['spec'],\n           'status': manifest_dict['status'],\n            'type': manifest_dict['type'],\n        }\n    else:\n        return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for k, v in schema.items():\n        if isinstance(v, dict):\n            schema[k] = generate_default_observer_schema_dict(v, True)\n\n    return schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict(manifest_dict)\n\n    observer_schema = manifest_dict.get('observer_schema', {})\n    for key, value in observer_schema.items():\n        if not isinstance(value, dict):\n            continue\n\n        manifest_dict[key] = generate_default_observer_schema_dict(value, first_level=True)\n\n    return manifest_dict\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'metadata': manifest_dict}\n\n    observer_schema = manifest_dict.copy()\n    if'metadata' in observer_schema:\n        del observer_schema['metadata']\n    return observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    generate_default_observer_schema_dict(manifest_dict, first_level)\n    recursively generate_default_observer_schema_dict(manifest_dict, first_level)\n    \"\"\"\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for field in schema:\n        if isinstance(schema[field], dict):\n            schema[field] = generate_default_observer_schema_dict(\n                schema[field], first_level=False\n            )\n\n    return schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {manifest_dict.get('metadata', {}).get('name'): manifest_dict.get('spec', {}).get('template')}\n    return {\n        manifest_dict.get('metadata', {}).get('name'): manifest_dict.get('spec', {}).get('template'),\n        manifest_dict.get('spec', {}).get('template'): manifest_dict.get('spec', {}).get('template')\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema = manifest_dict.get('observer_schema', {})\n\n    for key, value in observer_schema.items():\n        if isinstance(value, dict):\n            if not first_level:\n                yield {key: None}\n\n            for key_copy, value_copy in generate_default_observer_schema_dict(\n                    value, first_level=False):\n                yield {key: key_copy}\n\n            if not value_copy:\n                yield {key: None}\n\n        elif value is None:\n            yield {key: None}\n\n        else:\n            yield {key: value}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_schema = copy.deepcopy(manifest_dict)\n    else:\n        manifest_schema = manifest_dict\n\n    for key, value in manifest_schema.items():\n        if isinstance(value, dict):\n            if not first_level:\n                manifest_schema[key] = generate_default_observer_schema_dict(\n                    value, first_level=False)\n            else:\n                manifest_schema[key] = None\n        elif isinstance(value, list):\n            if not first_level:\n                manifest_schema[key] = [\n                    generate_default_observer_schema_dict(v, first_level=False)\n                    for v in value]\n            else:\n                manifest_schema[key] = Non", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if manifest_dict is None:\n        return None\n\n    if first_level:\n        manifest_dict = manifest_dict.copy()\n\n    for k, v in manifest_dict.items():\n        if isinstance(v, dict):\n            manifest_dict[k] = generate_default_observer_schema_dict(v, True)\n        elif not isinstance(v, (list, dict)):\n            manifest_dict[k] = None\n\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n            \"id\": manifest_dict.get(\"id\"),\n            \"type\": manifest_dict.get(\"type\"),\n            \"name\": manifest_dict.get(\"name\"),\n            \"version\": manifest_dict.get(\"version\"),\n            \"description\": manifest_dict.get(\"description\"),\n        }\n\n    return {\n        \"id\": manifest_dict.get(\"id\"),\n        \"type\": manifest_dict.get(\"type\"),\n        \"name\": manifest_dict.get(\"name\"),\n        \"version\": manifest_dict.get(\"version\"),\n        \"description\": None,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {\n           'metadata': {\n                'name': manifest_dict['metadata']['name'],\n                'namespace': manifest_dict['metadata']['namespace'],\n            },\n           'spec': manifest_dict['spec'],\n           'status': manifest_dict['status'],\n            'type': manifest_dict['type'],\n        }\n    else:\n        return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n\n    for k, v in schema.items():\n        if isinstance(v, dict):\n            schema[k] = generate_default_observer_schema_dict(v, True)\n\n    return schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict(manifest_dict)\n\n    observer_schema = manifest_dict.get('observer_schema', {})\n    for key, value in observer_schema.items():\n        if not isinstance(value, dict):\n            continue\n\n        manifest_dict[key] = generate_default_observer_schema_dict(value, first_level=True)\n\n    return manifest_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for manifest in response:\n        if manifest['selfLink'] is None:\n            last_applied_manifest.append(manifest)\n        elif manifest['selfLink']!= last_applied_manifest[-1]['selfLink']:\n            last_applied_manifest.append(manifest)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for last_applied_manifest_field in last_applied_manifest:\n        if last_applied_manifest_field not in observer_schema:\n            last_applied_manifest_field = response[0][last_applied_manifest_field]\n\n        if last_applied_manifest_field not in response:\n            last_applied_manifest_field = None\n\n        if last_applied_manifest_field is not None:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest_field, observer_schema, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                             observer_schema,\n                                             response\n    )\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                             observer_schema,\n                                             response\n    )\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n            continue\n\n        last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest[k],\n            observer_schema,\n            ", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs in observer_schema:\n        if obs.key not in last_applied_manifest:\n            last_applied_manifest[obs.key] = obs.value\n        elif obs.value!= last_applied_manifest[obs.key]:\n            last_applied_manifest[obs.key] = obs.value\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    \"\"\"\n    for manifest in response:\n        if manifest['metadata']['name'] in last_applied_manifest:\n            manifest['metadata']['last_applied'] = last_applied_manifest[manifest['metadata']['name']]\n        else:\n            manifest['metadata']['last_applied'] = None\n\n        if manifest['spec']['replicas'] > 0:\n            manifest['spec']['replicas'] = manifest['spec']['replicas'] - 1\n\n        if manifest['spec']['schemas'] > 0:\n            ma", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for item in response:\n        if 'items' in item:\n            if'metadata' in item:\n                item['metadata']['lastModified'] = last_applied_manifest[-1]['metadata']['lastModified']\n            if 'item' in item:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema, item['item']\n                )\n        else:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, item)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(last_applied_manifest[k], dict) and isinstance(v, dict):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, v)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest in response:\n        if manifest['metadata']['name'] not in last_applied_manifest:\n            last_applied_manifest[manifest['metadata']['name']] = manifest\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,\n                observer_schema,\n                manifest\n            )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, [])\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n            continue\n\n        if isinstance(v, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[k], observer_schema, v\n            )\n        elif isinstance(v, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[k], observer_schema, v\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for manifest in response:\n        if manifest['selfLink'] is None:\n            last_applied_manifest.append(manifest)\n        elif manifest['selfLink']!= last_applied_manifest[-1]['selfLink']:\n            last_applied_manifest.append(manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for last_applied_manifest_field in last_applied_manifest:\n        if last_applied_manifest_field not in observer_schema:\n            last_applied_manifest_field = response[0][last_applied_manifest_field]\n\n        if last_applied_manifest_field not in response:\n            last_applied_manifest_field = None\n\n        if last_applied_manifest_field is not None:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest_field, observer_schema, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                             observer_schema,\n                                             response\n    )\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                             observer_schema,\n                                             response\n    )\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n            continue\n\n        last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest[k],\n            observer_schema,\n            ", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs in observer_schema:\n        if obs.key not in last_applied_manifest:\n            last_applied_manifest[obs.key] = obs.value\n        elif obs.value!= last_applied_manifest[obs.key]:\n            last_applied_manifest[obs.key] = obs.value\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    \"\"\"\n    for manifest in response:\n        if manifest['metadata']['name'] in last_applied_manifest:\n            manifest['metadata']['last_applied'] = last_applied_manifest[manifest['metadata']['name']]\n        else:\n            manifest['metadata']['last_applied'] = None\n\n        if manifest['spec']['replicas'] > 0:\n            manifest['spec']['replicas'] = manifest['spec']['replicas'] - 1\n\n        if manifest['spec']['schemas'] > 0:\n            ma", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for item in response:\n        if 'items' in item:\n            if'metadata' in item:\n                item['metadata']['lastModified'] = last_applied_manifest[-1]['metadata']['lastModified']\n            if 'item' in item:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema, item['item']\n                )\n        else:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, item)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(last_applied_manifest[k], dict) and isinstance(v, dict):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, v)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest in response:\n        if manifest['metadata']['name'] not in last_applied_manifest:\n            last_applied_manifest[manifest['metadata']['name']] = manifest\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest,\n                observer_schema,\n                manifest\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, response)\n    update_last_applied_manifest_dict_from_resp(last_applied_manifest,\n                                              observer_schema, [])\n    \"\"\"\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n            continue\n\n        if isinstance(v, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[k], observer_schema, v\n            )\n        elif isinstance(v, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[k], observer_schema, v\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            if field == \"last_applied_manifest\":\n                last_applied_manifest[field] = response[field]\n            else:\n                setattr(last_applied_manifest, field, response[field])\n\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            if isinstance(observer_schema[k], list):\n                observer_schema[k] = observer_schema[k] + [v]\n            else:\n                observer_schema[k] = observer_schema[k] + [v]\n        elif k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(last_applied_manifest[k], dict) and v!= last_applied_manifest[k]:\n            raise KeyError(\n                \"observer schema and last applied manifest are not the same\"\n            )\n        else:\n            last_applied_manifest[k] = v\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif last_applied_manifest[field]!= response[field]:\n            raise KeyError(\n                \"Observed field '{}' should be equal to last_applied_manifest['{}']\".format(\n                    field, field\n                )\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(observer_schema[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema[key], value\n            )\n        else:\n            last_applied_manifest[key] = observer_schema[key]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif last_applied_manifest[field]!= response[field]:\n            raise KeyError(\n                \"observed field '{}' was updated as '{}' but last observed field \"\n                \"was '{}'\".format(field, last_applied_manifest[field], response[field])\n            )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field].append(response[field])\n        else:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in response:\n            continue\n        last_applied_manifest[field] = response[field]\n\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            if field == \"last_applied_manifest\":\n                last_applied_manifest[field] = response[field]\n            else:\n                setattr(last_applied_manifest, field, response[field])\n\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            if isinstance(observer_schema[k], list):\n                observer_schema[k] = observer_schema[k] + [v]\n            else:\n                observer_schema[k] = observer_schema[k] + [v]\n        elif k not in last_applied_manifest:\n            last_applied_manifest[k] = v\n        elif isinstance(last_applied_manifest[k], dict) and v!= last_applied_manifest[k]:\n            raise KeyError(\n                \"observer schema and last applied manifest are not the same\"\n            )\n        else:\n            last_applied_manifest[k] = v\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif last_applied_manifest[field]!= response[field]:\n            raise KeyError(\n                \"Observed field '{}' should be equal to last_applied_manifest['{}']\".format(\n                    field, field\n                )\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(observer_schema[key], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema[key], value\n            )\n        else:\n            last_applied_manifest[key] = observer_schema[key]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif last_applied_manifest[field]!= response[field]:\n            raise KeyError(\n                \"observed field '{}' was updated as '{}' but last observed field \"\n                \"was '{}'\".format(field, last_applied_manifest[field], response[field])\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field].append(response[field])\n        else:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema[\"fields\"]:\n        if field not in response:\n            continue\n        last_applied_manifest[field] = response[field]\n\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    for manifest in app.context.invocation_result.manifest.values():\n        if manifest.get(\"custom_observer_schema\"):\n            manifest_dict = copy.deepcopy(manifest)\n            manifest_dict[\"custom_observer_schema\"] = generate_default_observer_schema_dict(\n                manifest_dict, manifest_dict.get(\"custom_observer_schema\")\n            )\n            yield manifest_dict\n", "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver') is None:\n        return\n    manifest_dict = copy.deepcopy(app.config.get('KubernetesResourceObserver'))\n    manifest_dict.update({'type': 'custom'})\n    return generate_default_observer_schema_dict(manifest_dict, True)\n", "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.kubernetes.resources:\n        if kubernetes_resource.custom_observer_schema:\n            schema = copy.copy(kubernetes_resource.custom_observer_schema)\n            schema['spec']['template']['spec']['containers'][0]['configuration']['name'] = kubernetes_resource.name\n            yield schema\n", "def generate_default_observer_schema(app):\n    if not app.config.get('Kubernetes.custom_observer_schema'):\n        return {}\n    return copy.deepcopy(app.config['Kubernetes.custom_observer_schema'])\n", "def generate_default_observer_schema(app):\n    manifest_dict = copy.deepcopy(app.config.get('Kubernetes', {}))\n\n    for kubernetes_resource in manifest_dict.get('resources', []):\n        if kubernetes_resource.get('kind')!= 'CustomObserver':\n            continue\n\n        manifest_dict.update(generate_observer_schema_dict(\n            kubernetes_resource, True))\n\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    custom_schema = copy.deepcopy(app.spec.custom_observer_schema)\n    if 'observer' not in custom_schema:\n        return\n\n    for resource in custom_schema['observer']:\n        if resource['type'] == 'custom':\n            app.spec.custom_observer_schema = resource\n            app.spec.save()\n", "def generate_default_observer_schema(app):\n    custom_observer_schema = {\n        'name': 'observer',\n        'type':'string',\n        'enum': [],\n        'default': ''\n    }\n\n    return generate_custom_observer_schema(app, custom_observer_schema)\n", "def generate_default_observer_schema(app):\n    manifest_dict = app.spec.manifest\n    if 'observer_schema' not in manifest_dict:\n        return\n\n    return {'type': 'object', 'properties': {\n        observer_schema['name']: {'type': observer_schema['type'], 'additionalProperties': {'type':'string', 'pattern': observer_schema['pattern']}}\n        for observer_schema in manifest_dict['observer_schema']\n    }}\n", "def generate_default_observer_schema(app):\n    manifest_dict = app.client.get('/api/v1/custom-observer-schemas').json()\n    for manifest in manifest_dict:\n        if manifest['name'] in app.config.get('Kubernetes', {}).get('custom_observer_schema', []):\n            manifest['type'] = 'custom'\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    custom_observer_schema_dict = copy.deepcopy(spec.DEFAULT_OBSERVER_SCHEMA)\n    for kubernetes_resource in app.kubernetes_resources:\n        if kubernetes_resource.manifest.get('observer') is None:\n            custom_observer_schema_dict.update(\n                {kubernetes_resource.name: kubernetes_resource.schema})\n\n    return custom_observer_schema_dict\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    for manifest in app.context.invocation_result.manifest.values():\n        if manifest.get(\"custom_observer_schema\"):\n            manifest_dict = copy.deepcopy(manifest)\n            manifest_dict[\"custom_observer_schema\"] = generate_default_observer_schema_dict(\n                manifest_dict, manifest_dict.get(\"custom_observer_schema\")\n            )\n            yield manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('KubernetesResourceObserver') is None:\n        return\n    manifest_dict = copy.deepcopy(app.config.get('KubernetesResourceObserver'))\n    manifest_dict.update({'type': 'custom'})\n    return generate_default_observer_schema_dict(manifest_dict, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.kubernetes.resources:\n        if kubernetes_resource.custom_observer_schema:\n            schema = copy.copy(kubernetes_resource.custom_observer_schema)\n            schema['spec']['template']['spec']['containers'][0]['configuration']['name'] = kubernetes_resource.name\n            yield schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if not app.config.get('Kubernetes.custom_observer_schema'):\n        return {}\n    return copy.deepcopy(app.config['Kubernetes.custom_observer_schema'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = copy.deepcopy(app.config.get('Kubernetes', {}))\n\n    for kubernetes_resource in manifest_dict.get('resources', []):\n        if kubernetes_resource.get('kind')!= 'CustomObserver':\n            continue\n\n        manifest_dict.update(generate_observer_schema_dict(\n            kubernetes_resource, True))\n\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = copy.deepcopy(app.spec.custom_observer_schema)\n    if 'observer' not in custom_schema:\n        return\n\n    for resource in custom_schema['observer']:\n        if resource['type'] == 'custom':\n            app.spec.custom_observer_schema = resource\n            app.spec.save()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_observer_schema = {\n        'name': 'observer',\n        'type':'string',\n        'enum': [],\n        'default': ''\n    }\n\n    return generate_custom_observer_schema(app, custom_observer_schema)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.spec.manifest\n    if 'observer_schema' not in manifest_dict:\n        return\n\n    return {'type': 'object', 'properties': {\n        observer_schema['name']: {'type': observer_schema['type'], 'additionalProperties': {'type':'string', 'pattern': observer_schema['pattern']}}\n        for observer_schema in manifest_dict['observer_schema']\n    }}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = app.client.get('/api/v1/custom-observer-schemas').json()\n    for manifest in manifest_dict:\n        if manifest['name'] in app.config.get('Kubernetes', {}).get('custom_observer_schema', []):\n            manifest['type'] = 'custom'\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_observer_schema_dict = copy.deepcopy(spec.DEFAULT_OBSERVER_SCHEMA)\n    for kubernetes_resource in app.kubernetes_resources:\n        if kubernetes_resource.manifest.get('observer') is None:\n            custom_observer_schema_dict.update(\n                {kubernetes_resource.name: kubernetes_resource.schema})\n\n    return custom_observer_schema_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\nout_style = self._converter.get_out_style(params)\n\nif out_style == self.SQLParams.in_style:\nreturn sql, params\n\nif out_style == self.SQLParams.ordinal:\nreturn sql.encode('utf-8'), params\n\nraise ValueError('Unknown out-style parameter {!r}'.format(out_style))\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style is None:\nreturn sql, params\n\nelif self.in_style == 'ordinal':\nreturn sql, params\n\nelse:\nraise Exception(\n'SQLParams.in_style must be one of {}, {}, or None.'.format(\nself.SQLParams.in_styles, self.SQLParams.ordinals\n)\n)\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\nif self.in_style is None:\nreturn sql, params\n\nif isinstance(self.in_style, str):\nreturn sql, {self.in_style: params}\nelif isinstance(self.in_style, bytes):\nreturn sql, {self.in_style: params}\nelse:\nraise TypeError(\n\"in_style must be either a string or bytes, not {!r}\"\n.format(self.in_style)\n)\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None\n) -> Tuple[str, Sequence]:\nif self.in_style == \"ordinal\":\nreturn self._converter.format_ordinal(sql, params)\nelif self.in_style == \"sql\":\nreturn self._converter.format_sql(sql, params)\nelse:\nraise ValueError(\"Unknown in-style parameter '{}'\".format(self.in_style))\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Any]]:\nif self.in_style is None:\nraise SQLParamsError(\"SQL parameters are not configured\")\n\nif params is not None:\nif isinstance(params, Mapping):\nparams = params.items()\n\nout_params = []\nfor param in params:\nout_params.append(self._converter.convert(param))\n\nout_sql = sql.format(*out_params)\nelse:\nout_sql = sql\n\nreturn (out_sql, params)\n", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n# Convert the SQL query to use the in-style parameters\nreturn self._converter.format(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n# NOTE: We really want to use SQLParams.in_style here, but that would\n# require having to convert the params to an OrderedDict to avoid the\n# problem of inconsistencies.\n\nif isinstance(params, Mapping):\nout_style = params\nelse:\nout_style = self._converter.to_out_style(params)\n\nif isinstance(sql, bytes):\nreturn sql.decode('utf8'), out_style\nelse:\nreturn sql, out_style\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\n# convert parameters to SQLParams\nif params is None:\nparams = self._converter.params\n\n# convert SQL query to bytes\nif isinstance(sql, bytes):\nsql = sql.decode(\"utf-8\")\n\n# convert SQL query to bytes\nif isinstance(sql, str):\nsql = sql.encode(\"utf-8\")\n\n# convert SQL parameters to bytes\nif isinstance(params, Mapping):\nparams = params.items()\n\n# convert parameters to SQLParams\nout = {}\nout.update(params)\nout.update(sql)\n\nif self._out_style == \"ordinal\":\nout = OrderedDict(out)\n\nreturn sql, out\n", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, int]]:\nif params is None:\nparams = {}\n\nif isinstance(sql, bytes):\nparams = parse_bytes(sql)\n\nif isinstance(params, dict):\nparams = params.items()\n\nif isinstance(params, Sequence):\nparams = OrderedDict(params)\n\nreturn sql, params\n", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style is None:\nreturn sql, params\n\nout_style_params = self.in_style.get_converted_params(params)\n\nif isinstance(self.out_style, str):\nreturn sql.format(**out_style_params), out_style_params\n\nelif isinstance(self.out_style, bytes):\nreturn sql.format(**out_style_params), {}\n\nelse:\nraise TypeError('Invalid out-style parameter type: {}'.format(type(self.out_style).__name__))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Any]]:\nout_style = self._converter.get_out_style(params)\n\nif out_style == self.SQLParams.in_style:\nreturn sql, params\n\nif out_style == self.SQLParams.ordinal:\nreturn sql.encode('utf-8'), params\n\nraise ValueError('Unknown out-style parameter {!r}'.format(out_style))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style is None:\nreturn sql, params\n\nelif self.in_style == 'ordinal':\nreturn sql, params\n\nelse:\nraise Exception(\n'SQLParams.in_style must be one of {}, {}, or None.'.format(\nself.SQLParams.in_styles, self.SQLParams.ordinals\n)\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Mapping[str, int]]]:\nif self.in_style is None:\nreturn sql, params\n\nif isinstance(self.in_style, str):\nreturn sql, {self.in_style: params}\nelif isinstance(self.in_style, bytes):\nreturn sql, {self.in_style: params}\nelse:\nraise TypeError(\n\"in_style must be either a string or bytes, not {!r}\"\n.format(self.in_style)\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None\n) -> Tuple[str, Sequence]:\nif self.in_style == \"ordinal\":\nreturn self._converter.format_ordinal(sql, params)\nelif self.in_style == \"sql\":\nreturn self._converter.format_sql(sql, params)\nelse:\nraise ValueError(\"Unknown in-style parameter '{}'\".format(self.in_style))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Sequence[Any]]:\nif self.in_style is None:\nraise SQLParamsError(\"SQL parameters are not configured\")\n\nif params is not None:\nif isinstance(params, Mapping):\nparams = params.items()\n\nout_params = []\nfor param in params:\nout_params.append(self._converter.convert(param))\n\nout_sql = sql.format(*out_params)\nelse:\nout_sql = sql\n\nreturn (out_sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[bytes, Mapping[Union[str, int], Union[str, int]]]:\n# Convert the SQL query to use the in-style parameters\nreturn self._converter.format(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, Sequence[Any]]:\n# NOTE: We really want to use SQLParams.in_style here, but that would\n# require having to convert the params to an OrderedDict to avoid the\n# problem of inconsistencies.\n\nif isinstance(params, Mapping):\nout_style = params\nelse:\nout_style = self._converter.to_out_style(params)\n\nif isinstance(sql, bytes):\nreturn sql.decode('utf8'), out_style\nelse:\nreturn sql, out_style\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping = None,\n) -> Tuple[str, Mapping[str, int]]:\n\n# convert parameters to SQLParams\nif params is None:\nparams = self._converter.params\n\n# convert SQL query to bytes\nif isinstance(sql, bytes):\nsql = sql.decode(\"utf-8\")\n\n# convert SQL query to bytes\nif isinstance(sql, str):\nsql = sql.encode(\"utf-8\")\n\n# convert SQL parameters to bytes\nif isinstance(params, Mapping):\nparams = params.items()\n\n# convert parameters to SQLParams\nout = {}\nout.update(params)\nout.update(sql)\n\nif self._out_style == \"ordinal\":\nout = OrderedDict(out)\n\nreturn sql, out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int] = None,\n) -> Tuple[bytes, Mapping[str, int]]:\nif params is None:\nparams = {}\n\nif isinstance(sql, bytes):\nparams = parse_bytes(sql)\n\nif isinstance(params, dict):\nparams = params.items()\n\nif isinstance(params, Sequence):\nparams = OrderedDict(params)\n\nreturn sql, params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Union[str, int]]\n) -> Tuple[str, Sequence[Mapping[Union[str, int], Union[str, int]]]]:\n\nif self.in_style is None:\nreturn sql, params\n\nout_style_params = self.in_style.get_converted_params(params)\n\nif isinstance(self.out_style, str):\nreturn sql.format(**out_style_params), out_style_params\n\nelif isinstance(self.out_style, bytes):\nreturn sql.format(**out_style_params), {}\n\nelse:\nraise TypeError('Invalid out-style parameter type: {}'.format(type(self.out_style).__name__))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[Mapping[bytes, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  It maps each parameter (:class:`str` or :class:`int`) to\nvalue.  If :attr:`.SQLParams.in_style` is a named parameter style\nor then then then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then then then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[str, list]:\nout_params = self._converter.convertmany(sql, many_params, params)\n\nreturn self._converter.formatmany(sql, out_params, params)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = None,\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, list]:\nif self.in_style == \"ordinal\":\nreturn self._converter.formatmany(sql, many_params, params)\nreturn self._converter.formatmany(sql, params)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams (:class:`dict` or :class:`list`). \n\nSee :meth:`.SQLParams.formatmany` for the formatted out-style parameters\nand :meth:", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]],\nparams: Mapping[Union[str, int], Any]\n) -> Tuple[bytes, list]:\n\nif not self.in_style:\nreturn sql, []\n\nparam_list = []\n\nfor p in many_params:\nparam_list.append(p)\n\nif not isinstance(params, Mapping):\nparams = {p: params[p] for p in params}\n\nif self.out_style == 'ordinal':\nreturn sql.format(**params), param_list\n\nreturn sql.format(*params), param_list\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Any]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. \n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of out-style parameters.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or ", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nif self.in_style == SQLParams.ordinal:\nreturn self._converter.formatmany(sql, many_params, params)\nelse:\nraise TypeError(f\"{self.in_style} has no converter for formatmany()\")\n", "def formatmany(\n\t\tself,\n\t\tsql: bytes,\n*many_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[dict]]:\n# pylint: disable=invalid-name\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\neach set of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of converted out-style parameters (:class:`dict` or :class:`list`).                                                                              ", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nout = []\n\nfor param in many_params:\nout.append(self._converter.convert(param))\n\nif self._in_style is SQLParams.ordinal:\nout.append(self._converter.convert_ordinal(params))\n\nreturn (\nf\"({sql})\",\nout\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Dict[str, Any]]]:\nout_params = self._converter.convertmany(sql, many_params, params)\nreturn sql, out_params\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: bytes,\nmany_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[Mapping[bytes, int]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping`\nor :class:`~collections.abc.Sequence`) contains the set of in-style\nparameters.  It maps each parameter (:class:`str` or :class:`int`) to\nvalue.  If :attr:`.SQLParams.in_style` is a named parameter style\nor then then then *params* must be a\n:class:`~collections.abc.Mapping`. If :attr:`.SQLParams.in_style`\nis an ordinal parameter style, then then then *params* must be a\n:class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`byt", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[str, list]:\nout_params = self._converter.convertmany(sql, many_params, params)\n\nreturn self._converter.formatmany(sql, out_params, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = None,\nparams: Mapping[Union[str, int], Any] = None\n) -> Tuple[str, list]:\nif self.in_style == \"ordinal\":\nreturn self._converter.formatmany(sql, many_params, params)\nreturn self._converter.formatmany(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Union[str, int]] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Union[str, int]]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nset of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style\nparams (:class:`dict` or :class:`list`). \n\nSee :meth:`.SQLParams.formatmany` for the formatted out-style parameters\nand :meth:", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]],\nparams: Mapping[Union[str, int], Any]\n) -> Tuple[bytes, list]:\n\nif not self.in_style:\nreturn sql, []\n\nparam_list = []\n\nfor p in many_params:\nparam_list.append(p)\n\nif not isinstance(params, Mapping):\nparams = {p: params[p] for p in params}\n\nif self.out_style == 'ordinal':\nreturn sql.format(**params), param_list\n\nreturn sql.format(*params), param_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[int, str]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Mapping[Union[str, int], Any]]]:\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of the in-style\nparameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each\nSet of in-style parameters.\n\n- *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. \n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of out-style parameters.\n\nReturns a :class:`tuple` containing:\n\n- The formatted SQL query (:class:`str` or :class:`bytes`).\n- A :class:`list` containing each set of converted out-style parameters\n (:class:`dict` or ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nif self.in_style == SQLParams.ordinal:\nreturn self._converter.formatmany(sql, many_params, params)\nelse:\nraise TypeError(f\"{self.in_style} has no converter for formatmany()\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: bytes,\n*many_params: Iterable[bytes],\nparams: Mapping[bytes, int] = None\n) -> Tuple[bytes, List[dict]]:\n# pylint: disable=invalid-name\n\"\"\"\nConvert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains\neach set of in-style parameters (*params*). - *params* (:class:`~collections.abc.Mapping` or\n:class:`~collections.abc.Sequence`) contains the set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of in-style parameters.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`) contains\nthe set of converted out-style parameters (:class:`dict` or :class:`list`).                                                                              ", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[str, list]:\nout = []\n\nfor param in many_params:\nout.append(self._converter.convert(param))\n\nif self._in_style is SQLParams.ordinal:\nout.append(self._converter.convert_ordinal(params))\n\nreturn (\nf\"({sql})\",\nout\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[bytes, str],\nmany_params: Iterable[Union[str, int]] = (),\nparams: Mapping[Union[str, int], Any] = ()\n) -> Tuple[bytes, List[Dict[str, Any]]]:\nout_params = self._converter.convertmany(sql, many_params, params)\nreturn sql, out_params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    return self.obj_fs.exists(path) and self.root_inv_validator.validate(path)\n", "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"'%s' is not a file\", path)\n        return False\n    if path.endswith(\"/\"):\n        self.log.info(\"Validating '%s'\", path)\n        return self.root_inv_validator.validate(path)\n    else:\n        self.log.info(\"Validating '%s' as a directory\", path)\n        return self.obj_fs.validate(path)\n", "def validate(self, path):\n    if path is None:\n        return False\n\n    if not path.startswith(self.content_directory):\n        return False\n\n    # Check if the path is valid.\n    if not self.root_inv_validator.validate(path):\n        return False\n\n    return True\n", "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.root_inv_validator.validate(path)\n        return True\n    except ValidationError:\n        self.log.debug(\"Failed validating path %s\", path)\n        return False\n", "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return self.root_inv_validator.validate(path)\n", "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"%s is not a file\", path)\n        return False\n\n    if os.path.isdir(path):\n        self.log.debug(\"Object path is a directory: %s\", path)\n        return True\n\n    if self.root_inv_validator.match(path) is None:\n        self.log.debug(\"Object path does not match root inventory\")\n        return False\n\n    if self.digest_algorithm.match(path) is None:\n        self.log.debug(\"Object path does not match digest algorithm\")\n        return False\n\n    return True\n", "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if not self.root_inv_validator.validate(path):\n        self.log.info(\"%s is not a valid root object\", path)\n        return False\n\n    return True\n", "def validate(self, path):\n    if not os.path.isfile(path):\n        return False\n\n    self.log.debug(\"Validating path %s\", path)\n\n    # Check if the path is a valid directory path\n    if not os.path.isdir(path):\n        self.log.warning(\"path %s is not a valid directory\", path)\n        return False\n\n    # Check if the path is a valid file path\n    if not os.path.isfile(path):\n        self.log.warning(\"path %s is not a valid file path\", path)\n        return False\n\n    return True\n", "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"Path does not exist: %s\", path)\n        return False\n\n    # Check if the path is already valid\n    if self.digest_algorithm and self.digest_algorithm(path)!= self.digest_algorithm:\n        self.log.error(\"Object digest mismatch: %s vs %s\",\n                       self.digest_algorithm(path), self.digest_algorithm(path))\n        return False\n\n    if self.root_inv_validator.validate(path):\n        return True\n    else:\n        self.log.warning(\"Object root inventory mismatch: %s\", path)\n        return False\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    return self.obj_fs.exists(path) and self.root_inv_validator.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"'%s' is not a file\", path)\n        return False\n    if path.endswith(\"/\"):\n        self.log.info(\"Validating '%s'\", path)\n        return self.root_inv_validator.validate(path)\n    else:\n        self.log.info(\"Validating '%s' as a directory\", path)\n        return self.obj_fs.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return False\n\n    if not path.startswith(self.content_directory):\n        return False\n\n    # Check if the path is valid.\n    if not self.root_inv_validator.validate(path):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug(\"Validating path %s\", path)\n    try:\n        self.root_inv_validator.validate(path)\n        return True\n    except ValidationError:\n        self.log.debug(\"Failed validating path %s\", path)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if path is None:\n        return True\n    if not os.path.exists(path):\n        self.log.error(\"OCFL path '%s' does not exist.\", path)\n        return False\n    return self.root_inv_validator.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"%s is not a file\", path)\n        return False\n\n    if os.path.isdir(path):\n        self.log.debug(\"Object path is a directory: %s\", path)\n        return True\n\n    if self.root_inv_validator.match(path) is None:\n        self.log.debug(\"Object path does not match root inventory\")\n        return False\n\n    if self.digest_algorithm.match(path) is None:\n        self.log.debug(\"Object path does not match digest algorithm\")\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self.obj_fs.is_file(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.obj_fs.exists(path):\n        self.log.info(\"%s does not exist\", path)\n        return False\n\n    if not self.root_inv_validator.validate(path):\n        self.log.info(\"%s is not a valid root object\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isfile(path):\n        return False\n\n    self.log.debug(\"Validating path %s\", path)\n\n    # Check if the path is a valid directory path\n    if not os.path.isdir(path):\n        self.log.warning(\"path %s is not a valid directory\", path)\n        return False\n\n    # Check if the path is a valid file path\n    if not os.path.isfile(path):\n        self.log.warning(\"path %s is not a valid file path\", path)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.isfile(path):\n        self.log.error(\"Path does not exist: %s\", path)\n        return False\n\n    # Check if the path is already valid\n    if self.digest_algorithm and self.digest_algorithm(path)!= self.digest_algorithm:\n        self.log.error(\"Object digest mismatch: %s vs %s\",\n                       self.digest_algorithm(path), self.digest_algorithm(path))\n        return False\n\n    if self.root_inv_validator.validate(path):\n        return True\n    else:\n        self.log.warning(\"Object root inventory mismatch: %s\", path)\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    result = ''\n    for status in self.messages:\n        result += '{0}{1}\\n'.format(prefix, status)\n    return result\n", "def status_str(self, prefix=''):\n    output = ''\n    if len(self.messages) == 0:\n        output = 'Validator is not configured.'\n    else:\n        output = prefix + 'Validator is configured. '\n        for message in self.messages:\n            output += message + '\\n'\n    return output\n", "def status_str(self, prefix=''):\n    output = ''\n    for message in self.messages:\n        output += '{0}{1}\\n'.format(prefix, message)\n    return output\n", "def status_str(self, prefix=''):\n    result = ''\n    for message in sorted(self.messages):\n        result += '{}{}\\n'.format(prefix, message)\n    return result\n", "def status_str(self, prefix=''):\n    return ', '.join(['valid' if m else 'invalid' for m in self.messages])\n", "def status_str(self, prefix=''):\n    result = 'Validator status: '\n    if self.messages:\n        result += prefix + '\\n'\n        result += '\\n'.join(['{}: {}'.format(key, value)\n                             for key, value in self.messages.items()])\n    else:\n        result += prefix + 'n/a'\n    return result\n", "def status_str(self, prefix=''):\n    result = []\n    for m in self.messages:\n        result.append('{0}: {1}'.format(prefix, m))\n    return ', '.join(result)\n", "def status_str(self, prefix=''):\n    if not self.messages:\n        return ''\n    return 'Validator status: {}{}'.format(prefix, '/'.join(self.messages))\n", "def status_str(self, prefix=''):\n    return ', '.join(['%s: %s' % (prefix, m) for m in self.messages])\n", "def status_str(self, prefix=''):\n    output = ''\n    for m in self.messages:\n        output += '{}{}\\n'.format(prefix, m)\n    return output\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    result = ''\n    for status in self.messages:\n        result += '{0}{1}\\n'.format(prefix, status)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    output = ''\n    if len(self.messages) == 0:\n        output = 'Validator is not configured.'\n    else:\n        output = prefix + 'Validator is configured. '\n        for message in self.messages:\n            output += message + '\\n'\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    output = ''\n    for message in self.messages:\n        output += '{0}{1}\\n'.format(prefix, message)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = ''\n    for message in sorted(self.messages):\n        result += '{}{}\\n'.format(prefix, message)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(['valid' if m else 'invalid' for m in self.messages])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = 'Validator status: '\n    if self.messages:\n        result += prefix + '\\n'\n        result += '\\n'.join(['{}: {}'.format(key, value)\n                             for key, value in self.messages.items()])\n    else:\n        result += prefix + 'n/a'\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = []\n    for m in self.messages:\n        result.append('{0}: {1}'.format(prefix, m))\n    return ', '.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if not self.messages:\n        return ''\n    return 'Validator status: {}{}'.format(prefix, '/'.join(self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ', '.join(['%s: %s' % (prefix, m) for m in self.messages])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    output = ''\n    for m in self.messages:\n        output += '{}{}\\n'.format(prefix, m)\n    return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    s = ''\n    for i, (key, value) in enumerate(self.log):\n        s += '{}{}: {}\\n'.format(prefix, key, value)\n    return s\n", "def status_str(self, prefix=''):\n    log = []\n    for line in self.log:\n        line = line.rstrip()\n        if line.startswith('['):\n            line = line[1:]\n        elif line.startswith('-'):\n            line = '-' + line\n        elif prefix:\n            line = '{} {}'.format(prefix, line)\n        log.append(line)\n    return '\\n'.join(log)\n", "def status_str(self, prefix=''):\n    s = ''\n    for i, vl in enumerate(self.log):\n        if i == 0:\n            s += 'validation'+ prefix +''\n        else:\n            s += ', validation'+ prefix +''\n        s += str(vl) + '\\n'\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l.status_str(prefix) + '\\n'\n    return s\n", "def status_str(self, prefix=''):\n    l = []\n    for s in self.log:\n        l.append(' '.join((str(s[0]), str(s[1]), str(prefix))))\n    return '\\n'.join(l)\n", "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l.status_str(prefix) + '\\n'\n    return s\n", "def status_str(self, prefix=''):\n    status_strs = []\n    for status, message in self.log:\n        status_strs.append('%s %s' % (prefix, status))\n    return '\\n'.join(status_strs)\n", "def status_str(self, prefix=''):\n    s = ''\n    for i, line in enumerate(self.log):\n        if i > 0:\n            s += '\\n'\n        s += prefix + line\n    return s\n", "def status_str(self, prefix=''):\n    s = 'Validation log for \"{}\"\\n'.format(self.config.name)\n    s +='   number of errors: {}\\n'.format(len(self.errors))\n    s +='   number of failures: {}\\n'.format(len(self.failures))\n    s +='   total number of passes: {}\\n'.format(len(self.passes))\n    s +='   total number of failures: {}\\n'.format(len(self.failures))\n    for k, v in self.errors.items():\n        s +='   {}: {}\\n'.format(k, v)\n    s +='   {}: {}\\n'.format(prefix, len(self.failures))\n    return s\n", "def status_str(self, prefix=''):\n    s = ''\n    for k, v in self.log.items():\n        s += '{}: {}\\n'.format(prefix, k)\n        for t, o in v.items():\n            s +=' {}: {}\\n'.format(t, o)\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, (key, value) in enumerate(self.log):\n        s += '{}{}: {}\\n'.format(prefix, key, value)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    log = []\n    for line in self.log:\n        line = line.rstrip()\n        if line.startswith('['):\n            line = line[1:]\n        elif line.startswith('-'):\n            line = '-' + line\n        elif prefix:\n            line = '{} {}'.format(prefix, line)\n        log.append(line)\n    return '\\n'.join(log)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, vl in enumerate(self.log):\n        if i == 0:\n            s += 'validation'+ prefix +''\n        else:\n            s += ', validation'+ prefix +''\n        s += str(vl) + '\\n'\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l.status_str(prefix) + '\\n'\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    l = []\n    for s in self.log:\n        l.append(' '.join((str(s[0]), str(s[1]), str(prefix))))\n    return '\\n'.join(l)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for l in self.log:\n        s += l.status_str(prefix) + '\\n'\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_strs = []\n    for status, message in self.log:\n        status_strs.append('%s %s' % (prefix, status))\n    return '\\n'.join(status_strs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for i, line in enumerate(self.log):\n        if i > 0:\n            s += '\\n'\n        s += prefix + line\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = 'Validation log for \"{}\"\\n'.format(self.config.name)\n    s +='   number of errors: {}\\n'.format(len(self.errors))\n    s +='   number of failures: {}\\n'.format(len(self.failures))\n    s +='   total number of passes: {}\\n'.format(len(self.passes))\n    s +='   total number of failures: {}\\n'.format(len(self.failures))\n    for k, v in self.errors.items():\n        s +='   {}: {}\\n'.format(k, v)\n    s +='   {}: {}\\n'.format(prefix, len(self.failures))\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for k, v in self.log.items():\n        s += '{}: {}\\n'.format(prefix, k)\n        for t, o in v.items():\n            s +=' {}: {}\\n'.format(t, o)\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.manifest_files = {}\n    self.spec_versions_supported = {}\n    self.head = None\n    self.spec_version = None\n    self.warning(\"Validating inventory...\")\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    if extract_spec_version:\n        self.spec_version = inventory.get(\"package.version\", \"0.0\")\n        self.spec_versions_supported = inventory.get(\"package.versions.supported\", {})\n        self.head = inventory.get(\"package.version\", \"0.0\")\n\n    self.validate_versions(versions=self.all_versions, all_versions=True)\n    self.validate_manifest(manifest_files=self.manifest_files)\n    self.validate_version_sequence(versions=self.all_versions, all_versions=True)\n\n    self.inventory[\"package.version\"] = self.spec_version\n    self.inventory[\"package.versions.supported\"] = self.spec_versions_supported\n    self.inventory[\"package.version\"] = self.head\n    self.inventory[\"package.versions.unnormalized\"] = self.unnormalized_digests\n\n    self.inventory[\"package.versions.unnormalized.digests\"", "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('metadata', {}).get('version', None)\n    self.spec_versions_supported = (\n        self.spec_version is not None and self.spec_version in\n        inventory.get('metadata', {}).get('versions', [])\n    )\n\n    if extract_spec_version:\n        self.spec_version = inventory.get('metadata', {}).get('version', None)\n\n    self.inventory = inventory\n    self.all_versions = inventory.get('allVersions', [])\n    self.unnormalized_digests = self.validate_digests(\n        self.all_versions,\n        self.all_versions,\n        unnormalized_digests=True\n    )\n\n    self.inventory_versions_used = set()\n    self.id = inventory.get('id', None)\n    self.inventory_versions_used.add(self.id)\n\n    self.inventory_versions_supported = set()\n    self.inventory_versions_supported.add(self.inventory.get('version', ''))\n\n    self.validate_versions(self.inventory_versions_supported, all_versions=True)\n    self.validate_manifest(self.inventory", "def validate(self, inventory, extract_spec_version=False):\n\n    # Get the type of the inventory.\n    type_ = inventory.get(\"type\", \"\")\n\n    # Is it a valid inventory?\n    if type_ not in self.spec_versions_supported:\n        self.warning(\"Unknown inventory type: %s\" % type_)\n        return False\n\n    # Is it a valid version of the inventory?\n    if not extract_spec_version:\n        version = inventory.get(\"version\", \"\")\n\n        if version:\n            self.warning(\"Unknown version found: %s\" % version)\n            return False\n\n    # Is it a valid version of the inventory with extract_spec_version set.\n    if extract_spec_version:\n        version = inventory.get(\"extract_spec_version\", \"\")\n\n        if not version:\n            self.warning(\"No version specified for extract_spec_version\")\n            return False\n\n        self.spec_version = Version(version)\n\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    inventory = dict(inventory)\n    for key, value in inventory.items():\n        if key in ('versions', 'content_directory', 'warning', 'error'):\n            if extract_spec_version:\n                value = self.extract_spec_version(value)\n            inventory[key] = value\n        elif self.spec_versions_supported:\n            if key =='versions':\n                if not isinstance(value, list):\n                    value = [value]\n            inventory[key] = self.spec_versions_supported[key](\n                value, inventory[key])\n        elif self.all_versions:\n            if key in ('versions', 'content_directory'):\n                if not isinstance(value, list):\n                    value = [value]\n            inventory[key] = self.all_versions[key](\n                value, inventory[key]", "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('spec_version')\n    self.inventory = inventory\n    self.spec_versions_supported = self.spec_version is not None\n    self.manifest_files = self.manifest_files or inventory.get('files', [])\n    self.digest_algorithm = self.digest_algorithm or inventory.get('digest_algorithm')\n    self.head = self.head or self.inventory['head']\n    self.content_directory = self.content_directory or inventory.get('directory')\n    self.all_versions = self.all_versions or inventory.get('versions', [])\n    self.all_digests = self.all_digests or self.digest_algorithm(\n        self.content_directory, self.inventory, self.spec_version)\n\n    self.warning('Validating inventory...')\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            self.manifest_files, self.all_versions)\n\n    self.validate_fixity(\n        fixity=self.inventory['fixity'],\n        manifest_files=self.manifest_files)\n\n    self.validate_versions(self.all_versions, sel", "def validate(self, inventory, extract_spec_version=False):\n\n    if not inventory:\n        return\n\n    self.spec_version = None\n    self.id = inventory.id\n    self.spec_versions_supported = {}\n    self.digest_algorithm = inventory.digest_algorithm\n    self.content_directory = inventory.content_directory\n    self.all_versions = inventory.all_versions\n    self.content_paths_map_to_versions = {}\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.all_versions)\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_versions_supported)\n\n    self.validate_versions(\n        versions=self.all_versions,\n        all_versions=self.all_versions,\n        unnormalized_digests=self.unnormalized_digests)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = inventory.get_version(self.id)\n    self.spec_versions_supported = self.spec_version is not None\n\n    self.check_content_paths_map_to_versions(\n        inventory.content_directory,\n        self.all_versions\n    )\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(\n            self.spec_versions_supported,\n            self.spec_version\n        )\n\n    self.validate_version_sequence(self.all_versions)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = inventory.spec_version\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.warning(\"Validating inventory...\")\n    self.validate_versions(\n        self.all_versions, self.spec_versions_supported, True, extract_spec_version\n    )\n    self.warning(\"Validating inventory...\")\n    self.validate_digests_present_and_used(\n        self.inventory.digests_used, self.digest_algorithm\n    )\n", "def validate(self, inventory, extract_spec_version=False):\n    if not self.inventory:\n        self.inventory = inventory\n\n    if not self.spec_version:\n        self.spec_version = inventory.get(\"metadata\").get(\"version\")\n\n    if self.spec_version and not re.match(r\"\\d+\\.\\d+\", self.spec_version):\n        self.warning(\n            \"Invalid version specifier '{}'. Using the version that \"\n            \"this inventory defines.\".format(self.spec_version)\n        )\n        self.spec_version = None\n\n    if extract_spec_version:\n        self.spec_version = inventory.get(\"metadata\").get(\"version\", \"\")\n\n    self.validate_versions(self.spec_versions_supported, inventory)\n    self.validate_version_sequence(self.spec_versions_supported, inventory)\n    self.validate_manifest(inventory)\n\n    self.inventory.update(inventory)\n    return self.inventory\n", "def validate(self, inventory, extract_spec_version=False):\n\n    all_versions = inventory.get(\"allVersions\", {})\n    self.spec_version = all_versions.get(self.spec_version)\n    self.digest_algorithm = all_versions.get(\"digestAlgorithm\")\n\n    self.digest_algorithm = self.digest_algorithm or self.spec_version\n\n    if not self.digest_algorithm:\n        self.digest_algorithm = \"sha256\"\n\n    if not self.spec_version:\n        self.spec_version = self.digest_algorithm.split(\"-\")[-1]\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.validate_version_sequence(self.all_versions)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.manifest_files = {}\n    self.spec_versions_supported = {}\n    self.head = None\n    self.spec_version = None\n    self.warning(\"Validating inventory...\")\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    if extract_spec_version:\n        self.spec_version = inventory.get(\"package.version\", \"0.0\")\n        self.spec_versions_supported = inventory.get(\"package.versions.supported\", {})\n        self.head = inventory.get(\"package.version\", \"0.0\")\n\n    self.validate_versions(versions=self.all_versions, all_versions=True)\n    self.validate_manifest(manifest_files=self.manifest_files)\n    self.validate_version_sequence(versions=self.all_versions, all_versions=True)\n\n    self.inventory[\"package.version\"] = self.spec_version\n    self.inventory[\"package.versions.supported\"] = self.spec_versions_supported\n    self.inventory[\"package.version\"] = self.head\n    self.inventory[\"package.versions.unnormalized\"] = self.unnormalized_digests\n\n    self.inventory[\"package.versions.unnormalized.digests\"", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('metadata', {}).get('version', None)\n    self.spec_versions_supported = (\n        self.spec_version is not None and self.spec_version in\n        inventory.get('metadata', {}).get('versions', [])\n    )\n\n    if extract_spec_version:\n        self.spec_version = inventory.get('metadata', {}).get('version', None)\n\n    self.inventory = inventory\n    self.all_versions = inventory.get('allVersions', [])\n    self.unnormalized_digests = self.validate_digests(\n        self.all_versions,\n        self.all_versions,\n        unnormalized_digests=True\n    )\n\n    self.inventory_versions_used = set()\n    self.id = inventory.get('id', None)\n    self.inventory_versions_used.add(self.id)\n\n    self.inventory_versions_supported = set()\n    self.inventory_versions_supported.add(self.inventory.get('version', ''))\n\n    self.validate_versions(self.inventory_versions_supported, all_versions=True)\n    self.validate_manifest(self.inventory", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\n    # Get the type of the inventory.\n    type_ = inventory.get(\"type\", \"\")\n\n    # Is it a valid inventory?\n    if type_ not in self.spec_versions_supported:\n        self.warning(\"Unknown inventory type: %s\" % type_)\n        return False\n\n    # Is it a valid version of the inventory?\n    if not extract_spec_version:\n        version = inventory.get(\"version\", \"\")\n\n        if version:\n            self.warning(\"Unknown version found: %s\" % version)\n            return False\n\n    # Is it a valid version of the inventory with extract_spec_version set.\n    if extract_spec_version:\n        version = inventory.get(\"extract_spec_version\", \"\")\n\n        if not version:\n            self.warning(\"No version specified for extract_spec_version\")\n            return False\n\n        self.spec_version = Version(version)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    inventory = dict(inventory)\n    for key, value in inventory.items():\n        if key in ('versions', 'content_directory', 'warning', 'error'):\n            if extract_spec_version:\n                value = self.extract_spec_version(value)\n            inventory[key] = value\n        elif self.spec_versions_supported:\n            if key =='versions':\n                if not isinstance(value, list):\n                    value = [value]\n            inventory[key] = self.spec_versions_supported[key](\n                value, inventory[key])\n        elif self.all_versions:\n            if key in ('versions', 'content_directory'):\n                if not isinstance(value, list):\n                    value = [value]\n            inventory[key] = self.all_versions[key](\n                value, inventory[key]", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.spec_version = inventory.get('spec_version')\n    self.inventory = inventory\n    self.spec_versions_supported = self.spec_version is not None\n    self.manifest_files = self.manifest_files or inventory.get('files', [])\n    self.digest_algorithm = self.digest_algorithm or inventory.get('digest_algorithm')\n    self.head = self.head or self.inventory['head']\n    self.content_directory = self.content_directory or inventory.get('directory')\n    self.all_versions = self.all_versions or inventory.get('versions', [])\n    self.all_digests = self.all_digests or self.digest_algorithm(\n        self.content_directory, self.inventory, self.spec_version)\n\n    self.warning('Validating inventory...')\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            self.manifest_files, self.all_versions)\n\n    self.validate_fixity(\n        fixity=self.inventory['fixity'],\n        manifest_files=self.manifest_files)\n\n    self.validate_versions(self.all_versions, sel", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\n    if not inventory:\n        return\n\n    self.spec_version = None\n    self.id = inventory.id\n    self.spec_versions_supported = {}\n    self.digest_algorithm = inventory.digest_algorithm\n    self.content_directory = inventory.content_directory\n    self.all_versions = inventory.all_versions\n    self.content_paths_map_to_versions = {}\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.all_versions)\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_versions_supported)\n\n    self.validate_versions(\n        versions=self.all_versions,\n        all_versions=self.all_versions,\n        unnormalized_digests=self.unnormalized_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = inventory.get_version(self.id)\n    self.spec_versions_supported = self.spec_version is not None\n\n    self.check_content_paths_map_to_versions(\n        inventory.content_directory,\n        self.all_versions\n    )\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(\n            self.spec_versions_supported,\n            self.spec_version\n        )\n\n    self.validate_version_sequence(self.all_versions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.inventory = inventory\n    self.all_versions = inventory.all_versions\n    self.spec_version = inventory.spec_version\n    self.spec_versions_supported = inventory.spec_versions_supported\n    self.warning(\"Validating inventory...\")\n    self.validate_versions(\n        self.all_versions, self.spec_versions_supported, True, extract_spec_version\n    )\n    self.warning(\"Validating inventory...\")\n    self.validate_digests_present_and_used(\n        self.inventory.digests_used, self.digest_algorithm\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if not self.inventory:\n        self.inventory = inventory\n\n    if not self.spec_version:\n        self.spec_version = inventory.get(\"metadata\").get(\"version\")\n\n    if self.spec_version and not re.match(r\"\\d+\\.\\d+\", self.spec_version):\n        self.warning(\n            \"Invalid version specifier '{}'. Using the version that \"\n            \"this inventory defines.\".format(self.spec_version)\n        )\n        self.spec_version = None\n\n    if extract_spec_version:\n        self.spec_version = inventory.get(\"metadata\").get(\"version\", \"\")\n\n    self.validate_versions(self.spec_versions_supported, inventory)\n    self.validate_version_sequence(self.spec_versions_supported, inventory)\n    self.validate_manifest(inventory)\n\n    self.inventory.update(inventory)\n    return self.inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\n    all_versions = inventory.get(\"allVersions\", {})\n    self.spec_version = all_versions.get(self.spec_version)\n    self.digest_algorithm = all_versions.get(\"digestAlgorithm\")\n\n    self.digest_algorithm = self.digest_algorithm or self.spec_version\n\n    if not self.digest_algorithm:\n        self.digest_algorithm = \"sha256\"\n\n    if not self.spec_version:\n        self.spec_version = self.digest_algorithm.split(\"-\")[-1]\n\n    if extract_spec_version:\n        self.extract_spec_version()\n\n    self.validate_version_sequence(self.all_versions)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for filename in manifest_files:\n        digest_file = open(filename, \"rb\")\n        digest = digest_file.read(Digester.MAX_DIGEST_SIZE)\n        digest_file.close()\n        if digest in digests_used:\n            self.error(\n                \"Digest '{}' is already used in manifest file '{}'.\"\n               .format(digest, filename)\n            )\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = Manifest.load(manifest_file)\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(\n                    \"Manifest does not contain a digest named {digest}. \"\n                    \"You need to use {used} in the manifest for this operation \"\n                    \"to proceed.\".format(digest=digest, used=', '.join(digests_used))\n                )\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.get(\"digests\", []):\n            if digest not in digests_used:\n                self.error(\"Manifest file does not contain a digest for {}\".format(digest))\n                return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest in digests_used:\n            self.error(\"Digest '{}' already present and used\".format(digest))\n        else:\n            digests_used.add(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest not in digests_used:\n            self.error(\"Digest '{}' is missing from manifest.\".format(digest))\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    missing_digests = []\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if not digests_used[digest]:\n                missing_digests.append(digest)\n                break\n    if missing_digests:\n        self.error(\n            \"Missing manifest digests: {}\".format(', '.join(missing_digests))\n        )\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Digest {} not found in manifest.\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = manifest_file.get(\"digest\")\n        if digest:\n            file_digest = self.get_file_digest(digest)\n            if file_digest in digests_used:\n                self.error(\"Digest {} already used\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest does not contain digest '{}'\".format(digest))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(\"Digest {} not found in manifest {}\".format(\n                    digest, manifest.path))\n                return False\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for filename in manifest_files:\n        digest_file = open(filename, \"rb\")\n        digest = digest_file.read(Digester.MAX_DIGEST_SIZE)\n        digest_file.close()\n        if digest in digests_used:\n            self.error(\n                \"Digest '{}' is already used in manifest file '{}'.\"\n               .format(digest, filename)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = Manifest.load(manifest_file)\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(\n                    \"Manifest does not contain a digest named {digest}. \"\n                    \"You need to use {used} in the manifest for this operation \"\n                    \"to proceed.\".format(digest=digest, used=', '.join(digests_used))\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.get(\"digests\", []):\n            if digest not in digests_used:\n                self.error(\"Manifest file does not contain a digest for {}\".format(digest))\n                return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest in digests_used:\n            self.error(\"Digest '{}' already present and used\".format(digest))\n        else:\n            digests_used.add(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in manifest_files:\n        if digest not in digests_used:\n            self.error(\"Digest '{}' is missing from manifest.\".format(digest))\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    missing_digests = []\n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if not digests_used[digest]:\n                missing_digests.append(digest)\n                break\n    if missing_digests:\n        self.error(\n            \"Missing manifest digests: {}\".format(', '.join(missing_digests))\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Digest {} not found in manifest.\".format(digest))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        digest = manifest_file.get(\"digest\")\n        if digest:\n            file_digest = self.get_file_digest(digest)\n            if file_digest in digests_used:\n                self.error(\"Digest {} already used\".format(digest))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            self.error(\"Manifest does not contain digest '{}'\".format(digest))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                self.error(\"Digest {} not found in manifest {}\".format(\n                    digest, manifest.path))\n                return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\"'prior' must be an instance of InventoryValidator\")\n        return\n\n    if prior.version!= self.where:\n        self.warning(\"'prior' input variable does not match inventory file\")\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryError(\"'prior' must be an instance of \"\n                            \"inventory.InventoryValidator\", code=codes.INVALID_PRIOR)\n\n    if prior.version!= self.all_versions[0]:\n        raise InventoryError(\"Inventory prior version inconsistent\")\n\n    return prior\n", "def validate_as_prior_version(self, prior):\n\n    if prior is None:\n        raise InventoryValidatorError(\"Inventory prior must be specified.\")\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidatorError(\n            \"Prior version must be an instance of InventoryValidator.\"\n        )\n\n    if prior.inventory is None:\n        raise InventoryValidatorError(\"The inventory must be specified.\")\n\n    if prior.inventory.version!= self.where:\n        raise InventoryValidatorError(\n            \"Inventory and prior versions do not match. \"\n            \"Inventory version: {}, prior version: {}\".format(\n                prior.inventory.version, self.where\n            )\n        )\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\n            code='invalid-inventory-prior',\n            message='Inventory validator expected, got {}.'.format(\n                type(prior).__name__))\n    if prior.inventory!= self.inventory:\n        self.error(\n            code='invalid-inventory-prior',\n            message='Inventory does not match the inventory that it is already in ({}).'.format(\n                self.inventory.name))\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.version:\n        return (\n            \"Inventory prior version '{}' is not compatible with \"\n            \"the current inventory version '{}'\".format(prior.version, self.version)\n        )\n", "def validate_as_prior_version(self, prior):\n\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError(\"expected an inventory validator\")\n\n    # If the current object has no prior version, raise an error.\n    if not prior.is_valid():\n        raise ValueError(\"invalid inventory\")\n\n    # If the input variable is a valid inventory, return True if it is a valid\n    # prior version of the current object.\n    if prior.is_valid():\n        return True\n\n    # If the input variable is not a valid inventory, raise an error.\n    if not prior.is_valid_for(self):\n        raise ValueError(\"invalid inventory\")\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error('invalid prior version %s' % prior)\n        return\n\n    if prior.inventory!= self:\n        self.error('invalid prior version %s from inventory %s' %\n                   (prior, self))\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if prior.inventory!= self:\n        return\n\n    if prior.version!= self.version:\n        return\n\n    if not isinstance(prior.logical_path, list):\n        return\n\n    for logical_path in prior.logical_path:\n        if not isinstance(logical_path, list):\n            return\n\n        if not all(isinstance(item, string_types) for item in logical_path):\n            return\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        self.error(\n            code='invalid_inventory_validator',\n            message='Validator expected.'\n        )\n    if prior.inventory!= self.inventory:\n        self.error(\n            code='invalid_inventory',\n            message='Inventory does not match inventory of this inventory.'\n        )\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\"Invalid prior object passed in to validate_as_prior_version. \"\n                   \"Expected inventory_validator. Valid object passed: {0}\".format(prior))\n\n    if prior.version!= self.all_versions[-1]:\n        self.error(\"Inventory prior version mismatch between inventory and inventory file: \"\n                   \"{0} vs. {1}\".format(prior.version, self.all_versions[-1]))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.warning(\"'prior' must be an instance of InventoryValidator\")\n        return\n\n    if prior.version!= self.where:\n        self.warning(\"'prior' input variable does not match inventory file\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryError(\"'prior' must be an instance of \"\n                            \"inventory.InventoryValidator\", code=codes.INVALID_PRIOR)\n\n    if prior.version!= self.all_versions[0]:\n        raise InventoryError(\"Inventory prior version inconsistent\")\n\n    return prior\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n\n    if prior is None:\n        raise InventoryValidatorError(\"Inventory prior must be specified.\")\n\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidatorError(\n            \"Prior version must be an instance of InventoryValidator.\"\n        )\n\n    if prior.inventory is None:\n        raise InventoryValidatorError(\"The inventory must be specified.\")\n\n    if prior.inventory.version!= self.where:\n        raise InventoryValidatorError(\n            \"Inventory and prior versions do not match. \"\n            \"Inventory version: {}, prior version: {}\".format(\n                prior.inventory.version, self.where\n            )\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\n            code='invalid-inventory-prior',\n            message='Inventory validator expected, got {}.'.format(\n                type(prior).__name__))\n    if prior.inventory!= self.inventory:\n        self.error(\n            code='invalid-inventory-prior',\n            message='Inventory does not match the inventory that it is already in ({}).'.format(\n                self.inventory.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.version:\n        return (\n            \"Inventory prior version '{}' is not compatible with \"\n            \"the current inventory version '{}'\".format(prior.version, self.version)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError(\"expected an inventory validator\")\n\n    # If the current object has no prior version, raise an error.\n    if not prior.is_valid():\n        raise ValueError(\"invalid inventory\")\n\n    # If the input variable is a valid inventory, return True if it is a valid\n    # prior version of the current object.\n    if prior.is_valid():\n        return True\n\n    # If the input variable is not a valid inventory, raise an error.\n    if not prior.is_valid_for(self):\n        raise ValueError(\"invalid inventory\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error('invalid prior version %s' % prior)\n        return\n\n    if prior.inventory!= self:\n        self.error('invalid prior version %s from inventory %s' %\n                   (prior, self))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if prior.inventory!= self:\n        return\n\n    if prior.version!= self.version:\n        return\n\n    if not isinstance(prior.logical_path, list):\n        return\n\n    for logical_path in prior.logical_path:\n        if not isinstance(logical_path, list):\n            return\n\n        if not all(isinstance(item, string_types) for item in logical_path):\n            return\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        self.error(\n            code='invalid_inventory_validator',\n            message='Validator expected.'\n        )\n    if prior.inventory!= self.inventory:\n        self.error(\n            code='invalid_inventory',\n            message='Inventory does not match inventory of this inventory.'\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return\n\n    if not isinstance(prior, InventoryValidator):\n        self.error(\"Invalid prior object passed in to validate_as_prior_version. \"\n                   \"Expected inventory_validator. Valid object passed: {0}\".format(prior))\n\n    if prior.version!= self.all_versions[-1]:\n        self.error(\"Inventory prior version mismatch between inventory and inventory file: \"\n                   \"{0} vs. {1}\".format(prior.version, self.all_versions[-1]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if key!= version:\n            inventory_value = inventory[key]\n            if not inventory_value:\n                continue\n            for logical_path, content_files in inventory_value.items():\n                if logical_path not in result:\n                    result[logical_path] = set()\n                result[logical_path].update(content_files)\n    return result\n", "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inventory_dir = inventory.get_inventory_directory(version)\n    inventory_files = os.listdir(inventory_dir)\n    inventory_files.sort()\n\n    logical_path_in_state = {}\n    for content_file in inventory_files:\n        file_path = os.path.join(inventory_dir, content_file)\n        if os.path.isfile(file_path):\n            logical_path_in_state[content_file] = set([file_path])\n        else:\n            LOG.debug(\"%s is not a valid file\", file_path)\n    return logical_path_in_state\n", "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        logical_path_in_state(content_file, version.content.paths)\n        for content_file in version.content.paths\n    }\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_for_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        logical_path: set(content_files)\n        for logical_path, content_files in six.iteritems(inventory)\n        if version in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for key in inventory:\n        if key!= version:\n            inventory_value = inventory[key]\n            if not inventory_value:\n                continue\n            for logical_path, content_files in inventory_value.items():\n                if logical_path not in result:\n                    result[logical_path] = set()\n                result[logical_path].update(content_files)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_dir = inventory.get_inventory_directory(version)\n    return {\n        os.path.join(inventory_dir, f): set(content_files)\n        for f, content_files in inventory.get_file_map(version).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    # TODO: use a custom fs here instead of a dedicated one for unit tests\n    inventory_dir = inventory.get_inventory_directory(version)\n    inventory_files = os.listdir(inventory_dir)\n    inventory_files.sort()\n\n    logical_path_in_state = {}\n    for content_file in inventory_files:\n        file_path = os.path.join(inventory_dir, content_file)\n        if os.path.isfile(file_path):\n            logical_path_in_state[content_file] = set([file_path])\n        else:\n            LOG.debug(\"%s is not a valid file\", file_path)\n    return logical_path_in_state\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version.content is None:\n        return {}\n\n    # A version with no content can have logical paths in it.\n    if version.content.paths is None:\n        return {}\n\n    return {\n        logical_path_in_state(content_file, version.content.paths)\n        for content_file in version.content.paths\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files_for_version(version)\n\n    return {\n        content_file.logical_path: content_files\n        for content_file in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    inventory_path = inventory.get_inventory_path()\n    if inventory_path is None:\n        return {}\n    else:\n        return _get_logical_path_map(inventory_path, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    content_files = inventory.get_content_files(version)\n    return {\n        path: set(content_files[path])\n        for path in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        logical_path: set(content_files)\n        for logical_path, content_files in six.iteritems(inventory)\n        if version in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get(version, {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    if fixity.get('files') is None:\n        self.error('Fixity block missing files.')\n        return\n\n    if fixity.get('digests') is None:\n        self.error('Fixity block missing digests.')\n        return\n\n    for filename in fixity['files']:\n        manifest_file = manifest_files.get(filename)\n        if manifest_file is None:\n            self.error('File {} not found in manifest'.format(filename))\n            return\n\n        if manifest_file.get('digest') is None:\n            self.error('Digest for {} not found'.format(filename))\n            return\n\n        if manifest_file.get('sha256') is None:\n            self.error('SHA256 for {} not found'.format(filename))\n            return\n\n        if manifest_file.get('sha1') is None:\n            self.error('SHA1 for {} not found'.format(filename))\n      ", "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity['algorithm']!= self.digest_algorithm:\n        return self.error(\n            'Invalid digest algorithm',\n            code='invalid-digest-algorithm'\n        )\n\n    # Check that files are in the manifest files\n    for f in manifest_files:\n        if f not in fixity['files']:\n            return self.error(\n                f'Fixity contains non-existent file: {f}',\n                code='invalid-file'\n            )\n\n    return None\n", "def validate_fixity(self, fixity, manifest_files):\n\n    # Check the fixity block is valid\n    referenced_files = set(fixity.referenced_files)\n    unreferenced_files = set(fixity.unreferenced_files)\n\n    for file_name in referenced_files:\n        file_path = fixity.file_path(file_name)\n        if file_path in manifest_files:\n            self.error(\n                \"Referenced file {} already exists in the manifest\".format(\n                    file_name\n                )\n            )\n            unreferenced_files.remove(file_name)\n\n    for file_name in unreferenced_files:\n        self.error(\n            \"Unreferenced file {} referenced in the manifest\".format(\n                file_name\n            )\n        )\n        referenced_files.remove(file_name)\n", "def validate_fixity(self, fixity, manifest_files):\n    # Make sure the fixity structure is valid.\n    self.lax_digests = []\n    self.spec_version = None\n    self.digest_algorithm = None\n    self.error(\"FIXITIES block is not yet supported. Use a valid \"\n               \"inventory file instead.\")\n", "def validate_fixity(self, fixity, manifest_files):\n    if 'files' in fixity:\n        referenced = set(fixity['files'])\n        unreferenced = set(manifest_files) - referenced\n        if unreferenced:\n            self.error('Fixity block has files that are not referenced: {}'.format(unreferenced))\n        elif not referenced:\n            self.error('Fixity block has no files referenced: {}'.format(referenced))\n", "def validate_fixity(self, fixity, manifest_files):\n    if not isinstance(fixity, dict):\n        self.error('fixity', \"Invalid fixity block type: {}\".format(type(fixity)))\n        return\n\n    manifest_files = manifest_files or []\n\n    for f in manifest_files:\n        if f not in fixity:\n            self.error('fixity', \"Fixity block missing file: {}\".format(f))\n            return\n\n    if 'files' not in fixity:\n        self.error('fixity', \"Fixity block missing mandatory 'files' field\")\n        return\n\n    for f in fixity['files']:\n        if f in manifest_files:\n            continue\n\n        self.error('fixity', \"Fixity block file '{}' not found\".format(f))\n", "def validate_fixity(self, fixity, manifest_files):\n    if fixity['type']!= \"file\":\n        return\n\n    if manifest_files is None:\n        manifest_files = []\n\n    for f in manifest_files:\n        if f not in fixity['files']:\n            self.error(\"Fixity block {} has no file {}\".format(\n                fixity['name'], f))\n            self.error(\"Use 'inventory add' to add the file\")\n            return\n", "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = []\n    for filename, contents in fixity.items():\n        if filename not in manifest_files:\n            referenced_files.append(filename)\n    if len(referenced_files) > 0:\n        return (\n            \"Fixity Block does not contain referenced files: {}\"\n           .format(referenced_files)\n        )\n", "def validate_fixity(self, fixity, manifest_files):\n    for filename in manifest_files:\n        if filename not in fixity:\n            self.error('Fixity file {0} not found.'.format(filename))\n", "def validate_fixity(self, fixity, manifest_files):\n    for file_name in fixity['files']:\n        if file_name not in manifest_files:\n            self.error(\"Fixity block does not contain a file named {}\".format(file_name))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity.get('files') is None:\n        self.error('Fixity block missing files.')\n        return\n\n    if fixity.get('digests') is None:\n        self.error('Fixity block missing digests.')\n        return\n\n    for filename in fixity['files']:\n        manifest_file = manifest_files.get(filename)\n        if manifest_file is None:\n            self.error('File {} not found in manifest'.format(filename))\n            return\n\n        if manifest_file.get('digest') is None:\n            self.error('Digest for {} not found'.format(filename))\n            return\n\n        if manifest_file.get('sha256') is None:\n            self.error('SHA256 for {} not found'.format(filename))\n            return\n\n        if manifest_file.get('sha1') is None:\n            self.error('SHA1 for {} not found'.format(filename))\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity['algorithm']!= self.digest_algorithm:\n        return self.error(\n            'Invalid digest algorithm',\n            code='invalid-digest-algorithm'\n        )\n\n    # Check that files are in the manifest files\n    for f in manifest_files:\n        if f not in fixity['files']:\n            return self.error(\n                f'Fixity contains non-existent file: {f}',\n                code='invalid-file'\n            )\n\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    # Check the fixity block is valid\n    referenced_files = set(fixity.referenced_files)\n    unreferenced_files = set(fixity.unreferenced_files)\n\n    for file_name in referenced_files:\n        file_path = fixity.file_path(file_name)\n        if file_path in manifest_files:\n            self.error(\n                \"Referenced file {} already exists in the manifest\".format(\n                    file_name\n                )\n            )\n            unreferenced_files.remove(file_name)\n\n    for file_name in unreferenced_files:\n        self.error(\n            \"Unreferenced file {} referenced in the manifest\".format(\n                file_name\n            )\n        )\n        referenced_files.remove(file_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    # Make sure the fixity structure is valid.\n    self.lax_digests = []\n    self.spec_version = None\n    self.digest_algorithm = None\n    self.error(\"FIXITIES block is not yet supported. Use a valid \"\n               \"inventory file instead.\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if 'files' in fixity:\n        referenced = set(fixity['files'])\n        unreferenced = set(manifest_files) - referenced\n        if unreferenced:\n            self.error('Fixity block has files that are not referenced: {}'.format(unreferenced))\n        elif not referenced:\n            self.error('Fixity block has no files referenced: {}'.format(referenced))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if not isinstance(fixity, dict):\n        self.error('fixity', \"Invalid fixity block type: {}\".format(type(fixity)))\n        return\n\n    manifest_files = manifest_files or []\n\n    for f in manifest_files:\n        if f not in fixity:\n            self.error('fixity', \"Fixity block missing file: {}\".format(f))\n            return\n\n    if 'files' not in fixity:\n        self.error('fixity', \"Fixity block missing mandatory 'files' field\")\n        return\n\n    for f in fixity['files']:\n        if f in manifest_files:\n            continue\n\n        self.error('fixity', \"Fixity block file '{}' not found\".format(f))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity['type']!= \"file\":\n        return\n\n    if manifest_files is None:\n        manifest_files = []\n\n    for f in manifest_files:\n        if f not in fixity['files']:\n            self.error(\"Fixity block {} has no file {}\".format(\n                fixity['name'], f))\n            self.error(\"Use 'inventory add' to add the file\")\n            return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    referenced_files = []\n    for filename, contents in fixity.items():\n        if filename not in manifest_files:\n            referenced_files.append(filename)\n    if len(referenced_files) > 0:\n        return (\n            \"Fixity Block does not contain referenced files: {}\"\n           .format(referenced_files)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for filename in manifest_files:\n        if filename not in fixity:\n            self.error('Fixity file {0} not found.'.format(filename))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file_name in fixity['files']:\n        if file_name not in manifest_files:\n            self.error(\"Fixity block does not contain a file named {}\".format(file_name))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f)\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f)\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml in xmls:\n        file_groups[os.path.basename(xml)] = files[_eval_file(source, xml)]\n    return file_groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(source, file)\n        package = os.path.splitext(file)[0]\n        xml_basename = os.path.basename(file_path).split('.')[0]\n        data[xml_basename] = package\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = OrderedDict()\n    for f in files:\n        xml_filename = select_filenames_by_prefix(source, f)\n        if xml_filename:\n            result[xml_filename] = source.get_package(f)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = OrderedDict()\n    for xml in xmls:\n        for filename in select_filenames_by_prefix(xml, files):\n            data[filename] = source.get(filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        for prefix in xmls:\n            if filename.startswith(prefix):\n                data[filename] = select_filenames_by_prefix(prefix, file_path)\n\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        name = os.path.basename(xml)\n        filename = os.path.join(source, name)\n        if _eval_file(filename, files):\n            data[name] = Package(filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    files = _eval_file(source, xmls)\n    data = {}\n    for filename in files:\n        split_filename = os.path.split(filename)\n        filename_parts = split_filename[1].split('.')\n        data[filename_parts[0]] = split_filename[0]\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        name, ext = os.path.splitext(os.path.basename(file))\n        data[name] = SourcePackage(source, file=file)\n        data[name].xml_file = name\n        data[name].ext = ext\n        if ext in xmls:\n            data[name].packages = []\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for f in files:\n            if _eval_file(prefix=source, filename=f):\n                data[f] = os.path.basename(f).split('.')[0]\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml in xmls:\n        package = _eval_file(source, os.path.join(xml, xml))\n        if package:\n            packages[xml] = package\n\n    result = {}\n    for filename in files:\n        for package in packages.keys():\n            if packages[package].basename == filename:\n                result[package] = packages[package]\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    file_groups = {}\n    for xml in xmls:\n        file_groups[os.path.basename(xml)] = files[_eval_file(source, xml)]\n    return file_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        file_path = _eval_file(source, file)\n        package = os.path.splitext(file)[0]\n        xml_basename = os.path.basename(file_path).split('.')[0]\n        data[xml_basename] = package\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = OrderedDict()\n    for f in files:\n        xml_filename = select_filenames_by_prefix(source, f)\n        if xml_filename:\n            result[xml_filename] = source.get_package(f)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = OrderedDict()\n    for xml in xmls:\n        for filename in select_filenames_by_prefix(xml, files):\n            data[filename] = source.get(filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file_path in files:\n        filename = os.path.basename(file_path)\n        for prefix in xmls:\n            if filename.startswith(prefix):\n                data[filename] = select_filenames_by_prefix(prefix, file_path)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        name = os.path.basename(xml)\n        filename = os.path.join(source, name)\n        if _eval_file(filename, files):\n            data[name] = Package(filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    files = _eval_file(source, xmls)\n    data = {}\n    for filename in files:\n        split_filename = os.path.split(filename)\n        filename_parts = split_filename[1].split('.')\n        data[filename_parts[0]] = split_filename[0]\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for file in files:\n        name, ext = os.path.splitext(os.path.basename(file))\n        data[name] = SourcePackage(source, file=file)\n        data[name].xml_file = name\n        data[name].ext = ext\n        if ext in xmls:\n            data[name].packages = []\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for f in files:\n            if _eval_file(prefix=source, filename=f):\n                data[f] = os.path.basename(f).split('.')[0]\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    packages = {}\n    for xml in xmls:\n        package = _eval_file(source, os.path.join(xml, xml))\n        if package:\n            packages[xml] = package\n\n    result = {}\n    for filename in files:\n        for package in packages.keys():\n            if packages[package].basename == filename:\n                result[package] = packages[package]\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return prefix in [f.split(os.sep)[-1] for f in os.listdir(file_path)]\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return prefix in file_path\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return prefix in [f.split(os.sep)[-1] for f in os.listdir(file_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + os.sep)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return prefix in file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + '/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [filename for filename in files if match_file_by_prefix(prefix, filename)]\n", "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if match_file_by_prefix(prefix, f):\n            matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if match_file_by_prefix(prefix, f)]\n    return files\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file for file in files if match_file_by_prefix(prefix, file)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if match_file_by_prefix(prefix, file_path)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [filename for filename in files if match_file_by_prefix(prefix, filename)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for f in files:\n        if match_file_by_prefix(prefix, f):\n            matches.append(f)\n    return matches\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if match_file_by_prefix(prefix, f)]\n    return files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file for file in files if match_file_by_prefix(prefix, file)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [file_path for file_path in files if match_file_by_prefix(prefix, file_path)]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if f.endswith(\".xml\"):\n                file_path = os.path.join(root, f)\n                data[os.path.basename(file_path)] = _group_files_by_xml_filename(file_path, dirs)\n    return data\n", "def _explore_folder(folder):\n    package = packtools.read(folder)\n    return {filename: packtools.read(package[filename]) for filename in package}\n", "def _explore_folder(folder):\n    pkgs = {}\n    for filename in os.listdir(folder):\n        if filename.endswith('.xml'):\n            filepath = os.path.join(folder, filename)\n            package = _group_files_by_xml_filename(filepath, [folder])\n            pkgs.update(package)\n    return pkgs\n", "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(folder, ['.xml']):\n        result.update(_read_package_file(file))\n    return result\n", "def _explore_folder(folder):\n    result = {}\n    for path, dirs, files in os.walk(folder):\n        for fname in files:\n            xml_path = os.path.join(path, fname)\n            if not os.path.exists(xml_path):\n                continue\n            data = _group_files_by_xml_filename(xml_path, dirs, files)\n            result.update(data)\n    return result\n", "def _explore_folder(folder):\n\n    data = {}\n    for filename in _group_files_by_xml_filename(folder, ['xml'], ['*.xml']):\n        with packtools.open_package(folder, filename) as f:\n            data[filename] = packtools.read_package_data(f)\n\n    return data\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                filepath = os.path.join(root, filename)\n                data[filename[:-4]] = _group_files_by_xml_filename(filepath)\n\n    return data\n", "def _explore_folder(folder):\n    data = OrderedDict()\n    for filename in _group_files_by_xml_filename(folder, [], []):\n        file_data = _load_xml_from_file(filename)\n        data[filename] = file_data\n    return data\n", "def _explore_folder(folder):\n    packages = {}\n    for filename in _group_files_by_xml_filename(folder, []):\n        data = _load_package_xml(folder, filename)\n        packages[filename] = data\n\n    return packages\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.xml'):\n                data[filename] = packtools.package_to_dict(filepath)\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            if f.endswith(\".xml\"):\n                file_path = os.path.join(root, f)\n                data[os.path.basename(file_path)] = _group_files_by_xml_filename(file_path, dirs)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    package = packtools.read(folder)\n    return {filename: packtools.read(package[filename]) for filename in package}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    pkgs = {}\n    for filename in os.listdir(folder):\n        if filename.endswith('.xml'):\n            filepath = os.path.join(folder, filename)\n            package = _group_files_by_xml_filename(filepath, [folder])\n            pkgs.update(package)\n    return pkgs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for file in _group_files_by_xml_filename(folder, ['.xml']):\n        result.update(_read_package_file(file))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for path, dirs, files in os.walk(folder):\n        for fname in files:\n            xml_path = os.path.join(path, fname)\n            if not os.path.exists(xml_path):\n                continue\n            data = _group_files_by_xml_filename(xml_path, dirs, files)\n            result.update(data)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n\n    data = {}\n    for filename in _group_files_by_xml_filename(folder, ['xml'], ['*.xml']):\n        with packtools.open_package(folder, filename) as f:\n            data[filename] = packtools.read_package_data(f)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            if filename.endswith(\".xml\"):\n                filepath = os.path.join(root, filename)\n                data[filename[:-4]] = _group_files_by_xml_filename(filepath)\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = OrderedDict()\n    for filename in _group_files_by_xml_filename(folder, [], []):\n        file_data = _load_xml_from_file(filename)\n        data[filename] = file_data\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packages = {}\n    for filename in _group_files_by_xml_filename(folder, []):\n        data = _load_package_xml(folder, filename)\n        packages[filename] = data\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            if filepath.endswith('.xml'):\n                data[filename] = packtools.package_to_dict(filepath)\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    filename, file_extension = match_file_by_prefix(prefix, file_path)\n    package = os.path.splitext(filename)[0]\n\n    # Retorna o endereco do arquivo XML\n    endereco = ''\n    if file_extension == '.json':\n        try:\n            with open(file_path) as f:\n                endereco = json.load(f)['endereco']\n        except (OSError, IOError, ValueError):\n            pass\n\n    # Retorna o endereco do arquivo em an\u00e1lise\n    return {\n        'package': package,\n        'filename': filename,\n        'file_extension': file_extension,\n        'endereco': endereco\n    }\n", "def _eval_file(prefix, file_path):\n    regex = re.compile(r\"^\\/{}\\/(.*)$\".format(prefix))\n    m = regex.match(file_path)\n    if not m:\n        raise ValueError(\"File is not valid for {}: {}\".format(prefix, file_path))\n    return {\n        \"package\": m.group(1),\n        \"file\": m.group(2),\n        \"file_folder\": file_path[len(prefix) + 1 :]\n    }\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # Verifica se o nome do arquivo existe\n    if match_file_by_prefix(prefix, filename):\n        return {'packages': filename.split('.')[0]}\n\n    # Verifica se o endere\u00e7o do arquivo existe\n    return match_file_by_prefix(prefix, filename)\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_in_packages = filename.split('.')[0]\n    file_type = filename_in_packages.split('-')[0]\n    packages = filename_in_packages.split('-')[1:]\n    packages = [p.split('.')[0] for p in packages]\n    packages = [p for p in packages if p!= '']\n\n    if prefix in packages:\n        return {\n            'package': prefix,\n            'filetype': file_type,\n            'filename': filename,\n            'file_path': file_path,\n            'packages': packages\n        }\n    else:\n        return {\n            'package': '',\n            'filetype': '',\n            'filename': filename,\n            'file_path': file_path,\n            'packages': packages\n        }\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.startswith('asset'):\n        package_name = filename.split('-')[0]\n        package_path = 'packages/' + package_name\n    elif filename.startswith('rendition'):\n        package_name = filename.split('-')[0]\n        package_path = 'packages/' + package_name + '/'\n    else:\n        raise ValueError('filename invalid: {}'.format(filename))\n\n    return match_file_by_prefix(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    filename = match_file_by_prefix(prefix, file_path)\n\n    if filename:\n        content = eval(open(filename, 'r').read())\n        return content\n", "def _eval_file(prefix, file_path):\n    filename = match_file_by_prefix(prefix, file_path)\n    package = '.'.join(filename.split('.')[:-1])\n    version = '.'.join(filename.split('.')[-1:])\n\n    if not package:\n        raise ValueError(\"Filename {} has no package\".format(file_path))\n\n    packages = {\n        'asset': '{}/{}/{}.zip'.format(package, version, filename),\n       'rendition': '{}/{}/{}-{}.tgz'.format(package, version, filename, version),\n    }\n\n    return packages\n", "def _eval_file(prefix, file_path):\n    match = match_file_by_prefix(prefix, file_path)\n    if not match:\n        return {}\n    return {\n        'package': match['package'],\n        'filename': match['filename'],\n        'file_path': file_path,\n        'embed_code': match['embed_code'],\n        'embed_url': match['embed_url'],\n       'rendition': match['rendition'],\n    }\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    tree = etree.parse(file_path)\n    root = tree.getroot()\n\n    # Verifica se existe o arquivo do XML\n    for package in root:\n        if match_file_by_prefix(prefix, package.attrib['path']):\n            package.attrib['path'] = file_path\n\n            # Atualizar as propriedades do arquivo\n            for asset in package:\n                asset.attrib['path'] = file_path\n\n            # Atualizar as endere\u00e7os do arquivo\n            for area in asset:\n                area.attrib['path'] = file_path\n\n            # Atualizar o endere\u00e7o do arquivo\n            for area in package:\n                area.attrib['type'] = 'asset'\n\n            # Atualizar o endere\u00e7o do arquivo em an\u00e1lise\n  ", "def _eval_file(prefix, file_path):\n    package = os.path.basename(file_path).split('.')[0]\n    eval_file = {\n        'package': package,\n        'name': os.path.splitext(os.path.basename(file_path))[0],\n        'file_path': file_path,\n        'file_name': os.path.basename(file_path),\n        'file_folder': os.path.splitext(os.path.basename(file_path))[0],\n       'version': ''\n    }\n\n    if 'asset' in os.path.basename(file_path):\n        eval_file['packages'] = ['asset']\n    elif'rendition' in os.path.basename(file_path):\n        eval_file['packages'] = ['rendition']\n\n    return eval_file\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    filename, file_extension = match_file_by_prefix(prefix, file_path)\n    package = os.path.splitext(filename)[0]\n\n    # Retorna o endereco do arquivo XML\n    endereco = ''\n    if file_extension == '.json':\n        try:\n            with open(file_path) as f:\n                endereco = json.load(f)['endereco']\n        except (OSError, IOError, ValueError):\n            pass\n\n    # Retorna o endereco do arquivo em an\u00e1lise\n    return {\n        'package': package,\n        'filename': filename,\n        'file_extension': file_extension,\n        'endereco': endereco\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    regex = re.compile(r\"^\\/{}\\/(.*)$\".format(prefix))\n    m = regex.match(file_path)\n    if not m:\n        raise ValueError(\"File is not valid for {}: {}\".format(prefix, file_path))\n    return {\n        \"package\": m.group(1),\n        \"file\": m.group(2),\n        \"file_folder\": file_path[len(prefix) + 1 :]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    # Verifica se o nome do arquivo existe\n    if match_file_by_prefix(prefix, filename):\n        return {'packages': filename.split('.')[0]}\n\n    # Verifica se o endere\u00e7o do arquivo existe\n    return match_file_by_prefix(prefix, filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_in_packages = filename.split('.')[0]\n    file_type = filename_in_packages.split('-')[0]\n    packages = filename_in_packages.split('-')[1:]\n    packages = [p.split('.')[0] for p in packages]\n    packages = [p for p in packages if p!= '']\n\n    if prefix in packages:\n        return {\n            'package': prefix,\n            'filetype': file_type,\n            'filename': filename,\n            'file_path': file_path,\n            'packages': packages\n        }\n    else:\n        return {\n            'package': '',\n            'filetype': '',\n            'filename': filename,\n            'file_path': file_path,\n            'packages': packages\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n\n    if filename.startswith('asset'):\n        package_name = filename.split('-')[0]\n        package_path = 'packages/' + package_name\n    elif filename.startswith('rendition'):\n        package_name = filename.split('-')[0]\n        package_path = 'packages/' + package_name + '/'\n    else:\n        raise ValueError('filename invalid: {}'.format(filename))\n\n    return match_file_by_prefix(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = match_file_by_prefix(prefix, file_path)\n\n    if filename:\n        content = eval(open(filename, 'r').read())\n        return content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = match_file_by_prefix(prefix, file_path)\n    package = '.'.join(filename.split('.')[:-1])\n    version = '.'.join(filename.split('.')[-1:])\n\n    if not package:\n        raise ValueError(\"Filename {} has no package\".format(file_path))\n\n    packages = {\n        'asset': '{}/{}/{}.zip'.format(package, version, filename),\n       'rendition': '{}/{}/{}-{}.tgz'.format(package, version, filename, version),\n    }\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    match = match_file_by_prefix(prefix, file_path)\n    if not match:\n        return {}\n    return {\n        'package': match['package'],\n        'filename': match['filename'],\n        'file_path': file_path,\n        'embed_code': match['embed_code'],\n        'embed_url': match['embed_url'],\n       'rendition': match['rendition'],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    tree = etree.parse(file_path)\n    root = tree.getroot()\n\n    # Verifica se existe o arquivo do XML\n    for package in root:\n        if match_file_by_prefix(prefix, package.attrib['path']):\n            package.attrib['path'] = file_path\n\n            # Atualizar as propriedades do arquivo\n            for asset in package:\n                asset.attrib['path'] = file_path\n\n            # Atualizar as endere\u00e7os do arquivo\n            for area in asset:\n                area.attrib['path'] = file_path\n\n            # Atualizar o endere\u00e7o do arquivo\n            for area in package:\n                area.attrib['type'] = 'asset'\n\n            # Atualizar o endere\u00e7o do arquivo em an\u00e1lise\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    package = os.path.basename(file_path).split('.')[0]\n    eval_file = {\n        'package': package,\n        'name': os.path.splitext(os.path.basename(file_path))[0],\n        'file_path': file_path,\n        'file_name': os.path.basename(file_path),\n        'file_folder': os.path.splitext(os.path.basename(file_path))[0],\n       'version': ''\n    }\n\n    if 'asset' in os.path.basename(file_path):\n        eval_file['packages'] = ['asset']\n    elif'rendition' in os.path.basename(file_path):\n        eval_file['packages'] = ['rendition']\n\n    return eval_file\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split(\"/\")[-1]] = \"\"\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split('.')[-1]] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split(\"/\")[-1]] = \"\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path.split('.')[-1]] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset_name = basename\n    asset_path = file_path\n    self._assets[asset_name] = asset_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset = {\"name\": basename, \"file_path\": file_path}\n    self._assets.update({basename: asset})\n", "def add_asset(self, basename, file_path):\n    assert isinstance(file_path, str), type(file_path)\n    assert isinstance(basename, str), type(basename)\n    assert isinstance(self._assets, dict), type(self._assets)\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    asset_path = self._assets.setdefault(basename, file_path)\n    asset_path.mtime = int(time.time())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_name = basename\n    asset_path = file_path\n    self._assets[asset_name] = asset_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = {\"name\": basename, \"file_path\": file_path}\n    self._assets.update({basename: asset})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    assert isinstance(file_path, str), type(file_path)\n    assert isinstance(basename, str), type(basename)\n    assert isinstance(self._assets, dict), type(self._assets)\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    assert isinstance(basename, str)\n    assert isinstance(file_path, str)\n\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_path = self._assets.setdefault(basename, file_path)\n    asset_path.mtime = int(time.time())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    xml_files = _group_files_by_xml_filename(zip_path, [], [])\n\n    packages = {}\n    for filename, xml_file in xml_files.items():\n        package = _read_xml_from_zipfile(zip_path, xml_file)\n        packages[filename] = package\n\n    return packages\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xml_files = _group_files_by_xml_filename(zf.namelist(), zf.namelist())\n\n    data = {\n        'packages': []\n    }\n\n    for xml_file in xml_files:\n        with zf.open(xml_file) as f:\n            data['packages'].append(f.read())\n\n    return data\n", "def _explore_zipfile(zip_path):\n    zip_path = _group_files_by_xml_filename(zip_path, [], [])\n    return {filename: _read_package_data(filename) for filename in zip_path}\n", "def _explore_zipfile(zip_path):\n    xml_groups = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for filename in zf.namelist():\n            if filename.endswith('.xml'):\n                xml_groups[filename] = zf.open(filename)\n    return xml_groups\n", "def _explore_zipfile(zip_path):\n    zip_path = _group_files_by_xml_filename(zip_path, [], [])\n    with zipfile.ZipFile(zip_path, 'r') as zf:\n        contents = zf.read(zf.namelist()[0])\n    return _parse_xml(contents)\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = [zf.open(xml) for xml in zf.namelist()]\n        files = [f for f in zf.namelist() if f.endswith('.xml')]\n        return dict(zip(files, xmls))\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        xmls = {}\n        for filename in zip_file.namelist():\n            if filename.endswith('.xml'):\n                xmls[filename] = zip_file.open(filename).read()\n        return xmls\n", "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    files = {}\n    for filename in zip_file.namelist():\n        if filename.endswith('.xml'):\n            files[filename] = zip_file.open(filename).read()\n    return files\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = _group_files_by_xml_filename(zf.namelist(), zf.namelist())\n\n    return {\n        'xmls': xmls,\n        'names': sorted(set(f.filename for f in xmls)),\n    }\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = [xml.filename for xml in zf.infolist()]\n        files = [f for f in zf.infolist() if f.filename.endswith('.xml')]\n        packages = {}\n        for xml in xmls:\n            packages[xml] = _group_files_by_xml_filename(zf, xmls, files)\n    return packages\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    xml_files = _group_files_by_xml_filename(zip_path, [], [])\n\n    packages = {}\n    for filename, xml_file in xml_files.items():\n        package = _read_xml_from_zipfile(zip_path, xml_file)\n        packages[filename] = package\n\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xml_files = _group_files_by_xml_filename(zf.namelist(), zf.namelist())\n\n    data = {\n        'packages': []\n    }\n\n    for xml_file in xml_files:\n        with zf.open(xml_file) as f:\n            data['packages'].append(f.read())\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_path = _group_files_by_xml_filename(zip_path, [], [])\n    return {filename: _read_package_data(filename) for filename in zip_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    xml_groups = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for filename in zf.namelist():\n            if filename.endswith('.xml'):\n                xml_groups[filename] = zf.open(filename)\n    return xml_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_path = _group_files_by_xml_filename(zip_path, [], [])\n    with zipfile.ZipFile(zip_path, 'r') as zf:\n        contents = zf.read(zf.namelist()[0])\n    return _parse_xml(contents)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = [zf.open(xml) for xml in zf.namelist()]\n        files = [f for f in zf.namelist() if f.endswith('.xml')]\n        return dict(zip(files, xmls))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        xmls = {}\n        for filename in zip_file.namelist():\n            if filename.endswith('.xml'):\n                xmls[filename] = zip_file.open(filename).read()\n        return xmls\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    files = {}\n    for filename in zip_file.namelist():\n        if filename.endswith('.xml'):\n            files[filename] = zip_file.open(filename).read()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = _group_files_by_xml_filename(zf.namelist(), zf.namelist())\n\n    return {\n        'xmls': xmls,\n        'names': sorted(set(f.filename for f in xmls)),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        xmls = [xml.filename for xml in zf.infolist()]\n        files = [f for f in zf.infolist() if f.filename.endswith('.xml')]\n        packages = {}\n        for xml in xmls:\n            packages[xml] = _group_files_by_xml_filename(zf, xmls, files)\n    return packages\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = [f.filename for f in zf.filelist]\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        names = zf.namelist()\n    return names\n", "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return list(zf.namelist())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = [f.filename for f in zf.filelist]\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [fname.filename for fname in zip.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        names = zf.namelist()\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with ZipFile(zip_path) as zf:\n        files = zf.namelist()\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return list(zf.namelist())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return re.sub(r'\\bw:(.*?)st=\"', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(\\w+)=\")', r'\\1-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif content.startswith('w:'):\n        return 'w-st=\"{}\"'.format(content[2:])\n    else:\n        return content\n", "def fix_namespace_prefix_w(content):\n    if content.startswith(\"w:\"):\n        content = \"w-st=\" + content[2:]\n    return content\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(\\w+)=\"', r'\\1-w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\sw:(.+?)st=\"', r'\\1-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\tw:(.+?)st=\"', r'\\g<1>-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if \":\" in content:\n        return \"w:\" + content.replace(\":\", \"-w-\")\n    return content\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:([^\\s]+)st=\"([^\"]+)\"',\n                  r'w-st=\"\\1\"', content)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\bw:(.*?)st=\"', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'( w:(\\w+)=\")', r'\\1-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    elif content.startswith('w:'):\n        return 'w-st=\"{}\"'.format(content[2:])\n    else:\n        return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content.startswith(\"w:\"):\n        content = \"w-st=\" + content[2:]\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(\\w+)=\"', r'\\1-w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\sw:(.+?)st=\"', r'\\1-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace(' w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\tw:(.+?)st=\"', r'\\g<1>-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    if content is None:\n        return None\n    if \":\" in content:\n        return \"w:\" + content.replace(\":\", \"-w-\")\n    return content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:([^\\s]+)st=\"([^\"]+)\"',\n                  r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            elem\n            for elem in node\n            if isinstance(elem, Pubdate)\n            and elem.xpath(pubdate_xpaths)\n        ),\n        None,\n    )\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        x for x in pubdate_xpaths\n        if x.match(node)\n    ), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            x\n            for x in pubdate_xpaths\n            if x.match(node)\n        ),\n        None,\n    )\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        result = pubdate_xpath(node)\n        if result:\n            return result\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        node.xpath(pubdate_xpaths[0]),\n        node.xpath(pubdate_xpaths[1])\n    ), None)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            elem\n            for elem in node\n            if isinstance(elem, Pubdate)\n            and elem.xpath(pubdate_xpaths)\n        ),\n        None,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        x for x in pubdate_xpaths\n        if x.match(node)\n    ), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            x\n            for x in pubdate_xpaths\n            if x.match(node)\n        ),\n        None,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        result = pubdate_xpath(node)\n        if result:\n            return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        node.xpath(pubdate_xpaths[0]),\n        node.xpath(pubdate_xpaths[1])\n    ), None)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'Number':\n            number = element.text\n        elif element.tag == 'Supplement':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('RiskIssueNumber').text\n    suppl = issue.find('RiskIssueSupplement').text\n    if number is not None and suppl is not None:\n        return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('field'):\n        if 'value' in element.attrs:\n            if 'number' in element.attrs:\n                number = element.attrs['value']\n            if'suppl' in element.attrs:\n                suppl = element.attrs['suppl']\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    for element in issue.findall('.//SupplementaryMetric'):\n        if element.tag == 'Number':\n            number = element.text\n\n    for element in issue.findall('.//SupplementaryMetric'):\n        if element.tag == 'Supplementary':\n            suppl = element.text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('field'):\n        if element.attrib['name'].lower() == 'number':\n            number = element.text\n        elif element.attrib['name'].lower() =='suppl':\n            suppl = element.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n\n    for element in issue.iter(tag=\"Number\"):\n        if element.text:\n            number = element.text\n\n    for element in issue.iter(tag=\"Supplement\"):\n        if element.text:\n            suppl = element.text\n\n    return number, suppl\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    for element in issue:\n        if element.tag == 'Number':\n            number = element.text\n        elif element.tag == 'Supplement':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('RiskIssueNumber').text\n    suppl = issue.find('RiskIssueSupplement').text\n    if number is not None and suppl is not None:\n        return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n    if 'number' in issue.keys():\n        number = issue['number']\n    if'suppl' in issue.keys():\n        suppl = issue['suppl']\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.find_all('field'):\n        if 'value' in element.attrs:\n            if 'number' in element.attrs:\n                number = element.attrs['value']\n            if'suppl' in element.attrs:\n                suppl = element.attrs['suppl']\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    for element in issue.findall('.//SupplementaryMetric'):\n        if element.tag == 'Number':\n            number = element.text\n\n    for element in issue.findall('.//SupplementaryMetric'):\n        if element.tag == 'Supplementary':\n            suppl = element.text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('Number').text\n    suppl = issue.find('Supply').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    for element in issue.iter('field'):\n        if element.attrib['name'].lower() == 'number':\n            number = element.text\n        elif element.attrib['name'].lower() =='suppl':\n            suppl = element.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    suppl = ''\n\n    for element in issue.iter(tag=\"Number\"):\n        if element.text:\n            number = element.text\n\n    for element in issue.iter(tag=\"Supplement\"):\n        if element.text:\n            suppl = element.text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    lines = []\n    for k, v in sorted(self.items()):\n        if debug:\n            lines.append(''* indent + k + ':'+ str(v))\n        else:\n            lines.append(''* indent + k)\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        for s in sorted(self.subjects, key=lambda x: x.name):\n            if debug:\n                s.pretty(indent=indent+1)\n            lines.append(s.pretty())\n    else:\n        for s in sorted(self.subjects, key=lambda x: x.name):\n            if debug:\n                s.pretty(indent=indent+1)\n            lines.append(' '*indent+s.pretty())\n    return \"\\n\".join(lines)\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"%s(%s)\" % (self.__class__.__name__, self.iscanonical)\n    else:\n        s = \"%s(%s) (%s)\" % (self.__class__.__name__, self.iscanonical, self.canonical.pretty(indent=indent, debug=debug))\n    return s\n", "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s += \"Canonical \"\n    else:\n        s += \"Node \"\n    s += str(self.id) + \" \"\n    s += str(self.type) + \" \"\n    if self.data is not None:\n        s += str(self.data)\n        s += \" \"\n    return s\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent + '#'+ self.canonical)\n        lines.append(''* indent + '-' * (len(self.canonical) + 2))\n    for child in self.children:\n        lines.append(child.pretty(indent+1, debug))\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent)\n        lines.append('Current canonical symbol:'+ self.canonical)\n        lines.append('Canonical symbol length:'+ str(len(self.canonical)))\n    else:\n        lines.append(''* indent)\n        lines.append('Canonical symbol:'+ self.canonical)\n        lines.append('Canonical symbol length:'+ str(len(self.canonical)))\n\n    if debug:\n        lines.append('=' * 60)\n        lines.append('')\n        for line in self.debug.split('\\n'):\n            lines.append(line)\n        lines.append('=' * 60)\n\n    return '\\n'.join(lines)\n", "def pretty(self, indent=0, debug=False):\n    if not self.iscanonical:\n        return '{} (canonical)'.format(self.name)\n    else:\n        return '{}({})'.format(self.name, self.iscanonical)\n", "def pretty(self, indent=0, debug=False):\n    outstr = \"\"\n    if self.iscanonical:\n        outstr += \"%scanonical = %s\\n\" % (\" \" * indent, self.canonical)\n    else:\n        outstr += \"%siscanonical = %s\\n\" % (\" \" * indent, self.iscanonical)\n    return outstr\n", "def pretty(self, indent=0, debug=False):\n    r\"\"\" Return a pretty formatted representation of self. \"\"\"\n    s = ''\n    if self.iscanonical:\n        s ='' * indent + 'Canonical:'+ str(self.canonical)\n    else:\n        s ='' * indent + 'Node:'+ str(self)\n    if self.name:\n        s +='(' + self.name + ')'\n    if self.value:\n        s +='='+ self.value\n    return s\n", "def pretty(self, indent=0, debug=False):\n    string = \"\"\n    if self.iscanonical:\n        string = \"(%s)\" % self.canonical\n    else:\n        string = \"(%s) [%s]\" % (self.canonical, self.ref)\n    if indent:\n        string = \"%s\\n    \" % string\n    if debug:\n        string += \"%s\" % self.arguments\n    return string\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    for k, v in sorted(self.items()):\n        if debug:\n            lines.append(''* indent + k + ':'+ str(v))\n        else:\n            lines.append(''* indent + k)\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        for s in sorted(self.subjects, key=lambda x: x.name):\n            if debug:\n                s.pretty(indent=indent+1)\n            lines.append(s.pretty())\n    else:\n        for s in sorted(self.subjects, key=lambda x: x.name):\n            if debug:\n                s.pretty(indent=indent+1)\n            lines.append(' '*indent+s.pretty())\n    return \"\\n\".join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s = \"%s(%s)\" % (self.__class__.__name__, self.iscanonical)\n    else:\n        s = \"%s(%s) (%s)\" % (self.__class__.__name__, self.iscanonical, self.canonical.pretty(indent=indent, debug=debug))\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    s = \"\"\n    if self.iscanonical:\n        s += \"Canonical \"\n    else:\n        s += \"Node \"\n    s += str(self.id) + \" \"\n    s += str(self.type) + \" \"\n    if self.data is not None:\n        s += str(self.data)\n        s += \" \"\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent + '#'+ self.canonical)\n        lines.append(''* indent + '-' * (len(self.canonical) + 2))\n    for child in self.children:\n        lines.append(child.pretty(indent+1, debug))\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    if self.iscanonical:\n        lines.append(''* indent)\n        lines.append('Current canonical symbol:'+ self.canonical)\n        lines.append('Canonical symbol length:'+ str(len(self.canonical)))\n    else:\n        lines.append(''* indent)\n        lines.append('Canonical symbol:'+ self.canonical)\n        lines.append('Canonical symbol length:'+ str(len(self.canonical)))\n\n    if debug:\n        lines.append('=' * 60)\n        lines.append('')\n        for line in self.debug.split('\\n'):\n            lines.append(line)\n        lines.append('=' * 60)\n\n    return '\\n'.join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if not self.iscanonical:\n        return '{} (canonical)'.format(self.name)\n    else:\n        return '{}({})'.format(self.name, self.iscanonical)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    outstr = \"\"\n    if self.iscanonical:\n        outstr += \"%scanonical = %s\\n\" % (\" \" * indent, self.canonical)\n    else:\n        outstr += \"%siscanonical = %s\\n\" % (\" \" * indent, self.iscanonical)\n    return outstr\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    r\"\"\" Return a pretty formatted representation of self. \"\"\"\n    s = ''\n    if self.iscanonical:\n        s ='' * indent + 'Canonical:'+ str(self.canonical)\n    else:\n        s ='' * indent + 'Node:'+ str(self)\n    if self.name:\n        s +='(' + self.name + ')'\n    if self.value:\n        s +='='+ self.value\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    string = \"\"\n    if self.iscanonical:\n        string = \"(%s)\" % self.canonical\n    else:\n        string = \"(%s) [%s]\" % (self.canonical, self.ref)\n    if indent:\n        string = \"%s\\n    \" % string\n    if debug:\n        string += \"%s\" % self.arguments\n    return string\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    args = [arg for arg in args if arg is not self]\n    if not args:\n        return self\n    if len(args) == 1:\n        return args[0]\n    return AND(*[arg.absorb(args[1:]) if isinstance(arg, Not) else arg for arg in args])\n", "def absorb(self, args):\n    if len(args) == 1:\n        return args[0] | self.dual\n    elif len(args) == 2:\n        return args[0] & args[1]\n    else:\n        raise ValueError(\"Cannot absorb more than two expressions.\")\n", "def absorb(self, args):\n    if self.dual is None:\n        return [arg | self for arg in args]\n\n    return [self & arg for arg in args] + [~self & arg for arg in args]\n", "def absorb(self, args):\n    args = list(args)\n    for i in range(len(args) - 1):\n        if args[i].is_neg():\n            self.dual.negate()\n            args.insert(i + 1, self.dual)\n        elif args[i].is_pos():\n            self.dual.add()\n            args.insert(i + 1, self.dual)\n    return args\n", "def absorb(self, args):\n    return [arg | ~arg for arg in args]\n", "def absorb(self, args):\n    return [a | b for a, b in zip(args[:-1], args[1:])]\n", "def absorb(self, args):\n    # return args\n    if len(args) == 1:\n        return [args[0] ^ self.dual]\n    elif len(args) == 2:\n        return [self & args[0]] + args[1]\n    else:\n        raise TypeError(\"Cannot absorb more than two expressions\")\n", "def absorb(self, args):\n    args = list(args)\n\n    for i in range(len(args)):\n        if args[i].is_dual:\n            if i == 0:\n                self.dual.absorb(args[i + 1:])\n            else:\n                self.dual.absorb(args[i - 1:i + 1])\n        else:\n            self.negative.absorb(args[i + 1:])\n\n    return self\n", "def absorb(self, args):\n    if len(args) == 1:\n        return args[0]\n\n    result = []\n    for arg in args:\n        if arg == self.dual:\n            result.append(self.dual)\n        else:\n            result.append(arg.absorb(self))\n    return result\n", "def absorb(self, args):\n    return [absorb_expr(args[0], args[1])]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    args = [arg for arg in args if arg is not self]\n    if not args:\n        return self\n    if len(args) == 1:\n        return args[0]\n    return AND(*[arg.absorb(args[1:]) if isinstance(arg, Not) else arg for arg in args])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if len(args) == 1:\n        return args[0] | self.dual\n    elif len(args) == 2:\n        return args[0] & args[1]\n    else:\n        raise ValueError(\"Cannot absorb more than two expressions.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if self.dual is None:\n        return [arg | self for arg in args]\n\n    return [self & arg for arg in args] + [~self & arg for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i in range(len(args) - 1):\n        if args[i].is_neg():\n            self.dual.negate()\n            args.insert(i + 1, self.dual)\n        elif args[i].is_pos():\n            self.dual.add()\n            args.insert(i + 1, self.dual)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | ~arg for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [a | b for a, b in zip(args[:-1], args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    # return args\n    if len(args) == 1:\n        return [args[0] ^ self.dual]\n    elif len(args) == 2:\n        return [self & args[0]] + args[1]\n    else:\n        raise TypeError(\"Cannot absorb more than two expressions\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n\n    for i in range(len(args)):\n        if args[i].is_dual:\n            if i == 0:\n                self.dual.absorb(args[i + 1:])\n            else:\n                self.dual.absorb(args[i - 1:i + 1])\n        else:\n            self.negative.absorb(args[i + 1:])\n\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    if len(args) == 1:\n        return args[0]\n\n    result = []\n    for arg in args:\n        if arg == self.dual:\n            result.append(self.dual)\n        else:\n            result.append(arg.absorb(self))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [absorb_expr(args[0], args[1])]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def wrapper(callback):\n        if hook not in self.registry:\n            self.registry[hook] = [callback]\n        else:\n            self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "def on(self, hook):\n\n    def register_listener(callback):\n        if hook not in self.registry:\n            self.registry[hook] = callback\n        return callback\n\n    return register_listener\n", "def on(self, hook):\n    def decorator(method):\n        self.registry[hook] = method\n        return method\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n    return register_listener\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = [listener]\n        else:\n            self.registry[hook].append(listener)\n        return listener\n    return decorator\n", "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n        return listener\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(callback):\n        if hook not in self.registry:\n            self.registry[hook] = [callback]\n        else:\n            self.registry[hook].append(callback)\n        return callback\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def register_listener(callback):\n        if hook not in self.registry:\n            self.registry[hook] = callback\n        return callback\n\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(method):\n        self.registry[hook] = method\n        return method\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        if listener not in self.registry[hook]:\n            self.registry[hook].append(listener)\n        return listener\n    return register_listener\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(listener):\n        if hook not in self.registry:\n            self.registry[hook] = [listener]\n        else:\n            self.registry[hook].append(listener)\n        return listener\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def register_listener(listener):\n        self.registry[hook].append(listener)\n    return register_listener\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"retries\": 0,\n            \"wait_timeout\": 300,\n            \"wait_timeout_type\": \"interval\",\n        },\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"password\": \"\",\n        \"key\": \"\",\n        \"cert\": \"\",\n        \"cacert\": \"\",\n        \"certificate_chain\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"token\": None,\n        \"token_secret\": None,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_auth\": {\n            \"user\": {\"default\": \"\"},\n            \"password\": {\"default\": \"\"},\n        },\n        \"db\": {\n            \"default\": {\n                \"enabled\": True,\n                \"host\": etcd_host,\n                \"port\": etcd_port,\n            },\n            \"user\": {\"default\": \"\"},\n            \"password\": {\"default\": \"\"},\n        },\n        \"users\": {\n            \"user\": {\"default\": {\"enabled\": True}, \"password\": {\"default\": \"\"}},\n            \"password\": {\"default\": {\"enabled\": True}, \"password\": {\"default\": \"\"}},\n        },\n        ", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": {\n            \"mode\": \"AES256\",\n            \"key\": \"\",\n            \"iv\": \"\",\n            \"key_pass\": \"\",\n        },\n        \"recovery_strategy\": {\n            \"mode\": \"SYNCHRONIZE\",\n            \"recovery_database\": {\n                \"host\": etcd_host,\n                \"port\": etcd_port,\n            },\n        },\n    }\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"name\": \"test\",\n            \"user\": \"test\",\n            \"password\": \"test\",\n            \"retries\": 0,\n            \"wait_timeout\": 300,\n            \"wait_timeout_type\": \"interval\",\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"password\": \"\",\n        \"key\": \"\",\n        \"cert\": \"\",\n        \"cacert\": \"\",\n        \"certificate_chain\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"password\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database\": {\n            \"user\": \"user\",\n            \"password\": \"password\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_password\": \"password\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"host\": etcd_host,\n        \"port\": etcd_port,\n        \"db\": \"testdb\",\n        \"prefix\": \"prefix\",\n        \"password\": \"password\",\n        \"write_only\": False,\n        \"ssl\": False,\n        \"verify\": False,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"cert_chain\": \"\",\n        \"node_cert\": \"\",\n        \"node_key\": \"\",\n        \"cert_chain_password\": \"\",\n        \"node_cert_password\": \"\",\n        \"secure\": False,\n        \"secure_ca_cert\": \"\",\n        \"secure_ca_key\": \"\",\n        \"secure_cert_chain\": \"\",\n        \"secure_cert_key\": \"\",\n        \"secure_ca_cert_password\": \"\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"user\": \"\",\n            \"password\": \"\"\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"api_key\": None,\n        \"api_secret\": None,\n        \"token\": None,\n        \"token_secret\": None,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"password\": \"\",\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_auth\": {\n            \"user\": {\"default\": \"\"},\n            \"password\": {\"default\": \"\"},\n        },\n        \"db\": {\n            \"default\": {\n                \"enabled\": True,\n                \"host\": etcd_host,\n                \"port\": etcd_port,\n            },\n            \"user\": {\"default\": \"\"},\n            \"password\": {\"default\": \"\"},\n        },\n        \"users\": {\n            \"user\": {\"default\": {\"enabled\": True}, \"password\": {\"default\": \"\"}},\n            \"password\": {\"default\": {\"enabled\": True}, \"password\": {\"default\": \"\"}},\n        },\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"password\": \"\",\n        \"encryption\": {\n            \"mode\": \"AES256\",\n            \"key\": \"\",\n            \"iv\": \"\",\n            \"key_pass\": \"\",\n        },\n        \"recovery_strategy\": {\n            \"mode\": \"SYNCHRONIZE\",\n            \"recovery_database\": {\n                \"host\": etcd_host,\n                \"port\": etcd_port,\n            },\n        },\n    }\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    return dt\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=utc)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=pytz.utc)\n\n    return dt.astimezone(pytz.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    else:\n        return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(UTC)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=UTC)\n    return dt\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minutes,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weekday=self.weekday,\n                         years2=self.years2,\n                         weekday2=self.weekday2,\n                         weekofyear=self.weekofyear,\n                         weekofyear2=self.weekofyear2)\n", "def normalized(self):\n\n    return relativedelta(days=self.days,\n                          hours=self.hour,\n                          minutes=self.minute,\n                          seconds=self.second,\n                          microseconds=self.microsecond,\n                          weekday=self.weekday,\n                          years=self.years,\n                          months=self.months,\n                          days_in_month=self.days_in_month,\n                          months_in_year=self.months_in_year)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         months=self.months,\n                         years=self.years,\n                         leapdays=self.leapdays,\n                         daysinmonth=self.daysinmonth,\n                         daysinyear=self.daysinyear,\n                         weeks=self.weeks,\n                         monthsinday=self.monthsinday,\n                         monthsinyear=self.monthsinyear,\n              ", "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        hours=self.hour,\n        minutes=self.minute,\n        seconds=self.second,\n        microseconds=self.microsecond,\n        years=self.years,\n        months=self.months,\n        weekday=self.weekday,\n        weekofyear=self.weekofyear,\n        daysinmonth=self.daysinmonth,\n        monthday=self.monthday,\n        leapdays=self.leapdays,\n        daysinyear=self.daysinyear,\n        yearsinyear=self.yearsinyear,\n        monthsinmonth=self.monthsinmonth,\n        leapdaysinmonth=self.leapdaysinmonth,\n        leapdaysinyear=self.leapdaysinyear,\n    )\n", "def normalized(self):\n    return relativedelta(**{k: v for k, v in vars(self).items() if not k.startswith('_')})\n", "def normalized(self):\n\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         years=self.years,\n                         months=self.months,\n                         days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year,\n                         leapdays=self.leapdays,\n                         weeks=self.weeks,\n                         days_in_week=self.days_in_week,\n                         weeks_in_week=self.weeks_in_wee", "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hours,\n                         minutes=self.minutes,\n                         microseconds=self.microseconds,\n                         years=self.years,\n                         months=self.months,\n                         weekday=self.weekday,\n                         days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year,\n                         leapdays=self.leapdays,\n                         weeks=self.weeks,\n                         days_in_week=self.days_in_week,\n                         months_in_week=self.months_in_week,\n                         leapda", "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         years=self.years, months=self.months,\n                         days_in_month=self.days_in_month,\n                         weeks=self.weeks, months_in_year=self.months_in_year,\n                         leapdays=self.leapdays)\n", "def normalized(self):\n    return relativedelta(days=self.days,\n                          hours=self.hour,\n                          minutes=self.minute,\n                          seconds=self.second,\n                          microseconds=self.microsecond,\n                          weekday=self.weekday,\n                          years=self.years,\n                          months=self.months,\n                          days_of_month=self.days_of_month,\n                          weeks=self.weeks,\n                          month_days=self.month_days,\n                          weeks_of_year=self.weeks_of_year,\n                          days_of_week=self.days_of_week,\n                          days_of", "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         weekofyear=self.weekofyear,\n                         year=self.year,\n                         month=self.month,\n                         months=self.months,\n                         yearday=self.yearday,\n                         monthrange=self.monthrange,\n                         leapdays=self.leapdays,\n                         daysoffset=self.daysoffset,\n                         resolution=sel"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minutes,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         years=self.years,\n                         weekday=self.weekday,\n                         years2=self.years2,\n                         weekday2=self.weekday2,\n                         weekofyear=self.weekofyear,\n                         weekofyear2=self.weekofyear2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(days=self.days,\n                          hours=self.hour,\n                          minutes=self.minute,\n                          seconds=self.second,\n                          microseconds=self.microsecond,\n                          weekday=self.weekday,\n                          years=self.years,\n                          months=self.months,\n                          days_in_month=self.days_in_month,\n                          months_in_year=self.months_in_year)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         months=self.months,\n                         years=self.years,\n                         leapdays=self.leapdays,\n                         daysinmonth=self.daysinmonth,\n                         daysinyear=self.daysinyear,\n                         weeks=self.weeks,\n                         monthsinday=self.monthsinday,\n                         monthsinyear=self.monthsinyear,\n              ", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(\n        days=self.days,\n        hours=self.hour,\n        minutes=self.minute,\n        seconds=self.second,\n        microseconds=self.microsecond,\n        years=self.years,\n        months=self.months,\n        weekday=self.weekday,\n        weekofyear=self.weekofyear,\n        daysinmonth=self.daysinmonth,\n        monthday=self.monthday,\n        leapdays=self.leapdays,\n        daysinyear=self.daysinyear,\n        yearsinyear=self.yearsinyear,\n        monthsinmonth=self.monthsinmonth,\n        leapdaysinmonth=self.leapdaysinmonth,\n        leapdaysinyear=self.leapdaysinyear,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: v for k, v in vars(self).items() if not k.startswith('_')})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         years=self.years,\n                         months=self.months,\n                         days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year,\n                         leapdays=self.leapdays,\n                         weeks=self.weeks,\n                         days_in_week=self.days_in_week,\n                         weeks_in_week=self.weeks_in_wee", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hours,\n                         minutes=self.minutes,\n                         microseconds=self.microseconds,\n                         years=self.years,\n                         months=self.months,\n                         weekday=self.weekday,\n                         days_in_month=self.days_in_month,\n                         months_in_year=self.months_in_year,\n                         leapdays=self.leapdays,\n                         weeks=self.weeks,\n                         days_in_week=self.days_in_week,\n                         months_in_week=self.months_in_week,\n                         leapda", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.day, hours=self.hour,\n                         minutes=self.minute, seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         years=self.years, months=self.months,\n                         days_in_month=self.days_in_month,\n                         weeks=self.weeks, months_in_year=self.months_in_year,\n                         leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                          hours=self.hour,\n                          minutes=self.minute,\n                          seconds=self.second,\n                          microseconds=self.microsecond,\n                          weekday=self.weekday,\n                          years=self.years,\n                          months=self.months,\n                          days_of_month=self.days_of_month,\n                          weeks=self.weeks,\n                          month_days=self.month_days,\n                          weeks_of_year=self.weeks_of_year,\n                          days_of_week=self.days_of_week,\n                          days_of", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days,\n                         hours=self.hour,\n                         minutes=self.minute,\n                         seconds=self.second,\n                         microseconds=self.microsecond,\n                         weekday=self.weekday,\n                         weekofyear=self.weekofyear,\n                         year=self.year,\n                         month=self.month,\n                         months=self.months,\n                         yearday=self.yearday,\n                         monthrange=self.monthrange,\n                         leapdays=self.leapdays,\n                         daysoffset=self.daysoffset,\n                         resolution=sel", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def wrapper(self, dt_arg):\n        if not PY2:\n            return namefunc(self, dt_arg)\n        return dt_arg\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode(\"utf-8\"))\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self, dt):\n        if self.tzname:\n            return namefunc(self, dt).encode()\n        else:\n            return namefunc(self, dt)\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt):\n        ret = namefunc(self, dt)\n        if not PY3:\n            return ret\n\n        if isinstance(ret, (bytes, bytearray)):\n            return ret.decode('utf-8', 'backslashreplace')\n        return ret\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    def wrapper(self, dt):\n        name = namefunc(self, dt)\n        if name is not None:\n            # tzname() returns None if dt is not a datetime64 ns timezone\n            name = force_text(name, errors='replace')\n        return name\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    def _wrapper(self, dt_arg):\n        name = namefunc(self, dt_arg)\n        if name is not None:\n            # convert to string for python 2 and unicode for python 3\n            return name.encode('utf-8')\n    return _wrapper\n", "def tzname_in_python2(namefunc):\n    name = namefunc()\n\n    def _(value):\n        if isinstance(value, datetime):\n            value = value.astimezone(pytz.utc)\n        return value.tzname() if value else None\n\n    return _ if PY2 else lambda x: x.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        name = namefunc(self, dt_arg, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None and not isinstance(name, bytes):\n            name = name.encode()\n        return name\n\n    return wrapper\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, dt_arg):\n        if not PY2:\n            return namefunc(self, dt_arg)\n        return dt_arg\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    namefunc(lambda x: x.encode(\"utf-8\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self, dt):\n        if self.tzname:\n            return namefunc(self, dt).encode()\n        else:\n            return namefunc(self, dt)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt):\n        ret = namefunc(self, dt)\n        if not PY3:\n            return ret\n\n        if isinstance(ret, (bytes, bytearray)):\n            return ret.decode('utf-8', 'backslashreplace')\n        return ret\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, dt):\n        name = namefunc(self, dt)\n        if name is not None:\n            # tzname() returns None if dt is not a datetime64 ns timezone\n            name = force_text(name, errors='replace')\n        return name\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _wrapper(self, dt_arg):\n        name = namefunc(self, dt_arg)\n        if name is not None:\n            # convert to string for python 2 and unicode for python 3\n            return name.encode('utf-8')\n    return _wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    name = namefunc()\n\n    def _(value):\n        if isinstance(value, datetime):\n            value = value.astimezone(pytz.utc)\n        return value.tzname() if value else None\n\n    return _ if PY2 else lambda x: x.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, dt_arg, *args, **kwargs):\n        name = namefunc(self, dt_arg, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None and not isinstance(name, bytes):\n            name = name.encode()\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except ValueError:\n        return git_versions_from_parentdir('.', 'VERSION', verbose=True)\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(\n            keywords=get_config()[\"versions\"][\"keywords\"],\n            tag_prefix=get_config()[\"versions\"][\"tag_prefix\"],\n            verbose=get_config()[\"versions\"][\"verbose\"],\n        )\n    except KeyError:\n        return git_versions_from_parentdir(\n            parentdir_prefix=os.path.expanduser(\"~\"),\n            verbose=get_config()[\"versions\"][\"verbose\"],\n        )\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except RuntimeError:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except ShellCommandException:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except IOError:\n        return git_versions_from_parentdir('.', 'VERSION', verbose=True)\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(\n            get_config().versions_from_keywords,'versions', verbose=True\n        )\n    except IOError:\n        return git_versions_from_parentdir(\n            get_config().parentdir,'versions', verbose=True\n        )\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords,'versions', verbose=True)\n    except ValueError:\n        return git_versions_from_parentdir('.', 'VERSIONS', verbose=True)\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except VersionConflictError:\n        return git_versions_from_parentdir(\n            os.path.dirname(os.path.abspath(__file__)),\n            os.path.abspath('.'),\n            verbose=True\n        )\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except Exception:\n        return git_versions_from_parentdir(\n            os.path.join('.', 'VERSION'),\n            os.path.join('.', 'INI'),\n            verbose=True,\n        )\n", "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except IOError:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except ValueError:\n        return git_versions_from_parentdir('.', 'VERSION', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(\n            keywords=get_config()[\"versions\"][\"keywords\"],\n            tag_prefix=get_config()[\"versions\"][\"tag_prefix\"],\n            verbose=get_config()[\"versions\"][\"verbose\"],\n        )\n    except KeyError:\n        return git_versions_from_parentdir(\n            parentdir_prefix=os.path.expanduser(\"~\"),\n            verbose=get_config()[\"versions\"][\"verbose\"],\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except RuntimeError:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except ShellCommandException:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except IOError:\n        return git_versions_from_parentdir('.', 'VERSION', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(\n            get_config().versions_from_keywords,'versions', verbose=True\n        )\n    except IOError:\n        return git_versions_from_parentdir(\n            get_config().parentdir,'versions', verbose=True\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords,'versions', verbose=True)\n    except ValueError:\n        return git_versions_from_parentdir('.', 'VERSIONS', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except VersionConflictError:\n        return git_versions_from_parentdir(\n            os.path.dirname(os.path.abspath(__file__)),\n            os.path.abspath('.'),\n            verbose=True\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, 'VERSION', verbose=True)\n    except Exception:\n        return git_versions_from_parentdir(\n            os.path.join('.', 'VERSION'),\n            os.path.join('.', 'INI'),\n            verbose=True,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return git_versions_from_keywords(keywords, '', verbose=True)\n    except IOError:\n        return git_versions_from_parentdir('.', '.', verbose=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_p", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pe", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_pep440_pre_long(piec", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-pre-long\":\n        rendered = render_p", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"aws_s3_sdk/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/datalad_synthetics/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_pnl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"django_select2/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"wnlt/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"node_tree_exporter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_src/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"aws_s3_sdk/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/datalad_synthetics/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"semicolon_pnl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/yotta/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"eradicate/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"django_select2/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"wnlt/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"node_tree_exporter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"natsu_src/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    logger.info(\"Validating storage root hierarchy\")\n    checked_objects = 0\n    num_objects = 0\n    for root_path, fs_objects in self.root_fs.items():\n        if validate_objects:\n            validator = FSValidator(self.root_fs)\n            validator.validate_objects(fs_objects)\n        if check_digests:\n            validator.validate_digests(fs_objects)\n        for object_path in fs_objects:\n            if show_warnings:\n                logger.warning(\"%s checked, checking digest\", object_path)\n            try:\n                obj = self.root_fs.get_object(object_path)\n                obj.validate_digests(fs_objects)\n                num_objects += 1\n                checked_objects += 1\n            except FSError as e:\n                logger.error(str(e))\n              ", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_fs = self.root_fs\n    if root_fs.is_file():\n        root_fs.unlink()\n        if validate_objects:\n            self.lax_digests = {}\n            return 0, 0\n        elif check_digests:\n            self.lax_digests = self._check_digests(root_fs)\n        return 0, 0\n    elif root_fs.is_dir():\n        return self._validate_object_hierarchy(root_fs, check_digests, show_warnings)\n    else:\n        raise errors.NotADirectoryError(self.object_paths())\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_fs = self.root_fs\n\n    # Check if the storage root is valid.\n    if root_fs.is_filesystem_root:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    # Check if the storage root contains all the objects in it.\n    # If not, return an invalid state of the storage root.\n    if not check_digests:\n        return 0, 0\n\n    num_objects = len(self.object_paths())\n    if not root_fs.is_filesystem_root:\n        return num_objects, 0\n\n    good_objects = 0\n    for obj in self.object_paths():\n        if obj.is_valid_on_storage():\n            good_objects += 1\n\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root_fs in self.root_fs:\n        for storage_object in root_fs.storage_objects:\n            num_objects += storage_object.count_objects()\n            if validate_objects:\n                if not storage_object.validate_digests(check_digests=check_digests):\n                    good_objects += 1\n    if show_warnings:\n        logger.info(\n            \"Validation of storage root %s failed (%d failed)\",\n            self.root_fs.name,\n            num_objects,\n        )\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, validate_objects, check_digests, show_warnings)\n    validator.validate()\n    return validator.num_objects, validator.good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    logging.debug('Validating storage root hierarchy')\n    num_objects, good_objects = self.root_fs.validate_storage_root_hierarchy(self.lax_digests, validate_objects,\n                                                                       check_digests, show_warnings)\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    with self.root_fs.open() as f:\n        for obj_type in f.iter_types():\n            obj = fs_object.Object(f, obj_type)\n            self._validate_object(obj, validate_objects, check_digests, show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    with self.root_fs.open() as f:\n        root_fs = FS.RootFS(f)\n    num_objects, good_objects = validate_storage_root(\n        self.root_fs,\n        validate_objects=validate_objects,\n        check_digests=check_digests,\n        show_warnings=show_warnings,\n    )\n\n    if not num_objects and validate_objects:\n        raise RuntimeError('No objects found in storage')\n\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = []\n    self.object_paths = []\n\n    self.root_fs.validate_storage_root_hierarchy(validate_objects, check_digests, show_warnings)\n\n    if len(self.lax_digests)!= len(self.object_paths):\n        return len(self.lax_digests), len(self.object_paths)\n    return 0, 0\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self.root_fs.walk():\n        if not root.is_dir():\n            continue\n\n        # check the validity of the storage root\n        try:\n            self.lax_digests(root)\n        except FSError:\n            if not validate_objects:\n                continue\n\n            if check_digests:\n                if root.is_file() and not root.is_symlink():\n                    self.lax_digests(root)\n            if show_warnings:\n                logging.warning(\"%s is not a valid storage root!\" % root.path)\n            num_objects += 1\n            if not validate_objects:\n                good_objects += 1\n\n    return num_objects, good_objects\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    logger.info(\"Validating storage root hierarchy\")\n    checked_objects = 0\n    num_objects = 0\n    for root_path, fs_objects in self.root_fs.items():\n        if validate_objects:\n            validator = FSValidator(self.root_fs)\n            validator.validate_objects(fs_objects)\n        if check_digests:\n            validator.validate_digests(fs_objects)\n        for object_path in fs_objects:\n            if show_warnings:\n                logger.warning(\"%s checked, checking digest\", object_path)\n            try:\n                obj = self.root_fs.get_object(object_path)\n                obj.validate_digests(fs_objects)\n                num_objects += 1\n                checked_objects += 1\n            except FSError as e:\n                logger.error(str(e))\n              ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_fs = self.root_fs\n    if root_fs.is_file():\n        root_fs.unlink()\n        if validate_objects:\n            self.lax_digests = {}\n            return 0, 0\n        elif check_digests:\n            self.lax_digests = self._check_digests(root_fs)\n        return 0, 0\n    elif root_fs.is_dir():\n        return self._validate_object_hierarchy(root_fs, check_digests, show_warnings)\n    else:\n        raise errors.NotADirectoryError(self.object_paths())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    root_fs = self.root_fs\n\n    # Check if the storage root is valid.\n    if root_fs.is_filesystem_root:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    # Check if the storage root contains all the objects in it.\n    # If not, return an invalid state of the storage root.\n    if not check_digests:\n        return 0, 0\n\n    num_objects = len(self.object_paths())\n    if not root_fs.is_filesystem_root:\n        return num_objects, 0\n\n    good_objects = 0\n    for obj in self.object_paths():\n        if obj.is_valid_on_storage():\n            good_objects += 1\n\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root_fs in self.root_fs:\n        for storage_object in root_fs.storage_objects:\n            num_objects += storage_object.count_objects()\n            if validate_objects:\n                if not storage_object.validate_digests(check_digests=check_digests):\n                    good_objects += 1\n    if show_warnings:\n        logger.info(\n            \"Validation of storage root %s failed (%d failed)\",\n            self.root_fs.name,\n            num_objects,\n        )\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validator = FSValidator(self.root_fs, validate_objects, check_digests, show_warnings)\n    validator.validate()\n    return validator.num_objects, validator.good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    logging.debug('Validating storage root hierarchy')\n    num_objects, good_objects = self.root_fs.validate_storage_root_hierarchy(self.lax_digests, validate_objects,\n                                                                       check_digests, show_warnings)\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    with self.root_fs.open() as f:\n        for obj_type in f.iter_types():\n            obj = fs_object.Object(f, obj_type)\n            self._validate_object(obj, validate_objects, check_digests, show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    with self.root_fs.open() as f:\n        root_fs = FS.RootFS(f)\n    num_objects, good_objects = validate_storage_root(\n        self.root_fs,\n        validate_objects=validate_objects,\n        check_digests=check_digests,\n        show_warnings=show_warnings,\n    )\n\n    if not num_objects and validate_objects:\n        raise RuntimeError('No objects found in storage')\n\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.lax_digests = []\n    self.object_paths = []\n\n    self.root_fs.validate_storage_root_hierarchy(validate_objects, check_digests, show_warnings)\n\n    if len(self.lax_digests)!= len(self.object_paths):\n        return len(self.lax_digests), len(self.object_paths)\n    return 0, 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self.root_fs.walk():\n        if not root.is_dir():\n            continue\n\n        # check the validity of the storage root\n        try:\n            self.lax_digests(root)\n        except FSError:\n            if not validate_objects:\n                continue\n\n            if check_digests:\n                if root.is_file() and not root.is_symlink():\n                    self.lax_digests(root)\n            if show_warnings:\n                logging.warning(\"%s is not a valid storage root!\" % root.path)\n            num_objects += 1\n            if not validate_objects:\n                good_objects += 1\n\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    self.root = self.root_fs.create_file(\n        self.layout_file.name, self.layout_file.content_type)\n", "def initialize(self):\n    self.root = OCFLStorageRoot(self.root_fs)\n", "def initialize(self):\n    self.root = FileNode(self.root_fs, self.declaration_tvalue)\n", "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n    self.root = self.root_fs.mkdir(self.declaration_tvalue)\n", "def initialize(self):\n    self.root = self.root_fs.mkdir(self.layout_file)\n    self.declaration_tvalue = self.root.joinpath('declaration-tvalue')\n    self.declaration_tvalue.touch()\n", "def initialize(self):\n    self.root = Root(self.root_fs, self.layout_file)\n    self.declaration_tvalue = None\n", "def initialize(self):\n    self.root = {}\n    self.root_fs = FileSystem(self.root)\n    self.declaration_tvalue = None\n", "def initialize(self):\n    self.root = Root(self.root_fs)\n    self.root.create()\n", "def initialize(self):\n    self.root = self.root_fs.create_directory(self.layout_file.path)\n", "def initialize(self):\n    self.root = None\n    self.root_fs = None\n    self.declaration_tvalue = None\n    self.layout_file = None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    self.root = self.root_fs.create_file(\n        self.layout_file.name, self.layout_file.content_type)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = OCFLStorageRoot(self.root_fs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = FileNode(self.root_fs, self.declaration_tvalue)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    super(OCFLStorageRoot, self).initialize()\n    self.root = self.root_fs.mkdir(self.declaration_tvalue)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = self.root_fs.mkdir(self.layout_file)\n    self.declaration_tvalue = self.root.joinpath('declaration-tvalue')\n    self.declaration_tvalue.touch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = Root(self.root_fs, self.layout_file)\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = {}\n    self.root_fs = FileSystem(self.root)\n    self.declaration_tvalue = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = Root(self.root_fs)\n    self.root.create()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = self.root_fs.create_directory(self.layout_file.path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.root = None\n    self.root_fs = None\n    self.declaration_tvalue = None\n    self.layout_file = None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if version is None:\n        return ''\n\n    if re.match(r'^(\\d+\\.){3}(\\d+\\.){3}$', version):\n        return version\n    else:\n        return '0.%s' % version\n", "def next_version(version):\n    while version and version[0].isdigit():\n        version = version[1:]\n    return version\n", "def next_version(version):\n    next_pattern = r'^v(\\d+)(\\.\\d+)?$'\n    match = re.match(next_pattern, version)\n    if not match:\n        return None\n    return 'v' + match.group(1) + match.group(2)\n", "def next_version(version):\n    m = re.match(r'^(\\d+\\.\\d+)$', version)\n    if m:\n        return '%s.0' % m.group(1)\n    else:\n        return version\n", "def next_version(version):\n    m = re.match(r\"^(\\d+)(.+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return \"%s.%s\" % (m.group(1), m.group(2))\n", "def next_version(version):\n    version = re.sub(r'^v[0-9]+$', '', version)\n    version = re.sub(r'^v(\\d+)$', '', version)\n    if version == '':\n        return None\n    return int(version) + 1\n", "def next_version(version):\n    match = NEXT_VERSION_RE.match(version)\n    return match.group(1) if match else None\n", "def next_version(version):\n    if not version.startswith('0'):\n        raise ValueError('Invalid next version %r' % version)\n    version = version[1:]\n    while len(version) < 4:\n        version = '0' + version\n    return version\n", "def next_version(version):\n    if version:\n        return ('.'.join([version, pattern]) for pattern in PATTERNS)\n    return version\n", "def next_version(version):\n    m = re.match(r'^(\\d+)\\.(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return m.group(1), m.group(2)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if version is None:\n        return ''\n\n    if re.match(r'^(\\d+\\.){3}(\\d+\\.){3}$', version):\n        return version\n    else:\n        return '0.%s' % version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    while version and version[0].isdigit():\n        version = version[1:]\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    next_pattern = r'^v(\\d+)(\\.\\d+)?$'\n    match = re.match(next_pattern, version)\n    if not match:\n        return None\n    return 'v' + match.group(1) + match.group(2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r'^(\\d+\\.\\d+)$', version)\n    if m:\n        return '%s.0' % m.group(1)\n    else:\n        return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r\"^(\\d+)(.+)$\", version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return \"%s.%s\" % (m.group(1), m.group(2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    version = re.sub(r'^v[0-9]+$', '', version)\n    version = re.sub(r'^v(\\d+)$', '', version)\n    if version == '':\n        return None\n    return int(version) + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    match = NEXT_VERSION_RE.match(version)\n    return match.group(1) if match else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if not version.startswith('0'):\n        raise ValueError('Invalid next version %r' % version)\n    version = version[1:]\n    while len(version) < 4:\n        version = '0' + version\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version:\n        return ('.'.join([version, pattern]) for pattern in PATTERNS)\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r'^(\\d+)\\.(\\d+)$', version)\n    if not m:\n        raise ValueError(\"Invalid version %s\" % version)\n    return m.group(1), m.group(2)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    # TODO: validate the version digest against the inventory digest.\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    if not version_dirs:\n        return\n\n    root_dir = version_dirs[0]\n    if not os.path.isdir(root_dir):\n        return\n\n    for inv_digest_file in self.inventory_digest_files:\n        for digest_algorithm in self.digest_algorithms:\n            digest = self.digest_algorithm(inv_digest_file)\n            if digest!= digest_algorithm.digest:\n                self.log.debug(\"%s has different inventory digest %s from %s\",\n                               inv_digest_file, digest, digest_algorithm)\n                return False\n\n            # TODO: Check for files that have different content digests.\n            content_digest = digest_algorithm.content_digest\n            if content_digest!= digest_algorithm.content_digest:\n                self.log.debug(\n                    \"%s has different content digest %s from", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating version inventories...\")\n    inv_file = self.obj_fs.opendir(version_dirs[0])\n    self.log.debug(\"Root inventory: %s\", self.root_inv_validator.check(inv_file))\n    self.log.debug(\"Inventory digest files: %s\", version_dirs)\n    inv_digests = self.root_inv_validator.check_digest(inv_file)\n    self.log.debug(\"Digests checked: %s\", inv_digests)\n    self.log.debug(\"Differences found: %s\", version_dirs[1:])\n    self.log.debug(\"Differences not found: %s\", version_dirs[:-1])\n    for version_dir in version_dirs[1:]:\n        inv_digests = self.root_inv_validator.check_digest(\n            os.path.join(version_dir, inv_digests[version_dir])\n        )\n        self.log.debug(\"Differences found: %s\", inv_digests)\n        self.log.debug(\"Differences not found: %s\", version_dirs[:-1])\n    inv_digests = self.root_inv_validator.check_digest(\n        os.path.join(version_dir", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating inventory digests from version dirs: %s\", version_dirs)\n\n    for version_dir in version_dirs:\n        inv_digest = self.id.get_digest(version_dir)\n        digest_algorithm = self.digest_algorithm\n\n        # Record the content digests different from the root inventory so\n        # they can be checked when validating the content.\n        self.root_inv_validator.validate_inventory(version_dir, digest_algorithm, inv_digest)\n\n        # The digest for the inventory should be the same as the content digest of the root inventory.\n        self.inventory_digest_files.append(inv_digest)\n", "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit of a hack, but I do it for now to allow the user\n    # to specify a version sequence from the command line with the -v flag\n    version_dirs = version_dirs or []\n    if self.version_dirs:\n        # A version sequence was passed in so only update the digest if it\n        # matches the root version\n        if self.digest_algorithm == DigestAlgorithm.SHA1:\n            version_dirs = [d for d in version_dirs if d in self.version_dirs]\n        elif self.digest_algorithm == DigestAlgorithm.SHA256:\n            version_dirs = [d for d in version_dirs if d not in self.version_dirs]\n\n    # Now we have a list of the directories to update\n    if not version_dirs:\n        return\n\n    # If we have a root version (no files to update), we can update the\n    # inventory digests for each version in turn. This is done by walking\n    # the root and", "def validate_version_inventories(self, version_dirs):\n    # TODO: we may want to make this more flexible, not just have to check\n    # the version digests against the root inventory first.\n    self.log.debug(\"Validating inventory digests for version %s\", self.id)\n    inv_digests = self.root_inv_validator.validate(self.obj_fs, version_dirs)\n    if inv_digests:\n        self.log.debug(\"Inventory digests are invalid: %s\", inv_digests)\n        return False\n    return True\n", "def validate_version_inventories(self, version_dirs):\n    digest_algorithm = self.id + \"-\" + self.digest_algorithm\n    if digest_algorithm in self.inventory_digest_files:\n        self.log.error(\"Refusing to override digest algorithm {} for version {}\".format(digest_algorithm, self.id))\n        return\n\n    self.log.debug(\"Validating version inventory\")\n    self.root_inv_validator.validate_inventory(\n        self.inventory_digest_files, version_dirs, digest_algorithm\n    )\n", "def validate_version_inventories(self, version_dirs):\n    # Get the root inventory digests that match the version sequence digests\n    # in self.inventory_digest_files.\n    content_digests = set(self.obj_fs.get_content_digests(version_dirs))\n    root_inv_digests = set(self.root_inv_validator.get_digests())\n    # We do this here to ensure that the root inventory digests are ordered by\n    # precedence.\n    root_inv_digests.update(content_digests)\n\n    # We also need to record the digests for the content digests that are\n    # different from the root inventory digests.\n    content_digests.update(root_inv_digests)\n\n    # We also need to record the digests for the digest algorithms that are\n    # different from the root inventory digest algorithms.\n    for digest_algorithm in (\"sha512\", \"sha256\"):\n        digest_algorithm_digests = set(\n            self.root_inv_validator.get_digest_algorithms(digest_algorithm))\n        root_inv_digests.update(digest_algorithm_digests)\n\n    #", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        inv_fs = self.obj_fs.open_fs(version_dir)\n        for inv in inv_fs.open_fs().walk():\n            if inv.name!= self.id:\n                continue\n            self.log.debug(\"verify_version_inventories: found inventory %s\", inv)\n            self.digest_algorithm.verify_content(\n                inv, self.spec_version, self.root_inv_validator\n            )\n            self.digest_algorithm.verify_digest(\n                inv, self.root_inv_validator.content_digest, where=version_dir\n            )\n", "def validate_version_inventories(self, version_dirs):\n    root_inv = self.root_inv_validator(version_dirs)\n    if root_inv is None:\n        return\n\n    # check for files that are in the root inventory\n    inv_files = []\n    for f in root_inv.files:\n        if f.name in self.inventory_digest_files:\n            inv_files.append(f)\n\n    if inv_files:\n        self.log.debug('found %d file(s) to upload inventory to' % len(inv_files))\n        self.log.debug('root inventory: %s' % root_inv)\n        self.log.debug('inventory digest: %s' % root_inv.digest)\n\n        # we only support the root version of the inventory\n        if root_inv.digest!= root_inv.content_digest:\n            self.log.error('invalid inventory digest for root version: %s' %\n                           root_inv.digest)\n            return\n\n        # check for the inventory version against the root version"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: validate the version digest against the inventory digest.\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    if not version_dirs:\n        return\n\n    root_dir = version_dirs[0]\n    if not os.path.isdir(root_dir):\n        return\n\n    for inv_digest_file in self.inventory_digest_files:\n        for digest_algorithm in self.digest_algorithms:\n            digest = self.digest_algorithm(inv_digest_file)\n            if digest!= digest_algorithm.digest:\n                self.log.debug(\"%s has different inventory digest %s from %s\",\n                               inv_digest_file, digest, digest_algorithm)\n                return False\n\n            # TODO: Check for files that have different content digests.\n            content_digest = digest_algorithm.content_digest\n            if content_digest!= digest_algorithm.content_digest:\n                self.log.debug(\n                    \"%s has different content digest %s from", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating version inventories...\")\n    inv_file = self.obj_fs.opendir(version_dirs[0])\n    self.log.debug(\"Root inventory: %s\", self.root_inv_validator.check(inv_file))\n    self.log.debug(\"Inventory digest files: %s\", version_dirs)\n    inv_digests = self.root_inv_validator.check_digest(inv_file)\n    self.log.debug(\"Digests checked: %s\", inv_digests)\n    self.log.debug(\"Differences found: %s\", version_dirs[1:])\n    self.log.debug(\"Differences not found: %s\", version_dirs[:-1])\n    for version_dir in version_dirs[1:]:\n        inv_digests = self.root_inv_validator.check_digest(\n            os.path.join(version_dir, inv_digests[version_dir])\n        )\n        self.log.debug(\"Differences found: %s\", inv_digests)\n        self.log.debug(\"Differences not found: %s\", version_dirs[:-1])\n    inv_digests = self.root_inv_validator.check_digest(\n        os.path.join(version_dir", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"Validating inventory digests from version dirs: %s\", version_dirs)\n\n    for version_dir in version_dirs:\n        inv_digest = self.id.get_digest(version_dir)\n        digest_algorithm = self.digest_algorithm\n\n        # Record the content digests different from the root inventory so\n        # they can be checked when validating the content.\n        self.root_inv_validator.validate_inventory(version_dir, digest_algorithm, inv_digest)\n\n        # The digest for the inventory should be the same as the content digest of the root inventory.\n        self.inventory_digest_files.append(inv_digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit of a hack, but I do it for now to allow the user\n    # to specify a version sequence from the command line with the -v flag\n    version_dirs = version_dirs or []\n    if self.version_dirs:\n        # A version sequence was passed in so only update the digest if it\n        # matches the root version\n        if self.digest_algorithm == DigestAlgorithm.SHA1:\n            version_dirs = [d for d in version_dirs if d in self.version_dirs]\n        elif self.digest_algorithm == DigestAlgorithm.SHA256:\n            version_dirs = [d for d in version_dirs if d not in self.version_dirs]\n\n    # Now we have a list of the directories to update\n    if not version_dirs:\n        return\n\n    # If we have a root version (no files to update), we can update the\n    # inventory digests for each version in turn. This is done by walking\n    # the root and", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: we may want to make this more flexible, not just have to check\n    # the version digests against the root inventory first.\n    self.log.debug(\"Validating inventory digests for version %s\", self.id)\n    inv_digests = self.root_inv_validator.validate(self.obj_fs, version_dirs)\n    if inv_digests:\n        self.log.debug(\"Inventory digests are invalid: %s\", inv_digests)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    digest_algorithm = self.id + \"-\" + self.digest_algorithm\n    if digest_algorithm in self.inventory_digest_files:\n        self.log.error(\"Refusing to override digest algorithm {} for version {}\".format(digest_algorithm, self.id))\n        return\n\n    self.log.debug(\"Validating version inventory\")\n    self.root_inv_validator.validate_inventory(\n        self.inventory_digest_files, version_dirs, digest_algorithm\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # Get the root inventory digests that match the version sequence digests\n    # in self.inventory_digest_files.\n    content_digests = set(self.obj_fs.get_content_digests(version_dirs))\n    root_inv_digests = set(self.root_inv_validator.get_digests())\n    # We do this here to ensure that the root inventory digests are ordered by\n    # precedence.\n    root_inv_digests.update(content_digests)\n\n    # We also need to record the digests for the content digests that are\n    # different from the root inventory digests.\n    content_digests.update(root_inv_digests)\n\n    # We also need to record the digests for the digest algorithms that are\n    # different from the root inventory digest algorithms.\n    for digest_algorithm in (\"sha512\", \"sha256\"):\n        digest_algorithm_digests = set(\n            self.root_inv_validator.get_digest_algorithms(digest_algorithm))\n        root_inv_digests.update(digest_algorithm_digests)\n\n    #", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        inv_fs = self.obj_fs.open_fs(version_dir)\n        for inv in inv_fs.open_fs().walk():\n            if inv.name!= self.id:\n                continue\n            self.log.debug(\"verify_version_inventories: found inventory %s\", inv)\n            self.digest_algorithm.verify_content(\n                inv, self.spec_version, self.root_inv_validator\n            )\n            self.digest_algorithm.verify_digest(\n                inv, self.root_inv_validator.content_digest, where=version_dir\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    root_inv = self.root_inv_validator(version_dirs)\n    if root_inv is None:\n        return\n\n    # check for files that are in the root inventory\n    inv_files = []\n    for f in root_inv.files:\n        if f.name in self.inventory_digest_files:\n            inv_files.append(f)\n\n    if inv_files:\n        self.log.debug('found %d file(s) to upload inventory to' % len(inv_files))\n        self.log.debug('root inventory: %s' % root_inv)\n        self.log.debug('inventory digest: %s' % root_inv.digest)\n\n        # we only support the root version of the inventory\n        if root_inv.digest!= root_inv.content_digest:\n            self.log.error('invalid inventory digest for root version: %s' %\n                           root_inv.digest)\n            return\n\n        # check for the inventory version against the root version", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    path = fs.abspath(path)\n    if fs.isfile(path):\n        return 'file'\n    elif fs.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    if fs.is_file(path):\n        return 'file'\n    elif fs.is_dir(path):\n        if fs.is_root(path):\n            return 'root'\n        else:\n            return 'object'\n    elif fs.is_dir_uri(path):\n        return 'file'\n    else:\n        return'string'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        # TODO: handle other path types\n        return'string'\n", "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        # this should never happen, but just in case...\n        raise NamasteException('Could not determine the type of \"%s\"' % path)\n", "def find_path_type(path):\n    for name in ('root', 'object', 'file'):\n        if os.path.isdir(path + '/' + name):\n            return name\n\n    if os.path.isfile(path):\n        return 'file'\n\n    return ''\n", "def find_path_type(path):\n    if path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'root'\n    elif path.is_symlink():\n        return 'object'\n    else:\n        return ''\n", "def find_path_type(path):\n\n    if not path:\n        return 'root'\n\n    if path.endswith('*'):\n        return 'object'\n    elif path.endswith('\\\\'):\n        return 'file'\n    else:\n        return 'root'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'object'\n    else:\n        return '*'\n", "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    path = fs.abspath(path)\n    if fs.isfile(path):\n        return 'file'\n    elif fs.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if fs.is_file(path):\n        return 'file'\n    elif fs.is_dir(path):\n        if fs.is_root(path):\n            return 'root'\n        else:\n            return 'object'\n    elif fs.is_dir_uri(path):\n        return 'file'\n    else:\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        # TODO: handle other path types\n        return'string'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        # this should never happen, but just in case...\n        raise NamasteException('Could not determine the type of \"%s\"' % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for name in ('root', 'object', 'file'):\n        if os.path.isdir(path + '/' + name):\n            return name\n\n    if os.path.isfile(path):\n        return 'file'\n\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'root'\n    elif path.is_symlink():\n        return 'object'\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n\n    if not path:\n        return 'root'\n\n    if path.endswith('*'):\n        return 'object'\n    elif path.endswith('\\\\'):\n        return 'file'\n    else:\n        return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif path.is_file():\n        return 'file'\n    elif path.is_dir():\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'root'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'object'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    if \"product\" in params:\n        params[\"product\"] = self.get_products()\n    if \"assignee\" in params:\n        params[\"assignee\"] = self.get_assignees()\n    if \"flags\" in params:\n        params[\"flags\"] = self.get_flags()\n    if \"max-bugs\" in params:\n        params[\"max-bugs\"] = int(params[\"max-bugs\"])\n    if \"needinfo\" in params:\n        params[\"needinfo\"] = self.get_needinfo()\n    if \"bugzilla-ids\" in params:\n        params[\"bugzilla-ids\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('product_component'):\n        raise ValueError(\"ProductComponent not specified.\")\n    if not params.get('assignee'):\n        raise ValueError(\"Assignee not specified.\")\n    if not params.get('max_bugs'):\n        raise ValueError(\"Max bugs not specified.\")\n    if not params.get('min_bugs'):\n        raise ValueError(\"Min bugs not specified.\")\n    if not params.get('needinfo'):\n        raise ValueError(\"NeedInfo not specified.\")\n    if not params.get('resolution'):\n        raise ValueError(\"Resolution not specified.\")\n    if not params.get('flags'):\n        raise ValueError(\"Flags not specified.\")\n\n    product_component = params['product_component']\n    if product_component == \"Product Component\":\n        raise ValueError(\"Product Component not specified.\")\n    params['product_component'] = \"\"\n    params['component_id'] = \"\"\n    par", "def amend_bzparams(self, params, bug_ids):\n\n    if not params.get('component'):\n        raise ValueError(\"No component given\")\n\n    if params.get('component') not in ['bugzilla', 'component-update']:\n        raise ValueError(\"Invalid component: %s\" % params.get('component'))\n\n    if not params.get('include'):\n        raise ValueError(\"Missing include parameter\")\n\n    params['include'] = [\n        {\n            'id': item,\n            'component': params.get('component'),\n           'state': params.get('state'),\n        }\n        for item in params.get('include')\n    ]\n\n    if not params.get('max-years'):\n        raise ValueError(\"Missing max-years parameter\")\n\n    params['max-years'] = int(params.get('max-years'))\n\n    if not params.get('min-bugs'):\n        raise ValueError(\"Missing min-bugs parameter\")\n\n    param", "def amend_bzparams(self, params, bug_ids):\n    if \"assignee\" not in params:\n        params[\"assignee\"] = bug_ids[0]\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if 'product_component' in params:\n        if params['product_component'] == 'Firefox':\n            params['firefox_version'] = '6.0'\n        if params['product_component'] == 'Chrome':\n            params['chrome_version'] = '6.0'\n        if params['product_component'] == 'Safari':\n            params['safari_version'] = '6.0'\n\n    if 'assignee' in params:\n        if params['assignee'] == 'anonymous':\n            params['assignee_email'] = 'anonymous@mozilla.com'\n        if params['assignee'] =='member':\n            params['assignee_email'] ='member@mozilla.com'\n\n    for bug_id in bug_ids:\n        params['bug_id'] = bug_id\n        params['product_component'] = 'Firefox'\n        params['max_components'] = 1\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"ALL\"\n    params[\"assignee\"] = params[\"assignee\"].strip()\n    if params[\"assignee\"] == \"ALL\":\n        params[\"assignee\"] = None\n\n    if not params.get(\"products\"):\n        params[\"products\"] = \"ALL\"\n    params[\"products\"] = params[\"products\"].strip()\n\n    if params[\"flags\"] and not params[\"flags\"].isdigit():\n        params[\"flags\"] = \" \".join(params[\"flags\"].split())\n\n    if params[\"bug_ids\"]:\n        bug_ids = params[\"bug_ids\"].split(\",\")\n        bug_ids = [int(bug_id) for bug_id in bug_ids]\n        params[\"bug_ids\"] = \",\".join(str(bug_id) for bug_id in bug_ids)\n", "def amend_bzparams(self, params, bug_ids):\n    if params.get(\"maximum\") is not None:\n        params[\"maximum\"] = int(params[\"maximum\"])\n    if params.get(\"max-count\") is not None:\n        params[\"max-count\"] = int(params[\"max-count\"])\n    if params.get(\"max-reviews\") is not None:\n        params[\"max-reviews\"] = int(params[\"max-reviews\"])\n    if params.get(\"min-count\") is not None:\n        params[\"min-count\"] = int(params[\"min-count\"])\n    if params.get(\"min-reviews\") is not None:\n        params[\"min-reviews\"] = int(params[\"min-reviews\"])\n    if params.get(\"launchpad-bugs\") is not None:\n        params[\"launchpad-bugs\"] = int(params[\"launchpad-bugs\"])\n    if params.get(\"bug-filter-keywords\") is not None:\n        params[\"bug-filter-keywords\"] = [\n            k.strip() for k in params[\"bug-filter-keywords\"].split(\",\")\n      ", "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return\n\n    if not params.get('max_bug_ids'):\n        return\n\n    params['bugzilla_ids'] = bug_ids\n    params['max_bug_ids'] = params['max_bug_ids']\n    params['needinfo'] = '1'\n", "def amend_bzparams(self, params, bug_ids):\n    if params.get(\"assignee\"):\n        params[\"assignee\"] = self.get_products()[params[\"assignee\"]]\n    if params.get(\"max-bugs\"):\n        params[\"max-bugs\"] = int(params[\"max-bugs\"])\n    if params.get(\"max-bugs-as-bugzilla\"):\n        params[\"max-bugs-as-bugzilla\"] = int(\n            params[\"max-bugs-as-bugzilla\"])\n    if params.get(\"bug_status\"):\n        params[\"bug_status\"] = self.get_bug_status(params[\"bug_status\"])\n    if params.get(\"priority\"):\n        params[\"priority\"] = self.get_priority(params[\"priority\"])\n    if params.get(\"component\"):\n        params[\"component\"] = self.get_products()[params[\"component\"]]\n    if params.get(\"bug_status_component\"):\n        params[\"bug_status_component\"] = self.get_bug_status_component(\n            params[\"bug_status_component\"])\n    if params.get(\"bug_sta", "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"all\"\n\n    if not params.get(\"product\"):\n        params[\"product\"] = \"all\"\n\n    if not params.get(\"flags\"):\n        params[\"flags\"] = \"all\"\n\n    if not params.get(\"max-years\"):\n        params[\"max-years\"] = \"1\"\n\n    if params.get(\"access-to\"):\n        params[\"access-to\"] = \"%s-%s\" % (params.get(\"access-to\")[0], params.get(\"access-to\")[1])\n\n    if params.get(\"needinfo\"):\n        params[\"needinfo\"] = \"true\"\n\n    if params.get(\"bugzilla-ids\"):\n        params[\"bugzilla-ids\"] = \",\".join(str(bug_id) for bug_id in bug_ids)\n\n    return params\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if \"product\" in params:\n        params[\"product\"] = self.get_products()\n    if \"assignee\" in params:\n        params[\"assignee\"] = self.get_assignees()\n    if \"flags\" in params:\n        params[\"flags\"] = self.get_flags()\n    if \"max-bugs\" in params:\n        params[\"max-bugs\"] = int(params[\"max-bugs\"])\n    if \"needinfo\" in params:\n        params[\"needinfo\"] = self.get_needinfo()\n    if \"bugzilla-ids\" in params:\n        params[\"bugzilla-ids\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('product_component'):\n        raise ValueError(\"ProductComponent not specified.\")\n    if not params.get('assignee'):\n        raise ValueError(\"Assignee not specified.\")\n    if not params.get('max_bugs'):\n        raise ValueError(\"Max bugs not specified.\")\n    if not params.get('min_bugs'):\n        raise ValueError(\"Min bugs not specified.\")\n    if not params.get('needinfo'):\n        raise ValueError(\"NeedInfo not specified.\")\n    if not params.get('resolution'):\n        raise ValueError(\"Resolution not specified.\")\n    if not params.get('flags'):\n        raise ValueError(\"Flags not specified.\")\n\n    product_component = params['product_component']\n    if product_component == \"Product Component\":\n        raise ValueError(\"Product Component not specified.\")\n    params['product_component'] = \"\"\n    params['component_id'] = \"\"\n    par", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n\n    if not params.get('component'):\n        raise ValueError(\"No component given\")\n\n    if params.get('component') not in ['bugzilla', 'component-update']:\n        raise ValueError(\"Invalid component: %s\" % params.get('component'))\n\n    if not params.get('include'):\n        raise ValueError(\"Missing include parameter\")\n\n    params['include'] = [\n        {\n            'id': item,\n            'component': params.get('component'),\n           'state': params.get('state'),\n        }\n        for item in params.get('include')\n    ]\n\n    if not params.get('max-years'):\n        raise ValueError(\"Missing max-years parameter\")\n\n    params['max-years'] = int(params.get('max-years'))\n\n    if not params.get('min-bugs'):\n        raise ValueError(\"Missing min-bugs parameter\")\n\n    param", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if \"assignee\" not in params:\n        params[\"assignee\"] = bug_ids[0]\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if 'product_component' in params:\n        if params['product_component'] == 'Firefox':\n            params['firefox_version'] = '6.0'\n        if params['product_component'] == 'Chrome':\n            params['chrome_version'] = '6.0'\n        if params['product_component'] == 'Safari':\n            params['safari_version'] = '6.0'\n\n    if 'assignee' in params:\n        if params['assignee'] == 'anonymous':\n            params['assignee_email'] = 'anonymous@mozilla.com'\n        if params['assignee'] =='member':\n            params['assignee_email'] ='member@mozilla.com'\n\n    for bug_id in bug_ids:\n        params['bug_id'] = bug_id\n        params['product_component'] = 'Firefox'\n        params['max_components'] = 1\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"ALL\"\n    params[\"assignee\"] = params[\"assignee\"].strip()\n    if params[\"assignee\"] == \"ALL\":\n        params[\"assignee\"] = None\n\n    if not params.get(\"products\"):\n        params[\"products\"] = \"ALL\"\n    params[\"products\"] = params[\"products\"].strip()\n\n    if params[\"flags\"] and not params[\"flags\"].isdigit():\n        params[\"flags\"] = \" \".join(params[\"flags\"].split())\n\n    if params[\"bug_ids\"]:\n        bug_ids = params[\"bug_ids\"].split(\",\")\n        bug_ids = [int(bug_id) for bug_id in bug_ids]\n        params[\"bug_ids\"] = \",\".join(str(bug_id) for bug_id in bug_ids)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params.get(\"maximum\") is not None:\n        params[\"maximum\"] = int(params[\"maximum\"])\n    if params.get(\"max-count\") is not None:\n        params[\"max-count\"] = int(params[\"max-count\"])\n    if params.get(\"max-reviews\") is not None:\n        params[\"max-reviews\"] = int(params[\"max-reviews\"])\n    if params.get(\"min-count\") is not None:\n        params[\"min-count\"] = int(params[\"min-count\"])\n    if params.get(\"min-reviews\") is not None:\n        params[\"min-reviews\"] = int(params[\"min-reviews\"])\n    if params.get(\"launchpad-bugs\") is not None:\n        params[\"launchpad-bugs\"] = int(params[\"launchpad-bugs\"])\n    if params.get(\"bug-filter-keywords\") is not None:\n        params[\"bug-filter-keywords\"] = [\n            k.strip() for k in params[\"bug-filter-keywords\"].split(\",\")\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get('bugzilla_ids'):\n        return\n\n    if not params.get('max_bug_ids'):\n        return\n\n    params['bugzilla_ids'] = bug_ids\n    params['max_bug_ids'] = params['max_bug_ids']\n    params['needinfo'] = '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params.get(\"assignee\"):\n        params[\"assignee\"] = self.get_products()[params[\"assignee\"]]\n    if params.get(\"max-bugs\"):\n        params[\"max-bugs\"] = int(params[\"max-bugs\"])\n    if params.get(\"max-bugs-as-bugzilla\"):\n        params[\"max-bugs-as-bugzilla\"] = int(\n            params[\"max-bugs-as-bugzilla\"])\n    if params.get(\"bug_status\"):\n        params[\"bug_status\"] = self.get_bug_status(params[\"bug_status\"])\n    if params.get(\"priority\"):\n        params[\"priority\"] = self.get_priority(params[\"priority\"])\n    if params.get(\"component\"):\n        params[\"component\"] = self.get_products()[params[\"component\"]]\n    if params.get(\"bug_status_component\"):\n        params[\"bug_status_component\"] = self.get_bug_status_component(\n            params[\"bug_status_component\"])\n    if params.get(\"bug_sta", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not params.get(\"assignee\"):\n        params[\"assignee\"] = \"all\"\n\n    if not params.get(\"product\"):\n        params[\"product\"] = \"all\"\n\n    if not params.get(\"flags\"):\n        params[\"flags\"] = \"all\"\n\n    if not params.get(\"max-years\"):\n        params[\"max-years\"] = \"1\"\n\n    if params.get(\"access-to\"):\n        params[\"access-to\"] = \"%s-%s\" % (params.get(\"access-to\")[0], params.get(\"access-to\")[1])\n\n    if params.get(\"needinfo\"):\n        params[\"needinfo\"] = \"true\"\n\n    if params.get(\"bugzilla-ids\"):\n        params[\"bugzilla-ids\"] = \",\".join(str(bug_id) for bug_id in bug_ids)\n\n    return params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if not isinstance(node, MappingNode):\n                continue\n            if node.tag in result:\n                result[node.tag].append(node)\n            else:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in merge_result:\n                node.value = merge_result[node.value]\n            else:\n                node.value = {}\n            merge_result = deep_merge_nodes(node.value)\n        elif isinstance(node, ScalarNode):\n            merge_result.append(node)\n        elif isinstance(node, Node):\n            merge_result.append(node)\n    return merge_result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].update(node)\n                else:\n                    result.append(node)\n            else:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    r = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            r.append((node, deep_merge_nodes(node.value)))\n        else:\n            r.append(node)\n    return r\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            if node.value in result:\n                next_node = result[node.value]\n            else:\n                next_node = node\n            node_copy = deepcopy(node)\n            node_copy.value = next_node.value\n            result.append(node_copy)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            if node not in result:\n                result.append(node)\n        else:\n            if isinstance(node, (ScalarNode, MappingNode)):\n                result.extend(deep_merge_nodes(node))\n\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Union[Node, MappingNode], Union[Node, MappingNode]]]) -> List[Tuple[Union[Node, MappingNode], Union[Node, MappingNode]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other.Node as a value,\n        )\n       ...\n\n    deep merge any node values corresponding to duplicate keys and return the result.\n\n    If there are colliding keys with non-MappingNode values (e.g., integers or\n    strings), the last of the values wins. For instance, given node values\n    of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(ScalarNode(ta", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append((node[0], deep_merge_nodes(node[1])))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n\n    # Create a dict to store the merged nodes\n    result = OrderedDict()\n\n    for node in nodes:\n        if not isinstance(node, MappingNode):\n            node = node.value\n\n        key = node[0].tag\n\n        if key in result:\n            # Since we've already merged nodes with duplicate keys, this\n            # will not create duplicate keys in the result.\n            node.value = result[key]\n        else:\n            # The key is not in the result, we append it to the result dict\n            result[key] = node\n\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if not isinstance(node, MappingNode):\n                continue\n            if node.tag in result:\n                result[node.tag].append(node)\n            else:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merge_result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in merge_result:\n                node.value = merge_result[node.value]\n            else:\n                node.value = {}\n            merge_result = deep_merge_nodes(node.value)\n        elif isinstance(node, ScalarNode):\n            merge_result.append(node)\n        elif isinstance(node, Node):\n            merge_result.append(node)\n    return merge_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node_list in nodes:\n        for node in node_list:\n            if isinstance(node, MappingNode):\n                if node.value in result:\n                    result[result.index(node.value)].update(node)\n                else:\n                    result.append(node)\n            else:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    r = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            r.append((node, deep_merge_nodes(node.value)))\n        else:\n            r.append(node)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            if node.value in result:\n                next_node = result[node.value]\n            else:\n                next_node = node\n            node_copy = deepcopy(node)\n            node_copy.value = next_node.value\n            result.append(node_copy)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n\n    for node in nodes:\n        if isinstance(node, (MappingNode, ScalarNode)):\n            if node not in result:\n                result.append(node)\n        else:\n            if isinstance(node, (ScalarNode, MappingNode)):\n                result.extend(deep_merge_nodes(node))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Union[Node, MappingNode], Union[Node, MappingNode]]]) -> List[Tuple[Union[Node, MappingNode], Union[Node, MappingNode]]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other.Node as a value,\n        )\n       ...\n\n    deep merge any node values corresponding to duplicate keys and return the result.\n\n    If there are colliding keys with non-MappingNode values (e.g., integers or\n    strings), the last of the values wins. For instance, given node values\n    of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(ScalarNode(ta", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            result.append((node[0], deep_merge_nodes(node[1])))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    # Create a dict to store the merged nodes\n    result = OrderedDict()\n\n    for node in nodes:\n        if not isinstance(node, MappingNode):\n            node = node.value\n\n        key = node[0].tag\n\n        if key in result:\n            # Since we've already merged nodes with duplicate keys, this\n            # will not create duplicate keys in the result.\n            node.value = result[key]\n        else:\n            # The key is not in the result, we append it to the result dict\n            result[key] = node\n\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test the conversion of VCF format to Genotypes format.\"\n    )\n    parser.add_argument(\n        \"input_vcf\", help=\"Path to the input VCF file.\"\n    )\n    parser.add_argument(\n        \"output_gtf\", help=\"Path to the output Genotypes file.\"\n    )\n    parser.add_argument(\n        \"-o\", \"--output-dir\", help=\"Path to the directory to store the output.\"\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, required=True)\n    parser.add_argument('-o', '--output', type=str, required=True)\n    parser.add_argument('-l', '--log-level', type=str, default='ERROR')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Check output of git commits under git.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--rev', action='store', dest='rev', default=None,\n        help=(\n            'Commit revision to check out. If no rev is specified, '\n            'the latest commit is used.'\n        ),\n    )\n    parser.add_argument(\n        '--no-color', action='store_true',\n        help=(\n            'Don\\'t colorize output. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--show-output', action='store_true',\n        help=(\n            'Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--git-dir', action='store', dest='git_dir', default=None,\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Script'\n    )\n    parser.add_argument(\n        'username',\n        help='Username to login.'\n    )\n    parser.add_argument(\n        'password',\n        help='Password to login.'\n    )\n    parser.add_argument(\n        '-v', '--version', action='store_true',\n        help='Show the version number of this script.'\n    )\n    parser.add_argument(\n        '-a', '--account', action='store',\n        help='Account name to login with.'\n    )\n    parser.add_argument(\n        '-s', '--ssh-key', action='store',\n        help='SSH public key file to use.'\n    )\n    parser.add_argument(\n        '-w', '--windows-password', action='store',\n        help='Windows password to use in password auth.'\n    )\n    parser.ad", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n\n    # Allow the user to specify the name of the module they wish to load.\n    parser.add_argument('-m', '--module', help='The module to load.')\n\n    # Allow the user to specify the path to the module that wants to load.\n    parser.add_argument('-p', '--path', help='The path to the module that wants to load.')\n\n    # Allow the user to specify the name of the class they wish to initialize.\n    parser.add_argument('-c', '--class', help='The class to initialize the module with.')\n\n    # Allow the user to specify the name of the method that wants to initialize the module.\n    parser.add_argument('-m', '--method', help='The method to initialize the module with.')\n\n    # Allow the user to specify the name of the argument that wants to initialize the module.\n    parser.add_argument('-a', '--argument', help='The name of the argument that wants to initialize the modul", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", required=True, help=\"Path to the input file.\")\n    parser.add_argument(\"-o\", \"--output\", required=True, help=\"Path to the output file.\")\n    parser.add_argument(\"-l\", \"--loglevel\", default=\"INFO\", help=\"Log level to use.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show more output (overrides -v).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug output.')\n    parser.add_argument('-i', '--interactive', action='store_true',\n                        help='Interactive mode.')\n    parser.add_argument('-c', '--config', required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('--version', action='store_true',\n                        help='Print the version number of this script.')\n    parser.add_argument('-v', '--version_info', action='store_true',\n                        help='Print the version number of this script.')\n    parse", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='be more verbose')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='overwrite existing files')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='enable debug logging')\n    parser.add_argument('-p', '--profile-dir', default=None,\n                        help='directory for profile information')\n    parser.add_argument('--profile-name', default=None,\n                        help='name for profile information')\n    parser.add_argument('--trace', action='store_true',\n                        help='trace errors')\n    parser.add_argument('--trace-exception', action='store_true',\n           ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Print debug messages to stdout on failures.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n                        help=\"Print informational messages to stdout on failures.\")\n    parser.add_argument(\"-s\", \"--strict\", action=\"store_true\",\n                        help=\"Support strict mode.\")\n    parser.add_argument(\"-a\", \"--always-copy\", action=\"store_true\",\n                        help=\"Always copy the entire source tree.\")\n    parser.add_argument(\"-dl\", \"--delete-directories\", action=\"store_true\",\n                        help=\"Delete directories and files in the source tree.\")\n    parser.add_argument(\"-n\", \"--dry-run\", action=\"store_true\",\n                        help=\"Dry run mode.\")\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test the conversion of VCF format to Genotypes format.\"\n    )\n    parser.add_argument(\n        \"input_vcf\", help=\"Path to the input VCF file.\"\n    )\n    parser.add_argument(\n        \"output_gtf\", help=\"Path to the output Genotypes file.\"\n    )\n    parser.add_argument(\n        \"-o\", \"--output-dir\", help=\"Path to the directory to store the output.\"\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, required=True)\n    parser.add_argument('-o', '--output', type=str, required=True)\n    parser.add_argument('-l', '--log-level', type=str, default='ERROR')\n    parser.add_argument('-v', '--version', action='version', version=__version__)\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Check output of git commits under git.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--rev', action='store', dest='rev', default=None,\n        help=(\n            'Commit revision to check out. If no rev is specified, '\n            'the latest commit is used.'\n        ),\n    )\n    parser.add_argument(\n        '--no-color', action='store_true',\n        help=(\n            'Don\\'t colorize output. Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--show-output', action='store_true',\n        help=(\n            'Show output in color.'\n        ),\n    )\n    parser.add_argument(\n        '--git-dir', action='store', dest='git_dir', default=None,\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Common User Password Authentication Script'\n    )\n    parser.add_argument(\n        'username',\n        help='Username to login.'\n    )\n    parser.add_argument(\n        'password',\n        help='Password to login.'\n    )\n    parser.add_argument(\n        '-v', '--version', action='store_true',\n        help='Show the version number of this script.'\n    )\n    parser.add_argument(\n        '-a', '--account', action='store',\n        help='Account name to login with.'\n    )\n    parser.add_argument(\n        '-s', '--ssh-key', action='store',\n        help='SSH public key file to use.'\n    )\n    parser.add_argument(\n        '-w', '--windows-password', action='store',\n        help='Windows password to use in password auth.'\n    )\n    parser.ad", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n\n    # Allow the user to specify the name of the module they wish to load.\n    parser.add_argument('-m', '--module', help='The module to load.')\n\n    # Allow the user to specify the path to the module that wants to load.\n    parser.add_argument('-p', '--path', help='The path to the module that wants to load.')\n\n    # Allow the user to specify the name of the class they wish to initialize.\n    parser.add_argument('-c', '--class', help='The class to initialize the module with.')\n\n    # Allow the user to specify the name of the method that wants to initialize the module.\n    parser.add_argument('-m', '--method', help='The method to initialize the module with.')\n\n    # Allow the user to specify the name of the argument that wants to initialize the module.\n    parser.add_argument('-a', '--argument', help='The name of the argument that wants to initialize the modul", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", required=True, help=\"Path to the input file.\")\n    parser.add_argument(\"-o\", \"--output\", required=True, help=\"Path to the output file.\")\n    parser.add_argument(\"-l\", \"--loglevel\", default=\"INFO\", help=\"Log level to use.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show more output (overrides -v).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug output.')\n    parser.add_argument('-i', '--interactive', action='store_true',\n                        help='Interactive mode.')\n    parser.add_argument('-c', '--config', required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('--version', action='store_true',\n                        help='Print the version number of this script.')\n    parser.add_argument('-v', '--version_info', action='store_true',\n                        help='Print the version number of this script.')\n    parse", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='be more verbose')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='overwrite existing files')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='enable debug logging')\n    parser.add_argument('-p', '--profile-dir', default=None,\n                        help='directory for profile information')\n    parser.add_argument('--profile-name', default=None,\n                        help='name for profile information')\n    parser.add_argument('--trace', action='store_true',\n                        help='trace errors')\n    parser.add_argument('--trace-exception', action='store_true',\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Print debug messages to stdout on failures.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n                        help=\"Print informational messages to stdout on failures.\")\n    parser.add_argument(\"-s\", \"--strict\", action=\"store_true\",\n                        help=\"Support strict mode.\")\n    parser.add_argument(\"-a\", \"--always-copy\", action=\"store_true\",\n                        help=\"Always copy the entire source tree.\")\n    parser.add_argument(\"-dl\", \"--delete-directories\", action=\"store_true\",\n                        help=\"Delete directories and files in the source tree.\")\n    parser.add_argument(\"-n\", \"--dry-run\", action=\"store_true\",\n                        help=\"Dry run mode.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    for argument in arguments:\n        parser.add_argument(argument)\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +='' + str(flag)\n        else:\n            flags +='' + flag.dest +'' + str(flag)\n    return flags\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='-' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.default)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "def parser_flags(parser):\n    return''.join(list(map(str, parser.args)))\n", "def parser_flags(parser):\n    return''.join([str(x) for x in parser._flags])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest is None:\n            flags +='' + str(flag)\n        else:\n            flags +='' + flag.dest +'' + str(flag)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.description)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='-' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(\n        flag.short_flag for flag in parser._actions\n        if flag.is_flag\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('-' + arg.default)\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='' + arg._long_flag()\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if not arg.option_strings:\n            flags +=''\n            flags += str(arg)\n        else:\n            flags +='{} '.format(arg.dest)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(list(map(str, parser.args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(x) for x in parser._flags])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    arguments = parser.parse_args(unparsed_arguments)\n    return arguments.__dict__\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict((subparser.name, subparser.parse(parser, *unparsed_arguments))\n                for subparser in get_subparsers(parser))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = {}\n    for argument in unparsed_arguments:\n        parser_argument = parser.add_argument(*argument.args, **argument.kwargs)\n        parsed_arguments[argument.name] = parser_argument\n    return parsed_arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = {}\n    for argument in unparsed_arguments:\n        parsed_arguments[argument.name] = argument.parse(parser)\n    return parsed_arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    arguments = parser.parse_args(unparsed_arguments)\n    return arguments.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict((subparser.name, subparser.parse(parser, *unparsed_arguments))\n                for subparser in get_subparsers(parser))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.args, **argument.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = {}\n    for argument in unparsed_arguments:\n        parser_argument = parser.add_argument(*argument.args, **argument.kwargs)\n        parsed_arguments[argument.name] = parser_argument\n    return parsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = {}\n    for argument in unparsed_arguments:\n        parsed_arguments[argument.name] = argument.parse(parser)\n    return parsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.debug:\n            not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, len(not_parsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in six.iteritems(subparsers):\n        parsed_namespace = parsed_arguments.copy()\n        for name in unparsed_arguments:\n            subparser_argument_name = subparser.add_argument(name,\n                                                           **parsed_namespace)\n            parsed_namespace[subparser_argument_name] = subparser\n            parsed_arguments[subparser_argument_name] = None\n            remaining_arguments.append(subparser_argument_name)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n        not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        if subparser.name not in unparsed_arguments:\n            arguments.update(subparser.parse_known_args())\n        else:\n            remaining_arguments.append(subparser.name)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        arguments_to_parse[subparser_name] = subparser.parse_args()\n        remaining_arguments.extend(subparser.required_args)\n    return (arguments_to_parse, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unclaimed_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parser_args = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_args._get_kwargs())\n        unclaimed_arguments.append(parser_args)\n    return arguments, unclaimed_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unclaimed_args = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        args = parser.parse_known_args()\n        parsed_arguments.update(vars(args))\n        unclaimed_args.append(subparser_name)\n    return (parsed_arguments, unclaimed_args, unparsed_arguments - unclaimed_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parsed_subparser_name = subparser_name.replace('-', '_')\n        parsed_arguments[parsed_subparser_name] = {}\n        remaining_arguments.append(subparser_name)\n        for arg in unparsed_arguments:\n            parser_args = subparsers[subparser_name].parse_args([arg])\n            parsed_arguments[parsed_subparser_name][arg] = parser_args\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unparsed_args = []\n    not_claimed = []\n    for arg in unparsed_arguments:\n        # this is an argparse subparser, so we just use the name of the subparser\n        subparser_name = arg._short_arg_name\n        subparser = subparsers.get(subparser_name)\n        if subparser is None:\n            not_claimed.append(arg)\n        else:\n            # parse the args\n            args, unclaimed = subparser.parse_known_args(args=[arg])\n            arguments[subparser_name] = args\n            # now add unclaimed args to the remaining unparsed args (which are\n            # not part of the unparsed args list)\n            unparsed_args.extend(unclaimed)\n    # now add the not claimed arguments to the remaining unparsed args\n    for arg in not_claimed:\n        unparsed_args.append(arg)\n    return arg"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser.debug:\n            not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, len(not_parsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name, subparser in six.iteritems(subparsers):\n        parsed_namespace = parsed_arguments.copy()\n        for name in unparsed_arguments:\n            subparser_argument_name = subparser.add_argument(name,\n                                                           **parsed_namespace)\n            parsed_namespace[subparser_argument_name] = subparser\n            parsed_arguments[subparser_argument_name] = None\n            remaining_arguments.append(subparser_argument_name)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for name, parser in subparsers.items():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        parsed_arguments[name] = parser_arguments\n        remaining_arguments.extend(parser_arguments.args)\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        parsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n        not_parsed_arguments.append(subparser_name)\n    return parsed_arguments, not_parsed_arguments, not_parsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers.values():\n        if subparser.name not in unparsed_arguments:\n            arguments.update(subparser.parse_known_args())\n        else:\n            remaining_arguments.append(subparser.name)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments_to_parse = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        subparser = subparsers[subparser_name]\n        arguments_to_parse[subparser_name] = subparser.parse_args()\n        remaining_arguments.extend(subparser.required_args)\n    return (arguments_to_parse, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unclaimed_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parser_args = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_args._get_kwargs())\n        unclaimed_arguments.append(parser_args)\n    return arguments, unclaimed_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unclaimed_args = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        args = parser.parse_known_args()\n        parsed_arguments.update(vars(args))\n        unclaimed_args.append(subparser_name)\n    return (parsed_arguments, unclaimed_args, unparsed_arguments - unclaimed_args)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parsed_subparser_name = subparser_name.replace('-', '_')\n        parsed_arguments[parsed_subparser_name] = {}\n        remaining_arguments.append(subparser_name)\n        for arg in unparsed_arguments:\n            parser_args = subparsers[subparser_name].parse_args([arg])\n            parsed_arguments[parsed_subparser_name][arg] = parser_args\n    return parsed_arguments, remaining_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    unparsed_args = []\n    not_claimed = []\n    for arg in unparsed_arguments:\n        # this is an argparse subparser, so we just use the name of the subparser\n        subparser_name = arg._short_arg_name\n        subparser = subparsers.get(subparser_name)\n        if subparser is None:\n            not_claimed.append(arg)\n        else:\n            # parse the args\n            args, unclaimed = subparser.parse_known_args(args=[arg])\n            arguments[subparser_name] = args\n            # now add unclaimed args to the remaining unparsed args (which are\n            # not part of the unparsed args list)\n            unparsed_args.extend(unclaimed)\n    # now add the not claimed arguments to the remaining unparsed args\n    for arg in not_claimed:\n        unparsed_args.append(arg)\n    return arg", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse the results from a SMC data set.\"\n    )\n\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Enable debugging output.\",\n    )\n\n    parser.add_argument(\n        \"-v\", \"--verbose\",\n        action=\"store_true\",\n        help=\"Enable verbose output.\",\n    )\n\n    parser.add_argument(\n        \"-s\",\n        \"--sample\",\n        action=\"store_true\",\n        help=\"Sample a set of samples from a SMC data set.\",\n    )\n\n    parser.add_argument(\n        \"-o\",\n        \"--output\",\n        default=\"results.txt\",\n        help=\"Output file to write the results to.\",\n    )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test command line tool\")\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    subparsers.required = True\n\n    parser_test = parser.add_parser(\"test\", help=\"Test command\")\n    parser_test.add_argument(\"-v\", \"--verbose\", help=\"Test verbosity\", action=\"store_true\")\n    parser_test.add_argument(\"-c\", \"--config\", help=\"Configuration file\")\n    parser_test.add_argument(\"-d\", \"--debug\", help=\"Debugging output\", action=\"store_true\")\n    parser_test.add_argument(\"-o\", \"--output\", help=\"Output file\", default=\"output.txt\")\n\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing plugins works.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        'plugins',\n        metavar='PACKAGE',\n        nargs='+',\n        help='plugin modules to test',\n        )\n\n    parser.add_argument(\n        '--all',\n        action='store_true',\n        help='run all plugin loading steps',\n        )\n\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Fetch a list of repos from a given URL.')\n    parser.add_argument(\n        'url', metavar='URL', nargs='?',\n        help='The URL to fetch.', type=str)\n    parser.add_argument(\n        '--output', '-o', default='.', metavar='DIR',\n        help='The directory to store the downloaded repos.')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Python script for managing a remote Galaxy repository.\"\n    )\n\n    subparser = parser.add_subparsers(dest=\"subcommand\")\n    install_remote.install_remote_parser(subparser)\n    install_remote.install_remote_data_parser(subparser)\n    install_remote.install_remote_docker_parser(subparser)\n\n    return (parser, subparser)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the integration of the Borgmatic API.'\n    )\n    subparsers = parser.add_subparsers()\n\n    make_fetch_parser(subparsers)\n    make_build_parser(subparsers)\n    make_upload_parser(subparsers)\n\n    return parser.parse_args(), subparsers.required\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the shell commands on the remote host.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"store_true\", help=\"Show the version number.\")\n    parser.add_argument(\"-f\", \"--file\", help=\"Specify a file to test.\")\n    parser.add_argument(\"-l\", \"--log-level\", type=int, default=logging.ERROR, help=\"Logging level.\")\n    parser.add_argument(\"-n\", \"--name\", help=\"Specify a name for the test.\")\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"Enable debugging.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Enable verbose output.\")\n    parser.add_argument(\"--test\", help=\"Test the shell commands on the remote host.\")\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='store_true',\n        help='Print the version number and exit.',\n    )\n    parser.add_argument(\n        '-f',\n        '--force',\n        action='store_true',\n        help='Force the import of the given file even if it is already there.',\n    )\n    parser.add_argument(\n        'path',\n        help='The path to the file to import.'\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to manage S3 remote files.'\n    )\n    parser.add_argument(\n        '--s3-url',\n        help='The S3 endpoint to use.'\n    )\n    parser.add_argument(\n        '--s3-credentials',\n        help='Path to AWS credentials file.'\n    )\n    parser.add_argument(\n        '--s3-bucket',\n        help='The S3 bucket to use.'\n    )\n    parser.add_argument(\n        '--s3-key-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-object-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-subject-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-ss", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple test command.\n\n        It does nothing.\n\n        It requires a manifest file.\n        \"\"\")\n    subparsers = parser.add_subparsers()\n\n    # A command to run.\n    parser_run = subparsers.add_parser('run')\n    parser_run.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number.')\n    parser_run.set_defaults(func=run)\n\n    # A command to run a specific set of commands.\n    parser_run_a = subparsers.add_parser('a')\n    parser_run_a.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number.')\n    parser_run_a.set_defaults(func=a)\n\n    return parser, subparsers\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Parse the results from a SMC data set.\"\n    )\n\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Enable debugging output.\",\n    )\n\n    parser.add_argument(\n        \"-v\", \"--verbose\",\n        action=\"store_true\",\n        help=\"Enable verbose output.\",\n    )\n\n    parser.add_argument(\n        \"-s\",\n        \"--sample\",\n        action=\"store_true\",\n        help=\"Sample a set of samples from a SMC data set.\",\n    )\n\n    parser.add_argument(\n        \"-o\",\n        \"--output\",\n        default=\"results.txt\",\n        help=\"Output file to write the results to.\",\n    )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test command line tool\")\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    subparsers.required = True\n\n    parser_test = parser.add_parser(\"test\", help=\"Test command\")\n    parser_test.add_argument(\"-v\", \"--verbose\", help=\"Test verbosity\", action=\"store_true\")\n    parser_test.add_argument(\"-c\", \"--config\", help=\"Configuration file\")\n    parser_test.add_argument(\"-d\", \"--debug\", help=\"Debugging output\", action=\"store_true\")\n    parser_test.add_argument(\"-o\", \"--output\", help=\"Output file\", default=\"output.txt\")\n\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing plugins works.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        'plugins',\n        metavar='PACKAGE',\n        nargs='+',\n        help='plugin modules to test',\n        )\n\n    parser.add_argument(\n        '--all',\n        action='store_true',\n        help='run all plugin loading steps',\n        )\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Fetch a list of repos from a given URL.')\n    parser.add_argument(\n        'url', metavar='URL', nargs='?',\n        help='The URL to fetch.', type=str)\n    parser.add_argument(\n        '--output', '-o', default='.', metavar='DIR',\n        help='The directory to store the downloaded repos.')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Python script for managing a remote Galaxy repository.\"\n    )\n\n    subparser = parser.add_subparsers(dest=\"subcommand\")\n    install_remote.install_remote_parser(subparser)\n    install_remote.install_remote_data_parser(subparser)\n    install_remote.install_remote_docker_parser(subparser)\n\n    return (parser, subparser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the integration of the Borgmatic API.'\n    )\n    subparsers = parser.add_subparsers()\n\n    make_fetch_parser(subparsers)\n    make_build_parser(subparsers)\n    make_upload_parser(subparsers)\n\n    return parser.parse_args(), subparsers.required\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the shell commands on the remote host.\")\n    parser.add_argument(\"-v\", \"--version\", action=\"store_true\", help=\"Show the version number.\")\n    parser.add_argument(\"-f\", \"--file\", help=\"Specify a file to test.\")\n    parser.add_argument(\"-l\", \"--log-level\", type=int, default=logging.ERROR, help=\"Logging level.\")\n    parser.add_argument(\"-n\", \"--name\", help=\"Specify a name for the test.\")\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"Enable debugging.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Enable verbose output.\")\n    parser.add_argument(\"--test\", help=\"Test the shell commands on the remote host.\")\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that importing a file works.'\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='store_true',\n        help='Print the version number and exit.',\n    )\n    parser.add_argument(\n        '-f',\n        '--force',\n        action='store_true',\n        help='Force the import of the given file even if it is already there.',\n    )\n    parser.add_argument(\n        'path',\n        help='The path to the file to import.'\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A simple tool to manage S3 remote files.'\n    )\n    parser.add_argument(\n        '--s3-url',\n        help='The S3 endpoint to use.'\n    )\n    parser.add_argument(\n        '--s3-credentials',\n        help='Path to AWS credentials file.'\n    )\n    parser.add_argument(\n        '--s3-bucket',\n        help='The S3 bucket to use.'\n    )\n    parser.add_argument(\n        '--s3-key-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-object-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-subject-prefix',\n        help='The S3 prefix to use.'\n    )\n    parser.add_argument(\n        '--s3-ss", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple test command.\n\n        It does nothing.\n\n        It requires a manifest file.\n        \"\"\")\n    subparsers = parser.add_subparsers()\n\n    # A command to run.\n    parser_run = subparsers.add_parser('run')\n    parser_run.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number.')\n    parser_run.set_defaults(func=run)\n\n    # A command to run a specific set of commands.\n    parser_run_a = subparsers.add_parser('a')\n    parser_run_a.add_argument(\n        '--version',\n        action='store_true',\n        help='Print the version number.')\n    parser_run_a.set_defaults(func=a)\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.append(deep_merge_nodes(node))\n        else:\n            value = node.value\n            if isinstance(value, list):\n                value = [(node.tag, v) for v in value]\n            result.append((node, value))\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n        and deep merge any node values corresponding to duplicate keys and return\n        the result. If there are colliding keys with non-MappingNode values\n        (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='2", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            mapping = node[0].value\n            result.extend(deep_merge_nodes([mapping]))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    nodes = [(deep_merge_node(node[0], node[1]), node[2]) for node in nodes]\n    return list(set(chain.from_iterable(nodes)))\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)].other = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if isinstance(value, list):\n            value = [deep_merge_nodes(value)]\n        elif isinstance(value, tuple):\n            value = tuple(value)\n        elif isinstance(value, Node):\n            value = Node(value.tag, value.value)\n        result.append((node, value))\n    return result\n", "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)].children.append(node)\n        else:\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            node_value = node[0].value\n            if node_value not in result:\n                result.append(node_value)\n            else:\n                result[result.index(node_value)] = node[1]\n        else:\n            result.append(node)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.append(deep_merge_nodes(node))\n        else:\n            value = node.value\n            if isinstance(value, list):\n                value = [(node.tag, v) for v in value]\n            result.append((node, value))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[Tuple[Node, MappingNode, Any]]) -> List[Tuple[Node, MappingNode, Any]]\n    \"\"\"\n    Given a nested borgmatic configuration data structure as a list of tuples in the\n    form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        )\n\n        and deep merge any node values corresponding to duplicate keys and return\n        the result. If there are colliding keys with non-MappingNode values\n        (e.g., integers or strings), the last of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='2", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            mapping = node[0].value\n            result.extend(deep_merge_nodes([mapping]))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    nodes = [(deep_merge_node(node[0], node[1]), node[2]) for node in nodes]\n    return list(set(chain.from_iterable(nodes)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)].other = node\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            value = node.value\n        else:\n            value = node\n        if isinstance(value, list):\n            value = [deep_merge_nodes(value)]\n        elif isinstance(value, tuple):\n            value = tuple(value)\n        elif isinstance(value, Node):\n            value = Node(value.tag, value.value)\n        result.append((node, value))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in result:\n                result[result.index(node.value)] = node.merge(result[result.index(node.value)])\n            else:\n                result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)].children.append(node)\n        else:\n            if node.value not in result:\n                result.append(node.value)\n            else:\n                result[result.index(node.value)] = node\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[0], MappingNode):\n            node_value = node[0].value\n            if node_value not in result:\n                result.append(node_value)\n            else:\n                result[result.index(node_value)] = node[1]\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config')\n    parser.add_argument('--s3-bucket')\n    parser.add_argument('--s3-key')\n    parser.add_argument('--s3-region')\n    parser.add_argument('--s3-endpoint')\n    parser.add_argument('--s3-version', action='store_true')\n    parser.add_argument('--s3-profile')\n    parser.add_argument('--s3-s3-endpoint-url')\n    parser.add_argument('--s3-s3-credentials', default=None)\n    parser.add_argument('--s3-s3-access-key', default=None)\n    parser.add_argument('--s3-s3-secret-key', default=None)\n    parser.add_argument('--s3-region', default=None)\n    parser.add_argument('--s3-endpoint-url-override')\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-o', '--output', dest='output',\n                        help='Output JSON file to write results to',\n                        default='results.json')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Print more informational messages')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the hello world system generates a hello world \"\n        \"document from a list of arguments.\"\n    )\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__\n    )\n\n    parser.add_argument(\n        \"-s\", \"--silent\", action=\"store_true\", help=\"Silence all output.\"\n    )\n\n    parser.add_argument(\n        \"-l\",\n        \"--log-level\",\n        help=\"Set the logging level (default: %(default)s).\",\n        default=\"DEBUG\",\n        choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"FATAL\"],\n    )\n\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging messages while testing the hello world system.\",\n    )\n\n    parser.add_argument(\n        \"-q\", \"--qui", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a coverage report for the given code.'\n    )\n    parser.add_argument(\n        '--junit-xml',\n        '-x',\n        action='store_true',\n        help='Generate the xml report in junit format.'\n    )\n    parser.add_argument(\n        '--output-file',\n        default='coverage.xml',\n        help='The file to write the xml report to.'\n    )\n    parser.add_argument(\n        '--coverage-xml',\n        '-x',\n        action='store_true',\n        help='Generate the xml report in coverage format.'\n    )\n    parser.add_argument(\n        '--junit-file',\n        default='coverage.xml',\n        help='The file to write the xml report in junit format.'\n    )\n    parser.add_argument(\n        'code',\n        nargs='?'", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Show the version number and exit.'\n    )\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Show debug messages.'\n    )\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Show quiet messages.'\n    )\n    parser.add_argument(\n        '--config',\n        type=str,\n        default='config.yaml',\n        help='Configuration file to use.'\n    )\n    parser.add_argument(\n        '--log-level',\n        type=str,\n        default='WARNING',\n        help='Set the log level for the logger. Default is WARNING.'\n    )\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Test the installation of a remote host.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--host',\n        dest='host',\n        default='localhost',\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--username',\n        dest='username',\n        default=None,\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--password',\n        dest='password',\n        default=None,\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--ssh-key-file',\n        dest='ssh_key_file',\n        default=None,\n        help='Path to a private SSH key file to use for authentication.'\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the command line tool can run without errors.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--verbose\", help=\"Enable verbose output.\", action=\"store_true\"\n    )\n    parser.add_argument(\n        \"-c\", \"--config\", help=\"Configuration file to use.\", default=\"config.yml\"\n    )\n    parser.add_argument(\n        \"--version\", action=\"store_true\", help=\"Print the version of this script.\"\n    )\n    parser.add_argument(\n        \"--retries\", type=int, default=5, help=\"Number of retries to try.\"\n    )\n    parser.add_argument(\n        \"--timeout\", type=float, default=30.0, help=\"Time to wait for the script to finish.\"\n    )\n    parser.add_argument(\n        \"--skip-all\", action=\"store_true\", help=\"Skip all tests on the command line.\"\n    )\n    parser.add_argument(\n        \"--skip-no-tests\", action=\"store_true\", help=\"Skip the no tests tests", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"A simple tool to compute information gain \"\n        \"on mutual information for multiple nodes.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--verbose\", action=\"store_true\", help=\"be more verbose\"\n    )\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\", help=\"be more verbose\"\n    )\n    parser.add_argument(\n        \"-c\", \"--count\", action=\"store_true\", help=\"count the number of \"\n    )\n    parser.add_argument(\n        \"-a\", \"--alpha\", action=\"store_true\", help=\"compute mutual \"\n        \"information alpha (log base 2)\"\n    )\n    parser.add_argument(\n        \"-w\", \"--weight\", type=float, default=1, help=\"weight of the \"\n        \"mutual information\"\n    )\n    parser.add_argument(\n        \"-m\", \"--mincount\", type=int, default=1, help=\"minimum count \"\n        \"of mutual information\"\n    )\n ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration.\"\n    )\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"Show version and exit.\"\n    )\n\n    for argument in arguments:\n        parser.add_argument(\n            \"-i\",\n            \"--input\",\n            type=str,\n            required=True,\n            help=\"Path to JSON file with the list of words to guess.\",\n        )\n\n        parser.add_argument(\n            \"-o\",\n            \"--output\",\n            type=str,\n            required=False,\n            help=\"Output file for the guessed words.\",\n        )\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool on github.com.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__)\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages'\n    )\n\n    parser.add_argument(\n        '--recursive',\n        action='store_true',\n        help='Recursively traverse directories into files'\n    )\n\n    parser.add_argument(\n        '--report-file',\n        action='store',\n        help='Path to the file where diff reports should be written.'\n    )\n\n    parser.add_argument(\n        '--ignore-committed',\n        action='store_true',\n        help="], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config')\n    parser.add_argument('--s3-bucket')\n    parser.add_argument('--s3-key')\n    parser.add_argument('--s3-region')\n    parser.add_argument('--s3-endpoint')\n    parser.add_argument('--s3-version', action='store_true')\n    parser.add_argument('--s3-profile')\n    parser.add_argument('--s3-s3-endpoint-url')\n    parser.add_argument('--s3-s3-credentials', default=None)\n    parser.add_argument('--s3-s3-access-key', default=None)\n    parser.add_argument('--s3-s3-secret-key', default=None)\n    parser.add_argument('--s3-region', default=None)\n    parser.add_argument('--s3-endpoint-url-override')\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-o', '--output', dest='output',\n                        help='Output JSON file to write results to',\n                        default='results.json')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Print more informational messages')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the hello world system generates a hello world \"\n        \"document from a list of arguments.\"\n    )\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__\n    )\n\n    parser.add_argument(\n        \"-s\", \"--silent\", action=\"store_true\", help=\"Silence all output.\"\n    )\n\n    parser.add_argument(\n        \"-l\",\n        \"--log-level\",\n        help=\"Set the logging level (default: %(default)s).\",\n        default=\"DEBUG\",\n        choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"FATAL\"],\n    )\n\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging messages while testing the hello world system.\",\n    )\n\n    parser.add_argument(\n        \"-q\", \"--qui", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a coverage report for the given code.'\n    )\n    parser.add_argument(\n        '--junit-xml',\n        '-x',\n        action='store_true',\n        help='Generate the xml report in junit format.'\n    )\n    parser.add_argument(\n        '--output-file',\n        default='coverage.xml',\n        help='The file to write the xml report to.'\n    )\n    parser.add_argument(\n        '--coverage-xml',\n        '-x',\n        action='store_true',\n        help='Generate the xml report in coverage format.'\n    )\n    parser.add_argument(\n        '--junit-file',\n        default='coverage.xml',\n        help='The file to write the xml report in junit format.'\n    )\n    parser.add_argument(\n        'code',\n        nargs='?'", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Show the version number and exit.'\n    )\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Show debug messages.'\n    )\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Show quiet messages.'\n    )\n    parser.add_argument(\n        '--config',\n        type=str,\n        default='config.yaml',\n        help='Configuration file to use.'\n    )\n    parser.add_argument(\n        '--log-level',\n        type=str,\n        default='WARNING',\n        help='Set the log level for the logger. Default is WARNING.'\n    )\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Test the installation of a remote host.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--host',\n        dest='host',\n        default='localhost',\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--username',\n        dest='username',\n        default=None,\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--password',\n        dest='password',\n        default=None,\n        help='Test installation of the remote host.'\n    )\n\n    parser.add_argument(\n        '--ssh-key-file',\n        dest='ssh_key_file',\n        default=None,\n        help='Path to a private SSH key file to use for authentication.'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test that the command line tool can run without errors.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--verbose\", help=\"Enable verbose output.\", action=\"store_true\"\n    )\n    parser.add_argument(\n        \"-c\", \"--config\", help=\"Configuration file to use.\", default=\"config.yml\"\n    )\n    parser.add_argument(\n        \"--version\", action=\"store_true\", help=\"Print the version of this script.\"\n    )\n    parser.add_argument(\n        \"--retries\", type=int, default=5, help=\"Number of retries to try.\"\n    )\n    parser.add_argument(\n        \"--timeout\", type=float, default=30.0, help=\"Time to wait for the script to finish.\"\n    )\n    parser.add_argument(\n        \"--skip-all\", action=\"store_true\", help=\"Skip all tests on the command line.\"\n    )\n    parser.add_argument(\n        \"--skip-no-tests\", action=\"store_true\", help=\"Skip the no tests tests", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"A simple tool to compute information gain \"\n        \"on mutual information for multiple nodes.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--verbose\", action=\"store_true\", help=\"be more verbose\"\n    )\n    parser.add_argument(\n        \"-d\", \"--debug\", action=\"store_true\", help=\"be more verbose\"\n    )\n    parser.add_argument(\n        \"-c\", \"--count\", action=\"store_true\", help=\"count the number of \"\n    )\n    parser.add_argument(\n        \"-a\", \"--alpha\", action=\"store_true\", help=\"compute mutual \"\n        \"information alpha (log base 2)\"\n    )\n    parser.add_argument(\n        \"-w\", \"--weight\", type=float, default=1, help=\"weight of the \"\n        \"mutual information\"\n    )\n    parser.add_argument(\n        \"-m\", \"--mincount\", type=int, default=1, help=\"minimum count \"\n        \"of mutual information\"\n    )\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a Hello World demonstration.\"\n    )\n\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"store_true\", help=\"Show version and exit.\"\n    )\n\n    for argument in arguments:\n        parser.add_argument(\n            \"-i\",\n            \"--input\",\n            type=str,\n            required=True,\n            help=\"Path to JSON file with the list of words to guess.\",\n        )\n\n        parser.add_argument(\n            \"-o\",\n            \"--output\",\n            type=str,\n            required=False,\n            help=\"Output file for the guessed words.\",\n        )\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool on github.com.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__)\n    )\n\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Print more informational messages'\n    )\n\n    parser.add_argument(\n        '--recursive',\n        action='store_true',\n        help='Recursively traverse directories into files'\n    )\n\n    parser.add_argument(\n        '--report-file',\n        action='store',\n        help='Path to the file where diff reports should be written.'\n    )\n\n    parser.add_argument(\n        '--ignore-committed',\n        action='store_true',\n        help=", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(a.description for a in parser._actions)\n", "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "def parser_flags(parser):\n    return''.join(parser._flags)\n", "def parser_flags(parser):\n    return''.join([a.argparse_argument_name for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('--{}'.format(arg.dest))\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(a.description for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    args = []\n    for arg in parser._get_args():\n        if arg.default == argparse.SUPPRESS:\n            continue\n        args.append(arg.default)\n    return''.join(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([a.argparse_argument_name for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(k) for k in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.append('--{}'.format(arg.dest))\n        else:\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help()\n        elif isinstance(arg, str):\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags +='' + arg.format_help().strip()\n        else:\n            flags +='' + arg\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(flag) for flag in parser._flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return '\\n'.join('  --{} {}'.format(k, v)\n                     for k, v in parser_flags(bash_completion_parser()).items())\n", "def bash_completion():\n    parser = parser_flags(_BashCompletionParser())\n    return parser.get_command_completions()\n", "def bash_completion():\n    return '\\n'.join('  {} = {}'.format(k, v) for k, v in parser_flags.items())\n", "def bash_completion():\n    return '\\n'.join('  %s %s' % (k.replace('_', '-'), v)\n                     for k, v in parser_flags().items())\n", "def bash_completion():\n    return ['python -m bash_completion {}'.format(flags.script)]\n", "def bash_completion():\n    return \"\\n\".join([\"  -i {}\".format(flag) for flag in parser_flags()])\n", "def bash_completion():\n    parser = parser_flags(BashCompletionParser())\n    return parser.script()\n", "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags(bash_completion_parser()).items())\n", "def bash_completion():\n    return '\\n'.join('  %s %s' % (k, v) for k, v in parser_flags().items())\n", "def bash_completion():\n    bash_completion = \"\"\"\n        # Borgmatic CLI completion\n        export LIBCLOUD_BASHRC=`pwd`\n        export LIBCLOUD_BASH_COMMAND=`which bash`\n        export LIBCLOUD_BASH_COMPLETE=`which bash`\n        export LIBCLOUD_BASH_COMPLETE_ALT=`which bash`\n    \"\"\"\n    return bash_completion\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return '\\n'.join('  --{} {}'.format(k, v)\n                     for k, v in parser_flags(bash_completion_parser()).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(_BashCompletionParser())\n    return parser.get_command_completions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  {} = {}'.format(k, v) for k, v in parser_flags.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  %s %s' % (k.replace('_', '-'), v)\n                     for k, v in parser_flags().items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return ['python -m bash_completion {}'.format(flags.script)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join([\"  -i {}\".format(flag) for flag in parser_flags()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = parser_flags(BashCompletionParser())\n    return parser.script()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  --{name} {value}'.format(\n        name=name,\n        value=value,\n    ) for name, value in parser_flags(bash_completion_parser()).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('  %s %s' % (k, v) for k, v in parser_flags().items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    bash_completion = \"\"\"\n        # Borgmatic CLI completion\n        export LIBCLOUD_BASHRC=`pwd`\n        export LIBCLOUD_BASH_COMMAND=`which bash`\n        export LIBCLOUD_BASH_COMPLETE=`which bash`\n        export LIBCLOUD_BASH_COMPLETE_ALT=`which bash`\n    \"\"\"\n    return bash_completion\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = dict(parser.parse_known_args(unparsed_arguments))\n    return parsed_arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        name = argument[0]\n        if '=' not in argument:\n            # Simple argument (i.e. command line arguments)\n            arguments[name] = parse_subparser_arguments(argument, name)\n        else:\n            # Comma-separated arguments\n            names = argument.split('=')\n            arguments[name] = parse_subparser_arguments(names, name)\n    return arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    namespace = argparse.Namespace()\n    for name in unparsed_arguments:\n        parser_name = parser._get_subparser_name(name)\n        if parser_name is None:\n            raise ValueError('Unknown command: {0}'.format(name))\n        if parser_name =='subcommand':\n            # A subcommand is being called with no args.  Swallow it and\n            # just return the namespace itself.\n            parser_name = None\n        setattr(namespace, parser_name.replace('-', '_').rstrip('='),\n                parser.parse_known_args(*unparsed_arguments[1:])[0])\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.names, **argument.values)\n    return dict(parser.parse_args().__dict__)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    unparsed_args = parser.parse_args(unparsed_arguments)\n\n    return dict(\n        (name, parser.parse_from_args(args))\n        for name, args in unparsed_args.__dict__.items()\n        if name[0]!= \"_\" and not callable(getattr(unparsed_args, name))\n    )\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        parsed_argument = parser.parse_known_args(argument.split())\n        namespace.__dict__.update(parsed_argument.__dict__)\n    return namespace\n", "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        if argument.startswith(\"--\"):\n            name = argument[2:]\n            parser_name = \"global\"\n        else:\n            name = argument\n            parser_name = name.strip()\n        arguments[name] = parser_name\n    return arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    parsed_arguments = dict(parser.parse_known_args(unparsed_arguments))\n    return parsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        name = argument[0]\n        if '=' not in argument:\n            # Simple argument (i.e. command line arguments)\n            arguments[name] = parse_subparser_arguments(argument, name)\n        else:\n            # Comma-separated arguments\n            names = argument.split('=')\n            arguments[name] = parse_subparser_arguments(names, name)\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    namespace = argparse.Namespace()\n    for name in unparsed_arguments:\n        parser_name = parser._get_subparser_name(name)\n        if parser_name is None:\n            raise ValueError('Unknown command: {0}'.format(name))\n        if parser_name =='subcommand':\n            # A subcommand is being called with no args.  Swallow it and\n            # just return the namespace itself.\n            parser_name = None\n        setattr(namespace, parser_name.replace('-', '_').rstrip('='),\n                parser.parse_known_args(*unparsed_arguments[1:])[0])\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        parser.add_argument(*argument.names, **argument.values)\n    return dict(parser.parse_args().__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_known_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    unparsed_args = parser.parse_args(unparsed_arguments)\n\n    return dict(\n        (name, parser.parse_from_args(args))\n        for name, args in unparsed_args.__dict__.items()\n        if name[0]!= \"_\" and not callable(getattr(unparsed_args, name))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    namespace = argparse.Namespace()\n    for argument in unparsed_arguments:\n        parsed_argument = parser.parse_known_args(argument.split())\n        namespace.__dict__.update(parsed_argument.__dict__)\n    return namespace\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        if argument.startswith(\"--\"):\n            name = argument[2:]\n            parser_name = \"global\"\n        else:\n            name = argument\n            parser_name = name.strip()\n        arguments[name] = parser_name\n    return arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        parsed_arguments = parser.parse_args(unparsed_arguments)\n        if not parsed_arguments:\n            not_claimed.append(subparser.name)\n    return parsed_arguments, not_claimed, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = unparsed_arguments.copy()\n    remaining_arguments = []\n    for subparser in subparsers:\n        subparser_name = subparser._name.replace('-', '_')\n        if subparser_name not in unparsed_arguments:\n            parsed_arguments.update(subparser.parse_known_args(unparsed_args))\n            unparsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n            remaining_arguments.append(subparser_name)\n        else:\n            subparser_args = unparsed_arguments[subparser_name]\n            parsed_arguments.update(subparser_args)\n            unparsed_arguments.update(subparser_args)\n    return parsed_arguments, unparsed_args, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    not_claimed_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = unparsed_arguments\n        for argument in subparser._get_args():\n            if not argument.is_required():\n                remaining_arguments.append(argument)\n            else:\n                not_claimed_arguments.append(argument)\n    return parsed_arguments, remaining_arguments, not_claimed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = set(unparsed_arguments)\n\n    for parser_name, parser in six.iteritems(subparsers):\n        try:\n            arguments.update(parser.parse_args(unparsed_arguments))\n        except Exception as e:\n            e.args = (\"%s: %s\" % (parser_name, e.args[0]), )\n            raise\n        else:\n            unparsed_arguments.difference_update(arguments)\n            remaining_arguments.append(parser)\n\n    return {'arguments': arguments,'remaining_arguments': remaining_arguments}, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_arguments = []\n\n    for parser in subparsers.values():\n        for name, arg in unparsed_arguments.items():\n            if parser.add_argument(name, arg):\n                arguments[name]['args'] = parser.parse_args()\n                arguments[name]['remaining_arguments'] = remaining_arguments\n                remaining_arguments = []\n            else:\n                remaining_arguments.append(name)\n\n    return arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers._actions:\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        if parser_arguments is not None:\n            arguments.update(parser_arguments)\n            remaining_arguments = remaining_arguments + parser_arguments[1:]\n    return arguments, remaining_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name].args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_claimed_arguments.append(name)\n            continue\n        args = unparsed_arguments[name]\n        args = parser.parse_known_args(args)\n        parsed_arguments[name] = args\n    return parsed_arguments, not_claimed_arguments, not_claimed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = list(unparsed_arguments)\n\n    while unparsed_arguments:\n        name = unparsed_arguments.pop(0)\n        parser = subparsers.get(name, None)\n        if parser is None:\n            raise ValueError('Unknown argument name: %s' % name)\n        parsed_arguments[name] = parser.parse_args()\n        remaining_arguments.extend(parsed_arguments[name])\n        unparsed_arguments.remove(name)\n\n    return (parsed_arguments, remaining_arguments, remaining_arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        parsed_arguments = parser.parse_args(unparsed_arguments)\n        if not parsed_arguments:\n            not_claimed.append(subparser.name)\n    return parsed_arguments, not_claimed, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    unparsed_args = unparsed_arguments.copy()\n    remaining_arguments = []\n    for subparser in subparsers:\n        subparser_name = subparser._name.replace('-', '_')\n        if subparser_name not in unparsed_arguments:\n            parsed_arguments.update(subparser.parse_known_args(unparsed_args))\n            unparsed_arguments.update(subparser.parse_known_args(unparsed_arguments))\n            remaining_arguments.append(subparser_name)\n        else:\n            subparser_args = unparsed_arguments[subparser_name]\n            parsed_arguments.update(subparser_args)\n            unparsed_arguments.update(subparser_args)\n    return parsed_arguments, unparsed_args, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    not_claimed_arguments = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = unparsed_arguments\n        for argument in subparser._get_args():\n            if not argument.is_required():\n                remaining_arguments.append(argument)\n            else:\n                not_claimed_arguments.append(argument)\n    return parsed_arguments, remaining_arguments, not_claimed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = set(unparsed_arguments)\n\n    for parser_name, parser in six.iteritems(subparsers):\n        try:\n            arguments.update(parser.parse_args(unparsed_arguments))\n        except Exception as e:\n            e.args = (\"%s: %s\" % (parser_name, e.args[0]), )\n            raise\n        else:\n            unparsed_arguments.difference_update(arguments)\n            remaining_arguments.append(parser)\n\n    return {'arguments': arguments,'remaining_arguments': remaining_arguments}, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = collections.defaultdict(dict)\n    remaining_arguments = []\n\n    for parser in subparsers.values():\n        for name, arg in unparsed_arguments.items():\n            if parser.add_argument(name, arg):\n                arguments[name]['args'] = parser.parse_args()\n                arguments[name]['remaining_arguments'] = remaining_arguments\n                remaining_arguments = []\n            else:\n                remaining_arguments.append(name)\n\n    return arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers._actions:\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        if parser_arguments is not None:\n            arguments.update(parser_arguments)\n            remaining_arguments = remaining_arguments + parser_arguments[1:]\n    return arguments, remaining_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for subparser_name in subparsers:\n        parser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = parser.parse_args(unparsed_arguments)\n        remaining_arguments.extend(parsed_arguments[subparser_name].args)\n    return (parsed_arguments, remaining_arguments, remaining_arguments!= [])\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for parser in subparsers.values():\n        parser_arguments = parser.parse_known_args(unparsed_arguments)\n        arguments.update(parser_arguments)\n        remaining_arguments.extend(parser_arguments)\n    return (arguments, remaining_arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_claimed_arguments = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_claimed_arguments.append(name)\n            continue\n        args = unparsed_arguments[name]\n        args = parser.parse_known_args(args)\n        parsed_arguments[name] = args\n    return parsed_arguments, not_claimed_arguments, not_claimed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    unparsed_arguments = list(unparsed_arguments)\n\n    while unparsed_arguments:\n        name = unparsed_arguments.pop(0)\n        parser = subparsers.get(name, None)\n        if parser is None:\n            raise ValueError('Unknown argument name: %s' % name)\n        parsed_arguments[name] = parser.parse_args()\n        remaining_arguments.extend(parsed_arguments[name])\n        unparsed_arguments.remove(name)\n\n    return (parsed_arguments, remaining_arguments, remaining_arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Python commands for managing projects.'\n    )\n    subparsers = parser.add_subparsers(dest='command')\n\n    build_project_command = subparsers.add_parser(\n        'build-project',\n        help='Build a project from a given source directory.'\n    )\n    build_project_command.add_argument(\n       'source',\n        help='The source directory to build from.'\n    )\n\n    install_project_command = subparsers.add_parser(\n        'install-project',\n        help='Install a project from a given source directory.'\n    )\n    install_project_command.add_argument(\n       'source',\n        help='The source directory to install from.'\n    )\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A command line tool to build the GitHub API '\n                    'of the GitHub Desktop package.')\n\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n\n    parser.add_argument('--debug', action='store_true',\n                        help='Enable debugging output.')\n\n    parser.add_argument('--quiet', action='store_true',\n                        help='Quiet mode.')\n\n    parser.add_argument('--config', type=str,\n                        help='Specify a config file path.')\n\n    parser.add_argument('--debug-config', action='store_true',\n                        help='Enable debugging output with a config file.')\n\n    parser.add_argument('--debug-quiet', action='store_true'", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that commands are run in the background.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--config',\n        help='Path to a configuration file.'\n    )\n    parser.add_argument(\n        '--output',\n        help='Path to an output directory.'\n    )\n    parser.add_argument(\n        '--remote',\n        action='store_true',\n        help='Run the tests in the remote host.'\n    )\n    parser.add_argument(\n        '--force',\n        action='store_true',\n        help='Force the tests to run in the local host.'\n    )\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser.add_argument(\n        \"--test-cmd\",\n        help=\"A command to be executed with all arguments passed to the test tool.\",\n        metavar=\"CMD\",\n    )\n\n    parser.add_argument(\n        \"--test-args\",\n        help=\"Arguments to pass to the test tool\",\n        nargs=\"*\",\n    )\n\n    parser.add_argument(\n        \"--test-args-no-split\",\n        help=\"Arguments to pass to the test tool\",\n        nargs=\"?\",\n    )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple git repo.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    subparser = parser.add_subparsers(dest='cmd')\n\n    # Repo command\n    repo_parser = subparser.add_parser('repo', help='repo command.')\n    repo_parser.add_argument('repo_path', help='path to repo root')\n\n    # Git command\n    git_parser = subparser.add_parser('git', help='git command.')\n    git_parser.add_argument('--bare', action='store_true',\n                             help='run git command in bare repo')\n    git_parser.add_argument('--message', help='message to push to repo')\n    git_parser.add_argument('--author', help='author to push to repo')\n\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Test the commands in the email receiver.\n        '''\n    )\n\n    parser.add_argument(\n        '-p', '--path',\n        required=False,\n        help='Path to the directory containing the email files to test.'\n    )\n\n    parser.add_argument(\n        '-n', '--no-test',\n        action='store_true',\n        help='Do not run the test function.'\n    )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Hello, world!',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n    init_parser = subparsers.add_parser('init')\n    init_parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Show the version number and exit.'\n    )\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__),\n    )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing YAML files.')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Show debug messages.')\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Show debug messages.')\n\n    subparsers = parser.add_subparsers(\n        title='subcommands',\n        description='Commands to manage files.')\n\n    for command in [\n        'list',\n        'add',\n        'upload',\n       'sync',\n       'remove',\n        'update',\n        'check',\n       'sync_check',\n    ]:\n        parser = subparsers.add_parser(command, help=command.capitalize())\n        command_parser = parser.add_subparsers(\n            title='comman"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Python commands for managing projects.'\n    )\n    subparsers = parser.add_subparsers(dest='command')\n\n    build_project_command = subparsers.add_parser(\n        'build-project',\n        help='Build a project from a given source directory.'\n    )\n    build_project_command.add_argument(\n       'source',\n        help='The source directory to build from.'\n    )\n\n    install_project_command = subparsers.add_parser(\n        'install-project',\n        help='Install a project from a given source directory.'\n    )\n    install_project_command.add_argument(\n       'source',\n        help='The source directory to install from.'\n    )\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='A command line tool to build the GitHub API '\n                    'of the GitHub Desktop package.')\n\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n\n    parser.add_argument('--debug', action='store_true',\n                        help='Enable debugging output.')\n\n    parser.add_argument('--quiet', action='store_true',\n                        help='Quiet mode.')\n\n    parser.add_argument('--config', type=str,\n                        help='Specify a config file path.')\n\n    parser.add_argument('--debug-config', action='store_true',\n                        help='Enable debugging output with a config file.')\n\n    parser.add_argument('--debug-quiet', action='store_true'", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test that commands are run in the background.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--config',\n        help='Path to a configuration file.'\n    )\n    parser.add_argument(\n        '--output',\n        help='Path to an output directory.'\n    )\n    parser.add_argument(\n        '--remote',\n        action='store_true',\n        help='Run the tests in the remote host.'\n    )\n    parser.add_argument(\n        '--force',\n        action='store_true',\n        help='Force the tests to run in the local host.'\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test command line tool\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser.add_argument(\n        \"--test-cmd\",\n        help=\"A command to be executed with all arguments passed to the test tool.\",\n        metavar=\"CMD\",\n    )\n\n    parser.add_argument(\n        \"--test-args\",\n        help=\"Arguments to pass to the test tool\",\n        nargs=\"*\",\n    )\n\n    parser.add_argument(\n        \"--test-args-no-split\",\n        help=\"Arguments to pass to the test tool\",\n        nargs=\"?\",\n    )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool to generate a simple git repo.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    subparser = parser.add_subparsers(dest='cmd')\n\n    # Repo command\n    repo_parser = subparser.add_parser('repo', help='repo command.')\n    repo_parser.add_argument('repo_path', help='path to repo root')\n\n    # Git command\n    git_parser = subparser.add_parser('git', help='git command.')\n    git_parser.add_argument('--bare', action='store_true',\n                             help='run git command in bare repo')\n    git_parser.add_argument('--message', help='message to push to repo')\n    git_parser.add_argument('--author', help='author to push to repo')\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Test the commands in the email receiver.\n        '''\n    )\n\n    parser.add_argument(\n        '-p', '--path',\n        required=False,\n        help='Path to the directory containing the email files to test.'\n    )\n\n    parser.add_argument(\n        '-n', '--no-test',\n        action='store_true',\n        help='Do not run the test function.'\n    )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Hello, world!',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    subparsers = parser.add_subparsers(dest='command')\n    subparsers.required = True\n    init_parser = subparsers.add_parser('init')\n    init_parser.add_argument(\n        '--version',\n        action='store_true',\n        help='Show the version number and exit.'\n    )\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version', action='version',\n                        version='%(prog)s {}'.format(__version__))\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Commands for managing the Borgmatic data.'\n    )\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__),\n    )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Program that parses files containing YAML files.')\n    parser.add_argument(\n        '-v', '--verbose',\n        action='store_true',\n        help='Show debug messages.')\n    parser.add_argument(\n        '-d', '--debug',\n        action='store_true',\n        help='Show debug messages.')\n\n    subparsers = parser.add_subparsers(\n        title='subcommands',\n        description='Commands to manage files.')\n\n    for command in [\n        'list',\n        'add',\n        'upload',\n       'sync',\n       'remove',\n        'update',\n        'check',\n       'sync_check',\n    ]:\n        parser = subparsers.add_parser(command, help=command.capitalize())\n        command_parser = parser.add_subparsers(\n            title='comman", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    offset = 0\n    while offset < max_results:\n        for item in response:\n            yield item\n        offset += max_results\n", "def paging(response, max_results):\n    offset = 0\n    page_size = len(response)\n\n    while offset < max_results:\n        for i, result in enumerate(response):\n            result_page = result['results']['value']\n            if i < page_size - 1:\n                yield result_page\n            else:\n                break\n        offset += page_size\n", "def paging(response, max_results):\n    if len(response) > max_results:\n        response = response[:max_results]\n    for item in response:\n        yield item\n", "def paging(response, max_results):\n\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['page-size'])\n\n    while offset < max_results:\n        results = response['results'][offset:offset + page_size]\n        yield results\n\n        offset += page_size\n", "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i * page_size: (i + 1) * page_size]\n", "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response[page - 1]\n            if page == 1:\n                break\n            page += 1\n        response = response[page:]\n", "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    offset = 0\n    while offset < max_results:\n        for item in response:\n            yield item\n        offset += max_results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    page_size = len(response)\n\n    while offset < max_results:\n        for i, result in enumerate(response):\n            result_page = result['results']['value']\n            if i < page_size - 1:\n                yield result_page\n            else:\n                break\n        offset += page_size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if len(response) > max_results:\n        response = response[:max_results]\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    page_size = int(response['meta']['page-size'])\n\n    while offset < max_results:\n        results = response['results'][offset:offset + page_size]\n        yield results\n\n        offset += page_size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n\n    for i in range(0, max_results):\n        yield response[i * page_size: (i + 1) * page_size]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        return\n\n    for page in range(0, max_results):\n        yield response[page * 100:(page + 1) * 100]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while True:\n        if len(response) <= max_results:\n            yield response[page - 1]\n            if page == 1:\n                break\n            page += 1\n        response = response[page:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if not response:\n        raise ValueError(\"Response list is empty\")\n\n    if len(response) > max_results:\n        response = response[:max_results]\n\n    for item in response:\n        yield item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "def size_to_bytes(size: str) -> int:\n    for factor, unit in UNITS:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n    raise ValueError(\"Unknown unit: {}\".format(unit))\n", "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)) * 1024)\n    raise ValueError(\"Could not convert size '%s' to bytes\" % size)\n", "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            size = size.replace(unit, '')\n            return int(size) * multiplier\n    raise ValueError(\"Invalid file size '{}'\".format(size))\n", "def size_to_bytes(size: str) -> int:\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n\n    # Default to bytes\n    return int(size)\n", "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    try:\n        return int(size) * factor\n    except ValueError:\n        return 0\n", "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    return int(float(size) / 1024)\n", "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"M\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value = int(round(value))\n    return value\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if abs(int(size)) < 1024:\n            return int(size)\n        size /= 1024\n    return int(round(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor, unit in UNITS:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n    raise ValueError(\"Unknown unit: {}\".format(unit))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = float(size)\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if value < 1024:\n            return value\n        value /= 1024.0\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]:\n        if unit in size:\n            return int(float(size.strip(unit)) * 1024)\n    raise ValueError(\"Could not convert size '%s' to bytes\" % size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value, unit = _get_unit(size)\n    if unit == \"B\":\n        return value\n    elif unit == \"KiB\":\n        return value // 1024\n    elif unit == \"MiB\":\n        return value // 1024 // 1024\n    elif unit == \"GiB\":\n        return value // 1024 // 1024 // 1024\n    elif unit == \"TiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"PiB\":\n        return value // 1024 // 1024 // 1024 // 1024\n    elif unit == \"EiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"ZiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n    elif unit == \"YiB\":\n        return value // 1024 // 1024 // 1024 // 1024 // 1024\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    multiplier = 1024\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            size = size.replace(unit, '')\n            return int(size) * multiplier\n    raise ValueError(\"Invalid file size '{}'\".format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n\n    # Default to bytes\n    return int(size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for factor, unit in SZ_UNITS:\n        if size.endswith(factor):\n            size = size[:-len(factor)]\n            break\n    else:\n        raise ValueError(\"Unknown size format: %s\" % size)\n    try:\n        return int(size) * factor\n    except ValueError:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    return int(float(size) / 1024)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    value = Decimal(size.replace(\"M\", \"\"))\n    value /= Decimal(1024 ** 2)\n    value = int(round(value))\n    return value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(operator.add, map(dict.items, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(itertools.chain.from_iterable(dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query.setdefault(key, value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{0}}}'.format(key), value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    return url.replace('%s', urlencode(url_args))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    new_url = []\n    for item in url:\n        if item in url_args.keys():\n            new_url.append(url_args[item])\n        else:\n            new_url.append(item)\n    return ''.join(new_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub('{{{}}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = url.replace('{{{0}}}'.format(key), value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url.query.setdefault(key, value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        url = re.sub(r'{{{0}}}'.format(key), value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.replace('%s', urlencode(url_args))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or isinstance(val, str) and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None or type(val) is str and val == ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val is None or val == ''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root:\n        if path.startswith(root):\n            path = path[len(root):]\n        else:\n            raise BlobException(\n                \"Path {path} does not start with root {root}\".format(\n                    path=path, root=root))\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[-1]!= '/':\n        raise Exception(\n            'Cannot remove root from path: {}, it should end in \"/\".'.format(path))\n    path = path[:-1]\n    return path\n", "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n        path = '/'.join([p.lstrip(root) for p in path.split('/')])\n        path = '/'.join([p.rstrip(root) for p in path.split('/')])\n    return path\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return path\n", "def strip_root(path, root):\n    if root == path:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"path does not start with root '%s'\" % root)\n", "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    if path[0]!= root[0]:\n        raise Exception('Invalid root')\n    if path[-1]!= root[-1]:\n        raise Exception('Invalid root')\n    return path[1:-1]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root:\n        if path.startswith(root):\n            path = path[len(root):]\n        else:\n            raise BlobException(\n                \"Path {path} does not start with root {root}\".format(\n                    path=path, root=root))\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path.startswith(root + '/'):\n        return path[len(root):]\n    else:\n        raise RuntimeError(\"Not root of path: '%s' and '%s'\" % (path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[-1]!= '/':\n        raise Exception(\n            'Cannot remove root from path: {}, it should end in \"/\".'.format(path))\n    path = path[:-1]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root:\n        path = '/'.join([p.lstrip('/') for p in path.split('/')])\n        path = '/'.join([p.rstrip('/') for p in path.split('/')])\n        path = '/'.join([p.lstrip(root) for p in path.split('/')])\n        path = '/'.join([p.rstrip(root) for p in path.split('/')])\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    if path == '/':\n        path = root\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path[:len(root)] == root:\n        return path[len(root):]\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == '':\n        return root\n\n    if path[0] == root:\n        return path[1:]\n\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == path:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"path does not start with root '%s'\" % root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        raise Exception('Invalid path')\n    if path == root:\n        return ''\n    if path[0]!= root[0]:\n        raise Exception('Invalid root')\n    if path[-1]!= root[-1]:\n        raise Exception('Invalid root')\n    return path[1:-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join(p.action for p in parser._option_groups)\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.extend(arg.args)\n        elif isinstance(arg, str):\n            flags.append(arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = []\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                for flag in action._group_kwargs['flags']:\n                    flags.append('{0}'.format(flag))\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +='' + action._option_strings[0]\n                for flag in action._option_strings[1:]:\n                    flags +='' + flag\n    return flags\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        else:\n            flags += '-' * arg.default\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if isinstance(argument, argparse._StoreAction):\n            flags.append('-')\n        else:\n            flags.append(str(argument))\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag.name for flag in parser._option_classes)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +='' + arg._flag_str()\n    return flags\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest is None:\n            flags +='' + arg._flag_name\n        else:\n            flags +='' + arg._flag_name +'' + arg.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(p.action for p in parser._option_groups)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if isinstance(arg, argparse.ArgumentParser):\n            flags.extend(arg.args)\n        elif isinstance(arg, str):\n            flags.append(arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                for flag in action._group_kwargs['flags']:\n                    flags.append('{0}'.format(flag))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for argument_group in parser._action_groups:\n        for action in argument_group._group_actions:\n            if action.dest == 'flags':\n                flags +='' + action._option_strings[0]\n                for flag in action._option_strings[1:]:\n                    flags +='' + flag\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +=''\n        else:\n            flags += '-' * arg.default\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_args()[0] for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if isinstance(argument, argparse._StoreAction):\n            flags.append('-')\n        else:\n            flags.append(str(argument))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag.name for flag in parser._option_classes)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest!= 'args':\n            flags +='' + arg._flag_str()\n    return flags\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # If the entry is not in the set, return true.\n    else:\n        return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process {} as it's already in the set\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to the set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} as it already processed.\"\n                 .format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n\n    return True\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in saving entry {} as {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\n    # Get the list of files in the path.\n    files = os.listdir(path_name)\n\n    # If the entry is already in the set, return false.\n    if path_name in processed:\n        return False\n\n    # If the entry is not in the set, add it.\n    elif path_name not in files:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n\n    # If the entry is not in the set, return true.\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {0} already processed.'.format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process {} as it's already in the set\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to the set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Refusing to process directory {} as it already processed.\"\n                 .format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing {0}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to processed\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {0} because it already exists\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {0} to the set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in saving entry {} as {}\".format(path_name, processed[path_name]))\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue when processing {}\".format(path_name))\n        return False\n    else:\n        processed.add(path_name)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"File:\", path_name, \"already processed.\")\n        return False\n    else:\n        processed.add(path_name)\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    A, B, C, D = vertices\n    ABCD = tuple([A, B, C, D])\n    return ABCD\n", "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4], vertices[(i + 3) % 4])\n                 for i in range(3))\n", "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    return ABCD\n", "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a, b, c = vertices\n    p = (a, b, c)\n    return tuple(sorted(p))\n", "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        raise ValueError(\"vertices list must have at least 3 elements\")\n\n    A, B, C, D = vertices\n    ABCD = tuple([A, B, C, D])\n    return ABCD\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[(i + 1) % 4],\n                  vertices[(i + 2) % 4], vertices[(i + 3) % 4])\n                 for i in range(3))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    (x1, y1, z1) = vertices\n\n    return ((x1, y1, z1),\n            (x1, y1, -z1),\n            (x1, -y1, z1),\n            (x1, -y1, -z1),\n            (x1, y1, +z1),\n            (-x1, -y1, z1),\n            (-x1, -y1, -z1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A = vertices[0::3]\n    B = vertices[1::3]\n    C = vertices[2::3]\n\n    ABCD = tuple([A[0] + B[0], A[1] + B[1], A[2] + B[2]])\n    return ABCD\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    A, B, C, D = vertices\n\n    return tuple([A, B, C, D])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    return tuple((vertices[0], vertices[1], vertices[2]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    if len(vertices) < 3:\n        return None\n\n    a, b, c = vertices\n    p = (a, b, c)\n    return tuple(sorted(p))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    a, b, c = vertices\n    return ((a, b, c), (b, a, c), (c, b, a))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError('Can not convert negative numbers.')\n\n    output = ''\n    base = len(alphabet)\n\n    while number > 0:\n        output = alphabet[number % base] + output\n        number = number // base\n\n    return output\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == -1:\n        return '-'\n    if alphabet == '':\n        return str(number)\n    arr = []\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"\"\n    while number > 0:\n        str_number += alphabet[number % base]\n        number //= base\n    return str_number\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must have at least one character.\")\n\n    output = \"\"\n    base = len(alphabet)\n\n    while number!= 0:\n        number, mod = divmod(number, base)\n        output = alphabet[mod] + output\n    return output\n", "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = ''\n    while number!= 0:\n        number, remainder = divmod(number, base)\n        str_number = alphabet[remainder] + str_number\n    return str_number\n", "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, remainder = divmod(number, len(alphabet))\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return \"\".join(arr)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    s = ''\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError('Can not convert negative numbers.')\n\n    output = ''\n    base = len(alphabet)\n\n    while number > 0:\n        output = alphabet[number % base] + output\n        number = number // base\n\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = string.digits\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == -1:\n        return '-'\n    if alphabet == '':\n        return str(number)\n    arr = []\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        arr.append(alphabet[mod])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = \"\"\n    while number > 0:\n        str_number += alphabet[number % base]\n        number //= base\n    return str_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    arr = []\n    base = len(alphabet)\n    while number:\n        number, remainder = divmod(number, base)\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return ''.join(arr)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str]) -> str:\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    if len(alphabet) == 0:\n        raise ValueError(\"Alphabet must have at least one character.\")\n\n    output = \"\"\n    base = len(alphabet)\n\n    while number!= 0:\n        number, mod = divmod(number, base)\n        output = alphabet[mod] + output\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    base = len(alphabet)\n    str_number = ''\n    while number!= 0:\n        number, remainder = divmod(number, base)\n        str_number = alphabet[remainder] + str_number\n    return str_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: Optional[str] = None) -> str:\n    if alphabet is None:\n        alphabet = _alphabet\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return alphabet[0]\n    arr = []\n    while number:\n        number, remainder = divmod(number, len(alphabet))\n        arr.append(alphabet[remainder])\n    arr.reverse()\n    return \"\".join(arr)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, \"\")\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": v}\n        elif k == \"baudrate\":\n            flow_params[k][\"baudrate\"] = v\n        elif k == \"parity\":\n            flow_params[k][\"parity\"] = v\n        elif k == \"stopbits\":\n            flow_params[k][\"stopbits\"] = v\n        elif k == \"bytesize\":\n            flow_params[k][\"bytesize\"] = v\n        elif k == \"timeout\":\n            flow_params[k][\"timeout\"] = v\n        elif k == \"xonxoff\":\n            flow_params[k][\"xonxoff\"] = v\n        elif k == \"rtscts\":\n            flow_params[k][\"rtscts\"] = v\n        elif k == \"xonoticenable", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            break\n        elif param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = dict(flow_params)\n            register_params[register_number] = param_value\n            break\n        elif param_name == 'dst-to':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = dict(flow_params)\n            register_params[register_number] = param_value\n            break\n        elif param_nam", "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if value['register_number'] == register_number:\n            flow_params[key]['register_value'] = register_value\n", "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"idle\":\n            flow_params[k] = {\"idle\": v}\n        elif k == \"baudrate\":\n            flow_params[k][\"baudrate\"] = v\n        elif k == \"parity\":\n            flow_params[k][\"parity\"] = v\n        elif k == \"stopbits\":\n            flow_params[k][\"stopbits\"] = v\n        elif k == \"bytesize\":\n            flow_params[k][\"bytesize\"] = v\n        elif k == \"timeout\":\n            flow_params[k][\"timeout\"] = v\n        elif k == \"xonxoff\":\n            flow_params[k][\"xonxoff\"] = v\n        elif k == \"rtscts\":\n            flow_params[k][\"rtscts\"] = v\n        elif k == \"xonoticenable", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers'][register_number]:\n        flow_params['registers'][register_number] = flow_params['registers'][register_number].replace(\n            register_value, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params:\n        if register_number in flow_params[key]:\n            flow_params[key][register_number] = flow_params[key][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if flow_params.get(\"registers\"):\n        if flow_params.get(\"registers\").get(register_number):\n            flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_number].replace(\n                \"{{register_value}}\", str(register_value))\n        else:\n            flow_params[\"registers\"][register_number] = str(register_value)\n    else:\n        flow_params[\"registers\"] = {register_number: str(register_value)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for param_name, param_value in flow_params.items():\n        if param_name =='src':\n            flow_params[param_name] = flow_params['dst']\n            del flow_params[param_name]\n            flow_params[register_number] = param_value\n            break\n        elif param_name == 'dst':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = dict(flow_params)\n            register_params[register_number] = param_value\n            break\n        elif param_name == 'dst-to':\n            flow_params[param_name] = param_value\n            del flow_params[param_name]\n            register_params = dict(flow_params)\n            register_params[register_number] = param_value\n            break\n        elif param_nam", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if \"registers\" in flow_params:\n        flow_params[\"registers\"][register_number] = flow_params[\"registers\"][register_value]\n    else:\n        flow_params[\"registers\"] = {register_number: flow_params[\"registers\"][register_value]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' in flow_params.keys():\n        flow_params['register_value'][register_number] = flow_params['register_value'][register_number]\n    else:\n        flow_params['register_value'] = {register_number: flow_params['register_value'][register_number]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if value['register_number'] == register_number:\n            flow_params[key]['register_value'] = register_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'registers' in flow_params:\n        if register_number in flow_params['registers']:\n            flow_params['registers'][register_number] = flow_params['registers'][register_number]\n    else:\n        flow_params['registers'] = {}\n        if register_number in flow_params['registers']:\n            pass\n        else:\n            flow_params['registers'][register_number] = register_value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__() if issubclass(subcls, cls)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                  for g in subclasses(s)]\n", "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if issubclass(subcls, cls)]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__() if issubclass(subcls, cls)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield subclass\n        yield from subclass.subclasses()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        g for g in cls.__subclasses__()\n        if issubclass(cls, g)\n    ] + [cls]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                  for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if issubclass(subcls, cls)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n", "def string_to_int(string: str, alphabet: str) -> int:\n    # Use the given alphabet to generate a new string.\n    gen = string_to_generator(string, alphabet)\n    # Return the result.\n    return gen.next()\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    # Handle empty strings\n    if string == '':\n        return 0\n\n    # Make sure we have a string\n    if type(string) is not str:\n        raise TypeError('The input string must be a string.')\n\n    # Handle non-strings\n    if string is None:\n        return 0\n\n    # Split the string into numbers and convert to ints\n    numbers = [int(number) for number in string.split()]\n    return sum(alphabet.index(number) for number in numbers)\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    # Use the given alphabet to generate a new string.\n    gen = string_to_generator(string, alphabet)\n    # Return the result.\n    return gen.next()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for c in string:\n        result *= len(alphabet)\n        result += alphabet.index(c)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    num = 0\n    for c in string:\n        num = num * len(alphabet) + alphabet.index(c)\n    return num\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    if not alphabet:\n        raise ValueError(\"Alphabet must be non-empty list of characters.\")\n    if len(alphabet) > 1:\n        raise ValueError(\"Alphabet can only contain one character.\")\n\n    int_value = 0\n    for char in string:\n        int_value *= len(alphabet)\n        int_value += alphabet.index(char)\n    return int_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    # Handle empty strings\n    if string == '':\n        return 0\n\n    # Make sure we have a string\n    if type(string) is not str:\n        raise TypeError('The input string must be a string.')\n\n    # Handle non-strings\n    if string is None:\n        return 0\n\n    # Split the string into numbers and convert to ints\n    numbers = [int(number) for number in string.split()]\n    return sum(alphabet.index(number) for number in numbers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    result = 0\n    for c in string:\n        result = result * len(alphabet) + alphabet.index(c)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    base = len(alphabet)\n    str_len = len(string)\n    num = 0\n    for idx, char in enumerate(string):\n        num += alphabet.index(char) * (base ** str_len - idx)\n    return num\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path / \"desc\"\n    try:\n        urlretrieve(url, archive_path.with_suffix(\".tar.gz\"))\n        return archive_path\n    except Exception as e:\n        raise e\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        urlretrieve(url, archive_path)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    response = requests.get(url)\n    response.raise_for_status()\n    archive_path = _retry(url)\n\n    with archive_path.open('r') as archive:\n        archive.extractall(destination_path)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.is_file():\n        logger.info(\"Downloading package description from %s\", url)\n        response = requests.get(url, stream=True)\n        with archive_path.open(\"wb\") as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:  # filter out keep-alive new chunks\n                    f.write(chunk)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    destination_path = destination_path.joinpath(archive_name)\n    if not destination_path.exists():\n        logging.info(f'Downloading {archive_name} to {destination_path}.')\n        urlretrieve(url, str(destination_path))\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if not destination_path.exists():\n        destination_path.mkdir()\n\n    for directory, subdirectories, files in os.walk(str(destination_path)):\n        for file in files:\n            if file.endswith(\".tar.gz\"):\n                archive_path = directory / file\n                repo_archive = archive_path.resolve()\n\n                # Remove the extension if it exists.\n                if archive_path.suffix == \".tar.gz\":\n                    archive_path = archive_path.with_suffix(\".tar.gz\")\n\n                # Extract the file to the directory.\n                with archive_path.open(\"r\") as archive:\n                    with repo_archive.open(\"wb\") as output:\n                        output.write(archive.read())\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code == 404:\n        raise URLNotFoundError\n    repo_archive = destination_path / f'{response.status_code}.tar.gz'\n    repo_archive.parent.mkdir(exist_ok=True, parents=True)\n    with repo_archive.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                f.write(chunk)\n    return repo_archive\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"desc-{i}.tar.gz\"\n        if not destination_path.joinpath(archive_name).exists():\n            tar = tarfile.open(fileobj=response.raw, mode=\"r|gz\")\n            tar.extractall(destination_path)\n            tar.close()\n            break\n\n        # TODO: use relative path for archive name (eg 'core' or 'extra')\n        archive_path = destination_path.joinpath(archive_name)\n        if not archive_path.exists():\n            raise RepoDownloaderException(f\"Unable to extract {archive_name}\")\n\n    return destination_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path / \"desc\"\n    try:\n        urlretrieve(url, archive_path.with_suffix(\".tar.gz\"))\n        return archive_path\n    except Exception as e:\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n\n    if not archive_path.exists():\n        urlretrieve(url, archive_path)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    def _retry(url: str):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == requests.codes.ok:\n                return\n            raise e\n\n        return Path(destination_path) / Path(url.split('/')[-1])\n\n    response = requests.get(url)\n    response.raise_for_status()\n    archive_path = _retry(url)\n\n    with archive_path.open('r') as archive:\n        archive.extractall(destination_path)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.is_file():\n        logger.info(\"Downloading package description from %s\", url)\n        response = requests.get(url, stream=True)\n        with archive_path.open(\"wb\") as f:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:  # filter out keep-alive new chunks\n                    f.write(chunk)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # check if the given url is a valid URL\n    if not url.startswith(\"http://\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n    if not url.endswith(\"/\"):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    archive_path = destination_path / Path(url.split(\"/\")[-1])\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n\n    response = requests.get(url)\n    if response.status_code!= 200:\n        raise requests.HTTPError(\"Retrieved status code {} from {}\".format(response.status_code, url))\n\n    with archive_path.open(\"wb\") as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # remove.tar.gz from the end of the path\n    archive_path = destination_path.with_suffix(\".tar.gz\")\n\n    # download the file\n    response = requests.get(url, stream=True)\n    with archive_path.open(\"wb\") as archive:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                archive.write(chunk)\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    destination_path = destination_path.joinpath(archive_name)\n    if not destination_path.exists():\n        logging.info(f'Downloading {archive_name} to {destination_path}.')\n        urlretrieve(url, str(destination_path))\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if not destination_path.exists():\n        destination_path.mkdir()\n\n    for directory, subdirectories, files in os.walk(str(destination_path)):\n        for file in files:\n            if file.endswith(\".tar.gz\"):\n                archive_path = directory / file\n                repo_archive = archive_path.resolve()\n\n                # Remove the extension if it exists.\n                if archive_path.suffix == \".tar.gz\":\n                    archive_path = archive_path.with_suffix(\".tar.gz\")\n\n                # Extract the file to the directory.\n                with archive_path.open(\"r\") as archive:\n                    with repo_archive.open(\"wb\") as output:\n                        output.write(archive.read())\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    response = requests.get(url)\n    if response.status_code == 404:\n        raise URLNotFoundError\n    repo_archive = destination_path / f'{response.status_code}.tar.gz'\n    repo_archive.parent.mkdir(exist_ok=True, parents=True)\n    with repo_archive.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                f.write(chunk)\n    return repo_archive\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise RepoDownloaderException(e)\n\n    for i in range(1, 10):\n        archive_name = f\"desc-{i}.tar.gz\"\n        if not destination_path.joinpath(archive_name).exists():\n            tar = tarfile.open(fileobj=response.raw, mode=\"r|gz\")\n            tar.extractall(destination_path)\n            tar.close()\n            break\n\n        # TODO: use relative path for archive name (eg 'core' or 'extra')\n        archive_path = destination_path.joinpath(archive_name)\n        if not archive_path.exists():\n            raise RepoDownloaderException(f\"Unable to extract {archive_name}\")\n\n    return destination_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return os.name == \"Darwin\"\n", "def os_is_mac():\n    return os.name == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return os.name == \"Darwin\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return os.name == \"Darwin\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k.replace('*.', '[^.]*'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return dict((re.escape(k.replace('*.', '.*')), v) for k, v in item.items())\n", "def regex_dict(item):\n    return {re.sub(r'\\.(\\w*)$', r'\\1_\\2', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return dict((key, re.compile(value)) for (key, value) in item.items())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.', '[^.]*'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.cpp$', '', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((re.escape(k.replace('*.', '.*')), v) for k, v in item.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub(r'\\.(\\w*)$', r'\\1_\\2', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((key, re.compile(value)) for (key, value) in item.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        name = name[1:-1]\n    return name[:name.find('\"')]\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        name = name[1:-1]\n    return name\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == \"'\":\n        name = name[1:-1]\n    return name[:name.find('\"')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name.replace('\\\\\"', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"' and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        if '-e' in s:\n            platform = 'command'\n        else:\n            platform = 'executable'\n    if platform in ['command', 'executable']:\n        s = shlex.split(s)\n        if platform == 'command':\n            s = s[1:]\n    return s\n", "def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    elif platform == 'osx':\n        import os\n        return os.environ['SHELL'].split(' ')\n    elif platform == 'linux':\n        return shlex.split(s)\n    else:\n        # fallback for unknown platforms\n        return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        return shlex.split(s)\n    elif platform == 'cmd':\n        return [s]\n    else:\n        raise ValueError('invalid platform %r' % platform)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    elif platform == 'POSIX':\n        splitter = re.compile(r'([\\\\\\\\])')\n    elif platform == 'cmd':\n        splitter = re.compile(r'([\\\\\\\\])')\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n\n    return splitter.split(s)\n", "def split(s, platform='this'):\n    return re.split('\\\\\\\\|/', s)\n", "def split(s, platform='this'):\n    if platform =='shlex':\n        import shlex\n        lex = shlex.shlex(str(s))\n        lex.wordchars += '/.+-():'\n\n        def whitelist(tok):\n            return tok.type in'\\t\\n'\n\n        def blacklist(tok):\n            return not whitelist(tok) and tok.type!= 'comment'\n\n        return list(lex), list(filter(blacklist, lex))\n    else:\n        import re\n        return re.split('\\W' if platform == 'posix' else '.+-', str(s))\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    if platform == 'cmd':\n        s = re.split(r'\\s+', s)\n        if len(s) == 1:\n            s.append('')\n        return s\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = r'(\\\\w+)'\n    else:\n        pattern = r'(\\\\w+)' + '|'.join(['\\\\' + x for x in platform.split('-')])\n    return re.split(pattern, s)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        import posix\n        return posix.split(s)\n    elif platform == 'cmd':\n        import shlex\n        return [shlex.split(x) for x in s.split(' ')]\n    else:\n        raise ValueError('unknown platform: %r' % platform)\n", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\w|-)+$', s)\n        if not match:\n            return [s]\n        # strip any leading dash from the beginning of the string\n        # and convert the first non-dash character to a dash (for Python2)\n        s = s.lstrip('-')\n        s = s.lstrip('')\n        if s.startswith('-'):\n            s = s[1:]\n        # split the rest of the string into commands and arguments\n        commands = []\n        args = []\n        for x in s.split(' '):\n            # split the argument on spaces (for Python2)\n            split = x.split(' ')\n            # if the argument is a dash (eg. -foo bar)\n            if le"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    elif platform == 'cmd':\n        if '-e' in s:\n            platform = 'command'\n        else:\n            platform = 'executable'\n    if platform in ['command', 'executable']:\n        s = shlex.split(s)\n        if platform == 'command':\n            s = s[1:]\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'c':\n        return shlex.split(s)\n    elif platform == 'osx':\n        import os\n        return os.environ['SHELL'].split(' ')\n    elif platform == 'linux':\n        return shlex.split(s)\n    else:\n        # fallback for unknown platforms\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        platform = os.name\n\n    if platform == 'posix':\n        return shlex.split(s)\n    elif platform == 'cmd':\n        return [s]\n    else:\n        raise ValueError('invalid platform %r' % platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        splitter = re.compile(r'([\\\\/:*?\\\"<>|])')\n    elif platform == 'POSIX':\n        splitter = re.compile(r'([\\\\\\\\])')\n    elif platform == 'cmd':\n        splitter = re.compile(r'([\\\\\\\\])')\n    else:\n        raise ValueError('unknown platform: {}'.format(platform))\n\n    return splitter.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return re.split('\\\\\\\\|/', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform =='shlex':\n        import shlex\n        lex = shlex.shlex(str(s))\n        lex.wordchars += '/.+-():'\n\n        def whitelist(tok):\n            return tok.type in'\\t\\n'\n\n        def blacklist(tok):\n            return not whitelist(tok) and tok.type!= 'comment'\n\n        return list(lex), list(filter(blacklist, lex))\n    else:\n        import re\n        return re.split('\\W' if platform == 'posix' else '.+-', str(s))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    elif platform == 'posix':\n        platform = os.name == 'posix'\n    if platform == 'cmd':\n        s = re.split(r'\\s+', s)\n        if len(s) == 1:\n            s.append('')\n        return s\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        pattern = r'(\\\\w+)'\n    else:\n        pattern = r'(\\\\w+)' + '|'.join(['\\\\' + x for x in platform.split('-')])\n    return re.split(pattern, s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        import posix\n        return posix.split(s)\n    elif platform == 'cmd':\n        import shlex\n        return [shlex.split(x) for x in s.split(' ')]\n    else:\n        raise ValueError('unknown platform: %r' % platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 'posix':\n        match = re.match(r'^(\\w|-)+$', s)\n        if not match:\n            return [s]\n        # strip any leading dash from the beginning of the string\n        # and convert the first non-dash character to a dash (for Python2)\n        s = s.lstrip('-')\n        s = s.lstrip('')\n        if s.startswith('-'):\n            s = s[1:]\n        # split the rest of the string into commands and arguments\n        commands = []\n        args = []\n        for x in s.split(' '):\n            # split the argument on spaces (for Python2)\n            split = x.split(' ')\n            # if the argument is a dash (eg. -foo bar)\n            if le", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. Does not deal with the case where the archive exists but\n    does not contain the file.\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n    except (OSError, tarfile.TarError):\n        raise ValueError(\n            \"Unable to extract tar archive {}\".format(archive_path)\n        )\n    archive.extractall(str(archive_path))\n    archive.close()\n\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    repo_url.unlink()\n    repo_url.mkdir()\n\n    return repo_url.as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: Path, url: str = \"https://raw.githubusercontent.com/npm/pypi-docs/hass/archives/{}.tar.gz\".format(archive_path.name)\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    # TODO: Add spinner here if npm is running under pypi-docs\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=str(archive_path))\n    repo_url = url.rstrip(\"/\") + \"/\"\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    try:\n        zip_file = zipfile.ZipFile(archive_path)\n    except zipfile.BadZipfile as e:\n        raise ArchiveError(f\"Unable to unzip archive: {str(e)}\") from e\n\n    # We need to uncompress the file first because we need to decode the content\n    # of the zip file to bytes before unpacking it.\n    with zip_file.open(f\"{archive_path}.zip\") as zip_file_content:\n        zip_file_content.read()\n\n    return f\"https://github.com/{repository_name}/archive/{archive_path.name}\"\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. This does not deal with the case where the archive\n    didn't exist.\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    repo_url.unlink()\n\n    with tarfile.open(str(repo_url), \"r:gz\") as repo:\n        repo.extractall(str(archive_path))\n\n    repo.create_repository(repository_name)\n\n    return repo_url.as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    compression: str = \"bzip2\",\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist.\n    \"\"\"\n    if not archive_path.is_file():\n        raise Exception(\n            \"Unable to prepare repository from non-existent archive: \"\n            f\"'{archive_path}'\"\n        )\n\n    # Because zip archives have a single directory, we need to give it a single\n    # directory path to the archive_path as well.\n    archive_path = archive_path.parent / archive_path.name\n\n    if not archive_path.exists():\n        raise Exception(\"Unable to prepare repository from non-existent \"\n                        f\"archive: '{archive_path}'\")\n\n    # Uncompress the archive.\n    return uncompress(archive_path, compression=compression)\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    # TODO: this is a terrible hack, should probably just use a tempfile instead of passing in a path to it\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path.unlink()\n        archive_path.open(\"rb\")\n        archive_path = Path(temp_dir) / filename\n        repository_url = repository + \"/\" + archive_path.name\n        return repository_url\n    finally:\n        # cleanup tempdir\n        shutil.rmtree(temp_dir)\n", "def prepare_repository_from_archive(\n    archive_path: Path, repo_url: str, debug: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    if not archive_path.is_file():\n        raise FileNotFoundError(\n            \"The given archive_path does not exist: {}\".format(archive_path)\n        )\n\n    # Remove the.tar.gz extension\n    archive_path = archive_path.with_suffix(\".tar.gz\")\n\n    # Copy the archive to the temp dir\n    temp_dir = tempfile.mkdtemp()\n    archive_path.replace(temp_dir, delete=False)\n    tar = tarfile.open(archive_path)\n    tar.extractall(temp_dir)\n    tar.close()\n\n    # Remove the temporary directory\n    shutil.rmtree(temp_dir)\n\n    # Get the repo url which can be used as origin url\n    archive_repo_url = repo", "def prepare_repository_from_archive(\n    archive_path: Path, prefix: str, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    archive_path = Path(archive_path)\n    if not archive_path.exists():\n        raise Exception(\n            \"Given path does not exist on disk: {}\".format(archive_path)\n        )\n    if not archive_path.is_file():\n        raise Exception(\"Given path is not a file: {}\".format(archive_path))\n    repo_url = archive_path.relative_to(prefix)\n    if not allow_missing:\n        repo_url = repo_url.parts[-1]\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    # TODO: need to support multiple archives at the same time\n    archive_path = archive_path.with_suffix(\".zip\")\n    zip_file = zipfile.ZipFile(archive_path)\n    zip_file.extractall(str(archive_path))\n    archive_path = Path(archive_path) / \"repo\"\n    if not allow_missing:\n        archive_path.unlink()\n    return archive_path.as_posix()\n", "def prepare_repository_from_archive(\n    archive_path: Path,\n    prepare_command: Callable[[str], None],\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist.\n    \"\"\"\n    try:\n        repo_url = archive_path.unlink().as_uri()\n    except OSError:\n        repo_url = archive_path.name\n\n    if prepare_command is not None:\n        try:\n            prepare_command(repo_url)\n        except Exception:\n            raise UnknownArchiveError(str(archive_path))\n\n    return repo_url\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, *, branch: str = \"master\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does\n    not exist. Does not deal with the case where the archive exists but\n    does not contain the file.\n    \"\"\"\n    try:\n        archive = tarfile.open(archive_path)\n    except (OSError, tarfile.TarError):\n        raise ValueError(\n            \"Unable to extract tar archive {}\".format(archive_path)\n        )\n    archive.extractall(str(archive_path))\n    archive.close()\n\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    repo_url.unlink()\n    repo_url.mkdir()\n\n    return repo_url.as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, url: str = \"https://raw.githubusercontent.com/npm/pypi-docs/hass/archives/{}.tar.gz\".format(archive_path.name)\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    # TODO: Add spinner here if npm is running under pypi-docs\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=str(archive_path))\n    repo_url = url.rstrip(\"/\") + \"/\"\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    try:\n        zip_file = zipfile.ZipFile(archive_path)\n    except zipfile.BadZipfile as e:\n        raise ArchiveError(f\"Unable to unzip archive: {str(e)}\") from e\n\n    # We need to uncompress the file first because we need to decode the content\n    # of the zip file to bytes before unpacking it.\n    with zip_file.open(f\"{archive_path}.zip\") as zip_file_content:\n        zip_file_content.read()\n\n    return f\"https://github.com/{repository_name}/archive/{archive_path.name}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository_name: str = \"default\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist. This does not deal with the case where the archive\n    didn't exist.\n    \"\"\"\n    repo_url = archive_path.with_suffix(\".tar.gz\")\n    repo_url.unlink()\n\n    with tarfile.open(str(repo_url), \"r:gz\") as repo:\n        repo.extractall(str(archive_path))\n\n    repo.create_repository(repository_name)\n\n    return repo_url.as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: pathlib.Path,\n    compression: str = \"bzip2\",\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist.\n    \"\"\"\n    if not archive_path.is_file():\n        raise Exception(\n            \"Unable to prepare repository from non-existent archive: \"\n            f\"'{archive_path}'\"\n        )\n\n    # Because zip archives have a single directory, we need to give it a single\n    # directory path to the archive_path as well.\n    archive_path = archive_path.parent / archive_path.name\n\n    if not archive_path.exists():\n        raise Exception(\"Unable to prepare repository from non-existent \"\n                        f\"archive: '{archive_path}'\")\n\n    # Uncompress the archive.\n    return uncompress(archive_path, compression=compression)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository: str, filename: str = \"README.rst\"\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    # TODO: this is a terrible hack, should probably just use a tempfile instead of passing in a path to it\n    temp_dir = tempfile.mkdtemp()\n    try:\n        archive_path.unlink()\n        archive_path.open(\"rb\")\n        archive_path = Path(temp_dir) / filename\n        repository_url = repository + \"/\" + archive_path.name\n        return repository_url\n    finally:\n        # cleanup tempdir\n        shutil.rmtree(temp_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repo_url: str, debug: bool = False\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    if not archive_path.is_file():\n        raise FileNotFoundError(\n            \"The given archive_path does not exist: {}\".format(archive_path)\n        )\n\n    # Remove the.tar.gz extension\n    archive_path = archive_path.with_suffix(\".tar.gz\")\n\n    # Copy the archive to the temp dir\n    temp_dir = tempfile.mkdtemp()\n    archive_path.replace(temp_dir, delete=False)\n    tar = tarfile.open(archive_path)\n    tar.extractall(temp_dir)\n    tar.close()\n\n    # Remove the temporary directory\n    shutil.rmtree(temp_dir)\n\n    # Get the repo url which can be used as origin url\n    archive_repo_url = repo", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, prefix: str, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    archive_path = Path(archive_path)\n    if not archive_path.exists():\n        raise Exception(\n            \"Given path does not exist on disk: {}\".format(archive_path)\n        )\n    if not archive_path.is_file():\n        raise Exception(\"Given path is not a file: {}\".format(archive_path))\n    repo_url = archive_path.relative_to(prefix)\n    if not allow_missing:\n        repo_url = repo_url.parts[-1]\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, allow_missing: bool = False\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not\n    exist. This does not deal with the case where the archive passed along\n    does not exist.\n    \"\"\"\n    # TODO: need to support multiple archives at the same time\n    archive_path = archive_path.with_suffix(\".zip\")\n    zip_file = zipfile.ZipFile(archive_path)\n    zip_file.extractall(str(archive_path))\n    archive_path = Path(archive_path) / \"repo\"\n    if not allow_missing:\n        archive_path.unlink()\n    return archive_path.as_posix()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path,\n    prepare_command: Callable[[str], None],\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url which\n    can be used as origin url. This does not deal with the case where the archive\n    passed along does not exist.\n    \"\"\"\n    try:\n        repo_url = archive_path.unlink().as_uri()\n    except OSError:\n        repo_url = archive_path.name\n\n    if prepare_command is not None:\n        try:\n            prepare_command(repo_url)\n        except Exception:\n            raise UnknownArchiveError(str(archive_path))\n\n    return repo_url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'diff', '--name-only', ignored])\n    ignored = ignored.decode('utf-8')\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z']).strip().decode('utf-8')\n    ignored = re.sub(r'\\t', ',', ignored)\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") and not filename.startswith(\"_\"):\n            filenames.append(filename)\n    filenames.sort()\n    return \", \".join(filenames)\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).split('\\n')\n    ignored = [name for name in ignored if name!= '']\n    ignored.sort()\n    return ','.join(ignored)\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z', '--ignore-standard']).split(',')\n    ignored.sort()\n    return ','.join(ignored)\n", "def addignored(ignored):\n    ignored = subprocess.Popen([\"git\", \"ls-files\"],\n                               stdout=subprocess.PIPE).communicate()[0].split('\\n')\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n\n    ignore_list = []\n    for filename in ignored:\n        if filename.startswith('.'):\n            ignore_list.append(filename)\n    ignore_list.sort()\n    return ','.join(ignore_list)\n", "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'],\n                                    stdout=subprocess.PIPE).communicate()[0].strip().decode('utf-8').split(',')\n    ignore_files = list(filter(None, ignore_files))\n    ignored_files = []\n    for f in ignore_files:\n        if f in ignored:\n            ignored_files.append(f)\n    return ', '.join(ignored_files)\n", "def addignored(ignored):\n    ignored = subprocess.Popen(\n        ['git', 'diff', '--name-only', 'HEAD'],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE).communicate()[0].strip().decode('utf-8')\n    ignored = [f for f in ignored.split('\\n') if f]\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'diff', '--name-only', ignored])\n    ignored = ignored.decode('utf-8')\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z']).strip().decode('utf-8')\n    ignored = re.sub(r'\\t', ',', ignored)\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    filenames = []\n    for filename in ignored:\n        if filename.endswith(\".py\") and not filename.startswith(\"_\"):\n            filenames.append(filename)\n    filenames.sort()\n    return \", \".join(filenames)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).split('\\n')\n    ignored = [name for name in ignored if name!= '']\n    ignored.sort()\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z', '--ignore-standard']).split(',')\n    ignored.sort()\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.Popen([\"git\", \"ls-files\"],\n                               stdout=subprocess.PIPE).communicate()[0].split('\\n')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    ignore_list = []\n    for filename in ignored:\n        if filename.startswith('.'):\n            ignore_list.append(filename)\n    ignore_list.sort()\n    return ','.join(ignore_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignore_files = subprocess.Popen(['git', 'diff', '--name-only'],\n                                    stdout=subprocess.PIPE).communicate()[0].strip().decode('utf-8').split(',')\n    ignore_files = list(filter(None, ignore_files))\n    ignored_files = []\n    for f in ignore_files:\n        if f in ignored:\n            ignored_files.append(f)\n    return ', '.join(ignored_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.Popen(\n        ['git', 'diff', '--name-only', 'HEAD'],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE).communicate()[0].strip().decode('utf-8')\n    ignored = [f for f in ignored.split('\\n') if f]\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\", \"--ignore-standard\"]).split(\"\\n\")\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return (\n        filename.endswith(\".bz2\")\n        or filename.endswith(\".gz\")\n        or filename.endswith(\".zip\")\n        or filename.endswith(\".lzma\")\n        or filename.endswith(\".xz\")\n    )\n", "def match(filename):\n    return (\n        not filename.endswith(\".xml\")\n        and filename.endswith(\"metadata.xml\")\n        and not filename.endswith(\"playlist.xml\")\n    )\n", "def match(filename):\n    return (\n        filename.endswith(\".svg\") or\n        filename.endswith(\".svgz\") or\n        filename.endswith(\".png\") or\n        filename.endswith(\".jpg\")\n    )\n", "def match(filename):\n    return ('.' in filename and\n            filename.rsplit('.', 1)[1].lower() in SUPPORTED_EXTENSIONS)\n", "def match(filename):\n    return (\n        filename.lower().endswith(\".svg\") or\n        filename.lower().endswith(\".svgz\") or\n        filename.lower().endswith(\".svgt\")\n    )\n", "def match(filename):\n    return (\n        not filename.startswith(\"http://\")\n        and not filename.startswith(\"https://\")\n        and filename.endswith(\".tar.gz\")\n        and filename.endswith(\".tar.bz2\")\n    )\n", "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "def match(filename):\n    return (\n        filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"@\")\n        and not filename.startswith(\"#\")\n    )\n", "def match(filename):\n    return (\n        filename.endswith(\".xml\")\n        or filename.endswith(\".yaml\")\n        or filename.endswith(\".json\")\n        or filename.endswith(\".pkl\")\n    )\n", "def match(filename):\n    return (\n        not filename.startswith(\"s3a://\")\n        and filename.endswith(\".tar.gz\")\n        and filename.endswith(\".tgz\")\n        and filename[4:-4].lower() in SUPPORTED_EXTENSIONS\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return (\n        filename.endswith(\".bz2\")\n        or filename.endswith(\".gz\")\n        or filename.endswith(\".zip\")\n        or filename.endswith(\".lzma\")\n        or filename.endswith(\".xz\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.endswith(\".xml\")\n        and filename.endswith(\"metadata.xml\")\n        and not filename.endswith(\"playlist.xml\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename.endswith(\".svg\") or\n        filename.endswith(\".svgz\") or\n        filename.endswith(\".png\") or\n        filename.endswith(\".jpg\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return ('.' in filename and\n            filename.rsplit('.', 1)[1].lower() in SUPPORTED_EXTENSIONS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename.lower().endswith(\".svg\") or\n        filename.lower().endswith(\".svgz\") or\n        filename.lower().endswith(\".svgt\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.startswith(\"http://\")\n        and not filename.startswith(\"https://\")\n        and filename.endswith(\".tar.gz\")\n        and filename.endswith(\".tar.bz2\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    # TODO: Maybe check for other file types\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename.endswith(\".py\")\n        and not filename.startswith(\"_\")\n        and not filename.startswith(\"@\")\n        and not filename.startswith(\"#\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        filename.endswith(\".xml\")\n        or filename.endswith(\".yaml\")\n        or filename.endswith(\".json\")\n        or filename.endswith(\".pkl\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return (\n        not filename.startswith(\"s3a://\")\n        and filename.endswith(\".tar.gz\")\n        and filename.endswith(\".tgz\")\n        and filename[4:-4].lower() in SUPPORTED_EXTENSIONS\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unrecognized frequency \"{0}\"'.format(frequency))\n", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n\n    if frequency in _FREQ_TO_DURATION_MAP:\n        return _FREQ_TO_DURATION_MAP[frequency]\n\n    if frequency in ('always', 'yearly','monthly', 'daily'):\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Invalid frequency \"{}\". Choose from \"always\", \"yearly\", \"monthly\", \"daily\".'.format(frequency))\n", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in (\"always\", \"on time\"):\n        return datetime.timedelta(days=1)\n    elif frequency in (\"days\", \"weeks\", \"months\", \"years\"):\n        return datetime.timedelta(days=7)\n    elif frequency in (\"hours\", \"minutes\", \"seconds\"):\n        return datetime.timedelta(hours=1)\n    elif frequency is None:\n        return None\n    else:\n        raise ValueError(\"Invalid frequency %r\" % frequency)\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in FREQ_TIME_MAP:\n        raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n    return FREQ_TIME_MAP[frequency]\n", "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "def parse_frequency(frequency):\n\n    frequency = frequency.lower()\n\n    if frequency == 'always':\n        return datetime.timedelta(days=7)\n    elif frequency == 'weeks':\n        return datetime.timedelta(weeks=7)\n    elif frequency == 'days':\n        return datetime.timedelta(days=1)\n    elif frequency =='months':\n        return datetime.timedelta(days=30)\n    elif frequency == 'years':\n        return datetime.timedelta(days=365)\n    elif frequency == 'hours':\n        return datetime.timedelta(hours=8)\n    elif frequency =='minutes':\n        return datetime.timedelta(minutes=30)\n    elif frequency =='seconds':\n        return datetime.timedelta(seconds=1)\n    elif frequency == 'weeks * days':\n        return datetime.timedelta(days=7) * DAY\n    elif frequency == 'weeks * hours':\n        return datetime.timedelta(hours=8) * HOUR\n    elif frequency == 'weeks * minutes':\n        return datetime.timedelta(minut", "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', 'weeks'):\n        return datetime.timedelta(days=7)\n    elif frequency in ('monthly', 'yearly'):\n        return datetime.timedelta(days=30)\n    elif frequency in ('daily', 'hourly', 'dailys'):\n        return datetime.timedelta(days=1)\n    else:\n        raise ValueError('frequency must be one of \"always\", \"weeks\", \"monthly\", \"yearly\", \"daily\", or \"hourlys\".')\n", "def parse_frequency(frequency):\n    frequency = frequency.strip().lower()\n    if frequency in FREQ_ALIASES:\n        return datetime.timedelta(**FREQ_ALIASES[frequency])\n    if frequency in ('always', 'weeks'):\n        return datetime.timedelta(days=7)\n    raise ValueError('frequency must be one of %s' % ', '.join(FREQ_ALIASES))\n", "def parse_frequency(frequency):\n    if frequency in ('always', 'never'):\n        return None\n\n    frequency = frequency.lower()\n    if frequency in ('weeks', 'week'):\n        return datetime.timedelta(days=7)\n    if frequency in ('days', 'day'):\n        return datetime.timedelta(days=1)\n    if frequency in ('hours', 'hour'):\n        return datetime.timedelta(hours=1)\n    if frequency in ('minutes','minute'):\n        return datetime.timedelta(minutes=1)\n    if frequency in ('seconds','second'):\n        return datetime.timedelta(seconds=1)\n    if frequency in ('weeks * days', 'weeks * day', 'weeks * week'):\n        return datetime.timedelta(days=7 * (int(frequency.split(' ')[0]) - 1))\n    raise ValueError('Unsupported frequency:'+ frequency)\n", "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.lower()\n    if frequency in ('1day', 'weeks', 'days', 'hours','minutes','seconds'):\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Frequency \"{0}\" is not supported.'.format(frequency))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n\n    try:\n        return timedelta(days=int(frequency))\n    except ValueError:\n        pass\n\n    try:\n        return timedelta(weeks=int(frequency))\n    except ValueError:\n        pass\n\n    raise ValueError('Unrecognized frequency \"{0}\"'.format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n\n    if frequency in _FREQ_TO_DURATION_MAP:\n        return _FREQ_TO_DURATION_MAP[frequency]\n\n    if frequency in ('always', 'yearly','monthly', 'daily'):\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Invalid frequency \"{}\". Choose from \"always\", \"yearly\", \"monthly\", \"daily\".'.format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in (\"always\", \"on time\"):\n        return datetime.timedelta(days=1)\n    elif frequency in (\"days\", \"weeks\", \"months\", \"years\"):\n        return datetime.timedelta(days=7)\n    elif frequency in (\"hours\", \"minutes\", \"seconds\"):\n        return datetime.timedelta(hours=1)\n    elif frequency is None:\n        return None\n    else:\n        raise ValueError(\"Invalid frequency %r\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in FREQ_TIME_MAP:\n        raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n    return FREQ_TIME_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.lower()\n    if frequency not in _FREQ_MAP:\n        raise ValueError(\"Frequency must be one of {0!r}\".format(_FREQ_MAP))\n    return _FREQ_MAP[frequency]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n\n    frequency = frequency.lower()\n\n    if frequency == 'always':\n        return datetime.timedelta(days=7)\n    elif frequency == 'weeks':\n        return datetime.timedelta(weeks=7)\n    elif frequency == 'days':\n        return datetime.timedelta(days=1)\n    elif frequency =='months':\n        return datetime.timedelta(days=30)\n    elif frequency == 'years':\n        return datetime.timedelta(days=365)\n    elif frequency == 'hours':\n        return datetime.timedelta(hours=8)\n    elif frequency =='minutes':\n        return datetime.timedelta(minutes=30)\n    elif frequency =='seconds':\n        return datetime.timedelta(seconds=1)\n    elif frequency == 'weeks * days':\n        return datetime.timedelta(days=7) * DAY\n    elif frequency == 'weeks * hours':\n        return datetime.timedelta(hours=8) * HOUR\n    elif frequency == 'weeks * minutes':\n        return datetime.timedelta(minut", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip()\n    if frequency in ('always', 'weeks'):\n        return datetime.timedelta(days=7)\n    elif frequency in ('monthly', 'yearly'):\n        return datetime.timedelta(days=30)\n    elif frequency in ('daily', 'hourly', 'dailys'):\n        return datetime.timedelta(days=1)\n    else:\n        raise ValueError('frequency must be one of \"always\", \"weeks\", \"monthly\", \"yearly\", \"daily\", or \"hourlys\".')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    frequency = frequency.strip().lower()\n    if frequency in FREQ_ALIASES:\n        return datetime.timedelta(**FREQ_ALIASES[frequency])\n    if frequency in ('always', 'weeks'):\n        return datetime.timedelta(days=7)\n    raise ValueError('frequency must be one of %s' % ', '.join(FREQ_ALIASES))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in ('always', 'never'):\n        return None\n\n    frequency = frequency.lower()\n    if frequency in ('weeks', 'week'):\n        return datetime.timedelta(days=7)\n    if frequency in ('days', 'day'):\n        return datetime.timedelta(days=1)\n    if frequency in ('hours', 'hour'):\n        return datetime.timedelta(hours=1)\n    if frequency in ('minutes','minute'):\n        return datetime.timedelta(minutes=1)\n    if frequency in ('seconds','second'):\n        return datetime.timedelta(seconds=1)\n    if frequency in ('weeks * days', 'weeks * day', 'weeks * week'):\n        return datetime.timedelta(days=7 * (int(frequency.split(' ')[0]) - 1))\n    raise ValueError('Unsupported frequency:'+ frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in (None, 'always'):\n        return None\n\n    frequency = frequency.lower()\n    if frequency in ('1day', 'weeks', 'days', 'hours','minutes','seconds'):\n        return datetime.timedelta(days=1)\n\n    raise ValueError('Frequency \"{0}\" is not supported.'.format(frequency))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if not host.startswith('127.0.0.1'):\n        return False\n    return True\n", "def is_local(host):\n    return host.startswith('localhost')\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return (host == '127.0.0.1')\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if not host.startswith('127.0.0.1'):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host.startswith('localhost')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return (host == '127.0.0.1')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' for path in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{path}*/**' for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{f}*/**\" for f in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:**/*{p}*/**' for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"sh:**/*{p}*/**\" for p in find_paths]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except Exception:\n        return False\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    # check git for the last commit\n    try:\n        repo_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \".git\")\n        repo = Repo(repo_path)\n        head = repo.head.commit\n        return head.hexsha == \"d3b6b9ddfa0eb21f9ac676a0938c6e09eafb7af3f\"\n    except Exception:\n        return False\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == \"nt\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except Exception:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    # check git for the last commit\n    try:\n        repo_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \".git\")\n        repo = Repo(repo_path)\n        head = repo.head.commit\n        return head.hexsha == \"d3b6b9ddfa0eb21f9ac676a0938c6e09eafb7af3f\"\n    except Exception:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        return\n\n    try:\n        os.makedirs(dirname)\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except OSError as e:\n        if e.errno!= errno.EEXIST:\n            raise e\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and os.path.exists(config_filename):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists! Overwriting it.')\n        return\n    if directory and not overwrite:\n        # Make sure directory exists.\n        try:\n            os.makedirs(directory)\n        except OSError:\n            pass\n\n    with open(config_filename, mode) as configfile:\n        configfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file already exists and overwrite is False, aborting.')\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, 'w') as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False, indent=4)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # Make sure the directory is clean\n    if not overwrite and os.path.exists(directory):\n        print(\"Directory %s already exists, skipping\" % directory)\n        return\n\n    # Write the file\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not os.path.exists(directory) or overwrite:\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as file:\n        file.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"\\t\\t\\tWARNING: config file already exists: {}\".format(config_filename))\n        return\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('\\n       Configuration file \"{}\" already exists. Nothing to do.'.format(config_filename))\n        return\n\n    dirname = os.path.dirname(config_filename)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    dirname = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dirname):\n        print(\"Configuration file already exists: %s\" % dirname)\n        return\n\n    try:\n        os.makedirs(dirname)\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    except OSError as e:\n        if e.errno!= errno.EEXIST:\n            raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.isdir(directory):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n    if not overwrite and os.path.exists(config_filename):\n        sys.exit(\n            \"Error: Configuration file {0} already exists. Overwrite is False.\".format(config_filename)\n        )\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Configuration file already exists! Overwriting it.')\n        return\n    if directory and not overwrite:\n        # Make sure directory exists.\n        try:\n            os.makedirs(directory)\n        except OSError:\n            pass\n\n    with open(config_filename, mode) as configfile:\n        configfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print('Config file already exists and overwrite is False, aborting.')\n        return\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    with open(config_filename, 'w') as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False, indent=4)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n\n    if not overwrite and os.path.exists(config_filename):\n        print(\"File %s already exists, skipping\" % config_filename)\n        return\n\n    # Make sure the directory is clean\n    if not overwrite and os.path.exists(directory):\n        print(\"Directory %s already exists, skipping\" % directory)\n        return\n\n    # Write the file\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Config file {} already exists. Aborting.\".format(config_filename))\n\n    dirname = os.path.dirname(config_filename)\n    if dirname:\n        if not overwrite and os.path.exists(dirname):\n            abort(\"Directory {} already exists.\".format(dirname))\n\n        os.makedirs(dirname)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not os.path.exists(directory) or overwrite:\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as file:\n        file.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(config_filename):\n        print(\"\\t\\t\\tWARNING: config file already exists: {}\".format(config_filename))\n        return\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(yaml.dump(rendered_config, default_flow_style=False))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script, 78))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join([line for line in script.splitlines()])\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script, 78))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(textwrap.wrap(script))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join([line for line in script.splitlines()])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as stdout:\n        with tempfile.NamedTemporaryFile(suffix='.py') as stderr:\n            try:\n                stdout.write('import numpy as np')\n                stdout.flush()\n            except TypeError:\n                stdout.write(np.__name__)\n                stdout.flush()\n            try:\n                subprocess.check_call([sys.executable, func, '-c', stdout.name, '-e', '1', '--timeout', timeout,\n                                      '--extra-env', extra_env, *args], stdout=stderr)\n            except subprocess.CalledProcessError as e:\n                return e.returncode, e.output\n            else:\n                raise RuntimeError('Faile", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout] +\n        list(args),\n        env=env\n    )\n    proc.wait(timeout)\n    return proc.returncode\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env, timeout=timeout)\n    out, err = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(p.returncode, args)\n    return out.decode('utf-8'), err.decode('utf-8')\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    if proc.returncode:\n        raise Exception(\"Failed to run {}\".format(func))\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', 'flake8', '--timeout', str(timeout)] + list(args),\n        env=env\n    )\n    try:\n        return func(*args)\n    except subprocess.TimeoutExpired:\n        p.kill()\n        p.wait()\n        raise\n    except subprocess.CalledProcessError as e:\n        p.kill()\n        p.wait()\n        return e.returncode\n    finally:\n        p.wait()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    p = subprocess.Popen(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout] +\n        list(args),\n        stdout=subprocess.PIPE,\n        env=env)\n    out, err = p.communicate()\n    rc = p.wait()\n    if rc!= 0:\n        raise subprocess.CalledProcessError(rc, args, output=out)\n    return out\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise subprocess.TimeoutExpired(\n            \"Timed out after %s seconds (%s)\" % (timeout, output))\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__, '--timeout', str(timeout)],\n            env=env, stdout=devnull, stderr=devnull)\n        proc.wait()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with tempfile.NamedTemporaryFile(suffix='.py') as stdout:\n        with tempfile.NamedTemporaryFile(suffix='.py') as stderr:\n            try:\n                stdout.write('import numpy as np')\n                stdout.flush()\n            except TypeError:\n                stdout.write(np.__name__)\n                stdout.flush()\n            try:\n                subprocess.check_call([sys.executable, func, '-c', stdout.name, '-e', '1', '--timeout', timeout,\n                                      '--extra-env', extra_env, *args], stdout=stderr)\n            except subprocess.CalledProcessError as e:\n                return e.returncode, e.output\n            else:\n                raise RuntimeError('Faile", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n    out, err = proc.communicate()\n    return proc.returncode, out, err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout] +\n        list(args),\n        env=env\n    )\n    proc.wait(timeout)\n    return proc.returncode\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                         env=env, timeout=timeout)\n    out, err = p.communicate()\n    if p.returncode!= 0:\n        raise subprocess.CalledProcessError(p.returncode, args)\n    return out.decode('utf-8'), err.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.stdout.read().decode('utf-8')\n    if proc.returncode:\n        raise subprocess.CalledProcessError(proc.returncode,\n                                           proc.cmd, output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    env['PGPASSWORD'] = 'test'\n    proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE, env=env)\n    proc.wait(timeout)\n    output = proc.communicate()[0].decode()\n    if proc.returncode:\n        raise Exception(\"Failed to run {}\".format(func))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        [sys.executable, '-m', 'flake8', '--timeout', str(timeout)] + list(args),\n        env=env\n    )\n    try:\n        return func(*args)\n    except subprocess.TimeoutExpired:\n        p.kill()\n        p.wait()\n        raise\n    except subprocess.CalledProcessError as e:\n        p.kill()\n        p.wait()\n        return e.returncode\n    finally:\n        p.wait()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    p = subprocess.Popen(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout] +\n        list(args),\n        stdout=subprocess.PIPE,\n        env=env)\n    out, err = p.communicate()\n    rc = p.wait()\n    if rc!= 0:\n        raise subprocess.CalledProcessError(rc, args, output=out)\n    return out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    env = os.environ.copy()\n    env.update(extra_env)\n    try:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env)\n    except OSError:\n        proc = subprocess.Popen(\n            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            env=env, close_fds=True)\n    output, errors = proc.communicate(timeout=timeout)\n    if proc.returncode:\n        raise subprocess.TimeoutExpired(\n            \"Timed out after %s seconds (%s)\" % (timeout, output))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    with open(os.devnull, 'w') as devnull:\n        proc = subprocess.Popen(\n            [sys.executable, func.__module__, '--timeout', str(timeout)],\n            env=env, stdout=devnull, stderr=devnull)\n        proc.wait()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default == '':\n            raise Error('Missing required environment variable %s' % name)\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Missing required environment variable: %s\" % name)\n        else:\n            return default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n\n    if value is None:\n        raise Error('Environment variable \"{}\" is not defined'.format(name))\n\n    if value == 'True':\n        default = True\n    elif value == 'False':\n        default = False\n\n    return value, default\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) == 'DEFAULT':\n            raise Error('Default value is not provided')\n        return matcher.group(2)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    if value == '':\n                        value = default\n                if value is not None:\n                    raise Error('Cannot convert value \"{}\" to int'\n                               .format(value))\n            if value!= default:\n                rai", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error(\n                \"Environment variable '{}' was not found\".format(name)\n            )\n    elif matcher.group(3):\n        try:\n            default = int(matcher.group(3))\n        except ValueError:\n            raise Error(\n                \"Invalid default value '{}' for environment variable '{}'\".format(\n                    matcher.group(3), name\n                )\n            )\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    value = os.environ.get(name)\n    if not value:\n        raise EnvironmentError('{0} not defined'.format(name))\n    return value if not default else value if value else default\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default == '':\n            raise Error('Missing required environment variable %s' % name)\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Missing required environment variable: %s\" % name)\n        else:\n            return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n\n    if value is None:\n        raise Error('Environment variable \"{}\" is not defined'.format(name))\n\n    if value == 'True':\n        default = True\n    elif value == 'False':\n        default = False\n\n    return value, default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        if matcher.group(2) == 'DEFAULT':\n            raise Error('Default value is not provided')\n        return matcher.group(2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    value = os.environ.get(name)\n    if value:\n        if value == 'True':\n            default = True\n        elif value == 'False':\n            default = False\n        else:\n            try:\n                value = int(value)\n            except ValueError:\n                try:\n                    value = float(value)\n                except ValueError:\n                    if value == '':\n                        value = default\n                if value is not None:\n                    raise Error('Cannot convert value \"{}\" to int'\n                               .format(value))\n            if value!= default:\n                rai", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        pass\n\n    try:\n        return os.environ['DEFAULT']\n    except KeyError:\n        pass\n\n    if default is not None:\n        return default\n\n    raise Error('Variable {} is not defined.'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = None\n    if matcher.group(2):\n        try:\n            return os.environ[name]\n        except KeyError:\n            raise Error(\n                \"Environment variable '{}' was not found\".format(name)\n            )\n    elif matcher.group(3):\n        try:\n            default = int(matcher.group(3))\n        except ValueError:\n            raise Error(\n                \"Invalid default value '{}' for environment variable '{}'\".format(\n                    matcher.group(3), name\n                )\n            )\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise EnvironmentError('{0} not defined'.format(name))\n    value = os.environ.get(name)\n    if not value:\n        raise EnvironmentError('{0} not defined'.format(name))\n    return value if not default else value if value else default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error(\"Environment variable '{}' does not exist\".format(name))\n        return default\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> (str, str, bool):\n    parsed = urlparse(image_href)\n    if parsed.netloc.endswith('cloudspotting.com'):\n        netloc = parsed.netloc.rsplit(':', 1)[0]\n        use_ssl = False\n    else:\n        netloc = parsed.netloc\n        use_ssl = True\n\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Image hrefs should not start with \"/\"')\n    parsed = urlparse(image_href)\n    image_id = parsed.path.lstrip('/')\n    netloc = parsed.netloc.rsplit(':', 1)[0]\n    use_ssl = bool(parsed.scheme in ('https', 'http'))\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    m = re.match(r'(.*?)/([^/]+)(?:#.*)?', image_href)\n    if m is None:\n        raise ValueError('Invalid image href: %s' % image_href)\n    image_id = m.group(1)\n    netloc = m.group(2)\n    use_ssl = (m.group(3) == 'on')\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> tuple:\n    if not image_href:\n        raise ValueError('No image href provided')\n\n    image_id = image_href.split('/')[-1]\n    netloc = urlparse(image_href).netloc\n    use_ssl = False\n    if ':' in netloc:\n        use_ssl = True\n        netloc, image_id = netloc.split(':', 1)\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urllib.parse.urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Invalid image href: %s\" % image_href)\n    netloc = parsed.netloc.split(':')[0]\n    use_ssl = bool(parsed.scheme.startswith('https'))\n    return parsed.path.rsplit('/', 1)[-1], netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    m = re.match(r\"^(.*?)://(.*?)(:(?:/.*)|(\\\\..\\\\.))(.*)$\", image_href)\n    if m is None:\n        raise ValueError(\"Invalid image reference: {}\".format(image_href))\n    image_id = m.group(1)\n    netloc = m.group(2)\n    use_ssl = m.group(3) == \"True\"\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href cannot be empty')\n\n    image_id = image_href.split('/')[-1]\n    netloc = image_href.split('/')[:-1]\n    use_ssl = False\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if not url_components.netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n    image_id = url_components.path.split('/')[-1]\n    netloc = url_components.netloc\n    use_ssl = False\n    if url_components.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image href {} does not use a netloc'.format(image_href))\n    image_id = parsed.path.split('/')[-1]\n    netloc = parsed.netloc\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> (str, str, bool):\n    if not image_href:\n        raise ValueError(\"Image href cannot be empty\")\n\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Image href must be a valid URL\")\n\n    image_id = parsed.path.lstrip(\"/\").rstrip(\"/\")\n    netloc = parsed.netloc\n    use_ssl = False\n\n    if \":\" in netloc:\n        use_ssl, netloc = netloc.split(\":\", 1)\n\n    return image_id, netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> (str, str, bool):\n    parsed = urlparse(image_href)\n    if parsed.netloc.endswith('cloudspotting.com'):\n        netloc = parsed.netloc.rsplit(':', 1)[0]\n        use_ssl = False\n    else:\n        netloc = parsed.netloc\n        use_ssl = True\n\n    image_id = parsed.path.split('/')[-1]\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if image_href.startswith('/'):\n        raise ValueError('Image hrefs should not start with \"/\"')\n    parsed = urlparse(image_href)\n    image_id = parsed.path.lstrip('/')\n    netloc = parsed.netloc.rsplit(':', 1)[0]\n    use_ssl = bool(parsed.scheme in ('https', 'http'))\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    m = re.match(r'(.*?)/([^/]+)(?:#.*)?', image_href)\n    if m is None:\n        raise ValueError('Invalid image href: %s' % image_href)\n    image_id = m.group(1)\n    netloc = m.group(2)\n    use_ssl = (m.group(3) == 'on')\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> tuple:\n    if not image_href:\n        raise ValueError('No image href provided')\n\n    image_id = image_href.split('/')[-1]\n    netloc = urlparse(image_href).netloc\n    use_ssl = False\n    if ':' in netloc:\n        use_ssl = True\n        netloc, image_id = netloc.split(':', 1)\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urllib.parse.urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Invalid image href: %s\" % image_href)\n    netloc = parsed.netloc.split(':')[0]\n    use_ssl = bool(parsed.scheme.startswith('https'))\n    return parsed.path.rsplit('/', 1)[-1], netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    m = re.match(r\"^(.*?)://(.*?)(:(?:/.*)|(\\\\..\\\\.))(.*)$\", image_href)\n    if m is None:\n        raise ValueError(\"Invalid image reference: {}\".format(image_href))\n    image_id = m.group(1)\n    netloc = m.group(2)\n    use_ssl = m.group(3) == \"True\"\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href cannot be empty')\n\n    image_id = image_href.split('/')[-1]\n    netloc = image_href.split('/')[:-1]\n    use_ssl = False\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if not url_components.netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n    image_id = url_components.path.split('/')[-1]\n    netloc = url_components.netloc\n    use_ssl = False\n    if url_components.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image href {} does not use a netloc'.format(image_href))\n    image_id = parsed.path.split('/')[-1]\n    netloc = parsed.netloc\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> (str, str, bool):\n    if not image_href:\n        raise ValueError(\"Image href cannot be empty\")\n\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Image href must be a valid URL\")\n\n    image_id = parsed.path.lstrip(\"/\").rstrip(\"/\")\n    netloc = parsed.netloc\n    use_ssl = False\n\n    if \":\" in netloc:\n        use_ssl, netloc = netloc.split(\":\", 1)\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    # Test if list is not a string\n    if not isinstance(input_list, str):\n        raise TypeError(\"input_list must be a string\")\n\n    # Test if input_list has at least one item\n    if len(input_list) <= 1:\n        raise TypeError(\"input_list must have at least one item\")\n\n    # Test if input_list has a seperator character\n    if input_list[-1] == '/':\n        return input_list[0:-1]\n    else:\n        return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be a list\")\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[-1])!= 1:\n        raise TypeError(\"The last character must be a pathname seperator\")\n\n    return input_list[:-1]\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[0:len(input_list) - 1]\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    processed_list = input_list\n    for i, char in enumerate(processed_list):\n        if len(char) > 1 and char[-1] == os.sep:\n            processed_list[i] = char[:-1]\n\n    return processed_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i, val in enumerate(input_list):\n            if len(val) > 1 and val[-1] == os.sep:\n                input_list[i] = val[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list must have at least one string\")\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be a list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    last_char = input_list[-1]\n    if len(last_char) > 1 and last_char.endswith(os.sep):\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('Input must be a list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    processed_list = []\n    for item in input_list:\n        if len(item) > 0 and item[-1]!= os.sep:\n            processed_list.append(item[:-1])\n        else:\n            processed_list.append(item)\n\n    return processed_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    # Test if list is not a string\n    if not isinstance(input_list, str):\n        raise TypeError(\"input_list must be a string\")\n\n    # Test if input_list has at least one item\n    if len(input_list) <= 1:\n        raise TypeError(\"input_list must have at least one item\")\n\n    # Test if input_list has a seperator character\n    if input_list[-1] == '/':\n        return input_list[0:-1]\n    else:\n        return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be a list\")\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[-1])!= 1:\n        raise TypeError(\"The last character must be a pathname seperator\")\n\n    return input_list[:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input list must be of type list\")\n\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        input_list.pop()\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list\n\n    return input_list[0:len(input_list) - 1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be of type list')\n\n    if len(input_list) <= 1:\n        return input_list\n\n    processed_list = input_list\n    for i, char in enumerate(processed_list):\n        if len(char) > 1 and char[-1] == os.sep:\n            processed_list[i] = char[:-1]\n\n    return processed_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i, val in enumerate(input_list):\n            if len(val) > 1 and val[-1] == os.sep:\n                input_list[i] = val[:-1]\n        return input_list\n    else:\n        raise TypeError(\"Input list must have at least one string\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list)):\n            if len(input_list[i]) > 1 and input_list[i][-1:] == os.sep:\n                input_list[i] = input_list[i][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('input_list must be a list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list) == 1:\n        return input_list\n\n    last_char = input_list[-1]\n    if len(last_char) > 1 and last_char.endswith(os.sep):\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('Input must be a list')\n\n    if len(input_list) == 0:\n        return input_list\n\n    processed_list = []\n    for item in input_list:\n        if len(item) > 0 and item[-1]!= os.sep:\n            processed_list.append(item[:-1])\n        else:\n            processed_list.append(item)\n\n    return processed_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I | re.S)\n    if strip:\n        regex_pattern = regex_pattern.strip()\n    return regex_pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<(?:{pattern})\\s*)' if strip else r'(?:{pattern})')\n       .format(pattern=pattern)\n    ]))\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = re.compile(pattern.strip(), re.UNICODE)\n    else:\n        pattern = re.compile(pattern)\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.VERBOSE).sub\n", "def get_pattern(pattern, strip=True):\n    regex = re.compile(pattern, re.I | re.U)\n    if strip:\n        regex = regex.strip()\n    return regex\n", "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern.replace(\"*\", \"\\\\*\") + \"$\", re.UNICODE | re.MULTILINE | re.DOTALL)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.VERBOSE | re.UNICODE | re.UNICODE_EXP) if strip else re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    regex_pattern = re.compile(pattern, re.I | re.S)\n    if strip:\n        regex_pattern = regex_pattern.strip()\n    return regex_pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(''.join([\n        (r'(?P<(?:{pattern})\\s*)' if strip else r'(?:{pattern})')\n       .format(pattern=pattern)\n    ]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s+', '\\\\s+', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if not isinstance(pattern, str):\n        raise TypeError(\"pattern must be a string\")\n\n    if strip:\n        pattern = re.compile(pattern.strip(), re.UNICODE)\n    else:\n        pattern = re.compile(pattern)\n\n    return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '\\\\s', pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n\n    return re.compile(pattern, re.UNICODE | re.VERBOSE).sub\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    regex = re.compile(pattern, re.I | re.U)\n    if strip:\n        regex = regex.strip()\n    return regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(\"^\" + pattern.replace(\"*\", \"\\\\*\") + \"$\", re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern.replace(\"*\", \"\\\\*\") + \"$\", re.UNICODE | re.MULTILINE | re.DOTALL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, re.VERBOSE | re.UNICODE | re.UNICODE_EXP) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern.replace('\\\\n', '\\n').replace('\\\\t', '\\t'), re.UNICODE | re.MULTILINE | re.DOTALL) if strip else re.compile(pattern)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    subclass_of: Tuple[str, str, str],\n    strict=False,\n    include_self=False,\n    return_type=None,\n    ignore_types=None,\n    suppress_errors=False,\n    debug=False,\n):\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n\n    for c, p, o in graph.triples((subclass_of, None, None)):\n        if o in ignore_types:\n            continue\n\n        if c in roots:\n            continue\n\n        roots.add(c)\n        roots.add(p)\n\n    if debug:\n        print(\"Found roots in\", graph, \"with\", len(roots), \"roots\")\n\n    if strict:\n        ass", "def find_roots(\n    graph: Graph,\n    subclass_of: Union[str, List[str]],\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for p, o, c in graph.triples((subclass_of, None, None)):\n        roots.add((p, o, c))\n    return roots\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_class: str,\n    rdflib_skool: str,\n    rdflib_entity: str,\n    rdflib_triple: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    rdflib_roots = set()\n\n    # pylint: disable=unnecessary-lambda\n    if rdflib_sub_class == rdflib_skool:\n        rdflib_roots.update(graph.subjects(RDF.type, rdflib_skool))\n    elif rdflib_sub_class == rdflib_entity:\n        rdflib_roots.add(graph.prefixes(rdflib_skool, rdflib_entity)[0])\n    elif rdflib_sub_class == rdflib_triple:\n        rdflib_roots.add(graph.pr", "def find_roots(\n    graph: Graph,\n    subclasses: Set[Tuple[str, str, str]],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # get the name of the triple (descendant, ancestors, super)\n    triple_descendant, triple_ancestors, triple_super = triple\n\n    # find all roots in the triple (descendant, ancestors, super)\n    triple_roots = set()\n    if triple_descendant not in graph:\n        return triple_roots\n\n    for triple_root in graph[triple_descendant]:\n        # traverse the graph to get all the sub-roots\n        triple_sub_roots = subclasses[triple_root]\n        # and add them to the set\n        triple_root", "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for p, o, c in graph.triples((None, DCTERMS.subClassOf, None)):\n        if c not in subclass_of and c not in roots:\n            roots.add(c)\n            roots.add(o)\n    return roots\n", "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Set[str] = set([SKOS.broader]),\n):\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for s, p, o in subclasses:\n        if s in rdflib_subclasses:\n            if o in rdflib_subclasses:\n                roots.add((o, p, s))\n            else:\n                roots.add((s, p, o))\n            roots.update(find_roots(graph, graph[s][p][o]))\n    return roots\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, Sequence[str]] = SKOS.broader,\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    return {\n        root\n        for (child, prop, parent) in graph\n        if (\n            (rdflib_subclass in graph[child][prop])\n            and (\n                graph[child][prop][rdflib_subclass] == SKOS.broader\n            )\n        )\n    }\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\"\"\"\n    subclass_to_roots = collections.defaultdict(set)\n    for s, p, o in graph.triples((None, rdflib_subclass, None)):\n        if issubclass(o, RDF.type):\n            subclass_to_roots[o].add(o)\n        elif issubclass(o, SKOS.Property):\n            if o.name == 'SKOS.Annotation':\n                subclass_to_roots[o].add(o)\n            elif o.name == 'SKOS.Agent':\n                subclass_to_roots[o].add(o)\n    return subclass_to_roots\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, Callable[[str], RDFlibClass]],\n    rdflib_broader: Union[str, Callable[[str], RDFlibClass]],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # These are for rdflib.SKOS.broader\n    triple_to_root = {\n        (rdflib_subclass, SKOS.broader, SKOS.broader),\n        (rdflib_subclass, SKOS.broader, RDFlibClass),\n        (rdflib_broader, SKOS.broader, SKOS.broader),\n        (rdflib_broader, SKOS.broader, RDFlibClass),\n    }\n\n    # This is for rdflib.RDF.subClassOf\n    sub_to_root = {\n        (rdflib_subclass, SKOS.broader, SKOS.subClassOf),\n        (rdflib_subclass, SKOS.broade", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal,\n    *,\n    rdflib_subclasses: Optional[Sequence[Literal]] = None,\n    rdflib_instance: Optional[URIRef] = None,\n    rdflib_subclasses_predicates: Optional[Sequence[URIRef]] = None,\n    rdflib_instances: Optional[Sequence[URIRef]] = None,\n    rdflib_subclasses_predicates_predicates: Optional[Sequence[URIRef]] = None,\n    strict: bool = False,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    \"\"\"\n    if not rdflib_subclasses and not rdflib_instances and not rdflib_subclasses_predicates and not rdflib_instances_predicates:\n        rdflib_subclasses = graph.objects(\n       "], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    subclass_of: Tuple[str, str, str],\n    strict=False,\n    include_self=False,\n    return_type=None,\n    ignore_types=None,\n    suppress_errors=False,\n    debug=False,\n):\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n\n    for c, p, o in graph.triples((subclass_of, None, None)):\n        if o in ignore_types:\n            continue\n\n        if c in roots:\n            continue\n\n        roots.add(c)\n        roots.add(p)\n\n    if debug:\n        print(\"Found roots in\", graph, \"with\", len(roots), \"roots\")\n\n    if strict:\n        ass", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclass_of: Union[str, List[str]],\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for p, o, c in graph.triples((subclass_of, None, None)):\n        roots.add((p, o, c))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: str,\n    rdflib_class: str,\n    rdflib_skool: str,\n    rdflib_entity: str,\n    rdflib_triple: str,\n    ) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    rdflib_roots = set()\n\n    # pylint: disable=unnecessary-lambda\n    if rdflib_sub_class == rdflib_skool:\n        rdflib_roots.update(graph.subjects(RDF.type, rdflib_skool))\n    elif rdflib_sub_class == rdflib_entity:\n        rdflib_roots.add(graph.prefixes(rdflib_skool, rdflib_entity)[0])\n    elif rdflib_sub_class == rdflib_triple:\n        rdflib_roots.add(graph.pr", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclasses: Set[Tuple[str, str, str]],\n    triple: Tuple[str, str, str],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # get the name of the triple (descendant, ancestors, super)\n    triple_descendant, triple_ancestors, triple_super = triple\n\n    # find all roots in the triple (descendant, ancestors, super)\n    triple_roots = set()\n    if triple_descendant not in graph:\n        return triple_roots\n\n    for triple_root in graph[triple_descendant]:\n        # traverse the graph to get all the sub-roots\n        triple_sub_roots = subclasses[triple_root]\n        # and add them to the set\n        triple_root", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: Set[Tuple[str, str, str]]\n) -> Set[Tuple[str, str, str]]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for p, o, c in graph.triples((None, DCTERMS.subClassOf, None)):\n        if c not in subclass_of and c not in roots:\n            roots.add(c)\n            roots.add(o)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    subclasses: Tuple[Tuple[str, str, str],...],\n    rdflib_subclasses: Set[str] = set([SKOS.broader]),\n):\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    roots = set()\n    for s, p, o in subclasses:\n        if s in rdflib_subclasses:\n            if o in rdflib_subclasses:\n                roots.add((o, p, s))\n            else:\n                roots.add((s, p, o))\n            roots.update(find_roots(graph, graph[s][p][o]))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, Sequence[str]] = SKOS.broader,\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    return {\n        root\n        for (child, prop, parent) in graph\n        if (\n            (rdflib_subclass in graph[child][prop])\n            and (\n                graph[child][prop][rdflib_subclass] == SKOS.broader\n            )\n        )\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[\n        Literal, URIRef, Comment, URIRef, URIRef, URIRef, URIRef, URIRef\n    ],\n) -> Set[URIRef]:\n    \"\"\"Find the roots in some sort of transitive hierarchy.\"\"\"\n    subclass_to_roots = collections.defaultdict(set)\n    for s, p, o in graph.triples((None, rdflib_subclass, None)):\n        if issubclass(o, RDF.type):\n            subclass_to_roots[o].add(o)\n        elif issubclass(o, SKOS.Property):\n            if o.name == 'SKOS.Annotation':\n                subclass_to_roots[o].add(o)\n            elif o.name == 'SKOS.Agent':\n                subclass_to_roots[o].add(o)\n    return subclass_to_roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[str, Callable[[str], RDFlibClass]],\n    rdflib_broader: Union[str, Callable[[str], RDFlibClass]],\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n    \"\"\"\n    # These are for rdflib.SKOS.broader\n    triple_to_root = {\n        (rdflib_subclass, SKOS.broader, SKOS.broader),\n        (rdflib_subclass, SKOS.broader, RDFlibClass),\n        (rdflib_broader, SKOS.broader, SKOS.broader),\n        (rdflib_broader, SKOS.broader, RDFlibClass),\n    }\n\n    # This is for rdflib.RDF.subClassOf\n    sub_to_root = {\n        (rdflib_subclass, SKOS.broader, SKOS.subClassOf),\n        (rdflib_subclass, SKOS.broade", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Literal,\n    *,\n    rdflib_subclasses: Optional[Sequence[Literal]] = None,\n    rdflib_instance: Optional[URIRef] = None,\n    rdflib_subclasses_predicates: Optional[Sequence[URIRef]] = None,\n    rdflib_instances: Optional[Sequence[URIRef]] = None,\n    rdflib_subclasses_predicates_predicates: Optional[Sequence[URIRef]] = None,\n    strict: bool = False,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    \"\"\"\n    if not rdflib_subclasses and not rdflib_instances and not rdflib_subclasses_predicates and not rdflib_instances_predicates:\n        rdflib_subclasses = graph.objects(\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, unicode):\n        return dumper.represent_unicode(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_str(obj)\n    else:\n        raise TypeError(\n            'Object of type {0} with value {1} is not '\n            'a string or unicode'.format(type(obj), obj)\n        )\n", "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.binary_type):\n        obj = obj.encode('utf-8')\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', obj,\n                                  style='|')\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, unicode):\n        return dumper.represent_unicode(obj)\n    elif isinstance(obj, str):\n        return dumper.represent_str(obj)\n    else:\n        raise TypeError(\n            'Object of type {0} with value {1} is not '\n            'a string or unicode'.format(type(obj), obj)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not isinstance(obj, six.binary_type):\n        obj = obj.encode('utf-8')\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', obj,\n                                  style='|')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    if isinstance(obj, six.text_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n    elif isinstance(obj, six.binary_type):\n        return dumper.represent_scalar(u'tag:yaml.org,2002:bytes', obj)\n    else:\n        return dumper.represent_mapping(u'tag:yaml.org,2002:map', obj)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(filename)s:%(lineno)d %(funcName)s() : %(message)s')\n    handler = logging.StreamHandler()\n    handler.setFormatter(log_formatter)\n\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n    else:\n        app_logger.setLevel(logging.INFO)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.config.fileConfig(logfile, defaults={'level': logging.DEBUG})\n    logger = logging.getLogger(name)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(logging.StreamHandler())\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Create logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Configure file handler\n    fh = logging.FileHandler(logfile, 'w')\n    fh.setLevel(logging.INFO)\n\n    # Format the format\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add the formatter to the logger\n    logger.addHandler(fh)\n\n    # Add the formatter to the logger\n    logger.debug(debug)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_file = os.path.join(os.path.dirname(__file__), logfile)\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    handler = logging.FileHandler(log_file, 'w')\n    handler.setFormatter(log_formatter)\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n        logger.debug(\"Logging enabled\")\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info(\"Logging enabled\")\n    logger.debug(\"Logfile is %s\", logfile)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(log_formatter)\n\n    if debug:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n    else:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.INFO)\n        logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode')\n\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '[%(levelname)s] %(asctime)s %(filename)s:%(lineno)d %(funcName)s() : %(message)s')\n    handler = logging.StreamHandler()\n    handler.setFormatter(log_formatter)\n\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n    else:\n        app_logger.setLevel(logging.INFO)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    app_logger.addHandler(handler)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.config.fileConfig(logfile, defaults={'level': logging.DEBUG})\n    logger = logging.getLogger(name)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(logging.StreamHandler())\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Create logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Configure file handler\n    fh = logging.FileHandler(logfile, 'w')\n    fh.setLevel(logging.INFO)\n\n    # Format the format\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add the formatter to the logger\n    logger.addHandler(fh)\n\n    # Add the formatter to the logger\n    logger.debug(debug)\n\n    return logger\n", "is_pass": true, "return_code": 0}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_file = os.path.join(os.path.dirname(__file__), logfile)\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    handler = logging.FileHandler(log_file, 'w')\n    handler.setFormatter(log_formatter)\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    if debug:\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            '%(asctime)s %(levelname)s %(name)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n        logger.debug(\"Logging enabled\")\n    else:\n        logger.setLevel(logging.INFO)\n        logger.info(\"Logging enabled\")\n    logger.debug(\"Logfile is %s\", logfile)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_formatter = logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(log_formatter)\n\n    if debug:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n    else:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.INFO)\n        logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n        logger.debug('Debug mode')\n\n    return logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, -1.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, -1.0, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x - 0.2)**2 / (2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2) / (2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(\n                \"Error while parsing {}:\\n{}\".format(config_filename, str(e))\n            )\n            continue\n\n        if not overrides:\n            # No need to validate anything else, just return the whole configuration.\n            return configs, errors\n\n        # Validate each config after it's parsed.\n        for override in overrides:\n            try:\n                parsed_config = config.validate_config(configs[override], config_filename, override)\n                configs[override] = parsed_config\n            except Exception as e:\n     ", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename, \"rt\") as config_file:\n                configs[filename] = load_configuration(\n                    config_file, overrides, resolve_env=resolve_env\n                )\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            errors.append(e)\n            continue\n        else:\n            break\n    else:\n        # No errors were found. Consider an error or stop.\n        errors.append(ConfigurationError(\"No configuration errors were found\"))\n        return configs, errors\n    if overrides:\n        for filename, config in configs.items():\n            config.update(overrides.get(filename, {}))\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, overrides, resolve_env)\n        except ConfigurationError as error:\n            errors.append(error)\n            configs[filename] = Configuration()\n        else:\n            if config is not None:\n                validate_configuration(config, configs[filename])\n                configs[filename] = config\n\n    return (configs, errors)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parse errors and return the sequence of errors\n    # which should be raised as a tuple of (parse_error, logging.LogRecord).\n    # We can also return the sequence of errors which should be raised as\n    # a sequence of (error_type, error_msg, traceback).\n    return (configs, errors, [])\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(fn, overrides, resolve_env)\n        for fn in config_filenames\n    ]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                'Unable to load configuration file {0}. Please make sure '\n                'the configuration file is properly formatted and '\n                'is accessible on the local computer.'.format(config_filename)\n            )\n            configs[config_filename] = {}\n\n    if overrides:\n        configs.update(overrides)\n\n    if resolve_env:\n        configs = utils.resolve_environment_variables(configs)\n\n    errors = list(filter(bool, errors))\n    if len(errors):\n        raise ConfigError", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigFileParseException as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigFileParseException(errors)\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(\n                config_filename, overrides=overrides,\n                resolve_env=resolve_env)\n        except ConfigError as e:\n            errors.append(e)\n            continue\n        except IOError:\n            errors.append(\"Configuration file {0} does not exist\".format(\n                config_filename))\n            continue\n    return (configs, errors)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n    \"\"\"\n    parser = ConfigParser()\n    parser.read(config_filenames)\n\n    # TODO: add resolve_env option to validate each configuration\n\n    return _load_configs(parser, overrides, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parser = config.get_parser(config_filename)\n            configs[config_filename] = parser.parse_known_args()\n        except Exception as e:\n            errors.append(\n                \"Error while parsing {}:\\n{}\".format(config_filename, str(e))\n            )\n            continue\n\n        if not overrides:\n            # No need to validate anything else, just return the whole configuration.\n            return configs, errors\n\n        # Validate each config after it's parsed.\n        for override in overrides:\n            try:\n                parsed_config = config.validate_config(configs[override], config_filename, override)\n                configs[override] = parsed_config\n            except Exception as e:\n     ", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename, \"rt\") as config_file:\n                configs[filename] = load_configuration(\n                    config_file, overrides, resolve_env=resolve_env\n                )\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            errors.append(e)\n            continue\n        else:\n            break\n    else:\n        # No errors were found. Consider an error or stop.\n        errors.append(ConfigurationError(\"No configuration errors were found\"))\n        return configs, errors\n    if overrides:\n        for filename, config in configs.items():\n            config.update(overrides.get(filename, {}))\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, overrides, resolve_env)\n        except ConfigurationError as error:\n            errors.append(error)\n            configs[filename] = Configuration()\n        else:\n            if config is not None:\n                validate_configuration(config, configs[filename])\n                configs[filename] = config\n\n    return (configs, errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for filename in config_filenames:\n        try:\n            config = load_configuration(filename, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append(e)\n            continue\n        except Exception as e:\n            e.filename = filename\n            errors.append(e)\n            continue\n        configs[filename] = config\n\n    if overrides:\n        configs.update(overrides)\n\n    # We want to log all the parse errors and return the sequence of errors\n    # which should be raised as a tuple of (parse_error, logging.LogRecord).\n    # We can also return the sequence of errors which should be raised as\n    # a sequence of (error_type, error_msg, traceback).\n    return (configs, errors, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        load_config(fn, overrides, resolve_env)\n        for fn in config_filenames\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    config_filenames = [\n        os.path.expanduser(f) for f in config_filenames\n    ]\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            with open(config_filename) as f:\n                configs[config_filename] = yaml.safe_load(f)\n        except IOError:\n            errors.append(\n                'Unable to load configuration file {0}. Please make sure '\n                'the configuration file is properly formatted and '\n                'is accessible on the local computer.'.format(config_filename)\n            )\n            configs[config_filename] = {}\n\n    if overrides:\n        configs.update(overrides)\n\n    if resolve_env:\n        configs = utils.resolve_environment_variables(configs)\n\n    errors = list(filter(bool, errors))\n    if len(errors):\n        raise ConfigError", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n\n    for config_filename in config_filenames:\n        try:\n            parsed_config = _load_config_from_file(config_filename,\n                                                 overrides=overrides,\n                                                 resolve_env=resolve_env)\n        except ConfigFileParseException as e:\n            errors.append(e)\n        else:\n            configs[config_filename] = parsed_config\n\n    if errors:\n        raise ConfigFileParseException(errors)\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = load_config(\n                config_filename, overrides=overrides,\n                resolve_env=resolve_env)\n        except ConfigError as e:\n            errors.append(e)\n            continue\n        except IOError:\n            errors.append(\"Configuration file {0} does not exist\".format(\n                config_filename))\n            continue\n    return (configs, errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (Sequence[Text], Optional[Mapping[Text, Text]], bool) -> Tuple[Mapping[Text, ConfigParser], Sequence[LogRecord]]\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate each configuration\n    filename and return the results as a tuple of:\n\n        dict of configuration filename to corresponding parsed configuration,\n        and sequence of logging.LogRecord instances containing any parse errors.\n    \"\"\"\n    parser = ConfigParser()\n    parser.read(config_filenames)\n\n    # TODO: add resolve_env option to validate each configuration\n\n    return _load_configs(parser, overrides, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validator = Validator(config_filenames, overrides, resolve_env)\n    return validator.validate()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"arguments (got %r)\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, bytes) else obj\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, bytearray):\n        return bytes(obj)\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        return str(obj)\n", "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "def force_string(obj):\n    return obj.encode(\"utf-8\")\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    else:\n        raise TypeError(\"force_string must take either bytes or str \"\n                        \"arguments (got %r)\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, bytes) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"Type %s not serializable\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, bytearray):\n        return bytes(obj)\n    elif isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    else:\n        return str(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode('utf-8') if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('Time ticks must be greater than 0 ns')\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n    else:\n        return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % repr(ticks))\n\n    if tz is None:\n        return Time(0, 0, ticks, tz=UTC)\n    else:\n        return tz.fromutc(ticks)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (0 <= ticks < 86400000000)\" % ticks)\n\n    if tz is not None and ticks > (tz.utcoffset(None).total_seconds() * 1000000):\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (%s > %s * 1000000)\" % (ticks, ticks, tz.utcoffset(None).total_seconds() * 1000000))\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % cls.MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n\n    if tz is None:\n        return cls._from_timestamp(ticks / 1000000000, \"ns\")\n    else:\n        return tz.fromutc(\n            cls._from_timestamp(ticks / 1000000000, \"ns\")\n        )\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be greater than zero')\n\n    if tz is None:\n        return cls.from_seconds(ticks // (2 ** 32) * (2 ** 32))\n    else:\n        if not isinstance(tz, datetime.tzinfo):\n            raise TypeError('tz must be a datetime.tzinfo')\n\n    return tz.fromutc(datetime.timedelta(seconds=ticks))\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks > _MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % _MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*tz.fromutc(ticks)[:6])\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be non-negative, got {0}'.format(ticks))\n\n    if tz is None:\n        return Time(0, 0, ticks)\n\n    return Time(tz=tz, hour=ticks // 3600, minute=(ticks % 3600) // 60, second=ticks % 60)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        tz = _UTC\n\n    return tz.fromutc(datetime.fromtimestamp(ticks, tz))\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError('ticks out of bounds: {0!r}'.format(ticks))\n\n    if not (0 <= ticks < cls.MAX_TICKS):\n        raise ValueError('ticks out of bounds: {0!r}'.format(ticks))\n\n    if tz is None:\n        tz = _get_timezone()\n\n    return cls(ticks, tz)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('Time ticks must be greater than 0 ns')\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n    else:\n        return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % repr(ticks))\n\n    if tz is None:\n        return Time(0, 0, ticks, tz=UTC)\n    else:\n        return tz.fromutc(ticks)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (0 <= ticks < 86400000000)\" % ticks)\n\n    if tz is not None and ticks > (tz.utcoffset(None).total_seconds() * 1000000):\n        raise ValueError(\"Time.from_ticks(%s) : ticks out of bounds (%s > %s * 1000000)\" % (ticks, ticks, tz.utcoffset(None).total_seconds() * 1000000))\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % cls.MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*time.gmtime(ticks)[:6], tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n\n    if tz is None:\n        return cls._from_timestamp(ticks / 1000000000, \"ns\")\n    else:\n        return tz.fromutc(\n            cls._from_timestamp(ticks / 1000000000, \"ns\")\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be greater than zero')\n\n    if tz is None:\n        return cls.from_seconds(ticks // (2 ** 32) * (2 ** 32))\n    else:\n        if not isinstance(tz, datetime.tzinfo):\n            raise TypeError('tz must be a datetime.tzinfo')\n\n    return tz.fromutc(datetime.timedelta(seconds=ticks))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks > _MAX_TICKS:\n        raise ValueError(\"Time ticks out of range (%d)\" % _MAX_TICKS)\n\n    if tz is None:\n        return cls(*time.gmtime(ticks)[:6])\n\n    return cls(*tz.fromutc(ticks)[:6])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be non-negative, got {0}'.format(ticks))\n\n    if tz is None:\n        return Time(0, 0, ticks)\n\n    return Time(tz=tz, hour=ticks // 3600, minute=(ticks % 3600) // 60, second=ticks % 60)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0, got %s\" % ticks)\n\n    if tz is None:\n        tz = _UTC\n\n    return tz.fromutc(datetime.fromtimestamp(ticks, tz))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks > cls.MAX_TICKS:\n        raise ValueError('ticks out of bounds: {0!r}'.format(ticks))\n\n    if not (0 <= ticks < cls.MAX_TICKS):\n        raise ValueError('ticks out of bounds: {0!r}'.format(ticks))\n\n    if tz is None:\n        tz = _get_timezone()\n\n    return cls(ticks, tz)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (3, 5): BoltProtocolHandler3,\n        (5, 6): BoltProtocolHandler5,\n        (6, 7): BoltProtocolHandler6,\n        (7, 8): BoltProtocolHandler7,\n    }\n\n    if protocol_version in version_tuples:\n        return version_tuples[protocol_version]()\n    else:\n        return version_tuples\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or tuple(VERSION_CLASSES.keys())\n    if not all((v in version_tuple) for v in (Bolt.PROTOCOL_VERSION,)):\n        raise TypeError('protocol_version must be a tuple containing 3 or 4 elements')\n    return {v: Bolt.PROTOCOL_VERSION_CLASSES[v] for v in version_tuple}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    return cls._protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        if len(protocol_version) == 2:\n            return cls._protocol_handlers_v2[protocol_version[0]](protocol_version[1])\n        else:\n            raise TypeError('Expected protocol version to be of length 2 but got {}'.format(protocol_version))\n    else:\n        return cls._protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        supported = [\n            (v, k) for k, v in cls.SUPPORTED_PROTOCOL_VERSIONS.items()\n            if v == protocol_version\n        ]\n        if len(supported) == 1:\n            return supported[0]\n        raise TypeError(\"Cannot resolve protocol version {}\".format(protocol_version))\n    return cls.SUPPORTED_PROTOCOL_VERSIONS\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuples = {\n        (3, 5): BoltProtocolHandler3,\n        (5, 6): BoltProtocolHandler5,\n        (6, 7): BoltProtocolHandler6,\n        (7, 8): BoltProtocolHandler7,\n    }\n\n    if protocol_version in version_tuples:\n        return version_tuples[protocol_version]()\n    else:\n        return version_tuples\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    else:\n        return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_tuple = protocol_version or tuple(VERSION_CLASSES.keys())\n    if not all((v in version_tuple) for v in (Bolt.PROTOCOL_VERSION,)):\n        raise TypeError('protocol_version must be a tuple containing 3 or 4 elements')\n    return {v: Bolt.PROTOCOL_VERSION_CLASSES[v] for v in version_tuple}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return cls._protocol_handlers.get(protocol_version, {})\n    return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        if len(protocol_version) == 2:\n            return cls._protocol_handlers_v2[protocol_version[0]](protocol_version[1])\n        else:\n            raise TypeError('Expected protocol version to be of length 2 but got {}'.format(protocol_version))\n    else:\n        return cls._protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        supported = [\n            (v, k) for k, v in cls.SUPPORTED_PROTOCOL_VERSIONS.items()\n            if v == protocol_version\n        ]\n        if len(supported) == 1:\n            return supported[0]\n        raise TypeError(\"Cannot resolve protocol version {}\".format(protocol_version))\n    return cls.SUPPORTED_PROTOCOL_VERSIONS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _get_seq_with_type(seq._iterable, bufsize)\n    else:\n        return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        seq = seq._seq\n        type = seq._type\n        if type == \"bytes\":\n            return (seq, \"str\")\n        elif type == \"str\":\n            return (seq, \"bytes\")\n        elif type == \"int\":\n            return (seq, \"int\")\n        elif type == \"float\":\n            return (seq, \"float\")\n        elif type == \"list\":\n            return (seq, \"list\")\n        elif type == \"tuple\":\n            return (seq, \"tuple\")\n        else:\n            raise TypeError(\"unknown sequence type %s\" % type)\n    else:\n        raise TypeError(\"seq must be a Sequence or bytes, no", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq, Sequence\n    else:\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__()\n    elif isinstance(seq, bytes):\n        seq = (seq, bytes)\n    elif isinstance(seq, bytearray):\n        seq = (seq, bytearray)\n    elif isinstance(seq, memoryview):\n        seq = (seq.tobytes(), memoryview(seq.tobytes()))\n    elif isinstance(seq, unicode):\n        seq = (seq, unicode)\n    elif not isinstance(seq, (tuple, list)):\n        raise TypeError(\"expected bytes, bytearray, or memoryview, got %r\" %\n                        type(seq))\n    return seq[:2]\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize), seq._type\n    else:\n        return seq, seq._type\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize)\n    else:\n        return (seq, type(seq))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return _get_seq_with_type(seq._iterable, bufsize)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        seq = seq._seq\n        type = seq._type\n        if type == \"bytes\":\n            return (seq, \"str\")\n        elif type == \"str\":\n            return (seq, \"bytes\")\n        elif type == \"int\":\n            return (seq, \"int\")\n        elif type == \"float\":\n            return (seq, \"float\")\n        elif type == \"list\":\n            return (seq, \"list\")\n        elif type == \"tuple\":\n            return (seq, \"tuple\")\n        else:\n            raise TypeError(\"unknown sequence type %s\" % type)\n    else:\n        raise TypeError(\"seq must be a Sequence or bytes, no", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is not None:\n            return seq, type(seq)\n        else:\n            return seq, type(seq)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq, type(seq)\n        else:\n            return seq, Sequence(bufsize, seq.__class__)\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq, Sequence\n    else:\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getsizeof(seq)\n        return (seq._get_seq_with_type(bufsize), seq.__class__)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = sys.getrefcount(seq)\n        seq = seq.__iter__()\n    elif isinstance(seq, bytes):\n        seq = (seq, bytes)\n    elif isinstance(seq, bytearray):\n        seq = (seq, bytearray)\n    elif isinstance(seq, memoryview):\n        seq = (seq.tobytes(), memoryview(seq.tobytes()))\n    elif isinstance(seq, unicode):\n        seq = (seq, unicode)\n    elif not isinstance(seq, (tuple, list)):\n        raise TypeError(\"expected bytes, bytearray, or memoryview, got %r\" %\n                        type(seq))\n    return seq[:2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize), seq._type\n    else:\n        return seq, seq._type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            return seq._get_seq_with_type()\n        else:\n            return seq, type(seq)\n    else:\n        # assume seq is a string\n        return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        if bufsize is None:\n            bufsize = seq._bufsize\n        return seq._get_seq_with_type(bufsize)\n    else:\n        return (seq, type(seq))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = 0.0\n            return self._scale\n\n    # otherwise compute\n    if recompute:\n        self._scale = float(self.edges.sum()) / float(other.edges.sum())\n        return self._scale\n\n    # otherwise set scale to the new value\n    self._scale = other\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if not recompute:\n            self._scale = 0.0\n            return self\n        else:\n            other = Histo1D(self.bins)\n\n    if self._scale is not None and not recompute:\n        raise LenaValueError('Histo1D.scale can only be computed once')\n\n    self._scale = 0.0\n    self.edges = None\n    self.bins = other\n    return self\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale\n        s = self._scale\n        if s is None:\n            if recompute:\n                s = 0\n                self._scale = s\n            else:\n                raise LenaValueError()\n    else:\n        # other is scale of this histogram, compute it\n        self._scale = other.scale() if isinstance(other, Hist) else other\n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (not isinstance(other, Hist)):\n        self._scale = 0 if recompute else self._scale\n        return self\n\n    self._scale = other._scale\n    self._edges = other._edges\n    self._bins = other._bins\n\n    return self\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self.scale is not None:\n            return self.scale\n\n        if recompute:\n            self._scale = 0.\n            self._edges = None\n            return self.scale\n\n    else:\n        if self.edges is None:\n            raise LenaValueError('Cannot compute scale of Histogram with '\n                                 'uninitialized scale and edges')\n\n        self._scale = numpy.sum(other * self.edges)\n        self._edges = other\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is not None:\n        if other is None:\n            self._scale = scipy.integrate.trapz(self.edges, self.bins)\n        else:\n            self._scale = scipy.integrate.trapz(self.edges, self.bins, axis=1)\n\n        self._edges = self.edges / self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._scale = other\n        self._compute_scale()\n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute or (not self.scaled()):\n        self._scale = 0.0\n        for b in self.bins:\n            self._scale += b.value\n        self._scale = self._scale / self.bins.total_count()\n\n    self._scale = min(max(self._scale, 0.0), other)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not previously computed\n        self._scale = 0\n        for bin in self.bins:\n            bin.scale = self._scale\n    else:\n        # otherwise, compute scale from other\n        if recompute or (other is not None):\n            self._scale = other.scale\n        else:\n            raise LenaValueError(\"Cannot recompute scale of histogram because \" +\n                                 \"a scale of zero was not provided.\")\n", "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaHistError(\"Histogram already scaled\")\n        self._scale = (self.edges[1:] + self.edges[:-1]) / 2.\n\n    if other is not None:\n        if self._scale is not None:\n            raise LenaHistError(\"Histogram already scaled with %r\" % other)\n        self._scale = other\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = 0.0\n            return self._scale\n\n    # otherwise compute\n    if recompute:\n        self._scale = float(self.edges.sum()) / float(other.edges.sum())\n        return self._scale\n\n    # otherwise set scale to the new value\n    self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if not recompute:\n            self._scale = 0.0\n            return self\n        else:\n            other = Histo1D(self.bins)\n\n    if self._scale is not None and not recompute:\n        raise LenaValueError('Histo1D.scale can only be computed once')\n\n    self._scale = 0.0\n    self.edges = None\n    self.bins = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale\n        s = self._scale\n        if s is None:\n            if recompute:\n                s = 0\n                self._scale = s\n            else:\n                raise LenaValueError()\n    else:\n        # other is scale of this histogram, compute it\n        self._scale = other.scale() if isinstance(other, Hist) else other\n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if (other is None) or (not isinstance(other, Hist)):\n        self._scale = 0 if recompute else self._scale\n        return self\n\n    self._scale = other._scale\n    self._edges = other._edges\n    self._bins = other._bins\n\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        if self.scale is not None:\n            return self.scale\n\n        if recompute:\n            self._scale = 0.\n            self._edges = None\n            return self.scale\n\n    else:\n        if self.edges is None:\n            raise LenaValueError('Cannot compute scale of Histogram with '\n                                 'uninitialized scale and edges')\n\n        self._scale = numpy.sum(other * self.edges)\n        self._edges = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or self._scale is not None:\n        if other is None:\n            self._scale = scipy.integrate.trapz(self.edges, self.bins)\n        else:\n            self._scale = scipy.integrate.trapz(self.edges, self.bins, axis=1)\n\n        self._edges = self.edges / self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute and self._scale is None:\n        self._scale = other\n        self._compute_scale()\n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return self._scale\n\n    if recompute or (not self.scaled()):\n        self._scale = 0.0\n        for b in self.bins:\n            self._scale += b.value\n        self._scale = self._scale / self.bins.total_count()\n\n    self._scale = min(max(self._scale, 0.0), other)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        # compute scale if not previously computed\n        self._scale = 0\n        for bin in self.bins:\n            bin.scale = self._scale\n    else:\n        # otherwise, compute scale from other\n        if recompute or (other is not None):\n            self._scale = other.scale\n        else:\n            raise LenaValueError(\"Cannot recompute scale of histogram because \" +\n                                 \"a scale of zero was not provided.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if recompute or (other is not None):\n        if self._scale is not None:\n            raise LenaHistError(\"Histogram already scaled\")\n        self._scale = (self.edges[1:] + self.edges[:-1]) / 2.\n\n    if other is not None:\n        if self._scale is not None:\n            raise LenaHistError(\"Histogram already scaled with %r\" % other)\n        self._scale = other\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Graph scale only takes numbers\")\n    if isinstance(other, float):\n        self._scale = other\n        self._get_err_indices(\"scale\")\n    else:\n        self.coords[-1] = other\n", "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, tuple):\n            other = float(other[0]), float(other[1])\n        elif not isinstance(other, (float, int)):\n            raise TypeError(\n                'Expected float or int, got {}'.format(type(other)))\n        if other!= (1.0, 1.0):\n            raise LenaValueError('Unsupported coordinate type {}'.format(\n                other))\n        self._scale = other\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('scale() can only be applied to graphs with '\n                            'numeric coordinates')\n        else:\n            self._scale = other\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('Scale value must be a number')\n        if other!= 0.0:\n            for i, field in enumerate(self.field_names):\n                self.coords[field] *= other\n        else:\n            self.coords['x'] *= 1.0\n            self.coords['y'] *= 1.0\n            self.coords['z'] *= 1.0\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, (int, float)):\n        self._scale = other\n        return self\n    if not isinstance(other, collections.Iterable):\n        raise LenaValueError('Can only scale coordinates with numeric values.')\n    for coord_name in self.field_names:\n        if coord_name in other:\n            setattr(self, coord_name, other[coord_name])\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n", "def scale(self, other=None):\n    if other is not None:\n        other = float(other)\n        if other!= 0:\n            raise LenaValueError('graph has unknown or zero scale')\n        self._scale = other\n    elif self._scale is not None:\n        return\n\n    self._scale = (self.coords[-1] - self.coords[0]) / self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self.coords = (self.coords[0], self.coords[1], self._scale)\n    else:\n        return self._scale\n", "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('scale must be a number')\n        if other < 0:\n            raise ValueError('scale must be a number >= 0')\n        self._scale = other\n    elif self._scale is None:\n        return self\n    else:\n        self._scale = other * self._scale\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, tuple):\n        if len(other) == self.dim:\n            self._scale = other\n        else:\n            raise LenaValueError(\"Unsupported dimension {}\".format(len(other)))\n    else:\n        self._scale = other._scale\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError(\"Graph scale only takes numbers\")\n    if isinstance(other, float):\n        self._scale = other\n        self._get_err_indices(\"scale\")\n    else:\n        self.coords[-1] = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, tuple):\n            other = float(other[0]), float(other[1])\n        elif not isinstance(other, (float, int)):\n            raise TypeError(\n                'Expected float or int, got {}'.format(type(other)))\n        if other!= (1.0, 1.0):\n            raise LenaValueError('Unsupported coordinate type {}'.format(\n                other))\n        self._scale = other\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('scale() can only be applied to graphs with '\n                            'numeric coordinates')\n        else:\n            self._scale = other\n    else:\n        return self._scale\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('Scale value must be a number')\n        if other!= 0.0:\n            for i, field in enumerate(self.field_names):\n                self.coords[field] *= other\n        else:\n            self.coords['x'] *= 1.0\n            self.coords['y'] *= 1.0\n            self.coords['z'] *= 1.0\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, (int, float)):\n        self._scale = other\n        return self\n    if not isinstance(other, collections.Iterable):\n        raise LenaValueError('Can only scale coordinates with numeric values.')\n    for coord_name in self.field_names:\n        if coord_name in other:\n            setattr(self, coord_name, other[coord_name])\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        self._scale = other\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        other = float(other)\n        if other!= 0:\n            raise LenaValueError('graph has unknown or zero scale')\n        self._scale = other\n    elif self._scale is not None:\n        return\n\n    self._scale = (self.coords[-1] - self.coords[0]) / self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._check_scale(other)\n        self._scale = other\n        self.coords = (self.coords[0], self.coords[1], self._scale)\n    else:\n        return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if not isinstance(other, (int, float)):\n            raise TypeError('scale must be a number')\n        if other < 0:\n            raise ValueError('scale must be a number >= 0')\n        self._scale = other\n    elif self._scale is None:\n        return self\n    else:\n        self._scale = other * self._scale\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, tuple):\n        if len(other) == self.dim:\n            self._scale = other\n        else:\n            raise LenaValueError(\"Unsupported dimension {}\".format(len(other)))\n    else:\n        self._scale = other._scale\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale. \n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point create from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point create from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bi", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.  This can be used to\n    create a graph with errors from a histogram bin will be \"left\" (default),\n    \"right\" and \"middle\".  This can be used to create a numeric graph.\n\n    Return the resulting graph.\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n    return mak", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. The number must be the same as\n    the dimension of the result. For a *make_value* above that would be\n    *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph.\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n    return hist_to_graph_with_context(hist, make_value=make_value,\n                       ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. This can be\n    used to create a graph with errors from a histogram bin will be\n    \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100)  # doctest: +ELLIPSIS\n    (100, 100)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must\n    be the same as the dimension of the result. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, it uses\n    the histogram scale.\n\n    :param hist:\n        The histogram.\n\n    :param make_value:\n        The function to set the value of a graph's point.\n\n        By", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. This can be used\n    to create a graph with error bars. This can be used to remove context\n    when creating a numeric graph.\n\n    Return the resulting graph.\n    \"\"\"\n    return histogram_to_graph(hist, make_value=make_value,\n                             get_coordinate=get_coordinate, field_names=field_names,\n                            ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram. If it is ``True``, it uses\n    the histogram scale.        \n\n    Return the resulting graph.         \n    \"\"\"\n    points = hist.GetPoints()\n    if scale is not None:\n        points = (points, scale)\n    if get_coordinate == \"left\":\n        return hist.Clone(GetCoordinate(points))\n    elif get_coordinate == \"right\":\n        return hist", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it would be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``True`` would be ``True``.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value* above\n    that would be ``True`` will be ``(\"x\", \"y_mean\", \"y_mean_error\")``.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100)\n    (100, 10, 10)\n\n    >>> make_value(100)\n    (100, 10, 10)\n\n    \"\"\"\n    if scale is Non", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be used to create a graph with errors from a histogram\n    bin that bins contain a named tuple with fields *mean*, *mean_error* and\n    a context one would be removed. For a *make_value* above that would be\n    use the histogram scale. If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point created from a histogram\n    bin will be.\n\n    It can be \"left\" (default), \"right\" and \"middle\".          \n\n    >>> make_value = lambda bin_: (bin_.mean, bi", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be used to create a graph\n    with errors from a histogram bin will be \"left\" (default), \"right\" and\n    \"middle\".  It can be \"left\" (default), \"right\" and \"middle\".\n\n    *field_names* set field names of the graph.\n\n    Everything must be the same as the dimension of the result.\n    For a *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: make_value(bin_)\n    >>> make"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    If it is ``True``, it uses the histogram scale. \n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point create from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point create from a histogram\n    bin will be. It can be \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bi", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*.  This can be used to\n    create a graph with errors from a histogram bin will be \"left\" (default),\n    \"right\" and \"middle\".  This can be used to create a numeric graph.\n\n    Return the resulting graph.\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n    return mak", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is ``True``, it\n    uses the histogram scale. If it is ``False``, it uses the histogram scale.\n\n    *field_names* set field names of the graph. The number must be the same as\n    the dimension of the result. For a *make_value* above that would be\n    *(\"x\", \"y_mean\", \"y_mean_error\")*.         \n\n    Return the resulting graph.\n    \"\"\"\n    if scale is None:\n        scale = hist.get_scale()\n    return hist_to_graph_with_context(hist, make_value=make_value,\n                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. This can be\n    used to create a graph with errors from a histogram bin will be\n    \"left\" (default), \"right\" and \"middle\".\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100)  # doctest: +ELLIPSIS\n    (100, 100)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be used to create a graph with\n    errors from a histogram bin will be \"left\" (default), \"right\" and \"middle\".\n\n    For a *field_names* set field names of the graph. The number must\n    be the same as the dimension of the result. For a *make_value*\n    above that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. If it is\n    ``True``, it uses the histogram scale. If it is ``False``, it uses\n    the histogram scale.\n\n    :param hist:\n        The histogram.\n\n    :param make_value:\n        The function to set the value of a graph's point.\n\n        By", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    Bydefault it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result. For a *make_value* above\n    that would be *(\"x\", \"y_mean\", \"y_mean_error\")*. This can be used\n    to create a graph with error bars. This can be used to remove context\n    when creating a numeric graph.\n\n    Return the resulting graph.\n    \"\"\"\n    return histogram_to_graph(hist, make_value=make_value,\n                             get_coordinate=get_coordinate, field_names=field_names,\n                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    *make_value* above that would be use the histogram scale.\n\n    For a *field_names* set field names of the graph. The number must be\n    the same as the dimension of the result.         \n\n    *scale* behaves like a normal histogram. If it is ``True``, it uses\n    the histogram scale.        \n\n    Return the resulting graph.         \n    \"\"\"\n    points = hist.GetPoints()\n    if scale is not None:\n        points = (points, scale)\n    if get_coordinate == \"left\":\n        return hist.Clone(GetCoordinate(points))\n    elif get_coordinate == \"right\":\n        return hist", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a\n    ``make_value` above that would be ``left``, it would be \"right\" and\n    \"middle\".\n\n    For a *make_value* above that would be ``True`` would be ``True``.\n\n    *field_names* set field names of the graph. The number must be the\n    same as the dimension of the result. For a *make_value* above\n    that would be ``True`` will be ``(\"x\", \"y_mean\", \"y_mean_error\")``.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value(100)\n    (100, 10, 10)\n\n    >>> make_value(100)\n    (100, 10, 10)\n\n    \"\"\"\n    if scale is Non", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars. For a *make_value*\n    above that would be used to create a graph with errors from a histogram\n    bin that bins contain a named tuple with fields *mean*, *mean_error* and\n    a context one would be removed. For a *make_value* above that would be\n    use the histogram scale. If it is ``True``, it uses the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    defines what the coordinate of a graph point created from a histogram\n    bin will be.\n\n    It can be \"left\" (default), \"right\" and \"middle\".          \n\n    >>> make_value = lambda bin_: (bin_.mean, bi", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n\n    By default it is bin content.\n\n    *make_value* accepts a single value (bin content) without context.\n    This option could be used to create graph's error bars.\n\n    For a *make_value* above that would be used to create a graph\n    with errors from a histogram bin will be \"left\" (default), \"right\" and\n    \"middle\".  It can be \"left\" (default), \"right\" and \"middle\".\n\n    *field_names* set field names of the graph.\n\n    Everything must be the same as the dimension of the result.\n    For a *make_value* above that would be use the histogram scale.\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error) * get_coordinate\n    >>> make_value = lambda bin_: make_value(bin_)\n    >>> make", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if vtype is not None and not issubclass(vtype, Candidate):\n        raise zope.interface.Invalid(\n            'Candidate must be a subclass of Candidate')\n\n    if not tentative:\n        if hasattr(candidate, 'providedBy'):\n            if not candidate.providedBy(iface):\n                raise zope.interface.Invalid(\n                    'Candidate must be a subclass of Candidate')\n\n        if hasattr(candidate, 'provides'):\n            for name, provided in candidate.provides.items():\n                if not provided.providedBy(iface):\n                    raise zope.interface.Invalid(\n                        'Candidate must be a subclass of Candidate')\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    try:\n        verifyObject(ICandidater, candidate)\n    except Invalid as e:\n        if not e.args:\n            if tentative:\n                return False\n            else:\n                raise\n        if vtype is not None:\n            verifyClass(iface, vtype)\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    try:\n        return _verify_element(iface, candidate, vtype, None, None)\n    except zope.interface.Invalid as err:\n        if tentative:\n            raise\n        _report_interface_error(err, iface)\n        return False\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return False\n\n    if vtype is None:\n        vtype = zope.schema.getType(candidate)\n    if vtype is None:\n        raise zope.interface.Invalid(\n            \"Candidate %r does not provide an interface\" % (candidate,))\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        raise zope.interface.Invalid(\n            \"Candidate must be of type Candidate: %s\" % candidate)\n    if not isinstance(iface, Interface):\n        raise zope.interface.Invalid(\n            \"Interface must be of type zope.interface.Interface: %s\" %\n            iface)\n\n    if not hasattr(candidate, 'providedBy'):\n        if not tentative:\n            raise zope.interface.Invalid(\n                \"Candidate does not provide %s\" % iface)\n        return False\n\n    provided = iface.providedBy(candidate)\n    if not provided:\n        raise zope.interface.Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, iface))\n\n    if not provided.isOrExtends(iface):\n        raise zope.interface.Invalid(\n            \"Candidate %s cannot provide %s\" % (candidate, iface))\n\n ", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not candidate.providedBy(iface):\n        raise zope.interface.Invalid(\n            \"Candidate '%s' does not provide '%s'\" % (candidate, iface))\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide callable object\" % candidate)\n    if vtype is not None:\n        if not hasattr(candidate, vtype):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide %s object\" % (candidate, vtype))\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    verifyObject(IContent, candidate)\n    verifyObject(IType, iface)\n\n    if vtype and not candidate.providedBy(vtype):\n        raise Invalid(_(u\"Candidate is not a subclass of %s\") % vtype)\n\n    if not tentative and vtype and not candidate.providedBy(vtype):\n        raise Invalid(_(u\"Candidate is not an implementation of %s\") % vtype)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Check that the candidate claims it provides the interface\n    providedBy(candidate, iface.providedBy)\n\n    # Make sure the candidate has the proper interface\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate %s does not provide %r\" % (candidate, iface))\n\n    # Make sure the candidate declares all the necessary methods\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"Candidate %s must declare a callable method\" % candidate)\n\n    # Make sure the candidate defines all the necessary attributes\n    if vtype is None:\n        verifyObject(IContent, candidate)\n    elif vtype == IContent:\n        verifyObject(IInterface, candidate)\n    else:\n        verifyObject(IContentType, candidate)\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = candidate.providedBy\n    if not isinstance(candidate, vtype):\n        raise Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, vtype))\n    if tentative and not iface.providedBy(candidate):\n        raise Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, iface))\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a providedBy method\")\n    if vtype is not None:\n        verifyObject(vtype, candidate)\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n    if vtype is not None and not issubclass(vtype, Candidate):\n        raise zope.interface.Invalid(\n            'Candidate must be a subclass of Candidate')\n\n    if not tentative:\n        if hasattr(candidate, 'providedBy'):\n            if not candidate.providedBy(iface):\n                raise zope.interface.Invalid(\n                    'Candidate must be a subclass of Candidate')\n\n        if hasattr(candidate, 'provides'):\n            for name, provided in candidate.provides.items():\n                if not provided.providedBy(iface):\n                    raise zope.interface.Invalid(\n                        'Candidate must be a subclass of Candidate')\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    try:\n        verifyObject(ICandidater, candidate)\n    except Invalid as e:\n        if not e.args:\n            if tentative:\n                return False\n            else:\n                raise\n        if vtype is not None:\n            verifyClass(iface, vtype)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    try:\n        return _verify_element(iface, candidate, vtype, None, None)\n    except zope.interface.Invalid as err:\n        if tentative:\n            raise\n        _report_interface_error(err, iface)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate):\n        return False\n\n    if vtype is None:\n        vtype = zope.schema.getType(candidate)\n    if vtype is None:\n        raise zope.interface.Invalid(\n            \"Candidate %r does not provide an interface\" % (candidate,))\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        raise zope.interface.Invalid(\n            \"Candidate must be of type Candidate: %s\" % candidate)\n    if not isinstance(iface, Interface):\n        raise zope.interface.Invalid(\n            \"Interface must be of type zope.interface.Interface: %s\" %\n            iface)\n\n    if not hasattr(candidate, 'providedBy'):\n        if not tentative:\n            raise zope.interface.Invalid(\n                \"Candidate does not provide %s\" % iface)\n        return False\n\n    provided = iface.providedBy(candidate)\n    if not provided:\n        raise zope.interface.Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, iface))\n\n    if not provided.isOrExtends(iface):\n        raise zope.interface.Invalid(\n            \"Candidate %s cannot provide %s\" % (candidate, iface))\n\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not candidate.providedBy(iface):\n        raise zope.interface.Invalid(\n            \"Candidate '%s' does not provide '%s'\" % (candidate, iface))\n    if not tentative:\n        if not hasattr(candidate, '__call__'):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide callable object\" % candidate)\n    if vtype is not None:\n        if not hasattr(candidate, vtype):\n            raise zope.interface.Invalid(\n                \"Candidate '%s' does not provide %s object\" % (candidate, vtype))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    verifyObject(IContent, candidate)\n    verifyObject(IType, iface)\n\n    if vtype and not candidate.providedBy(vtype):\n        raise Invalid(_(u\"Candidate is not a subclass of %s\") % vtype)\n\n    if not tentative and vtype and not candidate.providedBy(vtype):\n        raise Invalid(_(u\"Candidate is not an implementation of %s\") % vtype)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # Check that the candidate claims it provides the interface\n    providedBy(candidate, iface.providedBy)\n\n    # Make sure the candidate has the proper interface\n    if not iface.providedBy(candidate):\n        raise zope.interface.Invalid(\n            \"Candidate %s does not provide %r\" % (candidate, iface))\n\n    # Make sure the candidate declares all the necessary methods\n    if not hasattr(candidate, '__call__'):\n        raise zope.interface.Invalid(\n            \"Candidate %s must declare a callable method\" % candidate)\n\n    # Make sure the candidate defines all the necessary attributes\n    if vtype is None:\n        verifyObject(IContent, candidate)\n    elif vtype == IContent:\n        verifyObject(IInterface, candidate)\n    else:\n        verifyObject(IContentType, candidate)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = candidate.providedBy\n    if not isinstance(candidate, vtype):\n        raise Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, vtype))\n    if tentative and not iface.providedBy(candidate):\n        raise Invalid(\n            \"Candidate %s does not provide %s\" % (candidate, iface))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if iface.providedBy(candidate):\n        return True\n    if not tentative and not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate must provide a providedBy method\")\n    if vtype is not None:\n        verifyObject(vtype, candidate)\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = candidate.__providedBy__\n    except AttributeError:\n        # Candidate has no __providedBy__ attribute. Skip checking.\n        return False\n    if not providedBy:\n        return True\n    if tentative:\n        if not providedBy.verify(iface):\n            raise zope.interface.Invalid(\n                'Candidate class does not provide %s' % iface)\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        verifyObject(iface, candidate)\n    except Invalid as e:\n        if e.args[0]!= ('class has no attribute'+ iface.__name__ + '()'):\n            raise\n        return False\n    else:\n        return True\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        return _verify(iface, candidate, None, None)\n    except zope.interface.Invalid as e:\n        if e.args and e.args[0] == zope.exc.Invalid:\n            # If there is a problem with the candidate, we report the\n            # message because the interface does not provide the method.\n            raise zope.interface.Invalid(\n                \"Candidate does not provide '%s' (%s)\" % (e.args[0], e.args[1])\n            )\n        else:\n            raise\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        raise TypeError(\n            'candidate must be of type Candidate, not %s' % candidate.__class__.__name__)\n    if not isinstance(iface, InterfaceClass):\n        raise TypeError('iface must be of type InterfaceClass, not %s' % iface.__class__.__name__)\n\n    if not hasattr(candidate, 'providedBy'):\n        # Check to make sure the candidate is actually a provider\n        try:\n            providedBy = iface.providedBy(candidate)\n        except TypeError:\n            raise TypeError('candidate.providedBy must be of type %s' % iface.__class__.__name__)\n        if not providedBy:\n            raise ValueError('candidate.providedBy must not be None')\n\n    if not hasattr(candidate, 'provides'):\n        # Check to make sure the candidate is actually an interface\n        try:\n            provide", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = candidate.__providedBy__\n    except AttributeError:\n        return _verify(iface, candidate, True, VisibilityLevel.NONE)\n    if not providedBy:\n        return _verify(iface, candidate, False, VisibilityLevel.NONE)\n    if tentative:\n        return True\n    if not hasattr(providedBy, 'validate'):\n        return True\n    if not providedBy.validate(candidate):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not candidate.providedBy(iface):\n        msg = \"%s does not provide %s\" % (iface, candidate)\n        raise zope.interface.Invalid(msg, candidate)\n    if not hasattr(candidate, '__call__'):\n        msg = \"%s does not call %s\" % (iface, candidate)\n        raise zope.interface.Invalid(msg, candidate)\n    if tentative:\n        return True\n    if hasattr(candidate, '__implements__'):\n        verifyObject(iface.__implements__[0], candidate, tentative=True)\n    if hasattr(candidate, '__provides__'):\n        verifyObject(iface.__provides__[0], candidate, tentative=False)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, Candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        raise zope.interface.Invalid(\n            \"Candidate has no __providedBy__ attribute\")\n    if tentative:\n        verifyClass(iface, NonCandidate)\n        if iface.providedBy(candidate):\n            raise zope.interface.Invalid(\n                \"Candidate is already provided by %s\" % iface)\n        return True\n    verifyClass(iface, NonCandidate)\n    if not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate has no providedBy attribute\")\n    verifyClass(iface, candidate)\n    if not candidate.providedBy(iface):\n        raise zope.interface.Invalid(\n            \"Candidate is not provided by %s\" % iface)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not _verify(iface, candidate, tentative, IContextAware):\n        return False\n\n    providedBy = getattr(candidate, 'providedBy', None)\n    if providedBy is None:\n        return False\n\n    if not IContextAware.providedBy(providedBy):\n        raise Invalid(\n            u'{0} does not provide IContextAware interface'.format(\n                candidate))\n\n    if not providedBy.isOrExtends(iface):\n        raise Invalid(\n            u'Candidate {0} does not extend IContextAware interface'.format(\n                candidate))\n\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        # No candidate provides the interface.\n        return True\n\n    # Make sure the candidate's class declares that it `implements` the interface, or\n    # the candidate itself declares that it `provides` the interface.\n    if hasattr(candidate, 'providedBy'):\n        if not candidate.providedBy(iface):\n            if not tentative:\n                raise zope.interface.Invalid(\n                    'Candidate \"%s\" does not provide \"%s\".' % (candidate, iface))\n            return False\n        return True\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, Candidate)\n    verifyProvides(candidate, iface)\n    if not hasattr(candidate, 'providedBy'):\n        # The candidate doesn't provide the interface, but the class did provide\n        # that the interface is the one that provides the interface\n        return False\n\n    # The candidate class is the one that defines the interface, and it's\n    # provides that it implements the interface\n    return _verify(iface, candidate, tentative, Candidate)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = candidate.__providedBy__\n    except AttributeError:\n        # Candidate has no __providedBy__ attribute. Skip checking.\n        return False\n    if not providedBy:\n        return True\n    if tentative:\n        if not providedBy.verify(iface):\n            raise zope.interface.Invalid(\n                'Candidate class does not provide %s' % iface)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        verifyObject(iface, candidate)\n    except Invalid as e:\n        if e.args[0]!= ('class has no attribute'+ iface.__name__ + '()'):\n            raise\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        return _verify(iface, candidate, None, None)\n    except zope.interface.Invalid as e:\n        if e.args and e.args[0] == zope.exc.Invalid:\n            # If there is a problem with the candidate, we report the\n            # message because the interface does not provide the method.\n            raise zope.interface.Invalid(\n                \"Candidate does not provide '%s' (%s)\" % (e.args[0], e.args[1])\n            )\n        else:\n            raise\n", "is_pass": true, "return_code": 0}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Candidate):\n        raise TypeError(\n            'candidate must be of type Candidate, not %s' % candidate.__class__.__name__)\n    if not isinstance(iface, InterfaceClass):\n        raise TypeError('iface must be of type InterfaceClass, not %s' % iface.__class__.__name__)\n\n    if not hasattr(candidate, 'providedBy'):\n        # Check to make sure the candidate is actually a provider\n        try:\n            providedBy = iface.providedBy(candidate)\n        except TypeError:\n            raise TypeError('candidate.providedBy must be of type %s' % iface.__class__.__name__)\n        if not providedBy:\n            raise ValueError('candidate.providedBy must not be None')\n\n    if not hasattr(candidate, 'provides'):\n        # Check to make sure the candidate is actually an interface\n        try:\n            provide", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        providedBy = candidate.__providedBy__\n    except AttributeError:\n        return _verify(iface, candidate, True, VisibilityLevel.NONE)\n    if not providedBy:\n        return _verify(iface, candidate, False, VisibilityLevel.NONE)\n    if tentative:\n        return True\n    if not hasattr(providedBy, 'validate'):\n        return True\n    if not providedBy.validate(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not candidate.providedBy(iface):\n        msg = \"%s does not provide %s\" % (iface, candidate)\n        raise zope.interface.Invalid(msg, candidate)\n    if not hasattr(candidate, '__call__'):\n        msg = \"%s does not call %s\" % (iface, candidate)\n        raise zope.interface.Invalid(msg, candidate)\n    if tentative:\n        return True\n    if hasattr(candidate, '__implements__'):\n        verifyObject(iface.__implements__[0], candidate, tentative=True)\n    if hasattr(candidate, '__provides__'):\n        verifyObject(iface.__provides__[0], candidate, tentative=False)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, Candidate)\n    if not hasattr(candidate, '__providedBy__'):\n        raise zope.interface.Invalid(\n            \"Candidate has no __providedBy__ attribute\")\n    if tentative:\n        verifyClass(iface, NonCandidate)\n        if iface.providedBy(candidate):\n            raise zope.interface.Invalid(\n                \"Candidate is already provided by %s\" % iface)\n        return True\n    verifyClass(iface, NonCandidate)\n    if not hasattr(candidate, 'providedBy'):\n        raise zope.interface.Invalid(\n            \"Candidate has no providedBy attribute\")\n    verifyClass(iface, candidate)\n    if not candidate.providedBy(iface):\n        raise zope.interface.Invalid(\n            \"Candidate is not provided by %s\" % iface)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not _verify(iface, candidate, tentative, IContextAware):\n        return False\n\n    providedBy = getattr(candidate, 'providedBy', None)\n    if providedBy is None:\n        return False\n\n    if not IContextAware.providedBy(providedBy):\n        raise Invalid(\n            u'{0} does not provide IContextAware interface'.format(\n                candidate))\n\n    if not providedBy.isOrExtends(iface):\n        raise Invalid(\n            u'Candidate {0} does not extend IContextAware interface'.format(\n                candidate))\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        # No candidate provides the interface.\n        return True\n\n    # Make sure the candidate's class declares that it `implements` the interface, or\n    # the candidate itself declares that it `provides` the interface.\n    if hasattr(candidate, 'providedBy'):\n        if not candidate.providedBy(iface):\n            if not tentative:\n                raise zope.interface.Invalid(\n                    'Candidate \"%s\" does not provide \"%s\".' % (candidate, iface))\n            return False\n        return True\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, Candidate)\n    verifyProvides(candidate, iface)\n    if not hasattr(candidate, 'providedBy'):\n        # The candidate doesn't provide the interface, but the class did provide\n        # that the interface is the one that provides the interface\n        return False\n\n    # The candidate class is the one that defines the interface, and it's\n    # provides that it implements the interface\n    return _verify(iface, candidate, tentative, Candidate)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, tentative)\n    verifyClassContent(candidate, iface, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, [], tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate)\n    verifyObject(iface, candidate.__class__)\n    if candidate.__module__!= iface.__module__:\n        if tentative:\n            return\n        raise AssertionError(\n            \"%s!= %s (%s!= %s)\" % (candidate, iface, candidate.__module__, iface.__module__)\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, tentative)\n    verifyClassContent(candidate, iface, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassContent(iface, candidate, [], tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyClassCandidate(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate)\n    verifyObject(iface, candidate.__class__)\n    if candidate.__module__!= iface.__module__:\n        if tentative:\n            return\n        raise AssertionError(\n            \"%s!= %s (%s!= %s)\" % (candidate, iface, candidate.__module__, iface.__module__)\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            if base.__metaclass__ not in explicit_mc:\n                return base.__metaclass__\n        elif hasattr(base, '__dict__'):\n            if base.__dict__ not in explicit_mc:\n                return base.__dict__\n        explicit_mc.append(base.__metaclass__)\n\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if bases is None:\n        return type\n\n    if explicit_mc is not None:\n        assert issubclass(bases, explicit_mc)\n        return explicit_mc\n\n    if len(bases) == 1:\n        # Special case for metaclass\n        return type\n    else:\n        metaclass = min(bases)\n        while issubclass(metaclass, type):\n            metaclass = metaclass.__bases__[0]\n\n        return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n        elif issubclass(base, type) and base in explicit_mc:\n            return base\n        elif issubclass(base, object):\n            return type\n        elif hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n        elif issubclass(base, (type, types.FunctionType)):\n            explicit_mc.append(base)\n            return determineMetaclass(base.__bases__, explicit_mc)\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n\n        if issubclass(base, type) and base in explicit_mc:\n            return base\n\n        if hasattr(base, \"__metaclass__\"):\n            if explicit_mc:\n                return base.__metaclass__\n            else:\n                explicit_mc.append(base.__metaclass__)\n                return determineMetaclass(base.__metaclass__, explicit_mc)\n\n    return None\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            metaclasses.append(base)\n        elif issubclass(base, type) and base in explicit_mc:\n            metaclasses.append(explicit_mc.append(base))\n        elif issubclass(base, types.MethodType):\n            metaclasses.append(base)\n        elif issubclass(base, type) and base in explicit_mc:\n            metaclasses.append(explicit_mc.append(base))\n        elif issubclass(base, types.ClassType):\n            metaclasses.append(base)\n    return min(metaclasses)\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, minimalBases):\n            explicit_mc.append(base)\n            continue\n\n        if hasattr(base, \"__metaclass__\"):\n            if base.__metaclass__ not in explicit_mc:\n                explicit_mc.append(base.__metaclass__)\n\n    return explicit_mc[0] if len(explicit_mc) == 1 else None\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, minimalBases):\n            return base\n\n        if base not in explicit_mc:\n            explicit_mc.append(base)\n\n            if hasattr(base, '__metaclass__'):\n                if base.__metaclass__ is not minimalBases:\n                    return determineMetaclass(base.__metaclass__, explicit_mc)\n\n    return explicit_mc[0]\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    if explicit_mc == []:\n        return type\n    mc = explicit_mc[0]\n    while mc in bases:\n        mc = minimalBases(mc)\n    return mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = bases\n    metaclass = None\n    for base in bases:\n        if (issubclass(base, Options) and\n            base not in explicit_mc and\n            not inspect.isabstract(base)):\n            metaclass = base\n            break\n    return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, minimalBases):\n            return base\n        if base not in explicit_mc:\n            explicit_mc.append(base)\n            continue\n        for subclass in base.__subclasses__():\n            if issubclass(subclass, minimalBases):\n                return subclass\n            if subclass not in explicit_mc:\n                explicit_mc.append(subclass)\n                continue\n            break\n    return type\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            if base.__metaclass__ not in explicit_mc:\n                return base.__metaclass__\n        elif hasattr(base, '__dict__'):\n            if base.__dict__ not in explicit_mc:\n                return base.__dict__\n        explicit_mc.append(base.__metaclass__)\n\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if bases is None:\n        return type\n\n    if explicit_mc is not None:\n        assert issubclass(bases, explicit_mc)\n        return explicit_mc\n\n    if len(bases) == 1:\n        # Special case for metaclass\n        return type\n    else:\n        metaclass = min(bases)\n        while issubclass(metaclass, type):\n            metaclass = metaclass.__bases__[0]\n\n        return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n        elif issubclass(base, type) and base in explicit_mc:\n            return base\n        elif issubclass(base, object):\n            return type\n        elif hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n        elif issubclass(base, (type, types.FunctionType)):\n            explicit_mc.append(base)\n            return determineMetaclass(base.__bases__, explicit_mc)\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            return base\n\n        if issubclass(base, type) and base in explicit_mc:\n            return base\n\n        if hasattr(base, \"__metaclass__\"):\n            if explicit_mc:\n                return base.__metaclass__\n            else:\n                explicit_mc.append(base.__metaclass__)\n                return determineMetaclass(base.__metaclass__, explicit_mc)\n\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    metaclasses = []\n    for base in bases:\n        if issubclass(base, type) and base not in explicit_mc:\n            metaclasses.append(base)\n        elif issubclass(base, type) and base in explicit_mc:\n            metaclasses.append(explicit_mc.append(base))\n        elif issubclass(base, types.MethodType):\n            metaclasses.append(base)\n        elif issubclass(base, type) and base in explicit_mc:\n            metaclasses.append(explicit_mc.append(base))\n        elif issubclass(base, types.ClassType):\n            metaclasses.append(base)\n    return min(metaclasses)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, minimalBases):\n            explicit_mc.append(base)\n            continue\n\n        if hasattr(base, \"__metaclass__\"):\n            if base.__metaclass__ not in explicit_mc:\n                explicit_mc.append(base.__metaclass__)\n\n    return explicit_mc[0] if len(explicit_mc) == 1 else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if issubclass(base, minimalBases):\n            return base\n\n        if base not in explicit_mc:\n            explicit_mc.append(base)\n\n            if hasattr(base, '__metaclass__'):\n                if base.__metaclass__ is not minimalBases:\n                    return determineMetaclass(base.__metaclass__, explicit_mc)\n\n    return explicit_mc[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = minimalBases(bases)\n    if explicit_mc == []:\n        return type\n    mc = explicit_mc[0]\n    while mc in bases:\n        mc = minimalBases(mc)\n    return mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = bases\n    metaclass = None\n    for base in bases:\n        if (issubclass(base, Options) and\n            base not in explicit_mc and\n            not inspect.isabstract(base)):\n            metaclass = base\n            break\n    return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, minimalBases):\n            return base\n        if base not in explicit_mc:\n            explicit_mc.append(base)\n            continue\n        for subclass in base.__subclasses__():\n            if issubclass(subclass, minimalBases):\n                return subclass\n            if subclass not in explicit_mc:\n                explicit_mc.append(subclass)\n                continue\n            break\n    return type\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    if value is not default:\n        self.__dirty = True\n    return value\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self.__default\n    return super(DefaultGetDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is self.__marker:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    return value\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is default:\n        if default is not self.__marker:\n            return default\n        raise KeyError(key)\n    return value\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self).__new__(self.__class__)\n    return super(_CaseInsensitiveDict, self).pop(key.lower(), default)\n", "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    dict.__delitem__(self, key)\n    return value\n", "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        self.__dirty = True\n    elif default is self.__marker:\n        if len(self) == 0:\n            raise KeyError('pop from empty DotDict')\n        return self[-1]\n    else:\n        if default is not self.__marker:\n            return default\n        raise KeyError('Key not found: %r' % key)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self)()\n    return super(MultiDict, self).pop(key, default)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = super(DotDict, self).pop(key, default)\n    if value is not default:\n        self.__dirty = True\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self.__default\n    return super(DefaultGetDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is self.__marker:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkerDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    value = dict.pop(self, key, default)\n    if value is default:\n        if default is not self.__marker:\n            return default\n        raise KeyError(key)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self).__new__(self.__class__)\n    return super(_CaseInsensitiveDict, self).pop(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key not in self:\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    value = dict.pop(self, key)\n    dict.__delitem__(self, key)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        super(DotDict, self).pop(key)\n        self.__dirty = True\n    elif default is self.__marker:\n        if len(self) == 0:\n            raise KeyError('pop from empty DotDict')\n        return self[-1]\n    else:\n        if default is not self.__marker:\n            return default\n        raise KeyError('Key not found: %r' % key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    return super(MarkDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = type(self)()\n    return super(MultiDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    if self.__counter > 0:\n        self.__counter -= 1\n        return (self.__keys[self.__keys.index(min(self.__keys))],\n                self.__values.pop())\n    raise KeyError('pop from an empty collection')\n", "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.FastEntryNotFound(\n            \"Cannot pop key {} from the FIFO because it is \"\n            \"empty!\".format(repr(e))\n        )\n", "def popitem(self):\n    try:\n        key = list(self.__counter.keys())[0]\n        return (key, self.__counter[key])\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    if self.__counter == 0:\n        raise KeyError('popitem(): dict is already empty')\n    key = self.__keys[0]\n    value = self.__values[0]\n    self.__keys = self.__keys[1:]\n    self.__values = self.__values[1:]\n    self.__counter -= 1\n    return (key, value)\n", "def popitem(self):\n    if self.__counter > 0:\n        (key, value) = self.__counter, self.__store[-1]\n        self.__counter -= 1\n        return (key, value)\n    raise KeyError('pop from an empty collection')\n", "def popitem(self):\n    if not self:\n        raise KeyError('popitem(): dictionary is empty')\n\n    key = next(iter(self))\n    value = dict.pop(self, key)\n    self.__counter -= 1\n    return (key, value)\n", "def popitem(self):\n    if not len(self):\n        raise KeyError('popitem(): There are no items to remove.')\n    key, value = self.__counter.popitem()\n    return (key, value)\n", "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): dictionary is empty\")\n\n    key = next(iter(self))\n    result = dict.pop(self, key)\n    self.__counter -= 1\n    return key, result\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        self.__counter = 0\n        raise KeyError\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    if self.__counter > 0:\n        self.__counter -= 1\n        return (self.__keys[self.__keys.index(min(self.__keys))],\n                self.__values.pop())\n    raise KeyError('pop from an empty collection')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.popitem()\n    except KeyError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.FastEntryNotFound(\n            \"Cannot pop key {} from the FIFO because it is \"\n            \"empty!\".format(repr(e))\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = list(self.__counter.keys())[0]\n        return (key, self.__counter[key])\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if self.__counter == 0:\n        raise KeyError('popitem(): dict is already empty')\n    key = self.__keys[0]\n    value = self.__values[0]\n    self.__keys = self.__keys[1:]\n    self.__values = self.__values[1:]\n    self.__counter -= 1\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if self.__counter > 0:\n        (key, value) = self.__counter, self.__store[-1]\n        self.__counter -= 1\n        return (key, value)\n    raise KeyError('pop from an empty collection')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError('popitem(): dictionary is empty')\n\n    key = next(iter(self))\n    value = dict.pop(self, key)\n    self.__counter -= 1\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not len(self):\n        raise KeyError('popitem(): There are no items to remove.')\n    key, value = self.__counter.popitem()\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError(\"popitem(): dictionary is empty\")\n\n    key = next(iter(self))\n    result = dict.pop(self, key)\n    self.__counter -= 1\n    return key, result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n        value = self[key]\n        del self[key]\n        return key, value\n    except StopIteration:\n        self.__counter = 0\n        raise KeyError\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is already empty')\n", "def popitem(self):\n    for key in self.__order:\n        value = self[key]\n        self.__order.remove(key)\n        return key, value\n    raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n    else:\n        value = self[key]\n        self.__order.remove(key)\n        return (key, value)\n", "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n        return self.__order.pop(key)\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "def popitem(self):\n    if not self.__order:\n        raise KeyError('popitem(): popping from an empty ordered dict')\n\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.popleft()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "def popitem(self):\n    if not len(self.__order):\n        raise KeyError('popitem(): OrderedDict is already empty.')\n    return self.__order.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    for key in self.__order:\n        value = self[key]\n        self.__order.remove(key)\n        return key, value\n    raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n    else:\n        value = self[key]\n        self.__order.remove(key)\n        return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = list(self.__order)[0]\n        return self.__order.pop(key)\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self.__order:\n        raise KeyError('popitem(): popping from an empty ordered dict')\n\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popleft()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not len(self.__order):\n        raise KeyError('popitem(): OrderedDict is already empty.')\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.NotFound(\n            'No such item in this hash table - {}'.format(e))\n", "def popitem(self):\n    return self.__order.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key = self.__order.pop()\n    return (key, self[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)[0]\n    except KeyError as e:\n        raise exceptions.NotFound(\n            'No such item in this hash table - {}'.format(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    try:\n        key = random.choice(list(self))\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return key, value\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.BadRequestKeyError(str(e))\n", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(str(e))\n", "def popitem(self):\n    return self._db.spop(self.key)\n", "def popitem(self):\n    return super(Documents, self).popitem()[0]\n", "def popitem(self):\n    return dict.popitem(self)\n", "def popitem(self):\n    try:\n        key = random.choice(self)\n        value = dict.pop(self, key)\n        return key, value\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self))\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    else:\n        value = dict.pop(self, key)\n        return key, value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.BadRequestKeyError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError as e:\n        raise exceptions.NotFound(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._db.spop(self.key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return super(Documents, self).popitem()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(self)\n        value = dict.pop(self, key)\n        return key, value\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    in_regex = r'(?P<{param}>{in_})'.format(\n        param=self._param,\n        in_=self._in_obj.in_regex,\n    )\n    return re.compile(in_regex)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.regex(), flags=re.IGNORECASE | re.UNICODE)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern, re.UNICODE | re.IGNORECASE)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        ''.join(\n            (\n                r'(?P<{name}>{escape})'\n                if self._escape_char\n                else r'(?P<{name}>{escape}|{quote})'\n            )\n            for name, escape, quote in self._in_obj\n        )\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        '(?P<{in_param_name}>{in_param_regex})'.format(\n            in_param_name=self._in_obj.get_param_name(),\n            in_param_regex=self._in_obj.get_regex(),\n        ),\n        re.IGNORECASE | self._escape_char,\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(r\"\"\"(?P<{in_param}>{in_regex})\"\"\".format(\n        in_param=self._in_obj.param.regex_name,\n        in_regex=self._in_obj.regex_name,\n    ), re.VERBOSE)\n", "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(\"(?i)\" + self._escape_char + \"$\")\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern if self._in_obj else '')\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        ''.join([self._escape_char + x if x.isalnum() else x for x in self._in_obj])\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern, re.UNICODE | re.VERBOSE)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = r'(?P<{param}>{in_})'.format(\n        param=self._param,\n        in_=self._in_obj.in_regex,\n    )\n    return re.compile(in_regex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.regex(), flags=re.IGNORECASE | re.UNICODE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern, re.UNICODE | re.IGNORECASE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        ''.join(\n            (\n                r'(?P<{name}>{escape})'\n                if self._escape_char\n                else r'(?P<{name}>{escape}|{quote})'\n            )\n            for name, escape, quote in self._in_obj\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        '(?P<{in_param_name}>{in_param_regex})'.format(\n            in_param_name=self._in_obj.get_param_name(),\n            in_param_regex=self._in_obj.get_regex(),\n        ),\n        re.IGNORECASE | self._escape_char,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(r\"\"\"(?P<{in_param}>{in_regex})\"\"\".format(\n        in_param=self._in_obj.param.regex_name,\n        in_regex=self._in_obj.regex_name,\n    ), re.VERBOSE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(\"(?i)\" + self._escape_char + \"$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern if self._in_obj else '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        ''.join([self._escape_char + x if x.isalnum() else x for x in self._in_obj])\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_obj.pattern, re.UNICODE | re.VERBOSE)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        input_char=self._in_char, output_char=self._out_char, escape_char=self._escape_char, expand_tuples=self._expand_tuples\n    )\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex,\n                                  self._expand_tuples, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._in_style, self._out_obj, self._out_style, escape_char=self._escape_char)\n    converter.add_parameters(self._in_regex)\n    converter.add_parameters(self._expand_tuples)\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._in_obj = self._in_obj\n    converter._in_regex = self._in_regex\n    converter._out_obj = self._out_obj\n    converter._out_regex = self._out_regex\n    converter._escape_char = self._escape_char\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_char(\"'\")\n    converter.add_char(\"\\\\\")\n    converter.add_char(\"-\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"|\")\n    converter.add_char(\"\\\"\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\\\\")\n    converter.add_char(\"[\")\n    converter.add_char(\"]\")\n    converter.add_char(\"(\")\n    converter.add_char(\")\")\n    converter.add_char(\"--\")\n    converter.add_char(\"'\")\n    converter.add_char(\"\\\"\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"|\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"\\u200c\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"'\")\n    converter.add_char(\"\\u200d\")\n    converter.add_char(\")\")\n    converter.add_char(", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        escape_char=self._escape_char,\n        expand_tuples=self._expand_tuples,\n        escape_char_regex=self._escape_char_regex,\n        output_style=self._out_style)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        in_param=self._in_param,\n        out_param=self._out_param,\n        expand_tuples=self._expand_tuples,\n        escape_char=self._escape_char,\n    )\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_type(_constants.COMPILED_TYPE.STRING, None)\n    converter.add_type(_constants.COMPILED_TYPE.OBJECT, None)\n    converter.add_parameter('[?]', '[?]')\n    converter.add_parameter('{?}', '{?}')\n    converter.add_parameter('{#?}', '{#?}')\n    converter.add_parameter('|', '|')\n    converter.add_parameter('\\\\', '\\\\')\n    converter.add_parameter('/', '/')\n    converter.add_parameter(':', ':')\n    converter.add_parameter('\\\"', '\\\"')\n    converter.add_parameter('*', '*')\n    converter.add_parameter('?', '?')\n    converter.add_parameter('\\n', '\\n')\n    converter.add_parameter('\\x00', '\\x00')\n    converter.add_parameter('\\t', '\\t')\n    converter.add_parameter('\\v', '\\v')\n    converter.add_parameter('\\r', '\\r')\n    converter.add_parameter('\\f', '\\f')\n    converter.add_parameter('"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        input_char=self._in_char, output_char=self._out_char, escape_char=self._escape_char, expand_tuples=self._expand_tuples\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex,\n                                  self._expand_tuples, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self._in_obj, self._in_style, self._out_obj, self._out_style, escape_char=self._escape_char)\n    converter.add_parameters(self._in_regex)\n    converter.add_parameters(self._expand_tuples)\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._in_obj = self._in_obj\n    converter._in_regex = self._in_regex\n    converter._out_obj = self._out_obj\n    converter._out_regex = self._out_regex\n    converter._escape_char = self._escape_char\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_char(\"'\")\n    converter.add_char(\"\\\\\")\n    converter.add_char(\"-\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"|\")\n    converter.add_char(\"\\\"\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\\\\")\n    converter.add_char(\"[\")\n    converter.add_char(\"]\")\n    converter.add_char(\"(\")\n    converter.add_char(\")\")\n    converter.add_char(\"--\")\n    converter.add_char(\"'\")\n    converter.add_char(\"\\\"\")\n    converter.add_char(\"\\'\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"|\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"\\t\")\n    converter.add_char(\"\\u200c\")\n    converter.add_char(\"\\n\")\n    converter.add_char(\"'\")\n    converter.add_char(\"\\u200d\")\n    converter.add_char(\")\")\n    converter.add_char(", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_style, self._out_style, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        escape_char=self._escape_char,\n        expand_tuples=self._expand_tuples,\n        escape_char_regex=self._escape_char_regex,\n        output_style=self._out_style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(\n        in_param=self._in_param,\n        out_param=self._out_param,\n        expand_tuples=self._expand_tuples,\n        escape_char=self._escape_char,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_type(_constants.COMPILED_TYPE.STRING, None)\n    converter.add_type(_constants.COMPILED_TYPE.OBJECT, None)\n    converter.add_parameter('[?]', '[?]')\n    converter.add_parameter('{?}', '{?}')\n    converter.add_parameter('{#?}', '{#?}')\n    converter.add_parameter('|', '|')\n    converter.add_parameter('\\\\', '\\\\')\n    converter.add_parameter('/', '/')\n    converter.add_parameter(':', ':')\n    converter.add_parameter('\\\"', '\\\"')\n    converter.add_parameter('*', '*')\n    converter.add_parameter('?', '?')\n    converter.add_parameter('\\n', '\\n')\n    converter.add_parameter('\\x00', '\\x00')\n    converter.add_parameter('\\t', '\\t')\n    converter.add_parameter('\\v', '\\v')\n    converter.add_parameter('\\r', '\\r')\n    converter.add_parameter('\\f', '\\f')\n    converter.add_parameter('", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    dt_str = dt_str.replace(self._sep, 'T')\n\n    if dt_str.endswith(self._sep):\n        dt_str = dt_str[:-1]\n\n    return datetime.datetime.strptime(dt_str, self._fmt).replace(microsecond=0)\n", "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed:\n        return parsed\n    parsed = self._parse_isotime(dt_str)\n    if parsed:\n        return parsed\n    raise ValueError('Not a valid ISO-8601 date/time')\n", "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed:\n        return parsed\n\n    parsed = self._parse_isotime(dt_str)\n    if parsed:\n        return parsed\n\n    raise ValueError(\"Could not parse datetime '{}'\".format(dt_str))\n", "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        return self._parse_isodate(dt_str)\n    else:\n        raise ValueError('Input must be a datetime or string')\n", "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise TypeError('dt_str must be a string, not %r' % dt_str.__class__.__name__)\n    dt_str = dt_str.rstrip(self._sep)\n    if self._parse_isodate.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%d').replace(microsecond=0)\n    if self._parse_isotime.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f').replace(microsecond=0, second=0, minute=0, hour=0)\n    if self._parse_isoweek.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f').replace(microsecond=0, second=0, minute=0, hour=0, day=0, weekday=1)\n    if self._parse_isoday.match(d", "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE-TIME: SOFT-HYPHEN DATE:\n    #                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ", "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is not None:\n        parsed = parsed.replace(microsecond=0)\n    return parsed\n", "def isoparse(self, dt_str):\n    return isoparse(dt_str)\n", "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is None:\n        return None\n    if parsed.microsecond:\n        raise ValueError(\"fractional component not supported\")\n    return parsed\n", "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if not dt_str:\n        return None\n\n    dt_str = dt_str.replace(self._sep, 'T')\n\n    if dt_str.endswith(self._sep):\n        dt_str = dt_str[:-1]\n\n    return datetime.datetime.strptime(dt_str, self._fmt).replace(microsecond=0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed:\n        return parsed\n    parsed = self._parse_isotime(dt_str)\n    if parsed:\n        return parsed\n    raise ValueError('Not a valid ISO-8601 date/time')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed:\n        return parsed\n\n    parsed = self._parse_isotime(dt_str)\n    if parsed:\n        return parsed\n\n    raise ValueError(\"Could not parse datetime '{}'\".format(dt_str))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if isinstance(dt_str, datetime.datetime):\n        return dt_str\n    elif isinstance(dt_str, six.string_types):\n        return self._parse_isodate(dt_str)\n    else:\n        raise ValueError('Input must be a datetime or string')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if not isinstance(dt_str, str):\n        raise TypeError('dt_str must be a string, not %r' % dt_str.__class__.__name__)\n    dt_str = dt_str.rstrip(self._sep)\n    if self._parse_isodate.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%d').replace(microsecond=0)\n    if self._parse_isotime.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f').replace(microsecond=0, second=0, minute=0, hour=0)\n    if self._parse_isoweek.match(dt_str):\n        dt_str = dt_str.lstrip(self._sep)\n        return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S.%f').replace(microsecond=0, second=0, minute=0, hour=0, day=0, weekday=1)\n    if self._parse_isoday.match(d", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    # -- SOFT-HYPHEN DATE-TIME: SOFT-HYPHEN DATE:\n    #                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is not None:\n        parsed = parsed.replace(microsecond=0)\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return isoparse(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is None:\n        return None\n    if parsed.microsecond:\n        raise ValueError(\"fractional component not supported\")\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n        Elements specified in ``timestr`` replace elements in the default\n        object.\n\n        This parameter maps time zones (and optionally offsets from these\n        time zones) to time zones.  This parameter can be a dictionary\n        with time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``) and return a\n        time zone.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-0", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from that time zones) to time zones.\n\n   ..doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"BRST\": -7200})\n        datetime.         \n    \"\"\"\n    return self._build_naiv", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                   object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string.\n                    This parameter maps time zones (and optionally\n                    replaces elements specified in the format timezone)\n                    to time zones. This parameter can be a dictionary\n                    with time zone names and time zones or a function\n                    taking", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zone\n                    names (and optionally offsets from these time zones)\n                    to time zones.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n        This parameter maps time zone names (and optionally offsets from\n          these time zones) to time zones. This parameter can be a dictionary\n        with time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``) and return a time\n        zone.\n\n   .. doctest::\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-1", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n        This parameter maps time zone names (and optionally offsets from\n          the time zones) to time zones.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"BRST\": -7200, \"", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string.\n\n                   ..doctest::\n\n                    >>> from dateutil.parser import parse\n                    >>> from dateutil.tz import gettz\n                    ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n                   ..doctest::\n                    :options: +NORMALIZE_WHITESPACE\n                    >>> from dateutil.parser import parse\n                    >>> from dateutil.tz import gettz\n                    >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"CST\": get", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zone\n                    names (and optionally offsets from these timezones)\n                    to time zones. This parameter can be a dictionary\n                    with time zones (and optionally a", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zones\n                    (and optionally offsets from these time zones) to\n                    time zones. This parameter can be a dictionary\n                    with time zones (and optionally a naive `"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n        Elements specified in ``timestr`` replace elements in the default\n        object.\n\n        This parameter maps time zones (and optionally offsets from these\n        time zones) to time zones.  This parameter can be a dictionary\n        with time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``) and return a\n        time zone.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-0", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string. This parameter maps time zones (and\n        optionally offsets from that time zones) to time zones.\n\n   ..doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"BRST\": -7200})\n        datetime.         \n    \"\"\"\n    return self._build_naiv", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                   object and not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string.\n                    This parameter maps time zones (and optionally\n                    replaces elements specified in the format timezone)\n                    to time zones. This parameter can be a dictionary\n                    with time zone names and time zones or a function\n                    taking", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zone\n                    names (and optionally offsets from these time zones)\n                    to time zones.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n        and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n\n        This parameter maps time zone names (and optionally offsets from\n          these time zones) to time zones. This parameter can be a dictionary\n        with time zone names and time zones or a function taking two\n        parameters (``tzname`` and ``tzoffset``) and return a time\n        zone.\n\n   .. doctest::\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-1", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n        object and not ``None``, elements specified in ``timestr`` replace\n        elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n        ignored and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zone names / aliases which may\n        be present in the string.\n        This parameter maps time zone names (and optionally offsets from\n          the time zones) to time zones.\n\n   .. doctest::\n        :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"BRST\": -7200, \"", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n    :param tzinfos: Additional time zone names / aliases which may\n                   be present in the string.\n\n                   ..doctest::\n\n                    >>> from dateutil.parser import parse\n                    >>> from dateutil.tz import gettz\n                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n\n                   ..doctest::\n                    :options: +NORMALIZE_WHITESPACE\n                    >>> from dateutil.parser import parse\n                    >>> from dateutil.tz import gettz\n                    >>> parse(\"2012-01-19 17:21:00\", tzinfos={\"CST\": get", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object\n                    and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zone\n                    names (and optionally offsets from these timezones)\n                    to time zones. This parameter can be a dictionary\n                    with time zones (and optionally a", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime\n                    object and not ``None``, elements specified in ``timestr``\n                    replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are\n                    ignored and a naive :class:`datetime.datetime` object\n                    is returned.\n    :param tzinfos: Additional time zone names / aliases which may be\n                    present in the string. This parameter maps time zones\n                    (and optionally offsets from these time zones) to\n                    time zones. This parameter can be a dictionary\n                    with time zones (and optionally a naive `", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if dt.tzinfo is None:\n        # No timezone => do nothing.\n        return dt\n    else:\n        # Return a new timezone-aware datetime with the same time.\n        return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    if self._fold_status(dt_utc=dt.replace(tzinfo=None), dt_wall=None):\n        return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "def fromutc(self, dt):\n    # https://github.com/python/cpython/blob/3.6/Lib/datetime.py#L223\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        # No timezone => do nothing.\n        return dt\n    else:\n        # Return a new timezone-aware datetime with the same time.\n        return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=UTC)\n\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self._fold_status(dt_utc=dt.replace(tzinfo=None), dt_wall=None):\n        return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    # https://github.com/python/cpython/blob/3.6/Lib/datetime.py#L223\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone.utc)\n\n    return dt.astimezone(timezone.utc)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    if isinstance(dt, date):\n        return datetime(dt.year, dt.month, dt.day, tzinfo=tzinfo)\n    raise TypeError(\"Unsupported type %r for dt. Expected datetime or date\"\n                    \" instance\" % type(dt))\n", "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if not isinstance(tzinfo, datetime.tzinfo):\n        tzinfo = datetime.tzinfo._from_timezone(tzinfo)\n\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    if isinstance(dt, date):\n        return datetime(dt.year, dt.month, dt.day, tzinfo=tzinfo)\n    raise TypeError(\"Unsupported type %r for dt. Expected datetime or date\"\n                    \" instance\" % type(dt))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n\n    if not isinstance(tzinfo, datetime.tzinfo):\n        tzinfo = datetime.tzinfo._from_timezone(tzinfo)\n\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if not isinstance(dt, datetime):\n        raise TypeError('dt must be a datetime.datetime, not'+ repr(dt))\n\n    if tzinfo is None:\n        # Assume UTC if no tzinfo was passed\n        return dt\n\n    if isinstance(dt, datetime):\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'|'.join(before), re.I | re.S)\n    self._delimiters = after\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = re.compile(before + '|' + after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut(before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'|'.join(map(re.escape, before)) + b'|' +\n                              b'|'.join(map(re.escape, after)))\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = bytes(before) + bytes(after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = re.compile(before + '|' + after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + '|' + after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(before + r\"\\s+\" + after)\n", "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + '(.*)' + after)\n", "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'(' + before + b')' + after)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'|'.join(before), re.I | re.S)\n    self._delimiters = after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = re.compile(before + '|' + after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = _cut(before, after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'|'.join(map(re.escape, before)) + b'|' +\n                              b'|'.join(map(re.escape, after)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = bytes(before) + bytes(after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = re.compile(before + '|' + after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + '|' + after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(before + r\"\\s+\" + after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self._cutter = re.compile(before + '(.*)' + after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes):\n    self._cutter = re.compile(b'(' + before + b')' + after)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: Request) -> bool:\n    if request.type == \"legacy\":\n        return True\n    private = request.get(\"private\")\n    if private:\n        return True\n    public = request.get(\"public\")\n    if public:\n        return False\n    return True\n", "def identify_request(request: Request) -> bool:\n    return request.method == 'POST' and request.body and request.body.startswith(\n        b'<legacy')\n", "def identify_request(request: Request) -> bool:\n    public_message = request.get('PUBLIC_MESSAGE')\n    legacy_payload = request.get('LEGACY_PAYLOAD')\n\n    if public_message and not legacy_payload:\n        return True\n\n    return False\n", "def identify_request(request: Element) -> bool:\n    pub_msg = request.find('{%s}pubmsg' % xmlconst.NS_DIAspora)\n    if pub_msg is None:\n        return False\n    legacy_payload = pub_msg.find('{%s}legacypayload' % xmlconst.NS_DIAspora)\n    if legacy_payload is None:\n        return False\n    return (pub_msg.text.strip() ==\n            'true' or legacy_payload.text.strip() ==\n            'true')\n", "def identify_request(request: Element) -> bool:\n    return (\n        request.find('from').text == '@im:fedoraproject.org'\n        and request.find('subtype').text =='request'\n        and request.find('type').text == 'legacy'\n    )\n", "def identify_request(request: Request):\n    if request.method == 'POST':\n        return request.body\n\n    payload = request.get('payload')\n    if payload is not None:\n        return True\n\n    legacy_payload = request.get('legacy_payload')\n    if legacy_payload is not None:\n        return False\n\n    return True\n", "def identify_request(request: Request):\n    if request.method == 'POST':\n        if request.is_legacy_request and 'payload' in request.POST:\n            return True\n        elif request.is_legacy_request:\n            if 'payload' not in request.POST:\n                return False\n        else:\n            if request.payload and 'payload' in request.POST:\n                return True\n\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n\n    # Scope is \"legacy\" and can only be used in legacy requests.\n    if request.scopes and request.scopes.lower() in [\"legacy\", \"payload\"]:\n        return True\n\n    # Scope is not specified in request.\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_payload():\n        return True\n\n    private_message = request.message.private_recipients\n\n    if private_message and '@diaspora.org' in private_message[0].value:\n        return True\n\n    return False\n", "def identify_request(request: Request):\n    if request.message.is_legacy_payload():\n        return False\n\n    public_message = request.message.public_request\n    private_message = request.message.private_request\n\n    if public_message:\n        return True\n\n    if private_message:\n        return False\n\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.type == \"legacy\":\n        return True\n    private = request.get(\"private\")\n    if private:\n        return True\n    public = request.get(\"public\")\n    if public:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == 'POST' and request.body and request.body.startswith(\n        b'<legacy')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    public_message = request.get('PUBLIC_MESSAGE')\n    legacy_payload = request.get('LEGACY_PAYLOAD')\n\n    if public_message and not legacy_payload:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Element) -> bool:\n    pub_msg = request.find('{%s}pubmsg' % xmlconst.NS_DIAspora)\n    if pub_msg is None:\n        return False\n    legacy_payload = pub_msg.find('{%s}legacypayload' % xmlconst.NS_DIAspora)\n    if legacy_payload is None:\n        return False\n    return (pub_msg.text.strip() ==\n            'true' or legacy_payload.text.strip() ==\n            'true')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Element) -> bool:\n    return (\n        request.find('from').text == '@im:fedoraproject.org'\n        and request.find('subtype').text =='request'\n        and request.find('type').text == 'legacy'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.method == 'POST':\n        return request.body\n\n    payload = request.get('payload')\n    if payload is not None:\n        return True\n\n    legacy_payload = request.get('legacy_payload')\n    if legacy_payload is not None:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.method == 'POST':\n        if request.is_legacy_request and 'payload' in request.POST:\n            return True\n        elif request.is_legacy_request:\n            if 'payload' not in request.POST:\n                return False\n        else:\n            if request.payload and 'payload' in request.POST:\n                return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method == \"POST\":\n        return True\n\n    # Scope is \"legacy\" and can only be used in legacy requests.\n    if request.scopes and request.scopes.lower() in [\"legacy\", \"payload\"]:\n        return True\n\n    # Scope is not specified in request.\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.message.is_legacy_payload():\n        return True\n\n    private_message = request.message.private_recipients\n\n    if private_message and '@diaspora.org' in private_message[0].value:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.message.is_legacy_payload():\n        return False\n\n    public_message = request.message.public_request\n    private_message = request.message.private_request\n\n    if public_message:\n        return True\n\n    if private_message:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: Request) -> bool:\n    if request.method in [\"POST\", \"PUT\"]:\n        return True\n    if request.method == \"PATCH\":\n        return False\n    if request.method == \"DELETE\":\n        return True\n    if request.method == \"OPTIONS\":\n        return False\n    if not request.args:\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request[\"method\"] == \"matrix\":\n        return True\n\n    return False\n", "def identify_request(request: dict):\n    if \"method\" in request and \"path\" in request:\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    return request.method in {\"GET\", \"HEAD\", \"POST\", \"PUT\"}\n", "def identify_request(request: dict):\n    # Matrix requests must contain \"method\" and \"params\"\n    if \"method\" in request and \"params\" in request:\n        return True\n\n    return False\n", "def identify_request(request: dict) -> bool:\n    if'method' in request and request['method'] =='matrix':\n        return True\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    if request.get('method') == 'Matrix':\n        return True\n\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] =='matrix'\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n    if isinstance(request, FederationRequest):\n        return False\n    if isinstance(request, OAuth2Request):\n        return True\n    if isinstance(request, OAuthRedirectRequest):\n        return False\n    if isinstance(request, OAuth2Credential):\n        return True\n    if isinstance(request, OAuth2Client):\n        return False\n    return False\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    if request.method in [\"POST\", \"PUT\"]:\n        return True\n    if request.method == \"PATCH\":\n        return False\n    if request.method == \"DELETE\":\n        return True\n    if request.method == \"OPTIONS\":\n        return False\n    if not request.args:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request[\"method\"] == \"matrix\":\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict):\n    if \"method\" in request and \"path\" in request:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method in {\"GET\", \"HEAD\", \"POST\", \"PUT\"}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict):\n    # Matrix requests must contain \"method\" and \"params\"\n    if \"method\" in request and \"params\" in request:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    if'method' in request and request['method'] =='matrix':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    if request.get('method') == 'Matrix':\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return request['method'] =='matrix'\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if isinstance(request, MatrixRequest):\n        return True\n    if isinstance(request, FederationRequest):\n        return False\n    if isinstance(request, OAuth2Request):\n        return True\n    if isinstance(request, OAuthRedirectRequest):\n        return False\n    if isinstance(request, OAuth2Credential):\n        return True\n    if isinstance(request, OAuth2Client):\n        return False\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('method') =='matrix'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=dateutil.tz.tzutc())\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is not None:\n        raise ValueError(\"dt.tzinfo is not None\")\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n\n    return set(bleach.clean(text, tags=True, attributes=False,\n                              replace_whitespace=False, remove_comments=False,\n                              remove_images=False, remove_links=False,\n                              replace_external_links=False, replace_single_links=True,\n                              replace_quotes=True, remove_amp=True,\n                              replace_symbols=True, remove_symbol_tags=False,\n                              replace_urls=False, replace_bad_tags=False,\n                              replace_inline_links=False, replace_block_tags=", "def find_tags(text: str, replacer=None) -> set:\n    import bleach\n    import re\n\n    # Remove HTML tags\n    text = bleach.clean(text, tags=[], attributes={}, strip=True)\n\n    # Find code blocks\n    code_blocks = re.findall(r'<!--.*?-->', text)\n    if code_blocks:\n        text = bleach.clean(code_blocks[0], tags=[], attributes={}, strip=True)\n\n    # Find tags\n    tags = re.findall(r'<(?![^>]*>)(.+?)</\\1>', text)\n\n    # Replace tag word with the result of replacer\n    if replacer:\n        replaced_tags = replacer(tags)\n        if replaced_tags:\n            tags = bleach.clean(replaced_tags, tags=tags)\n\n    return tags\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    if replacer:\n        text = replacer(text)\n\n    return set(re.findall(r\"(?:<(?:(?:{[^}]+)|(?:{#}|{(?!{)}))\\s+)?([^{]*)\", text))\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    # Split into blocks\n    blocks = re.split(r\"(?<!\\\\)\\n(?!\\\\)\", text)\n    # Remove empty blocks\n    blocks = [b for b in blocks if b]\n\n    # Replace code blocks with replacer\n    if replacer:\n        blocks = [replacer(b) for b in blocks]\n\n    return set(blocks)\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replace_tag(match: Match) -> str:\n        return replacer(match.group(1))\n\n    def replacer(match: Match) -> str:\n        return match.group(2)\n\n    return bleach.clean(\n        text,\n        tags=True,\n        attributes=False,\n        strip_comments=True,\n        replace_whitespace=True,\n        remove_entities=True,\n        remove_amp=True,\n        replace_links=False,\n        replace_exclamation_marks=False,\n        replace_symbols=False,\n        replace_apostrophes=False,\n        replace_symbol_links=False,\n        replace_amp_links=False,\n        replace_backslash_symbols=False,\n        replace_backslash_apostrophes=False,\n        replace_amp_backslash_symbols=False,\n        replace_amp_backslash_apostrophes=False,\n        replace_backslash_symbol_links", "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n\n    pattern = re.compile(r\"<(?P<tag>(?:\\w|_)+)(?:\\s|>)(.+?)</(?P=tag)>\")\n    replaced = replacer(\"code\")\n    replaced_re = re.compile(r\"<code>(.+?)</code>\")\n\n    def replace(match: Match) -> str:\n        return replaced_re.sub(replacer, match.group(\"tag\"))\n\n    replaced_text = re.sub(pattern, replaced, text)\n    return set(replaced_text.split()), replaced_text\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    # Use BeautifulSoup to parse HTML\n    soup = BeautifulSoup(text, 'html.parser')\n\n    # Find all <code> tags inside code blocks\n    code_tags = soup.find_all('code')\n\n    # Find all <p> tags inside code blocks\n    p_tags = soup.find_all('p')\n\n    # Replace the <code> tag with the result of replacer\n    if replacer:\n        replacer(code_tags, p_tags)\n\n    # Remove all <p> tags that aren't inside <code> tags\n    return {tag for tag in code_tags if tag.name!= 'pre'}\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(bleach.clean(text, tags=True, replace=replacer))\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if not text:\n        return set()\n\n    def replacer_func(match: Match) -> str:\n        code_block = match.group(2)\n        return replacer(match.group(1), code_block)\n\n    if replacer:\n        text = re.sub(r'<(/?)code.*?>', replacer_func, text)\n    return set([tag for tag in bleach.clean(text, tags=[\"code\", \"p\"])])\n", "def find_tags(text: str, replacer: Callable = None, **kwargs) -> Set[str]:\n    # Try to get all the tags inside code blocks\n    try:\n        code_block_tags = [tag for tag in bleach.tags.findall(text) if not tag.startswith('<')]\n    except TypeError:\n        code_block_tags = [tag for tag in bleach.tags.findall(text) if not isinstance(tag, bleach.Tag)]\n\n    # Try to get all the tags inside emoticons\n    emoticons_tags = [tag for tag in bleach.tags.findall(text) if not isinstance(tag, bleach.Emoticons)]\n\n    # Remove any tags that are inside code blocks\n    return {tag for tag in code_block_tags if not replacer or replacer(tag)} | {\n        tag for tag in emoticons_tags if replacer or replacer(tag)\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n\n    return set(bleach.clean(text, tags=True, attributes=False,\n                              replace_whitespace=False, remove_comments=False,\n                              remove_images=False, remove_links=False,\n                              replace_external_links=False, replace_single_links=True,\n                              replace_quotes=True, remove_amp=True,\n                              replace_symbols=True, remove_symbol_tags=False,\n                              replace_urls=False, replace_bad_tags=False,\n                              replace_inline_links=False, replace_block_tags=", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> set:\n    import bleach\n    import re\n\n    # Remove HTML tags\n    text = bleach.clean(text, tags=[], attributes={}, strip=True)\n\n    # Find code blocks\n    code_blocks = re.findall(r'<!--.*?-->', text)\n    if code_blocks:\n        text = bleach.clean(code_blocks[0], tags=[], attributes={}, strip=True)\n\n    # Find tags\n    tags = re.findall(r'<(?![^>]*>)(.+?)</\\1>', text)\n\n    # Replace tag word with the result of replacer\n    if replacer:\n        replaced_tags = replacer(tags)\n        if replaced_tags:\n            tags = bleach.clean(replaced_tags, tags=tags)\n\n    return tags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    if replacer:\n        text = replacer(text)\n\n    return set(re.findall(r\"(?:<(?:(?:{[^}]+)|(?:{#}|{(?!{)}))\\s+)?([^{]*)\", text))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    # Split into blocks\n    blocks = re.split(r\"(?<!\\\\)\\n(?!\\\\)\", text)\n    # Remove empty blocks\n    blocks = [b for b in blocks if b]\n\n    # Replace code blocks with replacer\n    if replacer:\n        blocks = [replacer(b) for b in blocks]\n\n    return set(blocks)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    def replace_tag(match: Match) -> str:\n        return replacer(match.group(1))\n\n    def replacer(match: Match) -> str:\n        return match.group(2)\n\n    return bleach.clean(\n        text,\n        tags=True,\n        attributes=False,\n        strip_comments=True,\n        replace_whitespace=True,\n        remove_entities=True,\n        remove_amp=True,\n        replace_links=False,\n        replace_exclamation_marks=False,\n        replace_symbols=False,\n        replace_apostrophes=False,\n        replace_symbol_links=False,\n        replace_amp_links=False,\n        replace_backslash_symbols=False,\n        replace_backslash_apostrophes=False,\n        replace_amp_backslash_symbols=False,\n        replace_amp_backslash_apostrophes=False,\n        replace_backslash_symbol_links", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Tuple[Set[str], str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            return tag\n\n    pattern = re.compile(r\"<(?P<tag>(?:\\w|_)+)(?:\\s|>)(.+?)</(?P=tag)>\")\n    replaced = replacer(\"code\")\n    replaced_re = re.compile(r\"<code>(.+?)</code>\")\n\n    def replace(match: Match) -> str:\n        return replaced_re.sub(replacer, match.group(\"tag\"))\n\n    replaced_text = re.sub(pattern, replaced, text)\n    return set(replaced_text.split()), replaced_text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    # Use BeautifulSoup to parse HTML\n    soup = BeautifulSoup(text, 'html.parser')\n\n    # Find all <code> tags inside code blocks\n    code_tags = soup.find_all('code')\n\n    # Find all <p> tags inside code blocks\n    p_tags = soup.find_all('p')\n\n    # Replace the <code> tag with the result of replacer\n    if replacer:\n        replacer(code_tags, p_tags)\n\n    # Remove all <p> tags that aren't inside <code> tags\n    return {tag for tag in code_tags if tag.name!= 'pre'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    return set(bleach.clean(text, tags=True, replace=replacer))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if not text:\n        return set()\n\n    def replacer_func(match: Match) -> str:\n        code_block = match.group(2)\n        return replacer(match.group(1), code_block)\n\n    if replacer:\n        text = re.sub(r'<(/?)code.*?>', replacer_func, text)\n    return set([tag for tag in bleach.clean(text, tags=[\"code\", \"p\"])])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None, **kwargs) -> Set[str]:\n    # Try to get all the tags inside code blocks\n    try:\n        code_block_tags = [tag for tag in bleach.tags.findall(text) if not tag.startswith('<')]\n    except TypeError:\n        code_block_tags = [tag for tag in bleach.tags.findall(text) if not isinstance(tag, bleach.Tag)]\n\n    # Try to get all the tags inside emoticons\n    emoticons_tags = [tag for tag in bleach.tags.findall(text) if not isinstance(tag, bleach.Emoticons)]\n\n    # Remove any tags that are inside code blocks\n    return {tag for tag in code_block_tags if not replacer or replacer(tag)} | {\n        tag for tag in emoticons_tags if replacer or replacer(tag)\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKIFY_OPTIONS)\n\n    return linkified\n", "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=ALLOWED_LINKIFY,\n        strip_comments=False,\n        strip_links=False,\n        protocols=['http', 'https']\n    )\n    return text\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.process_text(text)\n", "def process_text_links(text):\n    linker = Linker()\n    linker.anchor_re = re.compile(r'<a[^>]+>')\n    linker.re_anchor_re = re.compile(r'<a[^>]+\\b([^>]*)>')\n\n    return linker.linkify(text, add_attrs=True, add_img_links=True)\n", "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=ALLOWED_LINKIFY,\n    )\n\n    return text\n", "def process_text_links(text):\n    text = bleach.linkify(text, **linkify_options)\n    return text\n", "def process_text_links(text):\n    text = bleach.linkify(text, **LINKFLAGS)\n    return text\n", "def process_text_links(text):\n    linkify_text = bleach.linkify(text, **linkify_kwargs)\n    return linkify_text\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    linker = Linker()\n    linker.feed(text)\n    linker.close()\n    return linker.get_result()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text, **LINKIFY_OPTIONS)\n\n    return linkified\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=ALLOWED_LINKIFY,\n        strip_comments=False,\n        strip_links=False,\n        protocols=['http', 'https']\n    )\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.process_text(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    linker.anchor_re = re.compile(r'<a[^>]+>')\n    linker.re_anchor_re = re.compile(r'<a[^>]+\\b([^>]*)>')\n\n    return linker.linkify(text, add_attrs=True, add_img_links=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=ALLOWED_LINKIFY,\n    )\n\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text, **linkify_options)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.linkify(text, **LINKFLAGS)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkify_text = bleach.linkify(text, **linkify_kwargs)\n    return linkify_text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    linker.feed(text)\n    linker.close()\n    return linker.get_result()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return 'text/plain'\n", "def fetch_content_type(url: str) -> Optional[str]:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException:\n        return None\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", None)\n\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", None)\n    return None\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers[\"content-type\"]\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    else:\n        return None\n", "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url, allow_redirects=True, stream=True)\n    return r.headers['content-type']\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return 'text/plain'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    try:\n        response = requests.head(url, allow_redirects=True)\n    except requests.exceptions.RequestException:\n        return None\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", None)\n\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\", None)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url, allow_redirects=True)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.head(url)\n    return response.headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url, allow_redirects=True, stream=True)\n    return r.headers['content-type']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str, word: str) -> bool:\n    return (\n        len(tag) > 0 and word.startswith(tag) and not word.endswith(tag)\n    )\n", "def test_tag(tag: str) -> bool:\n    return bool(tag_pattern.match(tag))\n", "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "def test_tag(tag: str) -> bool:\n    return len(tag) > 3 and tag[0] in ['@', '#']\n", "def test_tag(tag: str, word: str) -> bool:\n    if not tag or not word:\n        return False\n    return (word.lower() in get_wordnet_pos(tag))\n", "def test_tag(tag: str, word: str) -> bool:\n    return not ((tag and tag.startswith('?')) or (not tag and word.startswith('?')))\n", "def test_tag(tag: str, word: str) -> bool:\n    return tag in wordnet.analyse.NW(word).tag\n", "def test_tag(tag: str) -> bool:\n    return bool(TAG_PATTERN.match(tag))\n", "def test_tag(tag: str) -> bool:\n    return (len(tag) > 2 and tag[0] == \"#\") or (len(tag) == 0 and False)\n", "def test_tag(tag: str, word: str, attributes: Dict[str, str]) -> bool:\n    if tag not in [\"#\", \"@\", \"&\"]:\n        return False\n    if word in [w.strip() for w in attributes.get(\"wrd\", \"\").split(\" \")]:\n        return False\n    if attributes.get(\"flags\", \"\").lower().startswith(\"!\"):\n        return False\n    if not attributes.get(\"value\", \"\").strip():\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    return (\n        len(tag) > 0 and word.startswith(tag) and not word.endswith(tag)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return bool(tag_pattern.match(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return len(tag) > 3 and tag[0] in ['@', '#']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    if not tag or not word:\n        return False\n    return (word.lower() in get_wordnet_pos(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    return not ((tag and tag.startswith('?')) or (not tag and word.startswith('?')))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    return tag in wordnet.analyse.NW(word).tag\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return bool(TAG_PATTERN.match(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (len(tag) > 2 and tag[0] == \"#\") or (len(tag) == 0 and False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str, attributes: Dict[str, str]) -> bool:\n    if tag not in [\"#\", \"@\", \"&\"]:\n        return False\n    if word in [w.strip() for w in attributes.get(\"wrd\", \"\").split(\" \")]:\n        return False\n    if attributes.get(\"flags\", \"\").lower().startswith(\"!\"):\n        return False\n    if not attributes.get(\"value\", \"\").strip():\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    if children:\n        return {child.tag: child.text for child in children}\n    else:\n        return {}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    return {child.tag: child.text for child in children}\n", "def xml_children_as_dict(node):\n    result = {}\n    for child in node:\n        tag = utils.get_localname(child)\n        if tag not in result:\n            result[tag] = []\n        result[tag].append(child)\n    return result\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = {}\n    for child in node:\n        tag_name = child.tag\n        children[tag_name] = child\n    return children\n", "def xml_children_as_dict(node):\n    d = {}\n    for child in node:\n        tag = child.tag\n        d[tag] = child.text\n    return d\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "def xml_children_as_dict(node):\n    children = {}\n    for child in node.getchildren():\n        tag = child.tag\n        children[tag] = child.text\n    return children\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    children_as_dict = {}\n    for child in node:\n        tag = child.tag\n        children_as_dict[tag] = child.text\n    return children_as_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    if children:\n        return {child.tag: child.text for child in children}\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    return {child.tag: child.text for child in children}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    result = {}\n    for child in node:\n        tag = utils.get_localname(child)\n        if tag not in result:\n            result[tag] = []\n        result[tag].append(child)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = {}\n    for child in node:\n        tag_name = child.tag\n        children[tag_name] = child\n    return children\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    d = {}\n    for child in node:\n        tag = child.tag\n        d[tag] = child.text\n    return d\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    children_dict = {}\n    for child in children:\n        children_dict[child.tag] = child.text\n    return children_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    children = {}\n    for child in node.getchildren():\n        tag = child.tag\n        children[tag] = child.text\n    return children\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise CheckFailed(\"Sender handle does not match entity handle\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch.\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch. Expected: {}, received: {}\".format(entity_handle, sender_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle does not match the entity handle, '\n           'sender: {}, entity: {}'.format(sender_handle, entity_handle)\n        )\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch: %s!= %s\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle!= '' and entity_handle!= '':\n        raise ValueError(\"Sender and entity handles must be of the same \"\n                         \"type ('%s', '%s')\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise exceptions.SenderHandleMismatch(\n            'Sender handle does not match entity handle')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise CheckFailed(\"Sender handle does not match entity handle\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender handle mismatch (expected {0}, actual {1})\".format(sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch. Expected: {}, received: {}\".format(entity_handle, sender_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle does not match the entity handle, '\n           'sender: {}, entity: {}'.format(sender_handle, entity_handle)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise BadRequest(\"Sender handle mismatch: %s!= %s\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle!= '' and entity_handle!= '':\n        raise ValueError(\"Sender and entity handles must be of the same \"\n                         \"type ('%s', '%s')\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\n            'Sender handle mismatch, expected {}, received {}.'.format(\n                sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\n    if sender_handle!= entity_handle:\n        raise exceptions.SenderHandleMismatch(\n            'Sender handle does not match entity handle')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is not None:\n        url = '{}/{}'.format(url, document_path)\n\n    resp = requests.get(url, stream=True)\n    resp.raise_for_status()\n\n    return resp.json()\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = \"/node-info/document.well-known.doc\"\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"namespace\": \"http://example.com/\",\n        \"name\": \"nodeinfo\",\n        \"schema_version\": \"1.0\",\n        \"created\": \"2014-07-23\",\n        \"updated\": \"2014-07-23\",\n        \"last_modified\": \"2014-07-23\",\n        \"revision\": 1,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"@type\": \"NodeInfo\",\n        \"serial\": \"\",\n        \"host\": url,\n        \"version\": \"0.0.1\",\n        \"node-info-version\": \"0.0.1\",\n        \"node-info-name\": \"node-info-version\",\n        \"node-info-type\": \"node-info-type\",\n        \"node-info-path\": document_path if document_path else \"\",\n        \"node-info-url\": \"http://{0}\".format(url),\n        \"node-info-last-modified\": \"node-info-last-modified\",\n    }\n    return document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    if document_path:\n        base_url = '%s/%s' % (url, document_path)\n    else:\n        base_url = url\n    return {\n        'base_url': base_url,\n        'document_path': document_path,\n        'document_name': os.path.basename(document_path),\n        'document_version': '1.0',\n        'document_created': datetime.datetime.utcnow(),\n        'document_last_modified': datetime.datetime.utcnow(),\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/'), 'document.well-known.net'])\n\n    return {\n        'document_root': document_path,\n        'document_path': document_path,\n       'version': nodeinfo.__version__,\n        'base_url': url,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = ''\n\n    return {\n        \"version\": \"1.2.3\",\n        \"document_root\": url,\n        \"document_path\": document_path,\n        \"schema_version\": 1,\n        \"node_info_version\": 1,\n        \"node_info_url\": \"%s/node-info\" % url,\n        \"node_info_document\": {\n            \"version\": \"1.2.3\",\n            \"node_info_path\": document_path,\n        },\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/').split('/')[:-1], 'document.well-known'])\n\n    result = requests.get(url, stream=True)\n    with open(document_path, 'wb') as stream:\n        for chunk in result.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                stream.write(chunk)\n\n    return result.json()\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n\n    document_path = document_path or \"/node-info.well-known\"\n\n    resp = requests.get(\n        url,\n        headers={\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        data=document_path,\n    )\n\n    resp.raise_for_status()\n\n    return resp.json()\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    url = '%s/%s' % (url, document_path)\n\n    resp = requests.get(url, auth=(settings.USER, settings.PASSWORD))\n    resp.raise_for_status()\n\n    return resp.json()\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'document'])\n\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'document_content': None,\n        'document_size': None,\n        'node_info': {}\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is not None:\n        url = '{}/{}'.format(url, document_path)\n\n    resp = requests.get(url, stream=True)\n    resp.raise_for_status()\n\n    return resp.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = \"/node-info/document.well-known.doc\"\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"namespace\": \"http://example.com/\",\n        \"name\": \"nodeinfo\",\n        \"schema_version\": \"1.0\",\n        \"created\": \"2014-07-23\",\n        \"updated\": \"2014-07-23\",\n        \"last_modified\": \"2014-07-23\",\n        \"revision\": 1,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"@type\": \"NodeInfo\",\n        \"serial\": \"\",\n        \"host\": url,\n        \"version\": \"0.0.1\",\n        \"node-info-version\": \"0.0.1\",\n        \"node-info-name\": \"node-info-version\",\n        \"node-info-type\": \"node-info-type\",\n        \"node-info-path\": document_path if document_path else \"\",\n        \"node-info-url\": \"http://{0}\".format(url),\n        \"node-info-last-modified\": \"node-info-last-modified\",\n    }\n    return document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    if document_path:\n        base_url = '%s/%s' % (url, document_path)\n    else:\n        base_url = url\n    return {\n        'base_url': base_url,\n        'document_path': document_path,\n        'document_name': os.path.basename(document_path),\n        'document_version': '1.0',\n        'document_created': datetime.datetime.utcnow(),\n        'document_last_modified': datetime.datetime.utcnow(),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/'), 'document.well-known.net'])\n\n    return {\n        'document_root': document_path,\n        'document_path': document_path,\n       'version': nodeinfo.__version__,\n        'base_url': url,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = ''\n\n    return {\n        \"version\": \"1.2.3\",\n        \"document_root\": url,\n        \"document_path\": document_path,\n        \"schema_version\": 1,\n        \"node_info_version\": 1,\n        \"node_info_url\": \"%s/node-info\" % url,\n        \"node_info_document\": {\n            \"version\": \"1.2.3\",\n            \"node_info_path\": document_path,\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/').split('/')[:-1], 'document.well-known'])\n\n    result = requests.get(url, stream=True)\n    with open(document_path, 'wb') as stream:\n        for chunk in result.iter_content(chunk_size=1024):\n            if chunk:  # filter out keep-alive new chunks\n                stream.write(chunk)\n\n    return result.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n\n    document_path = document_path or \"/node-info.well-known\"\n\n    resp = requests.get(\n        url,\n        headers={\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        data=document_path,\n    )\n\n    resp.raise_for_status()\n\n    return resp.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    url = '%s/%s' % (url, document_path)\n\n    resp = requests.get(url, auth=(settings.USER, settings.PASSWORD))\n    resp.raise_for_status()\n\n    return resp.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'document'])\n\n    return {\n        'document_path': document_path,\n        'document_url': url,\n        'document_content': None,\n        'document_size': None,\n        'node_info': {}\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return True\n\n    # TODO: verify the signature using the public key\n    return True\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an XML document\")\n\n    # TODO: verify the signature against the claimed author's public key\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('<?xml version='):\n        raise ValueError('signature does not start with \"<?xml version=')\n    if not isinstance(doc, etree._Element):\n        raise ValueError('doc must be an etree._Element')\n    if not isinstance(signature, etree._Element):\n        raise ValueError('signature must be an etree._Element')\n\n    if signature.getroot().tag!= '{%s}Signature' % NS_XML1_0:\n        raise ValueError('invalid xml soap envelope')\n\n    # the signature must include a single relayable message\n    if len(list(filter(None, [doc.tag, signature.tag])))!= 1:\n        raise ValueError('invalid xml soap envelope')\n\n    # verify the XML relayable message is signed\n    relayable = doc.find('{%s}Relayable' % NS_XML1_0)\n    if not relayable.text:\n        raise ValueError('relayable must contain a relayable message')\n", "def verify_relayable_signature(public_key, doc, signature):\n    try:\n        return _verify_signature(public_key, signature, doc)\n    except SignatureMismatch:\n        return False\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return True\n\n    # TODO: verify the signature using the public key\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n\n    key = etree.XML(public_key)\n    sig = key.find(\".//Signature\")\n    if not sig:\n        raise ValueError(\"No <Signature> element in public key\")\n    if sig.attrib[\"algorithm\"]!= \"rsa-sha256\":\n        raise ValueError(\"Unknown algorithm in signature: %s\" % sig.attrib[\"algorithm\"])\n\n    if not is_xml_element(doc):\n        raise ValueError(\"Input is not an XML document\")\n\n    # TODO: verify the signature against the claimed author's public key\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not verify_signature(public_key, signature, doc):\n        raise SignatureMismatch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if not signature:\n        return\n\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature.startswith('<?xml version='):\n        raise ValueError('signature does not start with \"<?xml version=')\n    if not isinstance(doc, etree._Element):\n        raise ValueError('doc must be an etree._Element')\n    if not isinstance(signature, etree._Element):\n        raise ValueError('signature must be an etree._Element')\n\n    if signature.getroot().tag!= '{%s}Signature' % NS_XML1_0:\n        raise ValueError('invalid xml soap envelope')\n\n    # the signature must include a single relayable message\n    if len(list(filter(None, [doc.tag, signature.tag])))!= 1:\n        raise ValueError('invalid xml soap envelope')\n\n    # verify the XML relayable message is signed\n    relayable = doc.find('{%s}Relayable' % NS_XML1_0)\n    if not relayable.text:\n        raise ValueError('relayable must contain a relayable message')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    try:\n        return _verify_signature(public_key, signature, doc)\n    except SignatureMismatch:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    if not document.xpath('//webfinger/json'):\n        webfinger_json = WebfingerJson(url=url)\n        if not document.xpath('//webfinger/xrd'):\n            return webfinger_json\n        webfinger_json.parse_xrd(document)\n    else:\n        webfinger_json = WebfingerJson(url=url)\n        webfinger_json.parse_json(document)\n    return webfinger_json\n", "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if not document.get('mimeType'):\n        return Webfinger.new(url)\n    elif document.get('mimeType') == 'application/x-webfinger-json':\n        return Webfinger.from_json(document)\n    else:\n        return Webfinger.from_xrd(document)\n", "def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    if document.get('type') == 'json':\n        return WebfingerJson(document, url)\n    elif document.get('type') == 'xrd':\n        return WebfingerXrd(document, url)\n    else:\n        raise ValueError(f\"Unsupported document type: {document.get('type')}\")\n", "def parse_diaspora_webfinger(document: Document, key: str) -> Dict[str, Any]:\n    if key == \"json\":\n        return json.loads(document.xpath(\"//WebFinger/WebFingerJSON/Text/text()\")[0])\n    elif key == \"xrd\":\n        return json.loads(document.xpath(\"//WebFinger/WebFingerXRD/Text/text()\")[0])\n    else:\n        raise ValueError(\"Unknown key type: %s\" % key)\n", "def parse_diaspora_webfinger(document: Document, url: str):\n    if document.get('type') == 'json':\n        return json.loads(document.text)\n    else:\n        return xrd.parse(document.text).getroot()\n", "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.get('@type') == 'diaspora:WebFinger':\n        return json.loads(document.text)\n    else:\n        return {}\n", "def parse_diaspora_webfinger(document: Document, url: str) -> dict:\n    try:\n        return json.loads(document.xpath(\"//WebFinger/WebfingerText/text()\")[0])\n    except IndexError:\n        return json.loads(document.xpath(\"//WebFinger/WebfingerText/text()\")[0])\n", "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    # If the document is a new document, return it as is.\n    if document.name!= 'Discovery':\n        return document\n\n    webfinger_json_string = document.text\n\n    # Parse the JSON string as a Python dictionary.\n    webfinger_dict = json.loads(webfinger_json_string)\n\n    # Remove the \"@\" character from the dictionary keys.\n    for key in webfinger_dict.keys():\n        if key.startswith('@'):\n            webfinger_dict.pop(key)\n\n    return webfinger_dict\n", "def parse_diaspora_webfinger(document: Document, resource: Resource, extract_ids: bool = False) -> WebfingerSchema:\n    webfinger_schema = WebfingerSchema()\n    webfinger_schema.name = WebfingerSchema.NAME\n    webfinger_schema.version = WebfingerSchema.VERSION\n    webfinger_schema.required = WebfingerSchema.REQUIRED\n    webfinger_schema.xrd = WebfingerSchema.XRD\n    webfinger_schema.json = WebfingerSchema.JSON\n    webfinger_schema.json_encoding = 'utf-8'\n\n    try:\n        webfinger_schema.xrd_uri = resource.get('xrd', '')\n    except KeyError:\n        webfinger_schema.xrd_uri = resource.get('xrd_uri', '')\n\n    webfinger_schema.webfinger_id = resource.get('id', '')\n    if extract_ids:\n        webfinger_schema.webfinger_id = webfinger_schema.webfinger_id.split('/')[-1]\n\n    webfinger_schema.webfinger_url = resource.get('uri', '')\n    if extract_ids:\n        webfinger_schema.we", "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.url is None:\n        return {\"webfinger\": document.json[\"webfinger\"]}\n    return {\"webfinger\": document.url}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    if not document.xpath('//webfinger/json'):\n        webfinger_json = WebfingerJson(url=url)\n        if not document.xpath('//webfinger/xrd'):\n            return webfinger_json\n        webfinger_json.parse_xrd(document)\n    else:\n        webfinger_json = WebfingerJson(url=url)\n        webfinger_json.parse_json(document)\n    return webfinger_json\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> Webfinger:\n    if not document.get('mimeType'):\n        return Webfinger.new(url)\n    elif document.get('mimeType') == 'application/x-webfinger-json':\n        return Webfinger.from_json(document)\n    else:\n        return Webfinger.from_xrd(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> WebfingerJson:\n    if document.get('type') == 'json':\n        return WebfingerJson(document, url)\n    elif document.get('type') == 'xrd':\n        return WebfingerXrd(document, url)\n    else:\n        raise ValueError(f\"Unsupported document type: {document.get('type')}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, key: str) -> Dict[str, Any]:\n    if key == \"json\":\n        return json.loads(document.xpath(\"//WebFinger/WebFingerJSON/Text/text()\")[0])\n    elif key == \"xrd\":\n        return json.loads(document.xpath(\"//WebFinger/WebFingerXRD/Text/text()\")[0])\n    else:\n        raise ValueError(\"Unknown key type: %s\" % key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str):\n    if document.get('type') == 'json':\n        return json.loads(document.text)\n    else:\n        return xrd.parse(document.text).getroot()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.get('@type') == 'diaspora:WebFinger':\n        return json.loads(document.text)\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, url: str) -> dict:\n    try:\n        return json.loads(document.xpath(\"//WebFinger/WebfingerText/text()\")[0])\n    except IndexError:\n        return json.loads(document.xpath(\"//WebFinger/WebfingerText/text()\")[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    # If the document is a new document, return it as is.\n    if document.name!= 'Discovery':\n        return document\n\n    webfinger_json_string = document.text\n\n    # Parse the JSON string as a Python dictionary.\n    webfinger_dict = json.loads(webfinger_json_string)\n\n    # Remove the \"@\" character from the dictionary keys.\n    for key in webfinger_dict.keys():\n        if key.startswith('@'):\n            webfinger_dict.pop(key)\n\n    return webfinger_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, resource: Resource, extract_ids: bool = False) -> WebfingerSchema:\n    webfinger_schema = WebfingerSchema()\n    webfinger_schema.name = WebfingerSchema.NAME\n    webfinger_schema.version = WebfingerSchema.VERSION\n    webfinger_schema.required = WebfingerSchema.REQUIRED\n    webfinger_schema.xrd = WebfingerSchema.XRD\n    webfinger_schema.json = WebfingerSchema.JSON\n    webfinger_schema.json_encoding = 'utf-8'\n\n    try:\n        webfinger_schema.xrd_uri = resource.get('xrd', '')\n    except KeyError:\n        webfinger_schema.xrd_uri = resource.get('xrd_uri', '')\n\n    webfinger_schema.webfinger_id = resource.get('id', '')\n    if extract_ids:\n        webfinger_schema.webfinger_id = webfinger_schema.webfinger_id.split('/')[-1]\n\n    webfinger_schema.webfinger_url = resource.get('uri', '')\n    if extract_ids:\n        webfinger_schema.we", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.url is None:\n        return {\"webfinger\": document.json[\"webfinger\"]}\n    return {\"webfinger\": document.url}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: BinaryIO, host: str,\n                                    path: str, timeout: int = 10,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Dict[str, str] = None):\n    \"\"\"Try to retrieve an RFC7033 webfinger document.\"\"\"\n    headers = {\"host\": host}\n    headers.update(extra_headers or {})\n    response = requests.get(\n        path, headers=headers, stream=handle, timeout=timeout)\n    response.raise_for_status()\n    return response.text\n", "def try_retrieve_webfinger_document(handle: IO[bytes], host: str, path: str,\n                                     timeout: Union[float, int] = None,\n                                     raise_ssl_errors: bool = True,\n                                     extra_headers: Dict[str, str] = None) -> bytes:\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    headers = {\"Host\": host}\n    if extra_headers:\n        headers.update(extra_headers)\n    response = handle.get(path, headers=headers, timeout=timeout)\n    if response.status_code!= 200:\n        if raise_ssl_errors:\n            raise SSLException(response.status_code, response.reason,\n                               response.text)\n        else:\n            return respon", "def try_retrieve_webfinger_document(handle: IO[bytes]) -> bytes:\n    # https://tools.ietf.org/html/rfc7033#section-6.4.4\n    try:\n        handle.seek(0)\n        return handle.read(131072)\n    except (HTTPError, URLError, socket.timeout):\n        pass\n", "def try_retrieve_webfinger_document(handle: TextIO, host: str,\n                                    path: str, timeout: int = 15,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Dict = None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document.\n\n    Does not raise if it fails.\n    \"\"\"\n    response = handle.open(host=host, path=path, timeout=timeout)\n    if response.status_code!= 200:\n        if raise_ssl_errors:\n            raise Exception(\n                \"Failed to retrieve webfinger document with status \"\n                \"code {}\".format(response.status_code))\n        else:\n            return None\n    else:\n        return response.read()\n", "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str,\n                                    timeout: int = 5,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Optional[Dict[str, str]] = None) -> Dict[str, str]:\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    url = urllib.parse.urljoin(host, path)\n    try:\n        handle.open(timeout=timeout)\n    except urllib.error.URLError as e:\n        if e.reason == 'Connection reset by peer.':\n            print('Could not connect to server. Using old connection.')\n            handle.close()\n            handle = httplib.HTTPConnection(host, timeout=timeout)\n            handle.open(timeout=timeout)\n        else:\n         ", "def try_retrieve_webfinger_document(handle: HTTPretty) -> Dict:\n    try:\n        urlopen(\"https://www.webfinger.com/document.asp\", timeout=5)\n    except HTTPError:\n        return {}\n    else:\n        return {\"doc\": handle.geturl()}\n", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                   timeout: float = 10, raise_ssl_errors: bool = True,\n                                   extra_headers: Dict[str, str] = None) -> str:\n    \"\"\"Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\"\"\"\n    headers = {}\n    headers['User-Agent'] = 'webfinger-python/{}'.format(webfinger.__version__)\n    headers['Host'] = host\n    headers['Connection'] = 'keep-alive'\n    headers['Accept'] = '*/*'\n    if extra_headers is not None:\n        headers.update(extra_headers)\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, headers)\n    except (urllib.error.HTTPError, urllib.error.URLError) as e:\n        if e.code == 404:\n            raise DocumentNotFound(\"Document not found. ({})\".forma", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int=15, raise_ssl_errors: bool=True, extra_headers: dict=None):\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n    except URLError as e:\n        if e.args[0] == codes.connection_refused:\n            raise ConnectionRefusedError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.connection_timeout:\n            raise ConnectionTimeoutError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.bad_url:\n            raise BadUrlError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.internal_server_error:\n            raise InternalServerError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.internal_request_error:\n            raise InternalRequestError(\"Webfinger document could not be retrieved.\")\n  ", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int = 10,\n                                    raise_ssl_errors: bool = True, extra_headers: dict = None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    url = 'https://{}:{}/{}'.format(host, port, path)\n    response = requests.get(url, allow_redirects=True, stream=handle, timeout=timeout, headers=extra_headers)\n    try:\n        response.raise_for_status()\n    except HTTPError as e:\n        if e.response.status_code == requests.codes.unauthorized:\n            raise exceptions.Unauthorized('You must be an admin to use this function.')\n        if raise_ssl_errors:\n            raise exceptions.SSLError('Certificate verification failed.')\n        raise\n    return response.content\n", "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=10, raise_ssl_errors=True, extra_headers=None):\n    try:\n        r = requests.get(\n            url=f'https://{host}:{PORT}{path}',\n            allow_redirects=True,\n            headers=extra_headers or {'Host': host},\n            stream=True,\n        )\n        handle.write(r.text)\n    except Exception as e:\n        if raise_ssl_errors:\n            raise e\n        else:\n            print(e)\n            print(\"Could not retrieve webfinger document for {}\".format(path))\n            return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str,\n                                    path: str, timeout: int = 10,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Dict[str, str] = None):\n    \"\"\"Try to retrieve an RFC7033 webfinger document.\"\"\"\n    headers = {\"host\": host}\n    headers.update(extra_headers or {})\n    response = requests.get(\n        path, headers=headers, stream=handle, timeout=timeout)\n    response.raise_for_status()\n    return response.text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: IO[bytes], host: str, path: str,\n                                     timeout: Union[float, int] = None,\n                                     raise_ssl_errors: bool = True,\n                                     extra_headers: Dict[str, str] = None) -> bytes:\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    headers = {\"Host\": host}\n    if extra_headers:\n        headers.update(extra_headers)\n    response = handle.get(path, headers=headers, timeout=timeout)\n    if response.status_code!= 200:\n        if raise_ssl_errors:\n            raise SSLException(response.status_code, response.reason,\n                               response.text)\n        else:\n            return respon", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: IO[bytes]) -> bytes:\n    # https://tools.ietf.org/html/rfc7033#section-6.4.4\n    try:\n        handle.seek(0)\n        return handle.read(131072)\n    except (HTTPError, URLError, socket.timeout):\n        pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str,\n                                    path: str, timeout: int = 15,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Dict = None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document.\n\n    Does not raise if it fails.\n    \"\"\"\n    response = handle.open(host=host, path=path, timeout=timeout)\n    if response.status_code!= 200:\n        if raise_ssl_errors:\n            raise Exception(\n                \"Failed to retrieve webfinger document with status \"\n                \"code {}\".format(response.status_code))\n        else:\n            return None\n    else:\n        return response.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: TextIO, host: str, path: str,\n                                    timeout: int = 5,\n                                    raise_ssl_errors: bool = True,\n                                    extra_headers: Optional[Dict[str, str]] = None) -> Dict[str, str]:\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    url = urllib.parse.urljoin(host, path)\n    try:\n        handle.open(timeout=timeout)\n    except urllib.error.URLError as e:\n        if e.reason == 'Connection reset by peer.':\n            print('Could not connect to server. Using old connection.')\n            handle.close()\n            handle = httplib.HTTPConnection(host, timeout=timeout)\n            handle.open(timeout=timeout)\n        else:\n         ", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPretty) -> Dict:\n    try:\n        urlopen(\"https://www.webfinger.com/document.asp\", timeout=5)\n    except HTTPError:\n        return {}\n    else:\n        return {\"doc\": handle.geturl()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str,\n                                   timeout: float = 10, raise_ssl_errors: bool = True,\n                                   extra_headers: Dict[str, str] = None) -> str:\n    \"\"\"Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\"\"\"\n    headers = {}\n    headers['User-Agent'] = 'webfinger-python/{}'.format(webfinger.__version__)\n    headers['Host'] = host\n    headers['Connection'] = 'keep-alive'\n    headers['Accept'] = '*/*'\n    if extra_headers is not None:\n        headers.update(extra_headers)\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, headers)\n    except (urllib.error.HTTPError, urllib.error.URLError) as e:\n        if e.code == 404:\n            raise DocumentNotFound(\"Document not found. ({})\".forma", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int=15, raise_ssl_errors: bool=True, extra_headers: dict=None):\n    try:\n        return fetch_document(handle, host, path, timeout, raise_ssl_errors, extra_headers)\n    except URLError as e:\n        if e.args[0] == codes.connection_refused:\n            raise ConnectionRefusedError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.connection_timeout:\n            raise ConnectionTimeoutError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.bad_url:\n            raise BadUrlError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.internal_server_error:\n            raise InternalServerError(\"Webfinger document could not be retrieved.\")\n        if e.args[0] == codes.internal_request_error:\n            raise InternalRequestError(\"Webfinger document could not be retrieved.\")\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout: int = 10,\n                                    raise_ssl_errors: bool = True, extra_headers: dict = None):\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    url = 'https://{}:{}/{}'.format(host, port, path)\n    response = requests.get(url, allow_redirects=True, stream=handle, timeout=timeout, headers=extra_headers)\n    try:\n        response.raise_for_status()\n    except HTTPError as e:\n        if e.response.status_code == requests.codes.unauthorized:\n            raise exceptions.Unauthorized('You must be an admin to use this function.')\n        if raise_ssl_errors:\n            raise exceptions.SSLError('Certificate verification failed.')\n        raise\n    return response.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: BinaryIO, host: str, path: str, timeout=10, raise_ssl_errors=True, extra_headers=None):\n    try:\n        r = requests.get(\n            url=f'https://{host}:{PORT}{path}',\n            allow_redirects=True,\n            headers=extra_headers or {'Host': host},\n            stream=True,\n        )\n        handle.write(r.text)\n    except Exception as e:\n        if raise_ssl_errors:\n            raise e\n        else:\n            print(e)\n            print(\"Could not retrieve webfinger document for {}\".format(path))\n            return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    return parse_diaspora_webfinger(result['webfinger'])\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    parsed = parse_diaspora_webfinger(response.read().decode('utf-8'))\n    return parsed\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_host_meta(handle)\n    if response:\n        return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    try:\n        document = urlopen(handle)\n    except HTTPError:\n        raise ValueError(\"Failed to retrieve %s\" % handle)\n\n    parsed = urlparse(handle)\n\n    if parsed.scheme!= 'https':\n        raise ValueError(\"Invalid remote handle %s\" % handle)\n\n    parsed_url = urlparse(parsed.geturl())\n\n    if parsed_url.scheme == 'https':\n        # no authentication for SSL requests\n        return parsed.fragment\n\n    # if the remote resource is an absolute path, just use it as the document\n    if os.path.isabs(parsed.path):\n        return parsed.fragment\n\n    # parse the document and return the result\n    try:\n        return parse_diaspora_webfinger(document.read())\n    except Exception:\n        raise ValueError(\"Failed to parse %s\" % handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = urllib.request.urlopen(handle)\n    return parse_diaspora_webfinger(doc)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_host_meta(handle)\n    if not response:\n        return {}\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = parse_diaspora_webfinger(handle)\n    return document\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    return parse_diaspora_webfinger(response.read().decode('utf-8'))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_host_meta(handle)\n    parser = WebfingerParser()\n    return parser.parse(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    return parse_diaspora_webfinger(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    result = retrieve_diaspora_host_meta(handle)\n    return parse_diaspora_webfinger(result['webfinger'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    parsed = parse_diaspora_webfinger(response.read().decode('utf-8'))\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    try:\n        document = urlopen(handle)\n    except HTTPError:\n        raise ValueError(\"Failed to retrieve %s\" % handle)\n\n    parsed = urlparse(handle)\n\n    if parsed.scheme!= 'https':\n        raise ValueError(\"Invalid remote handle %s\" % handle)\n\n    parsed_url = urlparse(parsed.geturl())\n\n    if parsed_url.scheme == 'https':\n        # no authentication for SSL requests\n        return parsed.fragment\n\n    # if the remote resource is an absolute path, just use it as the document\n    if os.path.isabs(parsed.path):\n        return parsed.fragment\n\n    # parse the document and return the result\n    try:\n        return parse_diaspora_webfinger(document.read())\n    except Exception:\n        raise ValueError(\"Failed to parse %s\" % handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = urllib.request.urlopen(handle)\n    return parse_diaspora_webfinger(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_host_meta(handle)\n    if not response:\n        return {}\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = parse_diaspora_webfinger(handle)\n    return document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = urlopen(handle)\n    return parse_diaspora_webfinger(response.read().decode('utf-8'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_host_meta(handle)\n    parser = WebfingerParser()\n    return parser.parse(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = handle.read()\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    try:\n        url = 'https://{host}/rest/diaspora/documents/metadata'.format(host=host)\n        r = requests.get(url, stream=True)\n        r.raise_for_status()\n        return r.json()\n    except RequestException:\n        raise ValueError('Could not find a Diaspora host meta document at {}'.format(host))\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://api.host-meta.org/v1/hosts/{}/xrd'.format(host),\n        headers={\n            'X-RateLimit-Remaining': '10',\n            'X-RateLimit-Reset': '1',\n        },\n    )\n    response.raise_for_status()\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    # If we can get a remote host from the server, we can just return it.\n    if host is not None:\n        return host\n\n    # Otherwise, we need to request a remote host from the XRD.\n    try:\n        return requests.get(\n            'https://%s/xrd/hostmeta' % (host,)\n        ).content\n    except Exception:\n        # If we can't get a remote host from the server, we can just return\n        # the XRD file we were given at the time of initialization.\n        if host is None:\n            return XRD.from_file('xrd.xml')\n        else:\n            return XRD.from_url(host)\n", "def retrieve_diaspora_host_meta(host):\n    if host == 'localhost':\n        host = '127.0.0.1'\n    url = 'http://%s/xrd' % host\n    r = requests.get(url)\n    return r.content\n", "def retrieve_diaspora_host_meta(host):\n    xrd = xrdapi.XRD(host)\n    return xrd.retrieve()\n", "def retrieve_diaspora_host_meta(host):\n    return get_xrd_from_url(\n        'https://%s/xrd/metadata/host-meta' % host,\n        verify=False)\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return XRD(response.text)\n", "def retrieve_diaspora_host_meta(host):\n    session = get_session()\n    url = 'https://%s/xrd/host-meta' % host\n    r = session.get(url)\n    r.raise_for_status()\n    return r.json()\n", "def retrieve_diaspora_host_meta(host):\n    url = \"https://%s/metadata.xrd\" % host\n    response = requests.get(url)\n    if response.status_code == 200:\n        return XRD(response.text)\n    return XRD(None)\n", "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?key={api_key}\"\n    ).format(\n        host=host,\n        api_key=DIAspora.API_KEY\n    )\n\n    r = requests.get(url)\n    if r.status_code!= 200:\n        raise IOError(\n            \"Failed to get remote host meta from {host}\".format(\n                host=host\n            )\n        )\n\n    return r.json()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    try:\n        url = 'https://{host}/rest/diaspora/documents/metadata'.format(host=host)\n        r = requests.get(url, stream=True)\n        r.raise_for_status()\n        return r.json()\n    except RequestException:\n        raise ValueError('Could not find a Diaspora host meta document at {}'.format(host))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://api.host-meta.org/v1/hosts/{}/xrd'.format(host),\n        headers={\n            'X-RateLimit-Remaining': '10',\n            'X-RateLimit-Reset': '1',\n        },\n    )\n    response.raise_for_status()\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # If we can get a remote host from the server, we can just return it.\n    if host is not None:\n        return host\n\n    # Otherwise, we need to request a remote host from the XRD.\n    try:\n        return requests.get(\n            'https://%s/xrd/hostmeta' % (host,)\n        ).content\n    except Exception:\n        # If we can't get a remote host from the server, we can just return\n        # the XRD file we were given at the time of initialization.\n        if host is None:\n            return XRD.from_file('xrd.xml')\n        else:\n            return XRD.from_url(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == 'localhost':\n        host = '127.0.0.1'\n    url = 'http://%s/xrd' % host\n    r = requests.get(url)\n    return r.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    xrd = xrdapi.XRD(host)\n    return xrd.retrieve()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_xrd_from_url(\n        'https://%s/xrd/metadata/host-meta' % host,\n        verify=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/host-meta' % host,\n        verify=False,\n        auth=(settings.XRD_USERNAME, settings.XRD_PASSWORD),\n    )\n    response.raise_for_status()\n    return XRD(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    session = get_session()\n    url = 'https://%s/xrd/host-meta' % host\n    r = session.get(url)\n    r.raise_for_status()\n    return r.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"https://%s/metadata.xrd\" % host\n    response = requests.get(url)\n    if response.status_code == 200:\n        return XRD(response.text)\n    return XRD(None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = (\n        \"https://api.diaspora.org/v1/hosts/{host}?key={api_key}\"\n    ).format(\n        host=host,\n        api_key=DIAspora.API_KEY\n    )\n\n    r = requests.get(url)\n    if r.status_code!= 200:\n        raise IOError(\n            \"Failed to get remote host meta from {host}\".format(\n                host=host\n            )\n        )\n\n    return r.json()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    resp = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return (resp.status_code, resp.exception)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    response.raise_for_status()\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    # if data is file-like, then send it as multipart/form-data content\n    if hasattr(data, \"read\"):\n        response = requests.post(url, data=data, headers={\"Content-Type\": \"multipart/form-data\"}, timeout=timeout, *args, **kwargs)\n    else:\n        response = requests.post(url, data=data, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, timeout=timeout, *args, **kwargs)\n\n    if response.status_code!= 200:\n        response.raise_for_status()\n\n    return response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    if \"data\" in kwargs:\n        data = kwargs[\"data\"]\n\n    response = requests.post(\n        url,\n        data=data,\n        headers={\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"\n        },\n        timeout=timeout,\n        *args,\n        **kwargs\n    )\n\n    try:\n        response.raise_for_status()\n    except HTTPError as err:\n        return err.response.status_code, err.response.text\n\n    return response.status_code, response.json()\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n\n    if response.status_code!= 200:\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            return (response.status_code, e)\n\n    return (response.status_code, response)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs)\n    return response.status_code, response.json()\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    if response.status_code!= requests.codes.ok:\n        response.raise_for_status()\n    return response.status_code, response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.json()\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n                             *args, **kwargs)\n    response.raise_for_status()\n    return response\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    resp = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return (resp.status_code, resp.exception)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    response.raise_for_status()\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = None\n\n    # if data is file-like, then send it as multipart/form-data content\n    if hasattr(data, \"read\"):\n        response = requests.post(url, data=data, headers={\"Content-Type\": \"multipart/form-data\"}, timeout=timeout, *args, **kwargs)\n    else:\n        response = requests.post(url, data=data, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, timeout=timeout, *args, **kwargs)\n\n    if response.status_code!= 200:\n        response.raise_for_status()\n\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    if \"data\" in kwargs:\n        data = kwargs[\"data\"]\n\n    response = requests.post(\n        url,\n        data=data,\n        headers={\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"\n        },\n        timeout=timeout,\n        *args,\n        **kwargs\n    )\n\n    try:\n        response.raise_for_status()\n    except HTTPError as err:\n        return err.response.status_code, err.response.text\n\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n\n    if response.status_code!= 200:\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as e:\n            return (response.status_code, e)\n\n    return (response.status_code, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs)\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs\n    )\n    if response.status_code!= requests.codes.ok:\n        response.raise_for_status()\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout,\n                             headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n                             *args, **kwargs)\n    response.raise_for_status()\n    return response\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        dic = dict_merge(dic, getattr(dic, k), val)\n    return dic\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n\n    def _inner_dict_insert(dic, key, val, *keys):\n        if not keys:\n            dic[key] = val\n            return\n        curr_key = keys[0]\n        if len(keys) == 1:\n            if curr_key in dic:\n                dic[curr_key].update(val)\n            else:\n                dic[curr_key] = {}\n        else:\n            if curr_key in dic:\n                dic[curr_key].update(_inner_dict_insert(dic[curr_key], key, val, *keys[1:]))\n            else:\n                dic[curr_key] = {}\n            _inner_dict_insert(dic[curr_key], key, val, *keys[1:])\n\n    if isinstance(val, dict):\n        _inner_dict_insert(dic, key, val, *keys)\n    else:\n        dic[key] = val\n    return", "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            if isinstance(dic[key_], dict):\n                dic[key_] = dict_insert(dic[key_], val, key_)\n            else:\n                dic[key_] = [dic[key_], val]\n        else:\n            dic[key_] = [val, key_]\n    return dic\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        dic = dict_merge(dic, getattr(dic, k), val)\n    return dic\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic = dic[key]\n        else:\n            dic[key] = {}\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not hasattr(dic, key):\n            setattr(dic, key, {})\n        dic = getattr(dic, key)\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n\n    def _inner_dict_insert(dic, key, val, *keys):\n        if not keys:\n            dic[key] = val\n            return\n        curr_key = keys[0]\n        if len(keys) == 1:\n            if curr_key in dic:\n                dic[curr_key].update(val)\n            else:\n                dic[curr_key] = {}\n        else:\n            if curr_key in dic:\n                dic[curr_key].update(_inner_dict_insert(dic[curr_key], key, val, *keys[1:]))\n            else:\n                dic[curr_key] = {}\n            _inner_dict_insert(dic[curr_key], key, val, *keys[1:])\n\n    if isinstance(val, dict):\n        _inner_dict_insert(dic, key, val, *keys)\n    else:\n        dic[key] = val\n    return", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key_ in keys:\n        if key_ in dic:\n            if isinstance(dic[key_], dict):\n                dic[key_] = dict_insert(dic[key_], val, key_)\n            else:\n                dic[key_] = [dic[key_], val]\n        else:\n            dic[key_] = [val, key_]\n    return dic\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key in dic:\n            dic[key].append(val)\n        else:\n            dic[key] = [val]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('', [\n            IniFile(path, spec_option=spec_option)\n            for path in settings_dirs.list_paths(settings_dirs.config_dir)\n        ])\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"{}/{}.{}\".format(\n                dir_, settings_dirs[dir_], settings_file_extension\n            ),\n            \"complex\",\n            [\n                IniFile(\"{}/{}\".format(dir_, file_), spec_option)\n                for file_ in settings_dirs[dir_]\n            ]\n        )\n        for dir_ in settings_dirs\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(\"list\", spec_option, [], settings_dirs)]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"list_of_file_{}\".format(i),\n            [],\n            \"\",\n            settings_dirs[\"file\"],\n            spec_option,\n        )\n        for i in range(1, 10)\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile('file_{}'.format(i), spec_option(i))\n            for i in range(1, settings_dirs + 1)\n        ],\n        False,\n        None,\n        lambda: None)\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile(os.path.join(sdir, 'files'), spec_option)\n            for sdir in settings_dirs\n        ],\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list-of-file-names',\n        [\n            IniFile(os.path.join(sdir, 'files.ini')),\n            IniFile(os.path.join(sdir, spec_option['default-file']))\n            for sdir in settings_dirs\n        ],\n        spec_option,\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('list-of-file-names-{}'.format(spec_option), [\n            IniFile(path, None, None) for path in settings_dirs\n        ])\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"{}/{}.txt\".format(settings_dir, s),\n            [\"file://\" + settings_dir + \"/\" + s + \".txt\"])\n        for s in sorted(os.listdir(settings_dirs[0]))]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}.ini'.format(dir, spec_option)\n        for dir in settings_dirs\n    ]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('', [\n            IniFile(path, spec_option=spec_option)\n            for path in settings_dirs.list_paths(settings_dirs.config_dir)\n        ])\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"{}/{}.{}\".format(\n                dir_, settings_dirs[dir_], settings_file_extension\n            ),\n            \"complex\",\n            [\n                IniFile(\"{}/{}\".format(dir_, file_), spec_option)\n                for file_ in settings_dirs[dir_]\n            ]\n        )\n        for dir_ in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(\"list\", spec_option, [], settings_dirs)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"list_of_file_{}\".format(i),\n            [],\n            \"\",\n            settings_dirs[\"file\"],\n            spec_option,\n        )\n        for i in range(1, 10)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile('file_{}'.format(i), spec_option(i))\n            for i in range(1, settings_dirs + 1)\n        ],\n        False,\n        None,\n        lambda: None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list_of_file_names',\n        [\n            IniFile(os.path.join(sdir, 'files'), spec_option)\n            for sdir in settings_dirs\n        ],\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        'list-of-file-names',\n        [\n            IniFile(os.path.join(sdir, 'files.ini')),\n            IniFile(os.path.join(sdir, spec_option['default-file']))\n            for sdir in settings_dirs\n        ],\n        spec_option,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType('list-of-file-names-{}'.format(spec_option), [\n            IniFile(path, None, None) for path in settings_dirs\n        ])\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        IniType(\n            \"{}/{}.txt\".format(settings_dir, s),\n            [\"file://\" + settings_dir + \"/\" + s + \".txt\"])\n        for s in sorted(os.listdir(settings_dirs[0]))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}/{}.ini'.format(dir, spec_option)\n        for dir in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return ConfigManager(cls.get_config_manager())\n", "def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "def ansible_config_manager(cls):\n    if cls.ANSIBLE_CONFIG_MANAGER is None:\n        cls.ANSIBLE_CONFIG_MANAGER = AnsibleConfigManager(cls)\n\n    return cls.ANSIBLE_CONFIG_MANAGER\n", "def ansible_config_manager(cls):\n    return cls.ansible_config_managers[cls.name]\n", "def ansible_config_manager(cls):\n    return cls.ansible.get('config_manager')\n", "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return ConfigManager(cls.get_config_manager())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls.ANSIBLE_CONFIG_MANAGER is None:\n        cls.ANSIBLE_CONFIG_MANAGER = AnsibleConfigManager(cls)\n\n    return cls.ANSIBLE_CONFIG_MANAGER\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.ansible_config_managers[cls.name]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.ansible.get('config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls._get_connection())\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls._context)\n\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls.context)\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return _workspace_manager\n", "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{}WorkspaceManager'.format(cls.__name__.lower()), None)\n    if workspace_manager_class is None:\n        raise NotImplementedError(\n            'This method must be overriden by a concrete subclass.')\n    return workspace_manager_class()\n", "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{0}WorkspaceManager'.format(cls.__name__.lower()))\n    return workspace_manager_class()\n", "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls._get_connection())\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls._context)\n\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if not cls._workspace_manager:\n        cls._workspace_manager = WorkspaceManager(cls.context)\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return _workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{}WorkspaceManager'.format(cls.__name__.lower()), None)\n    if workspace_manager_class is None:\n        raise NotImplementedError(\n            'This method must be overriden by a concrete subclass.')\n    return workspace_manager_class()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    workspace_manager_class = getattr(\n        cls, '{0}WorkspaceManager'.format(cls.__name__.lower()))\n    return workspace_manager_class()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager()\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    if cls._workspace_manager is None:\n        cls._workspace_manager = WorkspaceManager(cls)\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return _plugins_manager\n", "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_sdk.plugin_manager import PluginManager\n        cls._plugins_manager = PluginManager()\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_serial_port.plugins import SerialPluginManager\n        cls._plugins_manager = SerialPluginManager()\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return _plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_sdk.plugin_manager import PluginManager\n        cls._plugins_manager = PluginManager()\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    if cls._plugins_manager is None:\n        from tango_serial_port.plugins import SerialPluginManager\n        cls._plugins_manager = SerialPluginManager()\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Invalid spec file\")\n\n    result = cls.SCHEMA.load(spec_content)\n    if not result.errors:\n        return result.data\n    else:\n        raise IRValidatorException(\"Invalid spec file: {}\".format(result.errors))\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Spec content is required to load spec\")\n\n    return cls.load_yaml(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content to load from.\")\n\n    try:\n        spec_content = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Invalid YAML file format. {}\".format(e))\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException(\"Invalid spec file content. Must be a dictionary.\")\n\n    required_fields = ['version', 'name', 'description', 'platform', 'definition', 'dependencies']\n    missing_fields = [field for field in required_fields if field not in spec_content]\n\n    if missing_fields:\n        raise IRValidatorException(\"Missing required fields: {}\".format(missing_fields))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if 'description' not in spec_content:\n        raise IRValidatorException(\"Missing description in spec file\")\n\n    if 'platforms' not in spec_content:\n        raise IRValidatorException(\"Missing platforms in spec file\")\n\n    if'version' not in spec_content:\n        raise IRValidatorException(\"Missing version in spec file\")\n\n    if 'categories' not in spec_content:\n        raise IRValidatorException(\"Missing categories in spec file\")\n\n    if 'rules' not in spec_content:\n        raise IRValidatorException(\"Missing rules in spec file\")\n\n    return cls.validate_from_file(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation is impossible\"\n        )\n\n    return cls.SCHEMA.load(spec_content).data\n", "def validate_from_content(cls, spec_content=None):\n    data = cls.load_from_content(spec_content=spec_content)\n    return cls.validate(data)\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Invalid YAML file format', e)\n\n    if not data:\n        raise IRValidatorException('No data in the spec file')\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Spec file contains invalid YAML: {}\".format(e))\n\n    try:\n        cls.validate(data)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(e))\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    try:\n        return cls.SCHEMA.load(spec_content)\n    except ValidationError as e:\n        raise IRValidatorException('Malformed spec file', e)\n", "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    try:\n        return cls._load_from_content(spec_content)\n    except IOError as io_err:\n        raise IRValidatorException(\"Invalid spec file: {}\".format(io_err))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Invalid spec file\")\n\n    result = cls.SCHEMA.load(spec_content)\n    if not result.errors:\n        return result.data\n    else:\n        raise IRValidatorException(\"Invalid spec file: {}\".format(result.errors))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Spec content is required to load spec\")\n\n    return cls.load_yaml(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"No content to load from.\")\n\n    try:\n        spec_content = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Invalid YAML file format. {}\".format(e))\n\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException(\"Invalid spec file content. Must be a dictionary.\")\n\n    required_fields = ['version', 'name', 'description', 'platform', 'definition', 'dependencies']\n    missing_fields = [field for field in required_fields if field not in spec_content]\n\n    if missing_fields:\n        raise IRValidatorException(\"Missing required fields: {}\".format(missing_fields))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    if 'description' not in spec_content:\n        raise IRValidatorException(\"Missing description in spec file\")\n\n    if 'platforms' not in spec_content:\n        raise IRValidatorException(\"Missing platforms in spec file\")\n\n    if'version' not in spec_content:\n        raise IRValidatorException(\"Missing version in spec file\")\n\n    if 'categories' not in spec_content:\n        raise IRValidatorException(\"Missing categories in spec file\")\n\n    if 'rules' not in spec_content:\n        raise IRValidatorException(\"Missing rules in spec file\")\n\n    return cls.validate_from_file(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\n            \"No spec content provided so validation is impossible\"\n        )\n\n    return cls.SCHEMA.load(spec_content).data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = cls.load_from_content(spec_content=spec_content)\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException('Invalid YAML file format', e)\n\n    if not data:\n        raise IRValidatorException('No data in the spec file')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Spec file contains invalid YAML: {}\".format(e))\n\n    try:\n        cls.validate(data)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(\"Missing required fields in spec file: {}\".format(e))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n\n    try:\n        return cls.SCHEMA.load(spec_content)\n    except ValidationError as e:\n        raise IRValidatorException('Malformed spec file', e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if not spec_content:\n        raise IRValidatorException(\"Missing spec content\")\n\n    try:\n        return cls._load_from_content(spec_content)\n    except IOError as io_err:\n        raise IRValidatorException(\"Invalid spec file: {}\".format(io_err))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path to YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid file path to YAML file\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    cls.validate_data(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = cls.load_yaml(yaml_file)\n    cls.validate_data(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('File path is missing')\n\n    with open(yaml_file, 'r') as file:\n        data = yaml.safe_load(file)\n\n    if data is None or data.get('type')!= 'ir':\n        raise IRValidatorException('Missing data in YAML file')\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path\")\n\n    with open(yaml_file, \"r\") as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(\"Unable to parse YAML file '{}'\".format(yaml_file)) from exc\n\n    if not data:\n        raise IRValidatorException(\"Unable to load YAML file '{}'\".format(yaml_file))\n\n    if not cls.check_fields(data):\n        raise IRValidatorException(\"Missing mandatory fields in YAML file\")\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    data = cls.load_file(yaml_file)\n    cls.validate(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    if not yaml_file:\n        raise IRValidatorException('No YAML file provided')\n\n    with open(yaml_file, 'r') as stream:\n        try:\n            return cls.validate(yaml.load(stream))\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file {}:\\n{}'.format(yaml_file, exc))\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('No YAML file provided')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as e:\n            raise IRValidatorException('Invalid YAML file {}:\\n{}'.format(\n                yaml_file, e))\n\n    if cls.__name__ not in data:\n        raise IRValidatorException('Missing required fields in {}'.format(yaml_file))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"No file provided to load IR validator\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid file provided to load IR validator\")\n\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    try:\n        cls.validate(data)\n    except IRValidatorException as e:\n        raise IRValidatorException(\"IR validator failed to validate data: {}\".format(str(e)))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls._load_file(yaml_file)\n\n    try:\n        return cls._validate_from_file_dict(yaml_file)\n    except IRValidatorException as e:\n        raise e\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path for IR Validator\")\n\n    with open(yaml_file) as f:\n        yaml_data = yaml.safe_load(f)\n\n    if not yaml_data.get('username') or not yaml_data.get('password'):\n        raise IRValidatorException(\"Missing required fields for IR Validator\")\n\n    return yaml_data\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path to YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid file path to YAML file\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    cls.validate_data(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.DEFAULT_YAML_FILE\n    data = cls.load_yaml(yaml_file)\n    cls.validate_data(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('File path is missing')\n\n    with open(yaml_file, 'r') as file:\n        data = yaml.safe_load(file)\n\n    if data is None or data.get('type')!= 'ir':\n        raise IRValidatorException('Missing data in YAML file')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required file path\")\n\n    with open(yaml_file, \"r\") as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(\"Unable to parse YAML file '{}'\".format(yaml_file)) from exc\n\n    if not data:\n        raise IRValidatorException(\"Unable to load YAML file '{}'\".format(yaml_file))\n\n    if not cls.check_fields(data):\n        raise IRValidatorException(\"Missing mandatory fields in YAML file\")\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = cls.load_file(yaml_file)\n    cls.validate(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if not yaml_file:\n        raise IRValidatorException('No YAML file provided')\n\n    with open(yaml_file, 'r') as stream:\n        try:\n            return cls.validate(yaml.load(stream))\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file {}:\\n{}'.format(yaml_file, exc))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('No YAML file provided')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.safe_load(f)\n        except yaml.YAMLError as e:\n            raise IRValidatorException('Invalid YAML file {}:\\n{}'.format(\n                yaml_file, e))\n\n    if cls.__name__ not in data:\n        raise IRValidatorException('Missing required fields in {}'.format(yaml_file))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"No file provided to load IR validator\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid file provided to load IR validator\")\n\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n\n    try:\n        cls.validate(data)\n    except IRValidatorException as e:\n        raise IRValidatorException(\"IR validator failed to validate data: {}\".format(str(e)))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = cls._load_file(yaml_file)\n\n    try:\n        return cls._validate_from_file_dict(yaml_file)\n    except IRValidatorException as e:\n        raise e\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing file path for IR Validator\")\n\n    with open(yaml_file) as f:\n        yaml_data = yaml.safe_load(f)\n\n    if not yaml_data.get('username') or not yaml_data.get('password'):\n        raise IRValidatorException(\"Missing required fields for IR Validator\")\n\n    return yaml_data\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for include_group in parser_dict['include_groups']:\n        include_group['directive'] = include_group['directive'].replace(\n            '#include <iostream>', '#include \"{}\"'.format(include_group['directive']))\n\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for include_dict in parser_dict[\"include_dict\"]:\n        include_group = copy.deepcopy(include_dict)\n        include_group[\"included_path\"] = include_group[\"included_path\"].split(\":\")\n\n        if include_group[\"included_path\"][0] not in include_groups:\n            include_groups[include_group[\"included_path\"][0]] = []\n\n        include_groups[include_group[\"included_path\"][0]].append(include_group)\n\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for include_line in parser_dict.get('include_groups', '').split('\\n'):\n        if not include_line:\n            continue\n        if include_line.startswith('#'):\n            continue\n        split_line = include_line.split(' ', 2)\n        if len(split_line) == 3:\n            # Split on colon\n            split_line = split_line[2].split(':')\n            include_groups[split_line[0]] = split_line[1]\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict.get('path'),\n            'content': include_dict.get('content'),\n        })\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    includes = []\n    for include in parser_dict[\"includes\"]:\n        if \"include\" in include:\n            includes.append(include[\"include\"].replace(\"\\\\\", \"/\"))\n    return includes\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            # Include the directive in the spec file if it exists.\n            if key in self.spec_dict:\n                include_groups.append(key)\n            # Otherwise add the directive in the includes group.\n            else:\n                include_groups.append(key)\n                self.spec_dict[key] = copy.deepcopy(value)\n        else:\n            # Add the directive in the includes group.\n            include_groups.append(key)\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict['path'],\n            'description': include_dict.get('description', ''),\n           'source': include_dict.get('source', [])\n        })\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include_dict', []):\n        if 'include_group' in include_dict:\n            include_groups.append(include_dict['include_group'])\n\n    parser_dict['include_groups'] = include_groups\n", "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        return parser_dict['include_groups']\n    else:\n        return None\n", "def _include_groups(self, parser_dict):\n    if parser_dict['include'] is not None:\n        include_groups = parser_dict['include'].split(',')\n        for include_group in include_groups:\n            include_group = include_group.strip()\n            if include_group.startswith('\"') and include_group.endswith('\"'):\n                include_group = include_group[1:-1]\n            parser_dict['include'] = include_group\n    return parser_dict\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for include_group in parser_dict['include_groups']:\n        include_group['directive'] = include_group['directive'].replace(\n            '#include <iostream>', '#include \"{}\"'.format(include_group['directive']))\n\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for include_dict in parser_dict[\"include_dict\"]:\n        include_group = copy.deepcopy(include_dict)\n        include_group[\"included_path\"] = include_group[\"included_path\"].split(\":\")\n\n        if include_group[\"included_path\"][0] not in include_groups:\n            include_groups[include_group[\"included_path\"][0]] = []\n\n        include_groups[include_group[\"included_path\"][0]].append(include_group)\n\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = {}\n    for include_line in parser_dict.get('include_groups', '').split('\\n'):\n        if not include_line:\n            continue\n        if include_line.startswith('#'):\n            continue\n        split_line = include_line.split(' ', 2)\n        if len(split_line) == 3:\n            # Split on colon\n            split_line = split_line[2].split(':')\n            include_groups[split_line[0]] = split_line[1]\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict.get('path'),\n            'content': include_dict.get('content'),\n        })\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    includes = []\n    for include in parser_dict[\"includes\"]:\n        if \"include\" in include:\n            includes.append(include[\"include\"].replace(\"\\\\\", \"/\"))\n    return includes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            # Include the directive in the spec file if it exists.\n            if key in self.spec_dict:\n                include_groups.append(key)\n            # Otherwise add the directive in the includes group.\n            else:\n                include_groups.append(key)\n                self.spec_dict[key] = copy.deepcopy(value)\n        else:\n            # Add the directive in the includes group.\n            include_groups.append(key)\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include', []):\n        include_groups.append({\n            'path': include_dict['path'],\n            'description': include_dict.get('description', ''),\n           'source': include_dict.get('source', [])\n        })\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for include_dict in parser_dict.get('include_dict', []):\n        if 'include_group' in include_dict:\n            include_groups.append(include_dict['include_group'])\n\n    parser_dict['include_groups'] = include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        return parser_dict['include_groups']\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict['include'] is not None:\n        include_groups = parser_dict['include'].split(',')\n        for include_group in include_groups:\n            include_group = include_group.strip()\n            if include_group.startswith('\"') and include_group.endswith('\"'):\n                include_group = include_group[1:-1]\n            parser_dict['include'] = include_group\n    return parser_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    return {\n        'description': None,\n        'details': {\n           'minLength': None,\n           'maxLength': None,\n           'required': None,\n            'pattern': None,\n        },\n        'type': None,\n    }\n", "def get_spec_defaults(self):\n    return {\n        k: v for k, v in self._get_defaults(self._get_spec_getter()).items()\n    }\n", "def get_spec_defaults(self):\n    return {\n        k: v\n        for k, v in vars(self).items()\n        if not k.startswith(\"_\") and v is not None\n    }\n", "def get_spec_defaults(self):\n    return {}\n", "def get_spec_defaults(self):\n    defaults = super().get_spec_defaults()\n    defaults.update({\n        'file': None,\n        'line': None,\n        'function': None,\n        'name': None,\n       'module': None,\n    })\n    return defaults\n", "def get_spec_defaults(self):\n    return self._get_defaults(self.get_arguments_types())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {\n        'description': None,\n        'details': {\n           'minLength': None,\n           'maxLength': None,\n           'required': None,\n            'pattern': None,\n        },\n        'type': None,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {\n        k: v for k, v in self._get_defaults(self._get_spec_getter()).items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {\n        k: v\n        for k, v in vars(self).items()\n        if not k.startswith(\"_\") and v is not None\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    defaults = super().get_spec_defaults()\n    defaults.update({\n        'file': None,\n        'line': None,\n        'function': None,\n        'name': None,\n       'module': None,\n    })\n    return defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._get_defaults(self.get_arguments_types())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    deprecated = {}\n    for name, spec in self.spec_helper.items():\n        if spec.deprecated:\n            deprecated[name] = spec\n    return deprecated\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.items()\n            if k!= 'optional' and k!='required'}\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.deprecated_args.items()\n            if k!='version'}\n", "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    deprecated = {}\n    for name, spec in self.spec_helper.items():\n        if spec.deprecated:\n            deprecated[name] = spec\n    return deprecated\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.items()\n            if k!= 'optional' and k!='required'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {k: v for k, v in self.spec_helper.deprecated_args.items()\n            if k!='version'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.spec_helper.get_deprecated_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = {}\n\n    for argument in cli_args:\n        if argument in answer_file_args:\n            deprecated_args[argument] = cli_args[argument]\n\n    if deprecated_args:\n        print(\"The following arguments are deprecated:\", deprecated_args)\n        return False\n\n    return True\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = []\n    for key, value in cli_args.items():\n        if key in answer_file_args and cli_args[key]!= answer_file_args[key]:\n            deprecated_args.append(key)\n    if deprecated_args:\n        print('DEPRECATED: {}'.format(', '.join(deprecated_args)))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n\n    if deprecated_args == answer_file_args:\n        print(\"Deprecated arguments are set to the same as the file. \"\n              \"Please remove the argument from the file by setting the \"\n              \"argument name to the file name.\")\n        return False\n\n    for key, value in deprecated_args.items():\n        if key in cli_args and cli_args[key]!= value:\n            print(\"{} was set to {} in the file '{}'\".format(key, value, cli_args[key]))\n            return False\n    return True\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = []\n    for arg in cli_args:\n        if arg in answer_file_args:\n            deprecated_args.append(arg)\n    if deprecated_args:\n        deprecation_message = 'The following arguments are deprecated: {}'.format(deprecated_args)\n        print(deprecation_message)\n        print(answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = [arg for arg in cli_args.keys() if arg not in answer_file_args]\n    if deprecated_args:\n        deprecated_msg = \"The following arguments are deprecated and will be removed in the next release:\\n{}\"\n        deprecated_msg = deprecated_msg.format(', '.join(deprecated_args))\n        logger.warning(deprecated_msg)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    for arg in deprecated_args:\n        if arg in cli_args:\n            cli_args[arg] = int(cli_args[arg])\n        else:\n            cli_args.pop(arg)\n    for arg in answer_file_args:\n        if arg in cli_args:\n            answer_file_args[arg] = int(cli_args[arg])\n        else:\n            answer_file_args.pop(arg)\n    for arg, value in cli_args.items():\n        if arg not in deprecated_args and arg not in answer_file_args:\n            print('{} is deprecated and will be removed in future versions. Use {} instead.'.format(arg, arg))\n            cli_args[arg] = value\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_add(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_update(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_update(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_add(deprecated_args)\n\n    print(\"\\n**DEPRE", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args is None:\n        return\n\n    deprecated_args = deprecated_args.copy()\n    for arg in deprecated_args:\n        if arg in cli_args and cli_args[arg] == answer_file_args.get(arg, None):\n            print('argument {} is deprecated. Please use {} instead.'.format(arg, arg))\n            del deprecated_args[arg]\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n    deprecated_args['output_format'] = 'json'\n    print(deprecated_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated is not None:\n        if cli_args.deprecated not in ['y', 'n']:\n            raise exceptions.CLIAbort(\n                'Invalid value for --deprecated: {}'.format(cli_args.deprecated))\n        if cli_args.deprecated == 'y':\n            if answer_file_args is not None and 'answer_file' not in cli_args:\n                raise exceptions.CLIAbort('Missing answer_file')\n            if cli_args.deprecated == 'n':\n                if answer_file_args is None:\n                    raise exceptions.CLIAbort('Missing answer_file')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = {}\n\n    for argument in cli_args:\n        if argument in answer_file_args:\n            deprecated_args[argument] = cli_args[argument]\n\n    if deprecated_args:\n        print(\"The following arguments are deprecated:\", deprecated_args)\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = []\n    for key, value in cli_args.items():\n        if key in answer_file_args and cli_args[key]!= answer_file_args[key]:\n            deprecated_args.append(key)\n    if deprecated_args:\n        print('DEPRECATED: {}'.format(', '.join(deprecated_args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n\n    if deprecated_args == answer_file_args:\n        print(\"Deprecated arguments are set to the same as the file. \"\n              \"Please remove the argument from the file by setting the \"\n              \"argument name to the file name.\")\n        return False\n\n    for key, value in deprecated_args.items():\n        if key in cli_args and cli_args[key]!= value:\n            print(\"{} was set to {} in the file '{}'\".format(key, value, cli_args[key]))\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = []\n    for arg in cli_args:\n        if arg in answer_file_args:\n            deprecated_args.append(arg)\n    if deprecated_args:\n        deprecation_message = 'The following arguments are deprecated: {}'.format(deprecated_args)\n        print(deprecation_message)\n        print(answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = [arg for arg in cli_args.keys() if arg not in answer_file_args]\n    if deprecated_args:\n        deprecated_msg = \"The following arguments are deprecated and will be removed in the next release:\\n{}\"\n        deprecated_msg = deprecated_msg.format(', '.join(deprecated_args))\n        logger.warning(deprecated_msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    for arg in deprecated_args:\n        if arg in cli_args:\n            cli_args[arg] = int(cli_args[arg])\n        else:\n            cli_args.pop(arg)\n    for arg in answer_file_args:\n        if arg in cli_args:\n            answer_file_args[arg] = int(cli_args[arg])\n        else:\n            answer_file_args.pop(arg)\n    for arg, value in cli_args.items():\n        if arg not in deprecated_args and arg not in answer_file_args:\n            print('{} is deprecated and will be removed in future versions. Use {} instead.'.format(arg, arg))\n            cli_args[arg] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args(cli_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_add(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_update(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_list_args(deprecated_args)\n    deprecated_args = self._validate_args_to_update(deprecated_args)\n    deprecated_args = self._validate_args_to_remove(deprecated_args)\n    deprecated_args = self._validate_args_to_add(deprecated_args)\n\n    print(\"\\n**DEPRE", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    if deprecated_args is None:\n        return\n\n    deprecated_args = deprecated_args.copy()\n    for arg in deprecated_args:\n        if arg in cli_args and cli_args[arg] == answer_file_args.get(arg, None):\n            print('argument {} is deprecated. Please use {} instead.'.format(arg, arg))\n            del deprecated_args[arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecated_args = self.get_deprecated_args()\n    deprecated_args.update(cli_args)\n    deprecated_args.update(answer_file_args)\n    deprecated_args['output_format'] = 'json'\n    print(deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated is not None:\n        if cli_args.deprecated not in ['y', 'n']:\n            raise exceptions.CLIAbort(\n                'Invalid value for --deprecated: {}'.format(cli_args.deprecated))\n        if cli_args.deprecated == 'y':\n            if answer_file_args is not None and 'answer_file' not in cli_args:\n                raise exceptions.CLIAbort('Missing answer_file')\n            if cli_args.deprecated == 'n':\n                if answer_file_args is None:\n                    raise exceptions.CLIAbort('Missing answer_file')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    parser_spec = []\n    for parser in self._get_all_options_spec(parser_spec):\n        parser_spec.append(parser)\n    return parser_spec\n", "def get_parser_option_specs(self, command_name):\n    parser_specs = []\n    for option_group in self._option_groups:\n        for option in option_group.option_list:\n            if option.dest == command_name:\n                parser_specs.append(option.get_opt_string())\n    return parser_specs\n", "def get_parser_option_specs(self, command_name):\n    parser = self._get_all_options_spec(parser_dict=self._parser_dict)\n    return parser[command_name]\n", "def get_parser_option_specs(self, command_name):\n    option_spec = dict(\n            # to support multiple commands for the same option group,\n            # use '--%s' as separator between option groups\n            group=dict(required=False, default=''),\n            # to support multiple commands for different option groups\n            # use '--%s' as separator between option groups\n            options=dict(required=False, default=''),\n            )\n    return option_spec\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "def get_parser_option_specs(self, command_name):\n    parser_spec = self._get_all_options_spec(command_name)\n    return [option_spec for option_spec in parser_spec]\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "def get_parser_option_specs(self, command_name):\n    if command_name in self._get_all_options_spec():\n        return self._get_all_options_spec()[command_name]\n    return []\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_spec = []\n    for parser in self._get_all_options_spec(parser_spec):\n        parser_spec.append(parser)\n    return parser_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_specs = []\n    for option_group in self._option_groups:\n        for option in option_group.option_list:\n            if option.dest == command_name:\n                parser_specs.append(option.get_opt_string())\n    return parser_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser = self._get_all_options_spec(parser_dict=self._parser_dict)\n    return parser[command_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_spec = dict(\n            # to support multiple commands for the same option group,\n            # use '--%s' as separator between option groups\n            group=dict(required=False, default=''),\n            # to support multiple commands for different option groups\n            # use '--%s' as separator between option groups\n            options=dict(required=False, default=''),\n            )\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser_spec = self._get_all_options_spec(command_name)\n    return [option_spec for option_spec in parser_spec]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self._get_all_options_spec():\n        return self._get_all_options_spec()[command_name]\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError('subclasses must implement this method')\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[argparse.ArgumentParser, argparse.ArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    return self._option_specs.get((command_name, argument_name))\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    return self._option_specs.get((command_name, argument_name))\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, SimpleArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "def get_option_spec(self, command_name, argument_name):\n    parser = self.get_parser(command_name)\n    argument_spec = parser.option_specs[argument_name]\n    return argument_spec\n", "def get_option_spec(self, command_name, argument_name):\n    argument_spec = self.get_parser_option_specs(command_name)\n    return argument_spec.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[argparse.ArgumentParser, argparse.ArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    for option_spec in self._option_specs.get(command_name, []):\n        if option_spec.get('name') == argument_name:\n            return option_spec\n    return None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError('subclasses must implement this method')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[argparse.ArgumentParser, argparse.ArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    return self._option_specs.get((command_name, argument_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, TypeSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    return self._option_specs.get((command_name, argument_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[ArgumentSpec, SimpleArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    raise NotImplementedError(\n        'operation get_option_spec(...) not yet implemented')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser = self.get_parser(command_name)\n    argument_spec = parser.option_specs[argument_name]\n    return argument_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    argument_spec = self.get_parser_option_specs(command_name)\n    return argument_spec.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    # type: (str, str) -> Union[argparse.ArgumentParser, argparse.ArgumentSpec]\n    \"\"\"\n    Gets the specification for the specified option name.\n    \"\"\"\n    # pylint: disable=no-self-use\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    for option_spec in self._option_specs.get(command_name, []):\n        if option_spec.get('name') == argument_name:\n            return option_spec\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_arguments]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_argument]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not self.spec_helper.is_silent(arg)]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "def get_silent_args(self, args):\n    return [name for name in args if name not in self.spec_helper.silent_arguments]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "def get_silent_args(self, args):\n    return [a for a in args if not self.spec_helper[a]]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not self.spec_helper.is_silent(arg)]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [a for a in args if a not in self.spec_helper.silent_arguments]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_argument]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not self.spec_helper.is_silent(arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg not in self.spec_helper.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [name for name in args if name not in self.spec_helper.silent_arguments]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [a for a in args if not self.spec_helper[a]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= self.spec_helper.silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not self.spec_helper.is_silent(arg)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    missing_args = []\n    for arg in self.spec_helper.required_args:\n        if args.get(arg) is None:\n            missing_args.append(arg)\n    if missing_args:\n        raise exceptions.MissingArgumentError(missing_args)\n", "def validate_requires_args(self, args):\n    missing = [arg for arg in self.spec_helper.required_args if arg not in args]\n    if missing:\n        raise exceptions.MissingRequiredArguments(missing)\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise InvalidRequirementsError(\n                'Required argument \"{}\" is not provided'.format(arg))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if args[arg] is None:\n            raise InvalidArgument(\"Missing argument: {}\".format(arg))\n", "def validate_requires_args(self, args):\n    missing = []\n\n    for name, required in self.spec_helper.requires.items():\n        if name not in args or not args[name]:\n            missing.append(name)\n\n    if missing:\n        raise InvalidConfiguration(\n            'Missing required arguments: {}'.format(missing)\n        )\n", "def validate_requires_args(self, args):\n    required_args = self.spec_helper.get_required_args()\n    for arg in required_args:\n        if args[arg] is None:\n            raise InvalidCommand(\n                '{} is required for {}'.format(arg, self.__class__.__name__)\n            )\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if args[arg] is None:\n            raise InvalidArgument(\n                'Missing required argument: %s' % arg, 'argument_is_required')\n", "def validate_requires_args(self, args):\n    return all([args.silence, args.automount, args.container_name, args.mount_point])\n", "def validate_requires_args(self, args):\n    required_args = self.spec_helper.required_args()\n    missing = [arg for arg in required_args if arg not in args]\n    if missing:\n        raise InvalidArguments(\"The following required arguments are missing: {}\".format(missing))\n", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise ArgumentError(\n                'Missing required argument %s from command %s' %\n                (arg, self.spec_helper.name))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    missing_args = []\n    for arg in self.spec_helper.required_args:\n        if args.get(arg) is None:\n            missing_args.append(arg)\n    if missing_args:\n        raise exceptions.MissingArgumentError(missing_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    missing = [arg for arg in self.spec_helper.required_args if arg not in args]\n    if missing:\n        raise exceptions.MissingRequiredArguments(missing)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise InvalidRequirementsError(\n                'Required argument \"{}\" is not provided'.format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if args[arg] is None:\n            raise InvalidArgument(\"Missing argument: {}\".format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    missing = []\n\n    for name, required in self.spec_helper.requires.items():\n        if name not in args or not args[name]:\n            missing.append(name)\n\n    if missing:\n        raise InvalidConfiguration(\n            'Missing required arguments: {}'.format(missing)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.spec_helper.get_required_args()\n    for arg in required_args:\n        if args[arg] is None:\n            raise InvalidCommand(\n                '{} is required for {}'.format(arg, self.__class__.__name__)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if args[arg] is None:\n            raise InvalidArgument(\n                'Missing required argument: %s' % arg, 'argument_is_required')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all([args.silence, args.automount, args.container_name, args.mount_point])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self.spec_helper.required_args()\n    missing = [arg for arg in required_args if arg not in args]\n    if missing:\n        raise InvalidArguments(\"The following required arguments are missing: {}\".format(missing))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.spec_helper.required_args:\n            raise ArgumentError(\n                'Missing required argument %s from command %s' %\n                (arg, self.spec_helper.name))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition\n    \"\"\"\n    arg_list = []\n    arg_names = []\n    for arg in args:\n        if arg['name'] not in options_spec \\\n                and arg['required'] and arg['condition']:\n            arg_list.append(arg['name'])\n            arg_names.append(arg['name'])\n    return arg_list, arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition\n    \"\"\"\n    arg_names = []\n    for arg in args:\n        if not arg.required or arg.when == 'when_all':\n            arg_names.append(arg.name)\n\n    return arg_names, args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    required = []\n    condition = None\n    for arg in args:\n        if condition is None:\n            condition = arg.required_when\n        else:\n            if condition(arg):\n                condition = None\n        if condition and not condition(arg):\n            required.append(arg.name)\n    return required, condition\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if arg in options_spec and arg not in matched_args:\n            matched_args.append(arg)\n    return matched_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_type in zip(args, options_spec):\n        if arg_type =='required' and arg_name not in args:\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if not arg or arg in self.spec_helper.required_when:\n            matched_args.append(arg)\n        else:\n            break\n    return matched_args, [name for name in options_spec\n                         if name in arg]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    condition_name = self.spec_helper.get_conditionally_name(\n        command_name, options_spec)\n    condition_args = getattr(options_spec[command_name], condition_name)\n    return [arg for arg in args if condition_args(arg)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name, options_spec)\n    return condition.get('required_when', [])\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg_name, arg_description in options_spec.items():\n        if (arg_description['required_when']\n                and args.get(arg_name) is None):\n            matched_args.append(arg_name)\n    return matched_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    args_to_match = []\n    for arg in args:\n        if arg in options_spec and args_to_match:\n            args_to_match.append(arg)\n        elif arg not in options_spec and args_to_match:\n            args_to_match.append(arg)\n        elif arg not in options_spec and not args_to_match:\n            args_to_match.append(arg)\n    return args_to_match\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition\n    \"\"\"\n    arg_list = []\n    arg_names = []\n    for arg in args:\n        if arg['name'] not in options_spec \\\n                and arg['required'] and arg['condition']:\n            arg_list.append(arg['name'])\n            arg_names.append(arg['name'])\n    return arg_list, arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n        condition\n    \"\"\"\n    arg_names = []\n    for arg in args:\n        if not arg.required or arg.when == 'when_all':\n            arg_names.append(arg.name)\n\n    return arg_names, args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    required = []\n    condition = None\n    for arg in args:\n        if condition is None:\n            condition = arg.required_when\n        else:\n            if condition(arg):\n                condition = None\n        if condition and not condition(arg):\n            required.append(arg.name)\n    return required, condition\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if arg in options_spec and arg not in matched_args:\n            matched_args.append(arg)\n    return matched_args\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    arg_names = []\n    for arg_name, arg_type in zip(args, options_spec):\n        if arg_type =='required' and arg_name not in args:\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg in args:\n        if not arg or arg in self.spec_helper.required_when:\n            matched_args.append(arg)\n        else:\n            break\n    return matched_args, [name for name in options_spec\n                         if name in arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    condition_name = self.spec_helper.get_conditionally_name(\n        command_name, options_spec)\n    condition_args = getattr(options_spec[command_name], condition_name)\n    return [arg for arg in args if condition_args(arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    condition = self.spec_helper.get_condition(command_name, options_spec)\n    return condition.get('required_when', [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    matched_args = []\n    for arg_name, arg_description in options_spec.items():\n        if (arg_description['required_when']\n                and args.get(arg_name) is None):\n            matched_args.append(arg_name)\n    return matched_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    List arguments with ``required_when`` condition matched.\n\n    :param command_name: the command name.\n    :param options_spec: the list of command spec options.\n    :param args: the received input arguments\n    :return: list, list of argument names with matched ``required_when``\n             condition\n    \"\"\"\n    args_to_match = []\n    for arg in args:\n        if arg in options_spec and args_to_match:\n            args_to_match.append(arg)\n        elif arg not in options_spec and args_to_match:\n            args_to_match.append(arg)\n        elif arg not in options_spec and not args_to_match:\n            args_to_match.append(arg)\n    return args_to_match\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        return \"Too many arguments.\"\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS_LENGTH:\n        raise InvalidArgumentsException\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments!')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.get('max_length'):\n        raise InfraredSensorConfigError('Not enough data to measure time spent.')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise exceptions.ArgumentTooLongException\n", "def validate_length_args(self, args):\n    arg_length = len(args)\n    if arg_length > self.spec_helper.max_args:\n        raise BadRequest(\"Not enough arguments to function call.\")\n", "def validate_length_args(self, args):\n    if args is None or args == []:\n        return\n    if len(args) > self.spec_helper.max_args:\n        raise InvalidArgumentException(\n            '{} arguments cannot be longer than {}'.format(\n                len(args), self.spec_helper.max_args\n            )\n        )\n", "def validate_length_args(self, args):\n    if args['--min-length'] is not None and len(args['--min-length']) < 1:\n        raise exceptions.ArgumentError(\n            'Must specify a minimum length value greater than 0.')\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS:\n        raise InvalidCommandException(\n            'Argument count is greater than specified: {}'.format(len(args)))\n", "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config['general']['max_length']:\n        raise InfraredException('Maximum allowed length {} is reached'.format(self.spec_helper.config['general']['max_length']))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        return \"Too many arguments.\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS_LENGTH:\n        raise InvalidArgumentsException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise Exception('Too many arguments!')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config.get('max_length'):\n        raise InfraredSensorConfigError('Not enough data to measure time spent.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.max_args:\n        raise exceptions.ArgumentTooLongException\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_length = len(args)\n    if arg_length > self.spec_helper.max_args:\n        raise BadRequest(\"Not enough arguments to function call.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args is None or args == []:\n        return\n    if len(args) > self.spec_helper.max_args:\n        raise InvalidArgumentException(\n            '{} arguments cannot be longer than {}'.format(\n                len(args), self.spec_helper.max_args\n            )\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args['--min-length'] is not None and len(args['--min-length']) < 1:\n        raise exceptions.ArgumentError(\n            'Must specify a minimum length value greater than 0.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.MAX_ARGS:\n        raise InvalidCommandException(\n            'Argument count is greater than specified: {}'.format(len(args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.spec_helper.config['general']['max_length']:\n        raise InfraredException('Maximum allowed length {} is reached'.format(self.spec_helper.config['general']['max_length']))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    choices = self.spec_helper.get_choices()\n    choice_args = set(args)\n    return choice_args.issubset(choices)\n", "def validate_choices_args(self, args):\n    if args['--reverse']:\n        self.spec_helper.reverse = True\n        return True\n    elif args['--reverse-invert']:\n        self.spec_helper.reverse = False\n        return True\n    elif args['--all']:\n        return True\n    elif args['--verbose']:\n        return True\n    elif args['--verbose-all']:\n        return True\n    elif args['--verbose-all-invert']:\n        return True\n    elif args['--verbose-verbose']:\n        return True\n    elif args['--verbose-verbose-all']:\n        return True\n    elif args['--verbose-verbose-all-invert']:\n        return True\n    else:\n        return False\n", "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise Exception('\"{0}\" is not a valid choice.'.format(args['--choices']))\n", "def validate_choices_args(self, args):\n    if args is None or args not in self.spec_helper.CHOICES:\n        return False\n    else:\n        return True\n", "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise Exception('Invalid choice: {}'.format(args['--choices']))\n", "def validate_choices_args(self, args):\n    choices = self.spec_helper.get_choices()\n    return args[0] in choices\n", "def validate_choices_args(self, args):\n    for choice in self.spec_helper.choices:\n        if args == choice['args']:\n            return True\n\n    return False\n", "def validate_choices_args(self, args):\n    for choice in args.choices:\n        if choice not in self.spec_helper.available_choices:\n            raise InvalidArgument('{0} is not a valid choice'.format(choice))\n", "def validate_choices_args(self, args):\n    choices = self.spec_helper.choices\n    if args not in choices:\n        raise ArgumentError(\n            \"Invalid choice '{}'. Choices are {}.\".format(\n                args, ', '.join(choices)))\n", "def validate_choices_args(self, args):\n    choices = args.pop('choices')\n\n    for choice in choices:\n        if choice not in self.spec_helper.choices:\n            raise InvalidArgument('\"{}\" is not a valid choice.'.format(choice))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    choices = self.spec_helper.get_choices()\n    choice_args = set(args)\n    return choice_args.issubset(choices)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--reverse']:\n        self.spec_helper.reverse = True\n        return True\n    elif args['--reverse-invert']:\n        self.spec_helper.reverse = False\n        return True\n    elif args['--all']:\n        return True\n    elif args['--verbose']:\n        return True\n    elif args['--verbose-all']:\n        return True\n    elif args['--verbose-all-invert']:\n        return True\n    elif args['--verbose-verbose']:\n        return True\n    elif args['--verbose-verbose-all']:\n        return True\n    elif args['--verbose-verbose-all-invert']:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise Exception('\"{0}\" is not a valid choice.'.format(args['--choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args is None or args not in self.spec_helper.CHOICES:\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices'] not in self.spec_helper.choices:\n        raise Exception('Invalid choice: {}'.format(args['--choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = self.spec_helper.get_choices()\n    return args[0] in choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in self.spec_helper.choices:\n        if args == choice['args']:\n            return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in args.choices:\n        if choice not in self.spec_helper.available_choices:\n            raise InvalidArgument('{0} is not a valid choice'.format(choice))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = self.spec_helper.choices\n    if args not in choices:\n        raise ArgumentError(\n            \"Invalid choice '{}'. Choices are {}.\".format(\n                args, ', '.join(choices)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.pop('choices')\n\n    for choice in choices:\n        if choice not in self.spec_helper.choices:\n            raise InvalidArgument('\"{}\" is not a valid choice.'.format(choice))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentError('Minimum allowed value is larger than maximum')\n", "def validate_min_max_args(self, args):\n    args = args or []\n    for arg in args:\n        if arg is None or arg > self.spec_helper.max_value or arg < self.spec_helper.min_value:\n            raise ValueError(\"Argument '{}' is out of range\".format(arg))\n", "def validate_min_max_args(self, args):\n    if args['low'] is not None and args['high'] is not None:\n        if args['low'] < args['high']:\n            raise InvalidArgumentException('low value can not be lower than high value.')\n", "def validate_min_max_args(self, args):\n    try:\n        args['value'] = float(args['value'])\n    except ValueError:\n        return False\n\n    args_min, args_max = self.spec_helper.get_range('temperature')\n    return args['value'] >= args_min and args['value'] <= args_max\n", "def validate_min_max_args(self, args):\n    try:\n        if args[0] < args[1]:\n            raise ValueError\n    except IndexError:\n        raise InvalidArgumentError('Must be between {0} and {1}'.format(args[0], args[1]))\n", "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InfraredException('Minimum value cannot be greater than maximum value.')\n", "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentError(\"Minimum allowed value is greater than maximum\")\n", "def validate_min_max_args(self, args):\n    if not args:\n        return False\n\n    arg_types = [type(arg) for arg in args]\n    if not all(arg_types):\n        return False\n\n    if len(set(arg_types))!= len(arg_types):\n        return False\n\n    if not all((type(val) is int for val in args)):\n        return False\n\n    if args[0] < self.spec_helper.min_value or args[0] > self.spec_helper.max_value:\n        return False\n\n    if args[1] < self.spec_helper.min_value or args[1] > self.spec_helper.max_value:\n        return False\n\n    return True\n", "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentException(\"{} must be between {} and {}\".format(\n            args[0], args[0], args[1]))\n", "def validate_min_max_args(self, args):\n    try:\n        min_val = float(args.get('--min'))\n        max_val = float(args.get('--max'))\n    except Exception:\n        raise Exception('Argument --min or --max is invalid.')\n\n    if not (min_val <= max_val):\n        raise Exception('Argument --min or --max is not within range of --max value.')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentError('Minimum allowed value is larger than maximum')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    args = args or []\n    for arg in args:\n        if arg is None or arg > self.spec_helper.max_value or arg < self.spec_helper.min_value:\n            raise ValueError(\"Argument '{}' is out of range\".format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args['low'] is not None and args['high'] is not None:\n        if args['low'] < args['high']:\n            raise InvalidArgumentException('low value can not be lower than high value.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        args['value'] = float(args['value'])\n    except ValueError:\n        return False\n\n    args_min, args_max = self.spec_helper.get_range('temperature')\n    return args['value'] >= args_min and args['value'] <= args_max\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        if args[0] < args[1]:\n            raise ValueError\n    except IndexError:\n        raise InvalidArgumentError('Must be between {0} and {1}'.format(args[0], args[1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InfraredException('Minimum value cannot be greater than maximum value.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentError(\"Minimum allowed value is greater than maximum\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not args:\n        return False\n\n    arg_types = [type(arg) for arg in args]\n    if not all(arg_types):\n        return False\n\n    if len(set(arg_types))!= len(arg_types):\n        return False\n\n    if not all((type(val) is int for val in args)):\n        return False\n\n    if args[0] < self.spec_helper.min_value or args[0] > self.spec_helper.max_value:\n        return False\n\n    if args[1] < self.spec_helper.min_value or args[1] > self.spec_helper.max_value:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        raise InvalidArgumentException(\"{} must be between {} and {}\".format(\n            args[0], args[0], args[1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        min_val = float(args.get('--min'))\n        max_val = float(args.get('--max'))\n    except Exception:\n        raise Exception('Argument --min or --max is invalid.')\n\n    if not (min_val <= max_val):\n        raise Exception('Argument --min or --max is not within range of --max value.')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if spec_option is None:\n        spec_option = {}\n    return complex_argument_type.ComplexArgumentType(\n        self.plugin_path,\n        type_name,\n        option_name,\n        spec_option,\n        subcommand,\n        self.vars\n    )\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # create the argument type\n    argument_type = self.__get_argument_type(subcommand, type_name, option_name, spec_option)\n    return argument_type(self.vars[type_name], option_name, subcommand)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if subcommand not in self.vars:\n        raise Exception(\"unknown subcommand: %s\" % subcommand)\n    if type_name not in self.vars[subcommand]:\n        raise Exception(\"unknown type: %s\" % type_name)\n    if option_name not in self.vars[subcommand][type_name]:\n        raise Exception(\"unknown option: %s\" % option_name)\n    option_spec = self.vars[subcommand][type_name][option_name]\n    spec_option_spec = spec_option.get('spec', {})\n    return self.vars[subcommand][type_name][option_name](**option_spec)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if '--' in option_name:\n        option_name = option_name.split('--')[1]\n    if '-' in option_name:\n        option_name = option_name.split('-')[0]\n\n    return complex_argument_type.create(subcommand, type_name, option_name,\n                                        spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if subcommand == \"add\":\n        return AddArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"delete\":\n        return DeleteArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"list\":\n        return ListArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"set\":\n        return SetArgumentType(type_name, option_name, spec_option)\n    else:\n        raise Exception(\"Unknown subcommand: %s\" % subcommand)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # noinspection PyTypeChecker\n    return getattr(self, '_%s_%s_%s' % (subcommand, type_name, option_name))(\n        spec_option[subcommand]['types'][type_name][option_name])\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    complex_type = None\n    if subcommand == \"build\":\n        complex_type = self.build_complex_argument_type(type_name, option_name,\n                                                        spec_option)\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    type_class = self.vars['types'][type_name]\n    return type_class(subcommand, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if not self.vars.get('complex_args'):\n        raise Exception(\"No complex arguments provided\")\n\n    # build the argument type\n    t = type(spec_option[type_name])\n    arg_type = t(subcommand, type_name, option_name, spec_option)\n\n    # set the option as a class attribute to avoid conflicts with builtin types\n    arg_type.__dict__['option_name'] = option_name\n    arg_type.__dict__['subcommand'] = subcommand\n    arg_type.__dict__['spec_option'] = spec_option\n    return arg_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # noinspection PyTypeChecker\n    return self.__build_complex_argument_type(subcommand,\n                                              type_name,\n                                              option_name,\n                                              spec_option)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if spec_option is None:\n        spec_option = {}\n    return complex_argument_type.ComplexArgumentType(\n        self.plugin_path,\n        type_name,\n        option_name,\n        spec_option,\n        subcommand,\n        self.vars\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # create the argument type\n    argument_type = self.__get_argument_type(subcommand, type_name, option_name, spec_option)\n    return argument_type(self.vars[type_name], option_name, subcommand)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if subcommand not in self.vars:\n        raise Exception(\"unknown subcommand: %s\" % subcommand)\n    if type_name not in self.vars[subcommand]:\n        raise Exception(\"unknown type: %s\" % type_name)\n    if option_name not in self.vars[subcommand][type_name]:\n        raise Exception(\"unknown option: %s\" % option_name)\n    option_spec = self.vars[subcommand][type_name][option_name]\n    spec_option_spec = spec_option.get('spec', {})\n    return self.vars[subcommand][type_name][option_name](**option_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if '--' in option_name:\n        option_name = option_name.split('--')[1]\n    if '-' in option_name:\n        option_name = option_name.split('-')[0]\n\n    return complex_argument_type.create(subcommand, type_name, option_name,\n                                        spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if subcommand == \"add\":\n        return AddArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"delete\":\n        return DeleteArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"list\":\n        return ListArgumentType(type_name, option_name, spec_option)\n    elif subcommand == \"set\":\n        return SetArgumentType(type_name, option_name, spec_option)\n    else:\n        raise Exception(\"Unknown subcommand: %s\" % subcommand)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # noinspection PyTypeChecker\n    return getattr(self, '_%s_%s_%s' % (subcommand, type_name, option_name))(\n        spec_option[subcommand]['types'][type_name][option_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    complex_type = None\n    if subcommand == \"build\":\n        complex_type = self.build_complex_argument_type(type_name, option_name,\n                                                        spec_option)\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    type_class = self.vars['types'][type_name]\n    return type_class(subcommand, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    if not self.vars.get('complex_args'):\n        raise Exception(\"No complex arguments provided\")\n\n    # build the argument type\n    t = type(spec_option[type_name])\n    arg_type = t(subcommand, type_name, option_name, spec_option)\n\n    # set the option as a class attribute to avoid conflicts with builtin types\n    arg_type.__dict__['option_name'] = option_name\n    arg_type.__dict__['subcommand'] = subcommand\n    arg_type.__dict__['spec_option'] = spec_option\n    return arg_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # noinspection PyTypeChecker\n    return self.__build_complex_argument_type(subcommand,\n                                              type_name,\n                                              option_name,\n                                              spec_option)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg.startswith('--') and arg.endswith('='):\n            control_args.update(args[arg])\n        else:\n            nested_args.update({arg: args[arg]})\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n    if 'custom' in args:\n        for key, value in args['custom'].items():\n            if isinstance(value, dict):\n                nested_args[key] = value\n            else:\n                control_args[key] = value\n\n    if 'nested' in args:\n        for key, value in args['nested'].items():\n            if isinstance(value, dict):\n                control_args[key] = value\n            else:\n                nested_args[key] = value\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args['control'], args\n    elif 'nested_args' in args:\n        return args['nested_args'], args\n    else:\n        return {}, {}\n", "def get_nested_custom_and_control_args(self, args):\n    flat_control_args = {}\n    nested_args = {}\n    control_args = {}\n\n    for arg in args:\n        if arg.startswith(\"--\") and arg.endswith(\"-var\"):\n            control_args[arg[2:-1]] = arg[4:-2]\n        elif arg.startswith(\"-\"):\n            nested_args[arg[1:-1]] = arg[1:]\n        elif arg.startswith(\"-custom\") and arg.endswith(\"-var\"):\n            nested_args[arg[1:-1]] = arg[3:-2]\n        elif arg.startswith(\"-custom-\") and arg.endswith(\"-var\"):\n            nested_args[arg[1:-1]] = arg[4:-2]\n        else:\n            flat_control_args[arg] = args[arg]\n\n    return (control_args, nested_args), flat_control_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', {})\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for item in args:\n        if isinstance(item, dict) and 'custom' in item:\n            control_args = item\n        elif isinstance(item, dict):\n            nested_args = item\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if 'custom' in arg and arg['custom'] is True:\n            control_args[arg['arg_name']] = arg\n        elif 'nested' in arg and arg['nested'] is True:\n            nested_args[arg['arg_name']] = arg\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        control_args = args['custom']\n        return control_args, {}\n    else:\n        nested_args = args\n        control_args = nested_args\n        return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['type'] == 'var' and arg['name'] =='self':\n            nested_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'ansible_password':\n            control_args = arg\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n\n    if args is not None:\n        for arg in args:\n            if arg['type'] == 'int':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] =='string':\n                control_args[arg['name']] = arg['default']\n            elif arg['type'] == 'boolean':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] == 'list':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] == 'dict':\n                nested_args[arg['name']] = arg['default']\n    return control_args, nested_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg.startswith('--') and arg.endswith('='):\n            control_args.update(args[arg])\n        else:\n            nested_args.update({arg: args[arg]})\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n    if 'custom' in args:\n        for key, value in args['custom'].items():\n            if isinstance(value, dict):\n                nested_args[key] = value\n            else:\n                control_args[key] = value\n\n    if 'nested' in args:\n        for key, value in args['nested'].items():\n            if isinstance(value, dict):\n                control_args[key] = value\n            else:\n                nested_args[key] = value\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args['control'], args\n    elif 'nested_args' in args:\n        return args['nested_args'], args\n    else:\n        return {}, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    flat_control_args = {}\n    nested_args = {}\n    control_args = {}\n\n    for arg in args:\n        if arg.startswith(\"--\") and arg.endswith(\"-var\"):\n            control_args[arg[2:-1]] = arg[4:-2]\n        elif arg.startswith(\"-\"):\n            nested_args[arg[1:-1]] = arg[1:]\n        elif arg.startswith(\"-custom\") and arg.endswith(\"-var\"):\n            nested_args[arg[1:-1]] = arg[3:-2]\n        elif arg.startswith(\"-custom-\") and arg.endswith(\"-var\"):\n            nested_args[arg[1:-1]] = arg[4:-2]\n        else:\n            flat_control_args[arg] = args[arg]\n\n    return (control_args, nested_args), flat_control_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('--control', [])\n    nested_args = args.get('--nested', {})\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for item in args:\n        if isinstance(item, dict) and 'custom' in item:\n            control_args = item\n        elif isinstance(item, dict):\n            nested_args = item\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if 'custom' in arg and arg['custom'] is True:\n            control_args[arg['arg_name']] = arg\n        elif 'nested' in arg and arg['nested'] is True:\n            nested_args[arg['arg_name']] = arg\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'custom' in args:\n        control_args = args['custom']\n        return control_args, {}\n    else:\n        nested_args = args\n        control_args = nested_args\n        return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg['type'] == 'var' and arg['name'] =='self':\n            nested_args = arg\n        elif arg['type'] == 'var' and arg['name'] == 'ansible_password':\n            control_args = arg\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = dict()\n    nested_args = dict()\n\n    if args is not None:\n        for arg in args:\n            if arg['type'] == 'int':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] =='string':\n                control_args[arg['name']] = arg['default']\n            elif arg['type'] == 'boolean':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] == 'list':\n                nested_args[arg['name']] = arg['default']\n            elif arg['type'] == 'dict':\n                nested_args[arg['name']] = arg['default']\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                vars_dict[key] = merge_extra_vars(vars_dict[key], extra_vars[key])\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(dict(extra_vars) if isinstance(extra_vars, list)\n                     else extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(vars_dict.get('extra-vars'), **dict(extra_vars))\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(dict(\n        (key, value) for key, value in vars_dict.items()\n        if key not in ('extra-vars','system-vars') and\n        key not in extra_vars\n    ))\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                extra_vars.append(key)\n            if isinstance(value, dict):\n                merge_extra_vars(value, extra_vars)\n    elif isinstance(vars_dict, list):\n        for value in vars_dict:\n            if isinstance(value, dict):\n                extra_vars.append(key)\n                merge_extra_vars(value, extra_vars)\n\n    return extra_vars\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(dict(extra_vars) or {})\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                vars_dict[key] = merge_extra_vars(vars_dict[key], extra_vars[key])\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(dict(extra_vars) if isinstance(extra_vars, list)\n                     else extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict.get('extra-vars'):\n        return vars_dict\n\n    if isinstance(vars_dict.get('extra-vars'), dict):\n        return vars_dict\n\n    return dict(vars_dict.get('extra-vars'), **dict(extra_vars))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(dict(\n        (key, value) for key, value in vars_dict.items()\n        if key not in ('extra-vars','system-vars') and\n        key not in extra_vars\n    ))\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                extra_vars.append(key)\n            if isinstance(value, dict):\n                merge_extra_vars(value, extra_vars)\n    elif isinstance(vars_dict, list):\n        for value in vars_dict:\n            if isinstance(value, dict):\n                extra_vars.append(key)\n                merge_extra_vars(value, extra_vars)\n\n    return extra_vars\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(dict(extra_vars) or {})\n    return vars_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    playbook = _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n        verbose=verbose,\n    )\n    return playbook\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    _run_playbook(\n        ir_workspace,\n        {\n            'ansible_args': ansible_args,\n            'ir_plugin': ir_plugin,\n            'playbook_path': playbook_path,\n           'verbose': verbose,\n            'extra_vars': extra_vars\n        },\n        ir_workspace.ansible_playbook_dir,\n        ir_workspace.ansible_playbook_name,\n        ir_workspace.ansible_playbook_hosts\n  ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    playbook_file = os.path.expanduser(playbook_path)\n    playbook_file = os.path.abspath(playbook_file)\n\n    # Create the playbook in the current workspace\n    _run_playbook(cli_args, vars_dict={'ir_workspace': ir_workspace,\n                                        'ir_plugin': ir_plugin,\n                                        'playbook_file': playbook_file,\n                     ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n    # Initialize the plugin\n    ir_plugin = ir_workspace.get_plugin(ir_plugin)\n    ansible_args = ansible_args or dict()\n\n    # Initialize the playbook\n    ir_playbook = Playbook(ir_workspace, ir_plugin, playbook_path, ir_plugin.ansible_args,\n                          extra_vars=extra_vars, ansible_args=ansible_args)\n\n    # Run the playbook\n    if verbose:\n        print('Running playbook: {}'.format(ir_playbook.playbook_filename))\n   ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly to\n        Ansible\n    \"\"\"\n    playbook_dir = os.path.dirname(playbook_path)\n    playbook_file = os.path.basename(playbook_path)\n\n    if verbose is None:\n        verbose = ir_plugin.verbosity\n\n    if ir_workspace.is_workspace_a_tty:\n        ansible_args['--tty'] = True\n\n    playbook_instance = PlaybookInstance(\n        playbook_path,\n        playbook_file,\n        ir_workspace,\n        ir_plugin,\n        ansible_args=ansible_args,\n       ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly\n                       to Ansible.\n    \"\"\"\n    _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, ir_plugin,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # Create the playbook\n    playbook = ir_workspace.get_plugin(ir_plugin).get_playbook(playbook_path)\n    # Run the playbook\n    _run_playbook(\n        playbook,\n        ir_workspace,\n        ir_plugin,\n        verbose,\n        extra_vars,\n        ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, ir_plugin,\n        extra_vars=extra_vars, ansible_args=ansible_args,\n        verbose=verbose)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n    # pylint: disable=too-many-arguments\n    playbook_path = _get_playbook_path(ir_workspace, ir_plugin, playbook_path)\n\n    # pylint: disable=too-many-arguments\n    cmd_args = ['ansible-playbook', '-i', playbook_path, '-vvv', '-e',\n                verbose, '--extra-vars', extra_vars, '--ansible_args',\n                ansible_args]\n\n    _run_playbook(ir_workspace, ir_plugin, cmd_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly\n        to Ansible.\n    \"\"\"\n    return _run_playbook(\n        cli_args=ansible_args,\n        vars_dict={'ir_workspace': ir_workspace, 'ir_plugin': ir_plugin,\n                   'playbook_path': playbook_path,'verbose': verbose,\n                   'extra_vars': extra_vars},\n        ir_workspace=ir_workspace,\n        ir_plugin=ir_plugin,\n        playbook_path=playbook_path)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    playbook = _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n        verbose=verbose,\n    )\n    return playbook\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    _run_playbook(\n        ir_workspace,\n        {\n            'ansible_args': ansible_args,\n            'ir_plugin': ir_plugin,\n            'playbook_path': playbook_path,\n           'verbose': verbose,\n            'extra_vars': extra_vars\n        },\n        ir_workspace.ansible_playbook_dir,\n        ir_workspace.ansible_playbook_name,\n        ir_workspace.ansible_playbook_hosts\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    playbook_file = os.path.expanduser(playbook_path)\n    playbook_file = os.path.abspath(playbook_file)\n\n    # Create the playbook in the current workspace\n    _run_playbook(cli_args, vars_dict={'ir_workspace': ir_workspace,\n                                        'ir_plugin': ir_plugin,\n                                        'playbook_file': playbook_file,\n                     ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n    # Initialize the plugin\n    ir_plugin = ir_workspace.get_plugin(ir_plugin)\n    ansible_args = ansible_args or dict()\n\n    # Initialize the playbook\n    ir_playbook = Playbook(ir_workspace, ir_plugin, playbook_path, ir_plugin.ansible_args,\n                          extra_vars=extra_vars, ansible_args=ansible_args)\n\n    # Run the playbook\n    if verbose:\n        print('Running playbook: {}'.format(ir_playbook.playbook_filename))\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly to\n        Ansible\n    \"\"\"\n    playbook_dir = os.path.dirname(playbook_path)\n    playbook_file = os.path.basename(playbook_path)\n\n    if verbose is None:\n        verbose = ir_plugin.verbosity\n\n    if ir_workspace.is_workspace_a_tty:\n        ansible_args['--tty'] = True\n\n    playbook_instance = PlaybookInstance(\n        playbook_path,\n        playbook_file,\n        ir_workspace,\n        ir_plugin,\n        ansible_args=ansible_args,\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly\n                       to Ansible.\n    \"\"\"\n    _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, ir_plugin,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # Create the playbook\n    playbook = ir_workspace.get_plugin(ir_plugin).get_playbook(playbook_path)\n    # Run the playbook\n    _run_playbook(\n        playbook,\n        ir_workspace,\n        ir_plugin,\n        verbose,\n        extra_vars,\n        ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, ir_plugin,\n        extra_vars=extra_vars, ansible_args=ansible_args,\n        verbose=verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down directly\n        to Ansible.\n    \"\"\"\n    # pylint: disable=too-many-arguments\n    playbook_path = _get_playbook_path(ir_workspace, ir_plugin, playbook_path)\n\n    # pylint: disable=too-many-arguments\n    cmd_args = ['ansible-playbook', '-i', playbook_path, '-vvv', '-e',\n                verbose, '--extra-vars', extra_vars, '--ansible_args',\n                ansible_args]\n\n    _run_playbook(ir_workspace, ir_plugin, cmd_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An InfraredWorkspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook args to plumb down directly\n        to Ansible.\n    \"\"\"\n    return _run_playbook(\n        cli_args=ansible_args,\n        vars_dict={'ir_workspace': ir_workspace, 'ir_plugin': ir_plugin,\n                   'playbook_path': playbook_path,'verbose': verbose,\n                   'extra_vars': extra_vars},\n        ir_workspace=ir_workspace,\n        ir_plugin=ir_plugin,\n        playbook_path=playbook_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = AnsibleResults()\n\n    # Check if we are being run from local or from a remote host\n    if ir_workspace.is_remote:\n        # Run the playbook locally\n        ansible_results.playbook = ir_plugin.playbook_local\n        ansible_results.stdout = ir_plugin.playbook_output\n        ansible_results.stderr = ir_plugin.playbook_errors\n        ansible_results.run_playbook(cli_args, vars_dict)\n    else:\n        # Run the playbook remotely\n        ansible_results.playbook = ir_workspace.ansible_playbook\n        ansible_results.stdout = ir_workspace.ansible_output\n        ansible_results.stderr = ir_workspace.ansible_errors\n        ansible_results.run_playbook(cli_args, vars_dict)\n\n    return ansible_results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n    else:\n        raise exceptions.InfrastructureError('The infrared workspace is not running.')\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict()\n    ansible_vars.update(vars_dict)\n    ansible_vars['ansible_extra_vars'] = cli_args\n    ansible_vars['ir_workspace'] = ir_workspace\n    ansible_vars['ir_plugin'] = ir_plugin\n    result = ir_plugin.ansible.run(playbook_path=cli_args['playbook_path'], inventory=ir_workspace.inventory,\n                                   extra_vars=ansible_vars)\n    return result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.initialize(ir_workspace)\n\n    # Initialize the playbook\n    playbook_path = cli_args.playbook\n    if cli_args.run_playbook is not None:\n        playbook_path = cli_args.run_playbook\n\n    # Run the playbook\n    ansible_result = ir_plugin.run_playbook(\n        playbook_path=playbook_path,\n        vars_dict=vars_dict,\n        ir_workspace=ir_workspace,\n        ir_plugin=ir_plugin\n    )\n\n    return ansible_result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_vars = dict(vars_dict)\n    ansible_vars.update(ir_workspace.ansible_vars)\n    ansible_vars.update(ir_plugin.ansible_vars)\n    ansible_result = ir_workspace.run_playbook(cli_args, ansible_vars)\n    return ansible_result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return AnsibleRunner(cli_args=cli_args, ansible_vars=ansible_vars)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be pass as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_args = ['--extra-vars']\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.items())\n\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    for arg in cli_args:\n        ansible_args.extend(shlex.split(arg))\n\n    results = {}\n    try:\n        results = ir_plugin.run(ansible_args, vars_dict)\n    except AnsibleRunnerException as exc:\n        results = exc.results\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_result = dict()\n    ansible_result['stdout'] = \"\"\n    ansible_result['stderr'] = \"\"\n    ansible_result['return_code'] = 0\n\n    if cli_args:\n        ansible_result['command'] = cli_args[0]\n        cli_args = cli_args[1:]\n\n    # run the command\n    try:\n        ansible_result['return_code'] = ir_workspace.run_playbook(cli_args=cli_args, vars_dict=vars_dict, ir_plugin=ir_plugin)\n    except AnsibleRunnerException as err:\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_results = AnsibleResults()\n\n    # Check if we are being run from local or from a remote host\n    if ir_workspace.is_remote:\n        # Run the playbook locally\n        ansible_results.playbook = ir_plugin.playbook_local\n        ansible_results.stdout = ir_plugin.playbook_output\n        ansible_results.stderr = ir_plugin.playbook_errors\n        ansible_results.run_playbook(cli_args, vars_dict)\n    else:\n        # Run the playbook remotely\n        ansible_results.playbook = ir_workspace.ansible_playbook\n        ansible_results.stdout = ir_workspace.ansible_output\n        ansible_results.stderr = ir_workspace.ansible_errors\n        ansible_results.run_playbook(cli_args, vars_dict)\n\n    return ansible_results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace.check_running():\n        return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n    else:\n        raise exceptions.InfrastructureError('The infrared workspace is not running.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = dict()\n    ansible_vars.update(vars_dict)\n    ansible_vars['ansible_extra_vars'] = cli_args\n    ansible_vars['ir_workspace'] = ir_workspace\n    ansible_vars['ir_plugin'] = ir_plugin\n    result = ir_plugin.ansible.run(playbook_path=cli_args['playbook_path'], inventory=ir_workspace.inventory,\n                                   extra_vars=ansible_vars)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # Initialize the ir plugin\n    ir_plugin.initialize(ir_workspace)\n\n    # Initialize the playbook\n    playbook_path = cli_args.playbook\n    if cli_args.run_playbook is not None:\n        playbook_path = cli_args.run_playbook\n\n    # Run the playbook\n    ansible_result = ir_plugin.run_playbook(\n        playbook_path=playbook_path,\n        vars_dict=vars_dict,\n        ir_workspace=ir_workspace,\n        ir_plugin=ir_plugin\n    )\n\n    return ansible_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_vars = dict(vars_dict)\n    ansible_vars.update(ir_workspace.ansible_vars)\n    ansible_vars.update(ir_plugin.ansible_vars)\n    ansible_result = ir_workspace.run_playbook(cli_args, ansible_vars)\n    return ansible_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    return AnsibleRunner(cli_args=cli_args, ansible_vars=ansible_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be pass as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_args = ['--extra-vars']\n    ansible_args.extend(cli_args)\n    ansible_args.extend(vars_dict.items())\n\n    return run_ansible_playbook(ansible_args, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_args = []\n    for arg in cli_args:\n        ansible_args.extend(shlex.split(arg))\n\n    results = {}\n    try:\n        results = ir_plugin.run(ansible_args, vars_dict)\n    except AnsibleRunnerException as exc:\n        results = exc.results\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_runner = Runner(ir_workspace, ir_plugin)\n    results = ansible_runner.run_playbook(cli_args=cli_args)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_result = dict()\n    ansible_result['stdout'] = \"\"\n    ansible_result['stderr'] = \"\"\n    ansible_result['return_code'] = 0\n\n    if cli_args:\n        ansible_result['command'] = cli_args[0]\n        cli_args = cli_args[1:]\n\n    # run the command\n    try:\n        ansible_result['return_code'] = ir_workspace.run_playbook(cli_args=cli_args, vars_dict=vars_dict, ir_plugin=ir_plugin)\n    except AnsibleRunnerException as err:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in self.spec_helper.required_params:\n            values_dict[key] = str(values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, str):\n            values_dict[k] = {'value': v}\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key.startswith(parser_name + '_'):\n            if isinstance(value, str):\n                values_dict[key] = value.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key in ['--help', '-h']:\n            values_dict[key] = input('Enter help message: ')\n        elif key in ['--version', '-v']:\n            print('{0} version {1}'.format(parser_name, VERSION))\n        elif key in ['--debug', '-d']:\n            values_dict[key] = self.spec_helper.convert_boolean(value)\n        elif key in ['--test', '-t']:\n            values_dict[key] = self.spec_helper.convert_boolean(value)\n        elif key in ['--extra', '-e']:\n            values_dict[key] = self.spec_helper.convert_list(value)\n        elif key in ['--list', '-l']:\n            values_dict[key] = self.spec_helper.convert_list(value)\n        elif key in ['--key', '-k']:\n            values_dict[key] = self.spec_hel", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key in self.spec_helper.required_params:\n            if isinstance(value, bool):\n                value = str(value).lower()\n            elif isinstance(value, int) or isinstance(value, float):\n                value = \"{:d}\".format(value)\n            elif isinstance(value, str):\n                value = \"{}\".format(value)\n            elif value == None:\n                value = \"\"\n            else:\n                value = \"{}\"\n            values_dict[key] = value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = self.spec_helper._get_cli_type(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg, value in values_dict.items():\n        if parser_name in self.spec_helper.cli_parsers:\n            if not isinstance(value, str):\n                values_dict[arg] = self.spec_helper.cli_parsers[parser_name](value)\n        else:\n            values_dict[arg] = value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = [value]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, bool):\n            values_dict[k] = str(v).lower()\n        elif isinstance(v, list):\n            values_dict[k] = [str(i) for i in v]\n        elif isinstance(v, dict):\n            values_dict[k] = dict(\n                [(k + '_' + str(i), self._convert_non_cli_args(\n                    parser_name, v[k])) for i in v])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--quiet', '-q'):\n            values_dict[key] = True\n        elif key in ('--verbose', '-v'):\n            values_dict[key] = True\n        elif key in ('--help', '-h'):\n            values_dict[key] = True\n        else:\n            values_dict[key] = str(values_dict[key])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in self.spec_helper.required_params:\n            values_dict[key] = str(values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, str):\n            values_dict[k] = {'value': v}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key.startswith(parser_name + '_'):\n            if isinstance(value, str):\n                values_dict[key] = value.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in iteritems(values_dict):\n        if key in ['--help', '-h']:\n            values_dict[key] = input('Enter help message: ')\n        elif key in ['--version', '-v']:\n            print('{0} version {1}'.format(parser_name, VERSION))\n        elif key in ['--debug', '-d']:\n            values_dict[key] = self.spec_helper.convert_boolean(value)\n        elif key in ['--test', '-t']:\n            values_dict[key] = self.spec_helper.convert_boolean(value)\n        elif key in ['--extra', '-e']:\n            values_dict[key] = self.spec_helper.convert_list(value)\n        elif key in ['--list', '-l']:\n            values_dict[key] = self.spec_helper.convert_list(value)\n        elif key in ['--key', '-k']:\n            values_dict[key] = self.spec_hel", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if key in self.spec_helper.required_params:\n            if isinstance(value, bool):\n                value = str(value).lower()\n            elif isinstance(value, int) or isinstance(value, float):\n                value = \"{:d}\".format(value)\n            elif isinstance(value, str):\n                value = \"{}\".format(value)\n            elif value == None:\n                value = \"\"\n            else:\n                value = \"{}\"\n            values_dict[key] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = self.spec_helper._get_cli_type(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg, value in values_dict.items():\n        if parser_name in self.spec_helper.cli_parsers:\n            if not isinstance(value, str):\n                values_dict[arg] = self.spec_helper.cli_parsers[parser_name](value)\n        else:\n            values_dict[arg] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = [value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for k, v in values_dict.items():\n        if isinstance(v, bool):\n            values_dict[k] = str(v).lower()\n        elif isinstance(v, list):\n            values_dict[k] = [str(i) for i in v]\n        elif isinstance(v, dict):\n            values_dict[k] = dict(\n                [(k + '_' + str(i), self._convert_non_cli_args(\n                    parser_name, v[k])) for i in v])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--quiet', '-q'):\n            values_dict[key] = True\n        elif key in ('--verbose', '-v'):\n            values_dict[key] = True\n        elif key in ('--help', '-h'):\n            values_dict[key] = True\n        else:\n            values_dict[key] = str(values_dict[key])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir)] for value in sub_dict.values()}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"name\": None,\n        \"version\": None,\n        \"description\": None,\n        \"author\": None,\n        \"author_email\": None,\n        \"url\": None,\n        \"dependencies\": [],\n        \"install_requires\": [],\n        \"tests\": [],\n        \"install_modules\": [],\n        \"optional\": False,\n        \"tags\": []\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in flatten_dict(os.path.join(plugin_dir, PLUGIN_SPEC)).items() if key)\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(\n        get_plugin_spec_dict(plugin_dir=plugin_dir).items()\n    )\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Unable to load plugin specification file %s: %s', file_path, e)\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_KEY: plugin_dir,\n        PLUGIN_VERSION: 'v{}'.format(__version__),\n        PLUGIN_AUTHOR: 'Github Team',\n        PLUGIN_AUTHOR_EMAIL: 'github.com',\n        PLUGIN_AUTHOR_URL: 'https://github.com/github/',\n        PLUGIN_COMMITTER: 'GitHub Committer',\n        PLUGIN_COMMITTER_EMAIL: 'github.com',\n        PLUGIN_COMMITTER_URL: 'https://github.com/github/',\n        PLUGIN_CONTRIBUTOR: 'contributors',\n        PLUGIN_CONTRIBUTOR_EMAIL: 'github.com',\n        PLUGIN_CONTRIBUTOR_URL: 'https://github.com/contributors',\n        PLUGIN_CONTRIBUTOR_GRANTED: False,\n        PLUGIN_CONTRIBUTOR_TYPE: None,\n        PLUGIN_CONTRIBUTOR_ORGANIZATION: None,\n        PLUGIN_CONTRIBUTOR_STATUS: None,\n        PLUGIN_CONTRIBUTOR_URL: 'https://github.com/contributors',\n   ", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'flat_dict',\n        'value': {\n            'path': plugin_dir,\n            'templates': {}\n        }\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'name': None,\n           'version': None,\n            'dependencies': [],\n            'package_path': None,\n           'metadata_path': None,\n            'config_path': None,\n            'input_path': None,\n            'output_path': None,\n           'modules_path': None,\n            'exclude_path': None,\n           'src_ext': None,\n            'description': None,\n            'author': None,\n            'author_email': None,\n            'license': None,\n            'copyright': None,\n           'readme_author': None,\n           'readme_author_email': None,\n            'install_requires': [],\n            'install_requires_email': None,\n           'readme_files': [],\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, x)) for x in os.listdir(plugin_dir) if os.path.isdir(os.path.join(plugin_dir, x))] for key, value in sub_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for sub_dict in [get_plugin_spec_flatten_dict(os.path.join(plugin_dir, key)) for key in os.listdir(plugin_dir)] for value in sub_dict.values()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"name\": None,\n        \"version\": None,\n        \"description\": None,\n        \"author\": None,\n        \"author_email\": None,\n        \"url\": None,\n        \"dependencies\": [],\n        \"install_requires\": [],\n        \"tests\": [],\n        \"install_modules\": [],\n        \"optional\": False,\n        \"tags\": []\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((key, value) for key, value in flatten_dict(os.path.join(plugin_dir, PLUGIN_SPEC)).items() if key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(\n        get_plugin_spec_dict(plugin_dir=plugin_dir).items()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for (dirpath, dirnames, filenames) in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                file_path = os.path.join(dirpath, filename)\n                try:\n                    spec_dict = utils.load_py_file(file_path)\n                    flat_dict.update(spec_dict)\n                except Exception as e:\n                    log.debug('Unable to load plugin specification file %s: %s', file_path, e)\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items()\n        if not key.startswith(\"_\")\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({\n        PLUGIN_NAME: plugin_dir,\n        PLUGIN_KEY: plugin_dir,\n        PLUGIN_VERSION: 'v{}'.format(__version__),\n        PLUGIN_AUTHOR: 'Github Team',\n        PLUGIN_AUTHOR_EMAIL: 'github.com',\n        PLUGIN_AUTHOR_URL: 'https://github.com/github/',\n        PLUGIN_COMMITTER: 'GitHub Committer',\n        PLUGIN_COMMITTER_EMAIL: 'github.com',\n        PLUGIN_COMMITTER_URL: 'https://github.com/github/',\n        PLUGIN_CONTRIBUTOR: 'contributors',\n        PLUGIN_CONTRIBUTOR_EMAIL: 'github.com',\n        PLUGIN_CONTRIBUTOR_URL: 'https://github.com/contributors',\n        PLUGIN_CONTRIBUTOR_GRANTED: False,\n        PLUGIN_CONTRIBUTOR_TYPE: None,\n        PLUGIN_CONTRIBUTOR_ORGANIZATION: None,\n        PLUGIN_CONTRIBUTOR_STATUS: None,\n        PLUGIN_CONTRIBUTOR_URL: 'https://github.com/contributors',\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'type': 'flat_dict',\n        'value': {\n            'path': plugin_dir,\n            'templates': {}\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'name': None,\n           'version': None,\n            'dependencies': [],\n            'package_path': None,\n           'metadata_path': None,\n            'config_path': None,\n            'input_path': None,\n            'output_path': None,\n           'modules_path': None,\n            'exclude_path': None,\n           'src_ext': None,\n            'description': None,\n            'author': None,\n            'author_email': None,\n            'license': None,\n            'copyright': None,\n           'readme_author': None,\n           'readme_author_email': None,\n            'install_requires': [],\n            'install_requires_email': None,\n           'readme_files': [],\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    # If we don't get here, we need to be inside of a playbook and it's\n    # not a relative path. This is because the ansible playbook is\n    # invoked with --server and we need to be absolute.\n    if not os.path.isabs(self.ansible_config_path):\n        self.ansible_config_path = os.path.join(\n            os.path.dirname(self.ansible_root_path),\n            self.ansible_config_path\n        )\n", "def inject_config(self):\n    env_config_path = os.environ.get('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n\n    if not env_config_path:\n        env_config_path = '/etc/ansible/ansible.cfg'\n\n    os.environ['ANSIBLE_CONFIG'] = env_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    if os.path.exists(self.ansible_config_path):\n        # If the config file already exists, just return\n        return\n\n    # Make the config file and set the environment variable\n    try:\n        with open(self.ansible_config_path, 'w') as fdesc:\n            fdesc.write(yaml.dump(dict(\n                private_key_file='~/.ssh/id_rsa',\n                user='root',\n                )))\n    except Exception as e:\n        raise AnsibleConfigFileError('Unable to write to %s: %s' % (self.ansible_config_path, e))\n", "def inject_config(self):\n    env_config_path = os.getenv('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n    if not env_config_path:\n        env_config_path = '/etc/ansible.cfg'\n\n    os.environ['ANSIBLE_CONFIG'] = env_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n", "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG' not in env_vars:\n        env_vars['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n    os.environ.update(env_vars)\n", "def inject_config(self):\n    if not os.getenv('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG_PATH' not in env_vars:\n        env_vars['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n\n    os.environ.update(env_vars)\n", "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    # If we don't get here, we need to be inside of a playbook and it's\n    # not a relative path. This is because the ansible playbook is\n    # invoked with --server and we need to be absolute.\n    if not os.path.isabs(self.ansible_config_path):\n        self.ansible_config_path = os.path.join(\n            os.path.dirname(self.ansible_root_path),\n            self.ansible_config_path\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_config_path = os.environ.get('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n\n    if not env_config_path:\n        env_config_path = '/etc/ansible/ansible.cfg'\n\n    os.environ['ANSIBLE_CONFIG'] = env_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    if os.path.exists(self.ansible_config_path):\n        # If the config file already exists, just return\n        return\n\n    # Make the config file and set the environment variable\n    try:\n        with open(self.ansible_config_path, 'w') as fdesc:\n            fdesc.write(yaml.dump(dict(\n                private_key_file='~/.ssh/id_rsa',\n                user='root',\n                )))\n    except Exception as e:\n        raise AnsibleConfigFileError('Unable to write to %s: %s' % (self.ansible_config_path, e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_config_path = os.getenv('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n    if not env_config_path:\n        env_config_path = '/etc/ansible.cfg'\n\n    os.environ['ANSIBLE_CONFIG'] = env_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG_PATH' in os.environ:\n        return\n\n    os.environ['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG' not in env_vars:\n        env_vars['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n    os.environ.update(env_vars)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not os.getenv('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_vars = dict(os.environ)\n\n    if 'ANSIBLE_CONFIG_PATH' not in env_vars:\n        env_vars['ANSIBLE_CONFIG_PATH'] = self.ansible_config_path\n\n    os.environ.update(env_vars)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if not self.ansible_config_path:\n        return\n\n    os.environ['ANSIBLE_CONFIG_FILE'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    for opt in self.kwargs:\n        parser.add_argument(*opt.split(' '), **self.kwargs[opt])\n", "def extend_cli(self, root_subparsers):\n    super(Command, self).extend_cli(root_subparsers)\n    group = root_subparsers.add_parser('update', help='update a package')\n    group.add_argument('package', help='the package to update')\n    group.add_argument('--force', action='store_true',\n                       help='force the package update to apply')\n    group.add_argument('--yes', action='store_true',\n                       help='do not prompt the user for confirmation')\n", "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('reboot', help='reboot the system')\n", "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('bootstrap', help='bootstrap a new docker container')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Extends the deployment details for a given environment.',\n        parents=[root_subparsers])\n\n    parser.add_argument(\n        'environment',\n        help='The environment to be deployed.')\n\n    parser.set_defaults(func=deploy)\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    for attr in self.kwargs:\n        parser.add_argument(*attr, **self.kwargs[attr])\n", "def extend_cli(self, root_subparsers):\n    super(Firenado, self).extend_cli(root_subparsers)\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Execute the firenado command.'\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='firenado {ver}'.format(ver=__version__)\n    )\n\n    parser.add_argument(\n        '--host',\n        help='Host to connect to.'\n    )\n\n    parser.add_argument(\n        '--port',\n        type=int,\n        default=5000,\n        help='Port to connect to.'\n    )\n\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Debugging output.'\n    )\n\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Quiet mode.'\n    )\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    for kwarg in self.kwargs:\n        parser.add_argument(**kwarg)\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Install a package or group dependency',\n        description=self.description,\n        **self.kwargs\n    )\n\n    parser.add_argument(\n        'package',\n        metavar='PACKAGE',\n        nargs='?',\n        help='the package to install',\n        choices=[\n            'group',\n            'package',\n        ],\n        default='package',\n    )\n\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='show the version number of the package',\n    )\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    for opt in self.kwargs:\n        parser.add_argument(*opt.split(' '), **self.kwargs[opt])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    super(Command, self).extend_cli(root_subparsers)\n    group = root_subparsers.add_parser('update', help='update a package')\n    group.add_argument('package', help='the package to update')\n    group.add_argument('--force', action='store_true',\n                       help='force the package update to apply')\n    group.add_argument('--yes', action='store_true',\n                       help='do not prompt the user for confirmation')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('reboot', help='reboot the system')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # pylint: disable=no-self-use\n    return root_subparsers.add_parser('bootstrap', help='bootstrap a new docker container')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Extends the deployment details for a given environment.',\n        parents=[root_subparsers])\n\n    parser.add_argument(\n        'environment',\n        help='The environment to be deployed.')\n\n    parser.set_defaults(func=deploy)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    for attr in self.kwargs:\n        parser.add_argument(*attr, **self.kwargs[attr])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    super(Firenado, self).extend_cli(root_subparsers)\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Execute the firenado command.'\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='firenado {ver}'.format(ver=__version__)\n    )\n\n    parser.add_argument(\n        '--host',\n        help='Host to connect to.'\n    )\n\n    parser.add_argument(\n        '--port',\n        type=int,\n        default=5000,\n        help='Port to connect to.'\n    )\n\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Debugging output.'\n    )\n\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help='Quiet mode.'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n\n    for kwarg in self.kwargs:\n        parser.add_argument(**kwarg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='Install a package or group dependency',\n        description=self.description,\n        **self.kwargs\n    )\n\n    parser.add_argument(\n        'package',\n        metavar='PACKAGE',\n        nargs='?',\n        help='the package to install',\n        choices=[\n            'group',\n            'package',\n        ],\n        default='package',\n    )\n\n    parser.add_argument(\n        '--version',\n        action='store_true',\n        help='show the version number of the package',\n    )\n", "is_pass": false, "return_code": 1}]}
